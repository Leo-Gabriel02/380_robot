
380_robot_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8a4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  0800aa88  0800aa88  0001aa88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af3c  0800af3c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800af3c  0800af3c  0001af3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af44  0800af44  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af44  0800af44  0001af44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af48  0800af48  0001af48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800af4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  200001d8  0800b124  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000580  0800b124  00020580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ea8  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b65  00000000  00000000  000380f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  0003ac58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001157  00000000  00000000  0003c270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ccd  00000000  00000000  0003d3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a03a  00000000  00000000  00062094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f934e  00000000  00000000  0007c0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000071a0  00000000  00000000  0017541c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0017c5bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800aa6c 	.word	0x0800aa6c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800aa6c 	.word	0x0800aa6c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b970 	b.w	8000f30 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	460d      	mov	r5, r1
 8000c70:	4604      	mov	r4, r0
 8000c72:	460f      	mov	r7, r1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d14a      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4694      	mov	ip, r2
 8000c7c:	d965      	bls.n	8000d4a <__udivmoddi4+0xe2>
 8000c7e:	fab2 f382 	clz	r3, r2
 8000c82:	b143      	cbz	r3, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c88:	f1c3 0220 	rsb	r2, r3, #32
 8000c8c:	409f      	lsls	r7, r3
 8000c8e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c92:	4317      	orrs	r7, r2
 8000c94:	409c      	lsls	r4, r3
 8000c96:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c9a:	fa1f f58c 	uxth.w	r5, ip
 8000c9e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ca2:	0c22      	lsrs	r2, r4, #16
 8000ca4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ca8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cac:	fb01 f005 	mul.w	r0, r1, r5
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x62>
 8000cb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cbc:	f080 811c 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	f240 8119 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cc6:	3902      	subs	r1, #2
 8000cc8:	4462      	add	r2, ip
 8000cca:	1a12      	subs	r2, r2, r0
 8000ccc:	b2a4      	uxth	r4, r4
 8000cce:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cd2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cd6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cda:	fb00 f505 	mul.w	r5, r0, r5
 8000cde:	42a5      	cmp	r5, r4
 8000ce0:	d90a      	bls.n	8000cf8 <__udivmoddi4+0x90>
 8000ce2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cea:	f080 8107 	bcs.w	8000efc <__udivmoddi4+0x294>
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	f240 8104 	bls.w	8000efc <__udivmoddi4+0x294>
 8000cf4:	4464      	add	r4, ip
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cfc:	1b64      	subs	r4, r4, r5
 8000cfe:	2100      	movs	r1, #0
 8000d00:	b11e      	cbz	r6, 8000d0a <__udivmoddi4+0xa2>
 8000d02:	40dc      	lsrs	r4, r3
 8000d04:	2300      	movs	r3, #0
 8000d06:	e9c6 4300 	strd	r4, r3, [r6]
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0xbc>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80ed 	beq.w	8000ef2 <__udivmoddi4+0x28a>
 8000d18:	2100      	movs	r1, #0
 8000d1a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	fab3 f183 	clz	r1, r3
 8000d28:	2900      	cmp	r1, #0
 8000d2a:	d149      	bne.n	8000dc0 <__udivmoddi4+0x158>
 8000d2c:	42ab      	cmp	r3, r5
 8000d2e:	d302      	bcc.n	8000d36 <__udivmoddi4+0xce>
 8000d30:	4282      	cmp	r2, r0
 8000d32:	f200 80f8 	bhi.w	8000f26 <__udivmoddi4+0x2be>
 8000d36:	1a84      	subs	r4, r0, r2
 8000d38:	eb65 0203 	sbc.w	r2, r5, r3
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	4617      	mov	r7, r2
 8000d40:	2e00      	cmp	r6, #0
 8000d42:	d0e2      	beq.n	8000d0a <__udivmoddi4+0xa2>
 8000d44:	e9c6 4700 	strd	r4, r7, [r6]
 8000d48:	e7df      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000d4a:	b902      	cbnz	r2, 8000d4e <__udivmoddi4+0xe6>
 8000d4c:	deff      	udf	#255	; 0xff
 8000d4e:	fab2 f382 	clz	r3, r2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f040 8090 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d58:	1a8a      	subs	r2, r1, r2
 8000d5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5e:	fa1f fe8c 	uxth.w	lr, ip
 8000d62:	2101      	movs	r1, #1
 8000d64:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d68:	fb07 2015 	mls	r0, r7, r5, r2
 8000d6c:	0c22      	lsrs	r2, r4, #16
 8000d6e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d72:	fb0e f005 	mul.w	r0, lr, r5
 8000d76:	4290      	cmp	r0, r2
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d7e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4290      	cmp	r0, r2
 8000d86:	f200 80cb 	bhi.w	8000f20 <__udivmoddi4+0x2b8>
 8000d8a:	4645      	mov	r5, r8
 8000d8c:	1a12      	subs	r2, r2, r0
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d94:	fb07 2210 	mls	r2, r7, r0, r2
 8000d98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9c:	fb0e fe00 	mul.w	lr, lr, r0
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x14e>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x14c>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f200 80bb 	bhi.w	8000f2a <__udivmoddi4+0x2c2>
 8000db4:	4610      	mov	r0, r2
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dbe:	e79f      	b.n	8000d00 <__udivmoddi4+0x98>
 8000dc0:	f1c1 0720 	rsb	r7, r1, #32
 8000dc4:	408b      	lsls	r3, r1
 8000dc6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dce:	fa05 f401 	lsl.w	r4, r5, r1
 8000dd2:	fa20 f307 	lsr.w	r3, r0, r7
 8000dd6:	40fd      	lsrs	r5, r7
 8000dd8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ddc:	4323      	orrs	r3, r4
 8000dde:	fbb5 f8f9 	udiv	r8, r5, r9
 8000de2:	fa1f fe8c 	uxth.w	lr, ip
 8000de6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dea:	0c1c      	lsrs	r4, r3, #16
 8000dec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000df0:	fb08 f50e 	mul.w	r5, r8, lr
 8000df4:	42a5      	cmp	r5, r4
 8000df6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e08:	f080 8088 	bcs.w	8000f1c <__udivmoddi4+0x2b4>
 8000e0c:	42a5      	cmp	r5, r4
 8000e0e:	f240 8085 	bls.w	8000f1c <__udivmoddi4+0x2b4>
 8000e12:	f1a8 0802 	sub.w	r8, r8, #2
 8000e16:	4464      	add	r4, ip
 8000e18:	1b64      	subs	r4, r4, r5
 8000e1a:	b29d      	uxth	r5, r3
 8000e1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e20:	fb09 4413 	mls	r4, r9, r3, r4
 8000e24:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e28:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e38:	d26c      	bcs.n	8000f14 <__udivmoddi4+0x2ac>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	d96a      	bls.n	8000f14 <__udivmoddi4+0x2ac>
 8000e3e:	3b02      	subs	r3, #2
 8000e40:	4464      	add	r4, ip
 8000e42:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e46:	fba3 9502 	umull	r9, r5, r3, r2
 8000e4a:	eba4 040e 	sub.w	r4, r4, lr
 8000e4e:	42ac      	cmp	r4, r5
 8000e50:	46c8      	mov	r8, r9
 8000e52:	46ae      	mov	lr, r5
 8000e54:	d356      	bcc.n	8000f04 <__udivmoddi4+0x29c>
 8000e56:	d053      	beq.n	8000f00 <__udivmoddi4+0x298>
 8000e58:	b156      	cbz	r6, 8000e70 <__udivmoddi4+0x208>
 8000e5a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e5e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e62:	fa04 f707 	lsl.w	r7, r4, r7
 8000e66:	40ca      	lsrs	r2, r1
 8000e68:	40cc      	lsrs	r4, r1
 8000e6a:	4317      	orrs	r7, r2
 8000e6c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e70:	4618      	mov	r0, r3
 8000e72:	2100      	movs	r1, #0
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	f1c3 0120 	rsb	r1, r3, #32
 8000e7c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e80:	fa20 f201 	lsr.w	r2, r0, r1
 8000e84:	fa25 f101 	lsr.w	r1, r5, r1
 8000e88:	409d      	lsls	r5, r3
 8000e8a:	432a      	orrs	r2, r5
 8000e8c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1510 	mls	r5, r7, r0, r1
 8000e9c:	0c11      	lsrs	r1, r2, #16
 8000e9e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ea2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ea6:	428d      	cmp	r5, r1
 8000ea8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x258>
 8000eae:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eb6:	d22f      	bcs.n	8000f18 <__udivmoddi4+0x2b0>
 8000eb8:	428d      	cmp	r5, r1
 8000eba:	d92d      	bls.n	8000f18 <__udivmoddi4+0x2b0>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	1b49      	subs	r1, r1, r5
 8000ec2:	b292      	uxth	r2, r2
 8000ec4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ec8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ecc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ed0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ed4:	4291      	cmp	r1, r2
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x282>
 8000ed8:	eb1c 0202 	adds.w	r2, ip, r2
 8000edc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ee0:	d216      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000ee2:	4291      	cmp	r1, r2
 8000ee4:	d914      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000ee6:	3d02      	subs	r5, #2
 8000ee8:	4462      	add	r2, ip
 8000eea:	1a52      	subs	r2, r2, r1
 8000eec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ef0:	e738      	b.n	8000d64 <__udivmoddi4+0xfc>
 8000ef2:	4631      	mov	r1, r6
 8000ef4:	4630      	mov	r0, r6
 8000ef6:	e708      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000ef8:	4639      	mov	r1, r7
 8000efa:	e6e6      	b.n	8000cca <__udivmoddi4+0x62>
 8000efc:	4610      	mov	r0, r2
 8000efe:	e6fb      	b.n	8000cf8 <__udivmoddi4+0x90>
 8000f00:	4548      	cmp	r0, r9
 8000f02:	d2a9      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f04:	ebb9 0802 	subs.w	r8, r9, r2
 8000f08:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	e7a3      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f10:	4645      	mov	r5, r8
 8000f12:	e7ea      	b.n	8000eea <__udivmoddi4+0x282>
 8000f14:	462b      	mov	r3, r5
 8000f16:	e794      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f18:	4640      	mov	r0, r8
 8000f1a:	e7d1      	b.n	8000ec0 <__udivmoddi4+0x258>
 8000f1c:	46d0      	mov	r8, sl
 8000f1e:	e77b      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f20:	3d02      	subs	r5, #2
 8000f22:	4462      	add	r2, ip
 8000f24:	e732      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f26:	4608      	mov	r0, r1
 8000f28:	e70a      	b.n	8000d40 <__udivmoddi4+0xd8>
 8000f2a:	4464      	add	r4, ip
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e742      	b.n	8000db6 <__udivmoddi4+0x14e>

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <runMotors>:
const uint8_t SENSOR_REGS[3] = {0x80 | 0x16, 0x80 | 0x18, 0x80 | 0x1A};
const uint8_t SENSORS[2] = {3, 4};
uint8_t NUM_SENSORS = sizeof(SENSORS)/sizeof(SENSORS[0]);


void runMotors(uint8_t side, uint8_t dir, double duty) {
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b087      	sub	sp, #28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	460a      	mov	r2, r1
 8000f3e:	ed87 0b00 	vstr	d0, [r7]
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	4613      	mov	r3, r2
 8000f46:	73bb      	strb	r3, [r7, #14]
	double duty_adj = dir == BWD ? (1-duty) : duty;
 8000f48:	7bbb      	ldrb	r3, [r7, #14]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d109      	bne.n	8000f62 <runMotors+0x2e>
 8000f4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f52:	f04f 0000 	mov.w	r0, #0
 8000f56:	4939      	ldr	r1, [pc, #228]	; (800103c <runMotors+0x108>)
 8000f58:	f7ff f9be 	bl	80002d8 <__aeabi_dsub>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	e001      	b.n	8000f66 <runMotors+0x32>
 8000f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f66:	e9c7 2304 	strd	r2, r3, [r7, #16]
//	sprintf(b, "duty_adj %f\r\n", duty_adj);
//	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

	//setBit(M_DIR[side], dir);

	if (side == LEFT) {
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d130      	bne.n	8000fd2 <runMotors+0x9e>
		HAL_GPIO_WritePin(GPIOA, RS_DIR_Pin, dir == BWD ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	bf0c      	ite	eq
 8000f76:	2301      	moveq	r3, #1
 8000f78:	2300      	movne	r3, #0
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	2102      	movs	r1, #2
 8000f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f84:	f002 fdca 	bl	8003b1c <HAL_GPIO_WritePin>
		TIM1->CCR1 = duty_adj*TIM1->ARR;
 8000f88:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <runMotors+0x10c>)
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fae1 	bl	8000554 <__aeabi_ui2d>
 8000f92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f96:	f7ff fb57 	bl	8000648 <__aeabi_dmul>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4c28      	ldr	r4, [pc, #160]	; (8001040 <runMotors+0x10c>)
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f7ff fe28 	bl	8000bf8 <__aeabi_d2uiz>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	6363      	str	r3, [r4, #52]	; 0x34
		TIM1->CCR2 = duty_adj*TIM1->ARR;
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <runMotors+0x10c>)
 8000fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff facf 	bl	8000554 <__aeabi_ui2d>
 8000fb6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fba:	f7ff fb45 	bl	8000648 <__aeabi_dmul>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4c1f      	ldr	r4, [pc, #124]	; (8001040 <runMotors+0x10c>)
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f7ff fe16 	bl	8000bf8 <__aeabi_d2uiz>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	63a3      	str	r3, [r4, #56]	; 0x38
	} else {
		HAL_GPIO_WritePin(GPIOA, LS_DIR_Pin, dir == BWD ? GPIO_PIN_SET : GPIO_PIN_RESET);
		TIM1->CCR3 = duty_adj*TIM1->ARR;
		TIM1->CCR4 = duty_adj*TIM1->ARR;
	}
}
 8000fd0:	e02f      	b.n	8001032 <runMotors+0xfe>
		HAL_GPIO_WritePin(GPIOA, LS_DIR_Pin, dir == BWD ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000fd2:	7bbb      	ldrb	r3, [r7, #14]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	bf0c      	ite	eq
 8000fd8:	2301      	moveq	r3, #1
 8000fda:	2300      	movne	r3, #0
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe6:	f002 fd99 	bl	8003b1c <HAL_GPIO_WritePin>
		TIM1->CCR3 = duty_adj*TIM1->ARR;
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <runMotors+0x10c>)
 8000fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fab0 	bl	8000554 <__aeabi_ui2d>
 8000ff4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ff8:	f7ff fb26 	bl	8000648 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4c0f      	ldr	r4, [pc, #60]	; (8001040 <runMotors+0x10c>)
 8001002:	4610      	mov	r0, r2
 8001004:	4619      	mov	r1, r3
 8001006:	f7ff fdf7 	bl	8000bf8 <__aeabi_d2uiz>
 800100a:	4603      	mov	r3, r0
 800100c:	63e3      	str	r3, [r4, #60]	; 0x3c
		TIM1->CCR4 = duty_adj*TIM1->ARR;
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <runMotors+0x10c>)
 8001010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fa9e 	bl	8000554 <__aeabi_ui2d>
 8001018:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800101c:	f7ff fb14 	bl	8000648 <__aeabi_dmul>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4c06      	ldr	r4, [pc, #24]	; (8001040 <runMotors+0x10c>)
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f7ff fde5 	bl	8000bf8 <__aeabi_d2uiz>
 800102e:	4603      	mov	r3, r0
 8001030:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001032:	bf00      	nop
 8001034:	371c      	adds	r7, #28
 8001036:	46bd      	mov	sp, r7
 8001038:	bd90      	pop	{r4, r7, pc}
 800103a:	bf00      	nop
 800103c:	3ff00000 	.word	0x3ff00000
 8001040:	40012c00 	.word	0x40012c00

08001044 <selectMuxAddr>:
	} else {
		GPIOA->ODR &= ~bitMask;
	}
}

uint8_t selectMuxAddr(uint8_t sensor) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b0a0      	sub	sp, #128	; 0x80
 8001048:	af02      	add	r7, sp, #8
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  char b [100];

  if (sensor > 7) {
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b07      	cmp	r3, #7
 8001052:	d914      	bls.n	800107e <selectMuxAddr+0x3a>
 		sprintf(b, "sensor index %d out of bounds\r\n", sensor);
 8001054:	79fa      	ldrb	r2, [r7, #7]
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	4923      	ldr	r1, [pc, #140]	; (80010e8 <selectMuxAddr+0xa4>)
 800105c:	4618      	mov	r0, r3
 800105e:	f007 fba7 	bl	80087b0 <siprintf>
 		HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001062:	f107 0310 	add.w	r3, r7, #16
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff f92a 	bl	80002c0 <strlen>
 800106c:	4603      	mov	r3, r0
 800106e:	b29a      	uxth	r2, r3
 8001070:	f107 0110 	add.w	r1, r7, #16
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
 8001078:	481c      	ldr	r0, [pc, #112]	; (80010ec <selectMuxAddr+0xa8>)
 800107a:	f005 fff5 	bl	8007068 <HAL_UART_Transmit>
  }

  uint8_t data[1] = {1 << sensor};
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2201      	movs	r2, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	733b      	strb	r3, [r7, #12]

  ret = HAL_I2C_Master_Transmit(&hi2c1, MUX_ADDR, data, 1, HAL_MAX_DELAY);
 800108a:	f107 020c 	add.w	r2, r7, #12
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	21e0      	movs	r1, #224	; 0xe0
 8001098:	4815      	ldr	r0, [pc, #84]	; (80010f0 <selectMuxAddr+0xac>)
 800109a:	f002 fdf3 	bl	8003c84 <HAL_I2C_Master_Transmit>
 800109e:	4603      	mov	r3, r0
 80010a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  if ( ret != HAL_OK ) {
 80010a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d017      	beq.n	80010dc <selectMuxAddr+0x98>
 		sprintf(b, "failed to connect to sensor %d - error code %d\r\n", sensor, ret);
 80010ac:	79fa      	ldrb	r2, [r7, #7]
 80010ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80010b2:	f107 0010 	add.w	r0, r7, #16
 80010b6:	490f      	ldr	r1, [pc, #60]	; (80010f4 <selectMuxAddr+0xb0>)
 80010b8:	f007 fb7a 	bl	80087b0 <siprintf>
 		HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff f8fd 	bl	80002c0 <strlen>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	f107 0110 	add.w	r1, r7, #16
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	4806      	ldr	r0, [pc, #24]	; (80010ec <selectMuxAddr+0xa8>)
 80010d4:	f005 ffc8 	bl	8007068 <HAL_UART_Transmit>
 		return 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	e000      	b.n	80010de <selectMuxAddr+0x9a>
 	} else {
// 		sprintf(b, "connected to sensor %d\r\n", sensor);
// 		HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 		return 1;
 80010dc:	2301      	movs	r3, #1
 	}
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3778      	adds	r7, #120	; 0x78
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	0800aa88 	.word	0x0800aa88
 80010ec:	20000398 	.word	0x20000398
 80010f0:	20000260 	.word	0x20000260
 80010f4:	0800aaa8 	.word	0x0800aaa8

080010f8 <readSensor>:

uint16_t readSensor(uint8_t sensor) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b0a6      	sub	sp, #152	; 0x98
 80010fc:	af04      	add	r7, sp, #16
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	if (!selectMuxAddr(sensor)) {
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff9d 	bl	8001044 <selectMuxAddr>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <readSensor+0x1c>
		return 0;
 8001110:	2300      	movs	r3, #0
 8001112:	e072      	b.n	80011fa <readSensor+0x102>
  uint8_t buf16[2];
  char out [100];
  uint16_t val;
  uint16_t rgb[3];

	for (int i = 0; i < 3; i++) {
 8001114:	2300      	movs	r3, #0
 8001116:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800111a:	e049      	b.n	80011b0 <readSensor+0xb8>
    ret = HAL_I2C_Mem_Read(&hi2c1, TCS_ADDR, SENSOR_REGS[i], I2C_MEMADD_SIZE_8BIT, buf16, 2, HAL_MAX_DELAY);
 800111c:	4a39      	ldr	r2, [pc, #228]	; (8001204 <readSensor+0x10c>)
 800111e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001122:	4413      	add	r3, r2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b29a      	uxth	r2, r3
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	2302      	movs	r3, #2
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	2152      	movs	r1, #82	; 0x52
 800113c:	4832      	ldr	r0, [pc, #200]	; (8001208 <readSensor+0x110>)
 800113e:	f002 ffcd 	bl	80040dc <HAL_I2C_Mem_Read>
 8001142:	4603      	mov	r3, r0
 8001144:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

    if ( ret != HAL_OK ) {
 8001148:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800114c:	2b00      	cmp	r3, #0
 800114e:	d016      	beq.n	800117e <readSensor+0x86>
   		sprintf(out, "sensor read %d failed with error code %d\r\n", sensor, ret);
 8001150:	79fa      	ldrb	r2, [r7, #7]
 8001152:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001156:	f107 0010 	add.w	r0, r7, #16
 800115a:	492c      	ldr	r1, [pc, #176]	; (800120c <readSensor+0x114>)
 800115c:	f007 fb28 	bl	80087b0 <siprintf>
   		HAL_UART_Transmit(&huart2, (uint8_t*)out, strlen(out), HAL_MAX_DELAY);
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f8ab 	bl	80002c0 <strlen>
 800116a:	4603      	mov	r3, r0
 800116c:	b29a      	uxth	r2, r3
 800116e:	f107 0110 	add.w	r1, r7, #16
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	4826      	ldr	r0, [pc, #152]	; (8001210 <readSensor+0x118>)
 8001178:	f005 ff76 	bl	8007068 <HAL_UART_Transmit>
 800117c:	e013      	b.n	80011a6 <readSensor+0xae>
   	} else {
      val = buf16[1] << 8 | buf16[0];
 800117e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001182:	021b      	lsls	r3, r3, #8
 8001184:	b21a      	sxth	r2, r3
 8001186:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800118a:	b21b      	sxth	r3, r3
 800118c:	4313      	orrs	r3, r2
 800118e:	b21b      	sxth	r3, r3
 8001190:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

//   		sprintf(b, "%d %d %d\r\n", buf16[1], buf16[0], val);
//   		HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

   		rgb[i] = val;
 8001194:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	3388      	adds	r3, #136	; 0x88
 800119c:	443b      	add	r3, r7
 800119e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80011a2:	f823 2c80 	strh.w	r2, [r3, #-128]
	for (int i = 0; i < 3; i++) {
 80011a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011aa:	3301      	adds	r3, #1
 80011ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80011b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	ddb1      	ble.n	800111c <readSensor+0x24>
   	}
	}

	uint16_t r = rgb[0];
 80011b8:	893b      	ldrh	r3, [r7, #8]
 80011ba:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	uint16_t g = rgb[1];
 80011be:	897b      	ldrh	r3, [r7, #10]
 80011c0:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	uint16_t b = rgb[2];
 80011c4:	89bb      	ldrh	r3, [r7, #12]
 80011c6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	uint16_t val2 = r*1000 / (r + g + b) * 3;
 80011ca:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80011ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011d2:	fb03 f202 	mul.w	r2, r3, r2
 80011d6:	f8b7 1082 	ldrh.w	r1, [r7, #130]	; 0x82
 80011da:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80011de:	4419      	add	r1, r3
 80011e0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80011e4:	440b      	add	r3, r1
 80011e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	461a      	mov	r2, r3
 80011ee:	0052      	lsls	r2, r2, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

//	sprintf(out, "sensor %d  r %d g %d b %d scaled %d\r\n", sensor, r, g, b, val2);
//	HAL_UART_Transmit(&huart2, (uint8_t*)out, strlen(out), HAL_MAX_DELAY);

	return val2;
 80011f6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c


}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3788      	adds	r7, #136	; 0x88
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	0800ab80 	.word	0x0800ab80
 8001208:	20000260 	.word	0x20000260
 800120c:	0800aadc 	.word	0x0800aadc
 8001210:	20000398 	.word	0x20000398

08001214 <initSensors>:

void initSensors() {
 8001214:	b580      	push	{r7, lr}
 8001216:	b0a0      	sub	sp, #128	; 0x80
 8001218:	af04      	add	r7, sp, #16
  uint8_t int_time;
  uint8_t gain;
  uint8_t enable;
  char b [100];

  int_time = 0xFF;
 800121a:	23ff      	movs	r3, #255	; 0xff
 800121c:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  gain = 0x03;
 8001220:	2303      	movs	r3, #3
 8001222:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
  enable = 0x01;
 8001226:	2301      	movs	r3, #1
 8001228:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

	for (int i = 0; i < sizeof(SENSORS)/sizeof(SENSORS[0]); i++) {
 800122c:	2300      	movs	r3, #0
 800122e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001230:	e0c4      	b.n	80013bc <initSensors+0x1a8>
		if (!selectMuxAddr(SENSORS[i])) {
 8001232:	4a66      	ldr	r2, [pc, #408]	; (80013cc <initSensors+0x1b8>)
 8001234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001236:	4413      	add	r3, r2
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff02 	bl	8001044 <selectMuxAddr>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 80b6 	beq.w	80013b4 <initSensors+0x1a0>
				continue;
		}

		// Write integration time
	  ret = HAL_I2C_Mem_Write(&hi2c1, TCS_ADDR, INT_REG, I2C_MEMADD_SIZE_8BIT, &int_time, 1, HAL_MAX_DELAY);
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	2301      	movs	r3, #1
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2301      	movs	r3, #1
 800125a:	2281      	movs	r2, #129	; 0x81
 800125c:	2152      	movs	r1, #82	; 0x52
 800125e:	485c      	ldr	r0, [pc, #368]	; (80013d0 <initSensors+0x1bc>)
 8001260:	f002 fe28 	bl	8003eb4 <HAL_I2C_Mem_Write>
 8001264:	4603      	mov	r3, r0
 8001266:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	  if ( ret != HAL_OK ) {
 800126a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800126e:	2b00      	cmp	r3, #0
 8001270:	d013      	beq.n	800129a <initSensors+0x86>
			sprintf(b, "fail 1 %d\r\n", ret);
 8001272:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	4956      	ldr	r1, [pc, #344]	; (80013d4 <initSensors+0x1c0>)
 800127a:	4618      	mov	r0, r3
 800127c:	f007 fa98 	bl	80087b0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f81c 	bl	80002c0 <strlen>
 8001288:	4603      	mov	r3, r0
 800128a:	b29a      	uxth	r2, r3
 800128c:	1d39      	adds	r1, r7, #4
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	4851      	ldr	r0, [pc, #324]	; (80013d8 <initSensors+0x1c4>)
 8001294:	f005 fee8 	bl	8007068 <HAL_UART_Transmit>
			return;
 8001298:	e094      	b.n	80013c4 <initSensors+0x1b0>
		}

	  ret = HAL_I2C_Mem_Write(&hi2c1, TCS_ADDR, GAIN_REG, I2C_MEMADD_SIZE_8BIT, &gain, 1, HAL_MAX_DELAY);
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	f107 0369 	add.w	r3, r7, #105	; 0x69
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	228f      	movs	r2, #143	; 0x8f
 80012ae:	2152      	movs	r1, #82	; 0x52
 80012b0:	4847      	ldr	r0, [pc, #284]	; (80013d0 <initSensors+0x1bc>)
 80012b2:	f002 fdff 	bl	8003eb4 <HAL_I2C_Mem_Write>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	  if ( ret != HAL_OK ) {
 80012bc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d013      	beq.n	80012ec <initSensors+0xd8>
			sprintf(b, "fail 2 %d\r\n", ret);
 80012c4:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	4944      	ldr	r1, [pc, #272]	; (80013dc <initSensors+0x1c8>)
 80012cc:	4618      	mov	r0, r3
 80012ce:	f007 fa6f 	bl	80087b0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7fe fff3 	bl	80002c0 <strlen>
 80012da:	4603      	mov	r3, r0
 80012dc:	b29a      	uxth	r2, r3
 80012de:	1d39      	adds	r1, r7, #4
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	483c      	ldr	r0, [pc, #240]	; (80013d8 <initSensors+0x1c4>)
 80012e6:	f005 febf 	bl	8007068 <HAL_UART_Transmit>
			return;
 80012ea:	e06b      	b.n	80013c4 <initSensors+0x1b0>
		}

	  HAL_Delay(3);
 80012ec:	2003      	movs	r0, #3
 80012ee:	f001 fa43 	bl	8002778 <HAL_Delay>

	  ret = HAL_I2C_Mem_Write(&hi2c1, TCS_ADDR, EN_REG, I2C_MEMADD_SIZE_8BIT, &enable, 1, HAL_MAX_DELAY);
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	2301      	movs	r3, #1
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2301      	movs	r3, #1
 8001304:	2280      	movs	r2, #128	; 0x80
 8001306:	2152      	movs	r1, #82	; 0x52
 8001308:	4831      	ldr	r0, [pc, #196]	; (80013d0 <initSensors+0x1bc>)
 800130a:	f002 fdd3 	bl	8003eb4 <HAL_I2C_Mem_Write>
 800130e:	4603      	mov	r3, r0
 8001310:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	  if ( ret != HAL_OK ) {
 8001314:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001318:	2b00      	cmp	r3, #0
 800131a:	d013      	beq.n	8001344 <initSensors+0x130>
			sprintf(b, "fail 1 %d\r\n", ret);
 800131c:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	492c      	ldr	r1, [pc, #176]	; (80013d4 <initSensors+0x1c0>)
 8001324:	4618      	mov	r0, r3
 8001326:	f007 fa43 	bl	80087b0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	4618      	mov	r0, r3
 800132e:	f7fe ffc7 	bl	80002c0 <strlen>
 8001332:	4603      	mov	r3, r0
 8001334:	b29a      	uxth	r2, r3
 8001336:	1d39      	adds	r1, r7, #4
 8001338:	f04f 33ff 	mov.w	r3, #4294967295
 800133c:	4826      	ldr	r0, [pc, #152]	; (80013d8 <initSensors+0x1c4>)
 800133e:	f005 fe93 	bl	8007068 <HAL_UART_Transmit>
			return;
 8001342:	e03f      	b.n	80013c4 <initSensors+0x1b0>
		}

	  enable |= 0x02;
 8001344:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	b2db      	uxtb	r3, r3
 800134e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

	  HAL_Delay(3);
 8001352:	2003      	movs	r0, #3
 8001354:	f001 fa10 	bl	8002778 <HAL_Delay>

	  ret = HAL_I2C_Mem_Write(&hi2c1, TCS_ADDR, EN_REG, I2C_MEMADD_SIZE_8BIT, &enable, 1, HAL_MAX_DELAY);
 8001358:	f04f 33ff 	mov.w	r3, #4294967295
 800135c:	9302      	str	r3, [sp, #8]
 800135e:	2301      	movs	r3, #1
 8001360:	9301      	str	r3, [sp, #4]
 8001362:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2301      	movs	r3, #1
 800136a:	2280      	movs	r2, #128	; 0x80
 800136c:	2152      	movs	r1, #82	; 0x52
 800136e:	4818      	ldr	r0, [pc, #96]	; (80013d0 <initSensors+0x1bc>)
 8001370:	f002 fda0 	bl	8003eb4 <HAL_I2C_Mem_Write>
 8001374:	4603      	mov	r3, r0
 8001376:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	  if ( ret != HAL_OK ) {
 800137a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800137e:	2b00      	cmp	r3, #0
 8001380:	d013      	beq.n	80013aa <initSensors+0x196>
			sprintf(b, "fail 1 %d\r\n", ret);
 8001382:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	4912      	ldr	r1, [pc, #72]	; (80013d4 <initSensors+0x1c0>)
 800138a:	4618      	mov	r0, r3
 800138c:	f007 fa10 	bl	80087b0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	4618      	mov	r0, r3
 8001394:	f7fe ff94 	bl	80002c0 <strlen>
 8001398:	4603      	mov	r3, r0
 800139a:	b29a      	uxth	r2, r3
 800139c:	1d39      	adds	r1, r7, #4
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	480d      	ldr	r0, [pc, #52]	; (80013d8 <initSensors+0x1c4>)
 80013a4:	f005 fe60 	bl	8007068 <HAL_UART_Transmit>
			return;
 80013a8:	e00c      	b.n	80013c4 <initSensors+0x1b0>
		}

	  HAL_Delay(300);
 80013aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80013ae:	f001 f9e3 	bl	8002778 <HAL_Delay>
 80013b2:	e000      	b.n	80013b6 <initSensors+0x1a2>
				continue;
 80013b4:	bf00      	nop
	for (int i = 0; i < sizeof(SENSORS)/sizeof(SENSORS[0]); i++) {
 80013b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013b8:	3301      	adds	r3, #1
 80013ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80013bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013be:	2b01      	cmp	r3, #1
 80013c0:	f67f af37 	bls.w	8001232 <initSensors+0x1e>

	}
}
 80013c4:	3770      	adds	r7, #112	; 0x70
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	0800ab84 	.word	0x0800ab84
 80013d0:	20000260 	.word	0x20000260
 80013d4:	0800ab08 	.word	0x0800ab08
 80013d8:	20000398 	.word	0x20000398
 80013dc:	0800ab14 	.word	0x0800ab14

080013e0 <calibrate>:

void calibrate(uint16_t* tape_val, uint16_t* wood_val) {
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	b0a4      	sub	sp, #144	; 0x90
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  char b [100];
	uint16_t tape = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	uint16_t wood = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

	uint32_t wood_sum = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	uint32_t tape_sum = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint16_t avg_reading = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

	runMotors(LEFT, BWD, 0.3);
 8001408:	ed9f 0b8f 	vldr	d0, [pc, #572]	; 8001648 <calibrate+0x268>
 800140c:	2101      	movs	r1, #1
 800140e:	2000      	movs	r0, #0
 8001410:	f7ff fd90 	bl	8000f34 <runMotors>
	runMotors(RIGHT, BWD, 0.3);
 8001414:	ed9f 0b8c 	vldr	d0, [pc, #560]	; 8001648 <calibrate+0x268>
 8001418:	2101      	movs	r1, #1
 800141a:	2001      	movs	r0, #1
 800141c:	f7ff fd8a 	bl	8000f34 <runMotors>

	uint16_t count = 1;
 8001420:	2301      	movs	r3, #1
 8001422:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	uint16_t tape_count = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	for (int i = 0; i < NUM_SENSORS; i++) {
 800142c:	2300      	movs	r3, #0
 800142e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001430:	e010      	b.n	8001454 <calibrate+0x74>
		wood_sum += readSensor(SENSORS[i]);
 8001432:	4a87      	ldr	r2, [pc, #540]	; (8001650 <calibrate+0x270>)
 8001434:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001436:	4413      	add	r3, r2
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fe5c 	bl	80010f8 <readSensor>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001448:	4413      	add	r3, r2
 800144a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	for (int i = 0; i < NUM_SENSORS; i++) {
 800144e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001450:	3301      	adds	r3, #1
 8001452:	67bb      	str	r3, [r7, #120]	; 0x78
 8001454:	4b7f      	ldr	r3, [pc, #508]	; (8001654 <calibrate+0x274>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800145c:	4293      	cmp	r3, r2
 800145e:	dbe8      	blt.n	8001432 <calibrate+0x52>
	}
	wood_sum /= NUM_SENSORS;
 8001460:	4b7c      	ldr	r3, [pc, #496]	; (8001654 <calibrate+0x274>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800146a:	fbb3 f3f2 	udiv	r3, r3, r2
 800146e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	wood = wood_sum;
 8001472:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001476:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

	sprintf(b, "wood %d\r\n", wood);
 800147a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	4975      	ldr	r1, [pc, #468]	; (8001658 <calibrate+0x278>)
 8001484:	4618      	mov	r0, r3
 8001486:	f007 f993 	bl	80087b0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	4618      	mov	r0, r3
 8001490:	f7fe ff16 	bl	80002c0 <strlen>
 8001494:	4603      	mov	r3, r0
 8001496:	b29a      	uxth	r2, r3
 8001498:	f107 010c 	add.w	r1, r7, #12
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
 80014a0:	486e      	ldr	r0, [pc, #440]	; (800165c <calibrate+0x27c>)
 80014a2:	f005 fde1 	bl	8007068 <HAL_UART_Transmit>

	while (1) {
		count++;
 80014a6:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80014aa:	3301      	adds	r3, #1
 80014ac:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		avg_reading = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

		for (int i = 0; i < NUM_SENSORS; i++) {
 80014b6:	2300      	movs	r3, #0
 80014b8:	677b      	str	r3, [r7, #116]	; 0x74
 80014ba:	e010      	b.n	80014de <calibrate+0xfe>
			avg_reading += readSensor(SENSORS[i]);
 80014bc:	4a64      	ldr	r2, [pc, #400]	; (8001650 <calibrate+0x270>)
 80014be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014c0:	4413      	add	r3, r2
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fe17 	bl	80010f8 <readSensor>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80014d2:	4413      	add	r3, r2
 80014d4:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
		for (int i = 0; i < NUM_SENSORS; i++) {
 80014d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014da:	3301      	adds	r3, #1
 80014dc:	677b      	str	r3, [r7, #116]	; 0x74
 80014de:	4b5d      	ldr	r3, [pc, #372]	; (8001654 <calibrate+0x274>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014e6:	4293      	cmp	r3, r2
 80014e8:	dbe8      	blt.n	80014bc <calibrate+0xdc>
		}
		avg_reading /= NUM_SENSORS;
 80014ea:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80014ee:	4a59      	ldr	r2, [pc, #356]	; (8001654 <calibrate+0x274>)
 80014f0:	7812      	ldrb	r2, [r2, #0]
 80014f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80014f6:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

		if (abs(avg_reading - wood) <= wood*0.3) {
 80014fa:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 80014fe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	bfb8      	it	lt
 8001508:	425b      	neglt	r3, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f832 	bl	8000574 <__aeabi_i2d>
 8001510:	4604      	mov	r4, r0
 8001512:	460d      	mov	r5, r1
 8001514:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f82b 	bl	8000574 <__aeabi_i2d>
 800151e:	a34a      	add	r3, pc, #296	; (adr r3, 8001648 <calibrate+0x268>)
 8001520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001524:	f7ff f890 	bl	8000648 <__aeabi_dmul>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4620      	mov	r0, r4
 800152e:	4629      	mov	r1, r5
 8001530:	f7ff fb06 	bl	8000b40 <__aeabi_dcmple>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d02f      	beq.n	800159a <calibrate+0x1ba>

			wood_sum += avg_reading;
 800153a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800153e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001542:	4413      	add	r3, r2
 8001544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			wood = wood_sum / count;
 8001548:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800154c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001550:	fbb2 f3f3 	udiv	r3, r2, r3
 8001554:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

			sprintf(b, "wood %d\r\n", wood);
 8001558:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	493d      	ldr	r1, [pc, #244]	; (8001658 <calibrate+0x278>)
 8001562:	4618      	mov	r0, r3
 8001564:	f007 f924 	bl	80087b0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe fea7 	bl	80002c0 <strlen>
 8001572:	4603      	mov	r3, r0
 8001574:	b29a      	uxth	r2, r3
 8001576:	f107 010c 	add.w	r1, r7, #12
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	4837      	ldr	r0, [pc, #220]	; (800165c <calibrate+0x27c>)
 8001580:	f005 fd72 	bl	8007068 <HAL_UART_Transmit>

			if (tape_count > 0) {
 8001584:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001588:	2b00      	cmp	r3, #0
 800158a:	d02a      	beq.n	80015e2 <calibrate+0x202>
				tape_count = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
				tape_sum = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001598:	e023      	b.n	80015e2 <calibrate+0x202>
			}
		} else {
			sprintf(b, "tape? \r\n");
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	4930      	ldr	r1, [pc, #192]	; (8001660 <calibrate+0x280>)
 80015a0:	4618      	mov	r0, r3
 80015a2:	f007 f905 	bl	80087b0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe fe88 	bl	80002c0 <strlen>
 80015b0:	4603      	mov	r3, r0
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	f107 010c 	add.w	r1, r7, #12
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295
 80015bc:	4827      	ldr	r0, [pc, #156]	; (800165c <calibrate+0x27c>)
 80015be:	f005 fd53 	bl	8007068 <HAL_UART_Transmit>

			tape_count++;
 80015c2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80015c6:	3301      	adds	r3, #1
 80015c8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
			if (tape_count > 10) {
 80015cc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80015d0:	2b0a      	cmp	r3, #10
 80015d2:	d906      	bls.n	80015e2 <calibrate+0x202>
				tape_sum += avg_reading;
 80015d4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80015d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80015dc:	4413      	add	r3, r2
 80015de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			}
		}

		if (tape_count >= 30) {
 80015e2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80015e6:	2b1d      	cmp	r3, #29
 80015e8:	f67f af5d 	bls.w	80014a6 <calibrate+0xc6>
			tape = tape_sum / (tape_count-10);
 80015ec:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80015f0:	3b0a      	subs	r3, #10
 80015f2:	461a      	mov	r2, r3
 80015f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80015fc:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

			sprintf(b, "found tape! %d\r\n", tape);
 8001600:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	4916      	ldr	r1, [pc, #88]	; (8001664 <calibrate+0x284>)
 800160a:	4618      	mov	r0, r3
 800160c:	f007 f8d0 	bl	80087b0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe fe53 	bl	80002c0 <strlen>
 800161a:	4603      	mov	r3, r0
 800161c:	b29a      	uxth	r2, r3
 800161e:	f107 010c 	add.w	r1, r7, #12
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	480d      	ldr	r0, [pc, #52]	; (800165c <calibrate+0x27c>)
 8001628:	f005 fd1e 	bl	8007068 <HAL_UART_Transmit>
			break;
 800162c:	bf00      	nop
		}
	}


	*tape_val = tape;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001634:	801a      	strh	r2, [r3, #0]
	*wood_val = wood;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800163c:	801a      	strh	r2, [r3, #0]
//	runMotors(LEFT, FWD, 0);
//	runMotors(RIGHT, FWD, 0);
}
 800163e:	bf00      	nop
 8001640:	3790      	adds	r7, #144	; 0x90
 8001642:	46bd      	mov	sp, r7
 8001644:	bdb0      	pop	{r4, r5, r7, pc}
 8001646:	bf00      	nop
 8001648:	33333333 	.word	0x33333333
 800164c:	3fd33333 	.word	0x3fd33333
 8001650:	0800ab84 	.word	0x0800ab84
 8001654:	20000000 	.word	0x20000000
 8001658:	0800ab20 	.word	0x0800ab20
 800165c:	20000398 	.word	0x20000398
 8001660:	0800ab2c 	.word	0x0800ab2c
 8001664:	0800ab38 	.word	0x0800ab38

08001668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	b0a8      	sub	sp, #160	; 0xa0
 800166c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800166e:	f001 f812 	bl	8002696 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001672:	f000 f97b 	bl	800196c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001676:	f000 fc47 	bl	8001f08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800167a:	f000 fbf9 	bl	8001e70 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800167e:	f000 fa69 	bl	8001b54 <MX_TIM1_Init>
  MX_ADC2_Init();
 8001682:	f000 f9c1 	bl	8001a08 <MX_ADC2_Init>
  MX_TIM3_Init();
 8001686:	f000 fb93 	bl	8001db0 <MX_TIM3_Init>
  MX_TIM2_Init();
 800168a:	f000 fb37 	bl	8001cfc <MX_TIM2_Init>
  MX_I2C1_Init();
 800168e:	f000 fa21 	bl	8001ad4 <MX_I2C1_Init>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);


  HAL_Delay(700);
 8001692:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001696:	f001 f86f 	bl	8002778 <HAL_Delay>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800169a:	2100      	movs	r1, #0
 800169c:	48ac      	ldr	r0, [pc, #688]	; (8001950 <main+0x2e8>)
 800169e:	f004 fa11 	bl	8005ac4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80016a2:	2104      	movs	r1, #4
 80016a4:	48aa      	ldr	r0, [pc, #680]	; (8001950 <main+0x2e8>)
 80016a6:	f004 fa0d 	bl	8005ac4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80016aa:	2108      	movs	r1, #8
 80016ac:	48a8      	ldr	r0, [pc, #672]	; (8001950 <main+0x2e8>)
 80016ae:	f004 fa09 	bl	8005ac4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80016b2:	210c      	movs	r1, #12
 80016b4:	48a6      	ldr	r0, [pc, #664]	; (8001950 <main+0x2e8>)
 80016b6:	f004 fa05 	bl	8005ac4 <HAL_TIM_PWM_Start>

  // Make sure all motors are stopped
  TIM1->CCR1 = 0;
 80016ba:	4ba6      	ldr	r3, [pc, #664]	; (8001954 <main+0x2ec>)
 80016bc:	2200      	movs	r2, #0
 80016be:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 80016c0:	4ba4      	ldr	r3, [pc, #656]	; (8001954 <main+0x2ec>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 80016c6:	4ba3      	ldr	r3, [pc, #652]	; (8001954 <main+0x2ec>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 0;
 80016cc:	4ba1      	ldr	r3, [pc, #644]	; (8001954 <main+0x2ec>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_GPIO_WritePin(GPIOA, LS_DIR_Pin, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2101      	movs	r1, #1
 80016d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016da:	f002 fa1f 	bl	8003b1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, RS_DIR_Pin, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	2102      	movs	r1, #2
 80016e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e6:	f002 fa19 	bl	8003b1c <HAL_GPIO_WritePin>

  initSensors();
 80016ea:	f7ff fd93 	bl	8001214 <initSensors>


  uint16_t tape_val;
  uint16_t wood_val;

  HAL_Delay(100);
 80016ee:	2064      	movs	r0, #100	; 0x64
 80016f0:	f001 f842 	bl	8002778 <HAL_Delay>

  calibrate(&tape_val, &wood_val);
 80016f4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80016f8:	f107 0366 	add.w	r3, r7, #102	; 0x66
 80016fc:	4611      	mov	r1, r2
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fe6e 	bl	80013e0 <calibrate>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	char b [100];

  	uint16_t TARGET = (tape_val+wood_val)/2;
 8001704:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001708:	461a      	mov	r2, r3
 800170a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800170e:	4413      	add	r3, r2
 8001710:	0fda      	lsrs	r2, r3, #31
 8001712:	4413      	add	r3, r2
 8001714:	105b      	asrs	r3, r3, #1
 8001716:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
  	uint16_t READING_RANGE = TARGET - wood_val;
 800171a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800171e:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

  	uint16_t right = readSensor(SENSORS[0]);
 8001728:	2303      	movs	r3, #3
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fce4 	bl	80010f8 <readSensor>
 8001730:	4603      	mov	r3, r0
 8001732:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
  	uint16_t left = readSensor(SENSORS[1]);
 8001736:	2304      	movs	r3, #4
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fcdd 	bl	80010f8 <readSensor>
 800173e:	4603      	mov	r3, r0
 8001740:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

  	int16_t error_r = right - TARGET;
 8001744:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8001748:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	b29b      	uxth	r3, r3
 8001750:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
  	int16_t error_l = left - TARGET;
 8001754:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8001758:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	b29b      	uxth	r3, r3
 8001760:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

  	sprintf(b, "left %d right %d ", error_l, error_r);
 8001764:	f9b7 207c 	ldrsh.w	r2, [r7, #124]	; 0x7c
 8001768:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800176c:	4638      	mov	r0, r7
 800176e:	497a      	ldr	r1, [pc, #488]	; (8001958 <main+0x2f0>)
 8001770:	f007 f81e 	bl	80087b0 <siprintf>
  	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001774:	463b      	mov	r3, r7
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fda2 	bl	80002c0 <strlen>
 800177c:	4603      	mov	r3, r0
 800177e:	b29a      	uxth	r2, r3
 8001780:	4639      	mov	r1, r7
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	4875      	ldr	r0, [pc, #468]	; (800195c <main+0x2f4>)
 8001788:	f005 fc6e 	bl	8007068 <HAL_UART_Transmit>

  	double delta_r = kp * error_r  / READING_RANGE * DUTY_RANGE;
 800178c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe feef 	bl	8000574 <__aeabi_i2d>
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	4b71      	ldr	r3, [pc, #452]	; (8001960 <main+0x2f8>)
 800179c:	f7fe ff54 	bl	8000648 <__aeabi_dmul>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4614      	mov	r4, r2
 80017a6:	461d      	mov	r5, r3
 80017a8:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fee1 	bl	8000574 <__aeabi_i2d>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4620      	mov	r0, r4
 80017b8:	4629      	mov	r1, r5
 80017ba:	f7ff f86f 	bl	800089c <__aeabi_ddiv>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	a35c      	add	r3, pc, #368	; (adr r3, 8001938 <main+0x2d0>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7fe ff3c 	bl	8000648 <__aeabi_dmul>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  	double delta_l = kp * error_l  / READING_RANGE * DUTY_RANGE;
 80017d8:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fec9 	bl	8000574 <__aeabi_i2d>
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	4b5e      	ldr	r3, [pc, #376]	; (8001960 <main+0x2f8>)
 80017e8:	f7fe ff2e 	bl	8000648 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4614      	mov	r4, r2
 80017f2:	461d      	mov	r5, r3
 80017f4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe febb 	bl	8000574 <__aeabi_i2d>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4620      	mov	r0, r4
 8001804:	4629      	mov	r1, r5
 8001806:	f7ff f849 	bl	800089c <__aeabi_ddiv>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	a349      	add	r3, pc, #292	; (adr r3, 8001938 <main+0x2d0>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	f7fe ff16 	bl	8000648 <__aeabi_dmul>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

  	double duty_r = AVG_DUTY - delta_r;
 8001824:	a146      	add	r1, pc, #280	; (adr r1, 8001940 <main+0x2d8>)
 8001826:	e9d1 0100 	ldrd	r0, r1, [r1]
 800182a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800182e:	f7fe fd53 	bl	80002d8 <__aeabi_dsub>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  	double duty_l = AVG_DUTY - delta_l;
 800183a:	a141      	add	r1, pc, #260	; (adr r1, 8001940 <main+0x2d8>)
 800183c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001840:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001844:	f7fe fd48 	bl	80002d8 <__aeabi_dsub>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

  //	sprintf(b, "delta_r %f duty_r %f\r\n", delta_r, duty_r);
  //	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
    if (duty_l < MIN_DUTY) duty_l = MIN_DUTY;
 8001850:	a33d      	add	r3, pc, #244	; (adr r3, 8001948 <main+0x2e0>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800185a:	f7ff f967 	bl	8000b2c <__aeabi_dcmplt>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d004      	beq.n	800186e <main+0x206>
 8001864:	a338      	add	r3, pc, #224	; (adr r3, 8001948 <main+0x2e0>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
    if (duty_l > MAX_DUTY) duty_l = MAX_DUTY;
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	4b3b      	ldr	r3, [pc, #236]	; (8001960 <main+0x2f8>)
 8001874:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001878:	f7ff f976 	bl	8000b68 <__aeabi_dcmpgt>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d004      	beq.n	800188c <main+0x224>
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	4b36      	ldr	r3, [pc, #216]	; (8001960 <main+0x2f8>)
 8001888:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
    if (duty_r < MIN_DUTY) duty_r = MIN_DUTY;
 800188c:	a32e      	add	r3, pc, #184	; (adr r3, 8001948 <main+0x2e0>)
 800188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001892:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001896:	f7ff f949 	bl	8000b2c <__aeabi_dcmplt>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d004      	beq.n	80018aa <main+0x242>
 80018a0:	a329      	add	r3, pc, #164	; (adr r3, 8001948 <main+0x2e0>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
    if (duty_r > MAX_DUTY) duty_r = MAX_DUTY;
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <main+0x2f8>)
 80018b0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80018b4:	f7ff f958 	bl	8000b68 <__aeabi_dcmpgt>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d004      	beq.n	80018c8 <main+0x260>
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	4b27      	ldr	r3, [pc, #156]	; (8001960 <main+0x2f8>)
 80018c4:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

  	sprintf(b, "left duty %f right duty %f\r\n", duty_l*100, duty_r*100);
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	4b25      	ldr	r3, [pc, #148]	; (8001964 <main+0x2fc>)
 80018ce:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80018d2:	f7fe feb9 	bl	8000648 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4614      	mov	r4, r2
 80018dc:	461d      	mov	r5, r3
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <main+0x2fc>)
 80018e4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80018e8:	f7fe feae 	bl	8000648 <__aeabi_dmul>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4638      	mov	r0, r7
 80018f2:	e9cd 2300 	strd	r2, r3, [sp]
 80018f6:	4622      	mov	r2, r4
 80018f8:	462b      	mov	r3, r5
 80018fa:	491b      	ldr	r1, [pc, #108]	; (8001968 <main+0x300>)
 80018fc:	f006 ff58 	bl	80087b0 <siprintf>
  	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001900:	463b      	mov	r3, r7
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fcdc 	bl	80002c0 <strlen>
 8001908:	4603      	mov	r3, r0
 800190a:	b29a      	uxth	r2, r3
 800190c:	4639      	mov	r1, r7
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	4812      	ldr	r0, [pc, #72]	; (800195c <main+0x2f4>)
 8001914:	f005 fba8 	bl	8007068 <HAL_UART_Transmit>

  	runMotors(RIGHT, BWD, duty_r);
 8001918:	ed97 0b24 	vldr	d0, [r7, #144]	; 0x90
 800191c:	2101      	movs	r1, #1
 800191e:	2001      	movs	r0, #1
 8001920:	f7ff fb08 	bl	8000f34 <runMotors>
  	runMotors(LEFT, BWD, duty_l);
 8001924:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 8001928:	2101      	movs	r1, #1
 800192a:	2000      	movs	r0, #0
 800192c:	f7ff fb02 	bl	8000f34 <runMotors>
  {
 8001930:	e6e8      	b.n	8001704 <main+0x9c>
 8001932:	bf00      	nop
 8001934:	f3af 8000 	nop.w
 8001938:	ccccccce 	.word	0xccccccce
 800193c:	3fdccccc 	.word	0x3fdccccc
 8001940:	9999999a 	.word	0x9999999a
 8001944:	3fe19999 	.word	0x3fe19999
 8001948:	9999999a 	.word	0x9999999a
 800194c:	3fb99999 	.word	0x3fb99999
 8001950:	200002b4 	.word	0x200002b4
 8001954:	40012c00 	.word	0x40012c00
 8001958:	0800ab4c 	.word	0x0800ab4c
 800195c:	20000398 	.word	0x20000398
 8001960:	3ff00000 	.word	0x3ff00000
 8001964:	40590000 	.word	0x40590000
 8001968:	0800ab60 	.word	0x0800ab60

0800196c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b094      	sub	sp, #80	; 0x50
 8001970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001972:	f107 0318 	add.w	r3, r7, #24
 8001976:	2238      	movs	r2, #56	; 0x38
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f006 ff7b 	bl	8008876 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
 800198c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800198e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001992:	f003 f817 	bl	80049c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001996:	2302      	movs	r3, #2
 8001998:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800199a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019a0:	2340      	movs	r3, #64	; 0x40
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a4:	2302      	movs	r3, #2
 80019a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019a8:	2302      	movs	r3, #2
 80019aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80019ac:	2301      	movs	r3, #1
 80019ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 9;
 80019b0:	2309      	movs	r3, #9
 80019b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019b4:	2302      	movs	r3, #2
 80019b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019b8:	2302      	movs	r3, #2
 80019ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019bc:	2302      	movs	r3, #2
 80019be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c0:	f107 0318 	add.w	r3, r7, #24
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 f8b1 	bl	8004b2c <HAL_RCC_OscConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80019d0:	f000 fafc 	bl	8001fcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d4:	230f      	movs	r3, #15
 80019d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d8:	2303      	movs	r3, #3
 80019da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	2102      	movs	r1, #2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 fbae 	bl	8005150 <HAL_RCC_ClockConfig>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <SystemClock_Config+0x92>
  {
    Error_Handler();
 80019fa:	f000 fae7 	bl	8001fcc <Error_Handler>
  }
}
 80019fe:	bf00      	nop
 8001a00:	3750      	adds	r7, #80	; 0x50
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a0e:	463b      	mov	r3, r7
 8001a10:	2220      	movs	r2, #32
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f006 ff2e 	bl	8008876 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <MX_ADC2_Init+0xc0>)
 8001a1c:	4a2b      	ldr	r2, [pc, #172]	; (8001acc <MX_ADC2_Init+0xc4>)
 8001a1e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a20:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <MX_ADC2_Init+0xc0>)
 8001a22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a26:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001a28:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <MX_ADC2_Init+0xc0>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a2e:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <MX_ADC2_Init+0xc0>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <MX_ADC2_Init+0xc0>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a3a:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <MX_ADC2_Init+0xc0>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a40:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <MX_ADC2_Init+0xc0>)
 8001a42:	2204      	movs	r2, #4
 8001a44:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <MX_ADC2_Init+0xc0>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <MX_ADC2_Init+0xc0>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001a52:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <MX_ADC2_Init+0xc0>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <MX_ADC2_Init+0xc0>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a60:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <MX_ADC2_Init+0xc0>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a66:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <MX_ADC2_Init+0xc0>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001a6c:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <MX_ADC2_Init+0xc0>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <MX_ADC2_Init+0xc0>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <MX_ADC2_Init+0xc0>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001a82:	4811      	ldr	r0, [pc, #68]	; (8001ac8 <MX_ADC2_Init+0xc0>)
 8001a84:	f001 f870 	bl	8002b68 <HAL_ADC_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001a8e:	f000 fa9d 	bl	8001fcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <MX_ADC2_Init+0xc8>)
 8001a94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a96:	2306      	movs	r3, #6
 8001a98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a9e:	237f      	movs	r3, #127	; 0x7f
 8001aa0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001aaa:	463b      	mov	r3, r7
 8001aac:	4619      	mov	r1, r3
 8001aae:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <MX_ADC2_Init+0xc0>)
 8001ab0:	f001 f9de 	bl	8002e70 <HAL_ADC_ConfigChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001aba:	f000 fa87 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	3720      	adds	r7, #32
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200001f4 	.word	0x200001f4
 8001acc:	50000100 	.word	0x50000100
 8001ad0:	47520000 	.word	0x47520000

08001ad4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001ada:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <MX_I2C1_Init+0x78>)
 8001adc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001ae0:	4a1b      	ldr	r2, [pc, #108]	; (8001b50 <MX_I2C1_Init+0x7c>)
 8001ae2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aea:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b0e:	480e      	ldr	r0, [pc, #56]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001b10:	f002 f81c 	bl	8003b4c <HAL_I2C_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b1a:	f000 fa57 	bl	8001fcc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4809      	ldr	r0, [pc, #36]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001b22:	f002 feb7 	bl	8004894 <HAL_I2CEx_ConfigAnalogFilter>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b2c:	f000 fa4e 	bl	8001fcc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b30:	2100      	movs	r1, #0
 8001b32:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001b34:	f002 fef9 	bl	800492a <HAL_I2CEx_ConfigDigitalFilter>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b3e:	f000 fa45 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000260 	.word	0x20000260
 8001b4c:	40005400 	.word	0x40005400
 8001b50:	10808dd3 	.word	0x10808dd3

08001b54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b09c      	sub	sp, #112	; 0x70
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b5a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b68:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
 8001b84:	615a      	str	r2, [r3, #20]
 8001b86:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	2234      	movs	r2, #52	; 0x34
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f006 fe71 	bl	8008876 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b94:	4b57      	ldr	r3, [pc, #348]	; (8001cf4 <MX_TIM1_Init+0x1a0>)
 8001b96:	4a58      	ldr	r2, [pc, #352]	; (8001cf8 <MX_TIM1_Init+0x1a4>)
 8001b98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001b9a:	4b56      	ldr	r3, [pc, #344]	; (8001cf4 <MX_TIM1_Init+0x1a0>)
 8001b9c:	2247      	movs	r2, #71	; 0x47
 8001b9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba0:	4b54      	ldr	r3, [pc, #336]	; (8001cf4 <MX_TIM1_Init+0x1a0>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001ba6:	4b53      	ldr	r3, [pc, #332]	; (8001cf4 <MX_TIM1_Init+0x1a0>)
 8001ba8:	2263      	movs	r2, #99	; 0x63
 8001baa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bac:	4b51      	ldr	r3, [pc, #324]	; (8001cf4 <MX_TIM1_Init+0x1a0>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bb2:	4b50      	ldr	r3, [pc, #320]	; (8001cf4 <MX_TIM1_Init+0x1a0>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bb8:	4b4e      	ldr	r3, [pc, #312]	; (8001cf4 <MX_TIM1_Init+0x1a0>)
 8001bba:	2280      	movs	r2, #128	; 0x80
 8001bbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bbe:	484d      	ldr	r0, [pc, #308]	; (8001cf4 <MX_TIM1_Init+0x1a0>)
 8001bc0:	f003 fed2 	bl	8005968 <HAL_TIM_Base_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001bca:	f000 f9ff 	bl	8001fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bd4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4846      	ldr	r0, [pc, #280]	; (8001cf4 <MX_TIM1_Init+0x1a0>)
 8001bdc:	f004 fa7a 	bl	80060d4 <HAL_TIM_ConfigClockSource>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001be6:	f000 f9f1 	bl	8001fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bea:	4842      	ldr	r0, [pc, #264]	; (8001cf4 <MX_TIM1_Init+0x1a0>)
 8001bec:	f003 ff13 	bl	8005a16 <HAL_TIM_PWM_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001bf6:	f000 f9e9 	bl	8001fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4839      	ldr	r0, [pc, #228]	; (8001cf4 <MX_TIM1_Init+0x1a0>)
 8001c0e:	f005 f8cd 	bl	8006dac <HAL_TIMEx_MasterConfigSynchronization>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001c18:	f000 f9d8 	bl	8001fcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c1c:	2360      	movs	r3, #96	; 0x60
 8001c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c24:	2300      	movs	r3, #0
 8001c26:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c30:	2300      	movs	r3, #0
 8001c32:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c34:	2300      	movs	r3, #0
 8001c36:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	4619      	mov	r1, r3
 8001c40:	482c      	ldr	r0, [pc, #176]	; (8001cf4 <MX_TIM1_Init+0x1a0>)
 8001c42:	f004 f933 	bl	8005eac <HAL_TIM_PWM_ConfigChannel>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001c4c:	f000 f9be 	bl	8001fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c54:	2204      	movs	r2, #4
 8001c56:	4619      	mov	r1, r3
 8001c58:	4826      	ldr	r0, [pc, #152]	; (8001cf4 <MX_TIM1_Init+0x1a0>)
 8001c5a:	f004 f927 	bl	8005eac <HAL_TIM_PWM_ConfigChannel>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001c64:	f000 f9b2 	bl	8001fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c6c:	2208      	movs	r2, #8
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4820      	ldr	r0, [pc, #128]	; (8001cf4 <MX_TIM1_Init+0x1a0>)
 8001c72:	f004 f91b 	bl	8005eac <HAL_TIM_PWM_ConfigChannel>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001c7c:	f000 f9a6 	bl	8001fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c84:	220c      	movs	r2, #12
 8001c86:	4619      	mov	r1, r3
 8001c88:	481a      	ldr	r0, [pc, #104]	; (8001cf4 <MX_TIM1_Init+0x1a0>)
 8001c8a:	f004 f90f 	bl	8005eac <HAL_TIM_PWM_ConfigChannel>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001c94:	f000 f99a 	bl	8001fcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4807      	ldr	r0, [pc, #28]	; (8001cf4 <MX_TIM1_Init+0x1a0>)
 8001cd6:	f005 f8eb 	bl	8006eb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8001ce0:	f000 f974 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ce4:	4803      	ldr	r0, [pc, #12]	; (8001cf4 <MX_TIM1_Init+0x1a0>)
 8001ce6:	f000 fae7 	bl	80022b8 <HAL_TIM_MspPostInit>

}
 8001cea:	bf00      	nop
 8001cec:	3770      	adds	r7, #112	; 0x70
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200002b4 	.word	0x200002b4
 8001cf8:	40012c00 	.word	0x40012c00

08001cfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d0e:	463b      	mov	r3, r7
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
 8001d1c:	615a      	str	r2, [r3, #20]
 8001d1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d20:	4b22      	ldr	r3, [pc, #136]	; (8001dac <MX_TIM2_Init+0xb0>)
 8001d22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d28:	4b20      	ldr	r3, [pc, #128]	; (8001dac <MX_TIM2_Init+0xb0>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <MX_TIM2_Init+0xb0>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <MX_TIM2_Init+0xb0>)
 8001d36:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <MX_TIM2_Init+0xb0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <MX_TIM2_Init+0xb0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d48:	4818      	ldr	r0, [pc, #96]	; (8001dac <MX_TIM2_Init+0xb0>)
 8001d4a:	f003 fe64 	bl	8005a16 <HAL_TIM_PWM_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001d54:	f000 f93a 	bl	8001fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d60:	f107 031c 	add.w	r3, r7, #28
 8001d64:	4619      	mov	r1, r3
 8001d66:	4811      	ldr	r0, [pc, #68]	; (8001dac <MX_TIM2_Init+0xb0>)
 8001d68:	f005 f820 	bl	8006dac <HAL_TIMEx_MasterConfigSynchronization>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001d72:	f000 f92b 	bl	8001fcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d76:	2360      	movs	r3, #96	; 0x60
 8001d78:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d86:	463b      	mov	r3, r7
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4807      	ldr	r0, [pc, #28]	; (8001dac <MX_TIM2_Init+0xb0>)
 8001d8e:	f004 f88d 	bl	8005eac <HAL_TIM_PWM_ConfigChannel>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001d98:	f000 f918 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d9c:	4803      	ldr	r0, [pc, #12]	; (8001dac <MX_TIM2_Init+0xb0>)
 8001d9e:	f000 fa8b 	bl	80022b8 <HAL_TIM_MspPostInit>

}
 8001da2:	bf00      	nop
 8001da4:	3728      	adds	r7, #40	; 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000300 	.word	0x20000300

08001db0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dce:	4b26      	ldr	r3, [pc, #152]	; (8001e68 <MX_TIM3_Init+0xb8>)
 8001dd0:	4a26      	ldr	r2, [pc, #152]	; (8001e6c <MX_TIM3_Init+0xbc>)
 8001dd2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001dd4:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <MX_TIM3_Init+0xb8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dda:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <MX_TIM3_Init+0xb8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001de0:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <MX_TIM3_Init+0xb8>)
 8001de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001de6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de8:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <MX_TIM3_Init+0xb8>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dee:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <MX_TIM3_Init+0xb8>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001df4:	481c      	ldr	r0, [pc, #112]	; (8001e68 <MX_TIM3_Init+0xb8>)
 8001df6:	f003 ff65 	bl	8005cc4 <HAL_TIM_IC_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001e00:	f000 f8e4 	bl	8001fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	4815      	ldr	r0, [pc, #84]	; (8001e68 <MX_TIM3_Init+0xb8>)
 8001e14:	f004 ffca 	bl	8006dac <HAL_TIMEx_MasterConfigSynchronization>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001e1e:	f000 f8d5 	bl	8001fcc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e26:	2301      	movs	r3, #1
 8001e28:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	2200      	movs	r2, #0
 8001e36:	4619      	mov	r1, r3
 8001e38:	480b      	ldr	r0, [pc, #44]	; (8001e68 <MX_TIM3_Init+0xb8>)
 8001e3a:	f003 ff9a 	bl	8005d72 <HAL_TIM_IC_ConfigChannel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001e44:	f000 f8c2 	bl	8001fcc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	2204      	movs	r2, #4
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4806      	ldr	r0, [pc, #24]	; (8001e68 <MX_TIM3_Init+0xb8>)
 8001e50:	f003 ff8f 	bl	8005d72 <HAL_TIM_IC_ConfigChannel>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001e5a:	f000 f8b7 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e5e:	bf00      	nop
 8001e60:	3720      	adds	r7, #32
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2000034c 	.word	0x2000034c
 8001e6c:	40000400 	.word	0x40000400

08001e70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e74:	4b22      	ldr	r3, [pc, #136]	; (8001f00 <MX_USART2_UART_Init+0x90>)
 8001e76:	4a23      	ldr	r2, [pc, #140]	; (8001f04 <MX_USART2_UART_Init+0x94>)
 8001e78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e7a:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <MX_USART2_UART_Init+0x90>)
 8001e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e82:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <MX_USART2_UART_Init+0x90>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <MX_USART2_UART_Init+0x90>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <MX_USART2_UART_Init+0x90>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <MX_USART2_UART_Init+0x90>)
 8001e96:	220c      	movs	r2, #12
 8001e98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9a:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <MX_USART2_UART_Init+0x90>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea0:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <MX_USART2_UART_Init+0x90>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <MX_USART2_UART_Init+0x90>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <MX_USART2_UART_Init+0x90>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <MX_USART2_UART_Init+0x90>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eb8:	4811      	ldr	r0, [pc, #68]	; (8001f00 <MX_USART2_UART_Init+0x90>)
 8001eba:	f005 f885 	bl	8006fc8 <HAL_UART_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001ec4:	f000 f882 	bl	8001fcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ec8:	2100      	movs	r1, #0
 8001eca:	480d      	ldr	r0, [pc, #52]	; (8001f00 <MX_USART2_UART_Init+0x90>)
 8001ecc:	f005 fe7e 	bl	8007bcc <HAL_UARTEx_SetTxFifoThreshold>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001ed6:	f000 f879 	bl	8001fcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eda:	2100      	movs	r1, #0
 8001edc:	4808      	ldr	r0, [pc, #32]	; (8001f00 <MX_USART2_UART_Init+0x90>)
 8001ede:	f005 feb3 	bl	8007c48 <HAL_UARTEx_SetRxFifoThreshold>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ee8:	f000 f870 	bl	8001fcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001eec:	4804      	ldr	r0, [pc, #16]	; (8001f00 <MX_USART2_UART_Init+0x90>)
 8001eee:	f005 fe34 	bl	8007b5a <HAL_UARTEx_DisableFifoMode>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ef8:	f000 f868 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000398 	.word	0x20000398
 8001f04:	40004400 	.word	0x40004400

08001f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0e:	f107 030c 	add.w	r3, r7, #12
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
 8001f1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f1e:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <MX_GPIO_Init+0xbc>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	4a28      	ldr	r2, [pc, #160]	; (8001fc4 <MX_GPIO_Init+0xbc>)
 8001f24:	f043 0320 	orr.w	r3, r3, #32
 8001f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f2a:	4b26      	ldr	r3, [pc, #152]	; (8001fc4 <MX_GPIO_Init+0xbc>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	f003 0320 	and.w	r3, r3, #32
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <MX_GPIO_Init+0xbc>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3a:	4a22      	ldr	r2, [pc, #136]	; (8001fc4 <MX_GPIO_Init+0xbc>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <MX_GPIO_Init+0xbc>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <MX_GPIO_Init+0xbc>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	4a1c      	ldr	r2, [pc, #112]	; (8001fc4 <MX_GPIO_Init+0xbc>)
 8001f54:	f043 0302 	orr.w	r3, r3, #2
 8001f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <MX_GPIO_Init+0xbc>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LS_DIR_Pin|RS_DIR_Pin, GPIO_PIN_RESET);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2103      	movs	r1, #3
 8001f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f6e:	f001 fdd5 	bl	8003b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001f72:	2200      	movs	r2, #0
 8001f74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f78:	4813      	ldr	r0, [pc, #76]	; (8001fc8 <MX_GPIO_Init+0xc0>)
 8001f7a:	f001 fdcf 	bl	8003b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LS_DIR_Pin RS_DIR_Pin */
  GPIO_InitStruct.Pin = LS_DIR_Pin|RS_DIR_Pin;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f82:	2301      	movs	r3, #1
 8001f84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	4619      	mov	r1, r3
 8001f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f98:	f001 fc3e 	bl	8003818 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001fae:	f107 030c 	add.w	r3, r7, #12
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4804      	ldr	r0, [pc, #16]	; (8001fc8 <MX_GPIO_Init+0xc0>)
 8001fb6:	f001 fc2f 	bl	8003818 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fba:	bf00      	nop
 8001fbc:	3720      	adds	r7, #32
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	48000400 	.word	0x48000400

08001fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd0:	b672      	cpsid	i
}
 8001fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <Error_Handler+0x8>
	...

08001fd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <HAL_MspInit+0x44>)
 8001fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe2:	4a0e      	ldr	r2, [pc, #56]	; (800201c <HAL_MspInit+0x44>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6613      	str	r3, [r2, #96]	; 0x60
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <HAL_MspInit+0x44>)
 8001fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <HAL_MspInit+0x44>)
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffa:	4a08      	ldr	r2, [pc, #32]	; (800201c <HAL_MspInit+0x44>)
 8001ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002000:	6593      	str	r3, [r2, #88]	; 0x58
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_MspInit+0x44>)
 8002004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800200e:	f002 fd7d 	bl	8004b0c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000

08002020 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b09a      	sub	sp, #104	; 0x68
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002038:	f107 0310 	add.w	r3, r7, #16
 800203c:	2244      	movs	r2, #68	; 0x44
 800203e:	2100      	movs	r1, #0
 8002040:	4618      	mov	r0, r3
 8002042:	f006 fc18 	bl	8008876 <memset>
  if(hadc->Instance==ADC2)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a1e      	ldr	r2, [pc, #120]	; (80020c4 <HAL_ADC_MspInit+0xa4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d134      	bne.n	80020ba <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002050:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002054:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002056:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800205a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800205c:	f107 0310 	add.w	r3, r7, #16
 8002060:	4618      	mov	r0, r3
 8002062:	f003 fa91 	bl	8005588 <HAL_RCCEx_PeriphCLKConfig>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800206c:	f7ff ffae 	bl	8001fcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002070:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <HAL_ADC_MspInit+0xa8>)
 8002072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002074:	4a14      	ldr	r2, [pc, #80]	; (80020c8 <HAL_ADC_MspInit+0xa8>)
 8002076:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800207a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_ADC_MspInit+0xa8>)
 800207e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <HAL_ADC_MspInit+0xa8>)
 800208a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208c:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <HAL_ADC_MspInit+0xa8>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <HAL_ADC_MspInit+0xa8>)
 8002096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN17
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020a0:	2310      	movs	r3, #16
 80020a2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a4:	2303      	movs	r3, #3
 80020a6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020b0:	4619      	mov	r1, r3
 80020b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b6:	f001 fbaf 	bl	8003818 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80020ba:	bf00      	nop
 80020bc:	3768      	adds	r7, #104	; 0x68
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	50000100 	.word	0x50000100
 80020c8:	40021000 	.word	0x40021000

080020cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b09c      	sub	sp, #112	; 0x70
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020e4:	f107 0318 	add.w	r3, r7, #24
 80020e8:	2244      	movs	r2, #68	; 0x44
 80020ea:	2100      	movs	r1, #0
 80020ec:	4618      	mov	r0, r3
 80020ee:	f006 fbc2 	bl	8008876 <memset>
  if(hi2c->Instance==I2C1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a2d      	ldr	r2, [pc, #180]	; (80021ac <HAL_I2C_MspInit+0xe0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d153      	bne.n	80021a4 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020fc:	2340      	movs	r3, #64	; 0x40
 80020fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002100:	2300      	movs	r3, #0
 8002102:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002104:	f107 0318 	add.w	r3, r7, #24
 8002108:	4618      	mov	r0, r3
 800210a:	f003 fa3d 	bl	8005588 <HAL_RCCEx_PeriphCLKConfig>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002114:	f7ff ff5a 	bl	8001fcc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002118:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <HAL_I2C_MspInit+0xe4>)
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	4a24      	ldr	r2, [pc, #144]	; (80021b0 <HAL_I2C_MspInit+0xe4>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002124:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <HAL_I2C_MspInit+0xe4>)
 8002126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002130:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <HAL_I2C_MspInit+0xe4>)
 8002132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002134:	4a1e      	ldr	r2, [pc, #120]	; (80021b0 <HAL_I2C_MspInit+0xe4>)
 8002136:	f043 0302 	orr.w	r3, r3, #2
 800213a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800213c:	4b1c      	ldr	r3, [pc, #112]	; (80021b0 <HAL_I2C_MspInit+0xe4>)
 800213e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002148:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800214c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800214e:	2312      	movs	r3, #18
 8002150:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002152:	2301      	movs	r3, #1
 8002154:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002156:	2300      	movs	r3, #0
 8002158:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800215a:	2304      	movs	r3, #4
 800215c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002162:	4619      	mov	r1, r3
 8002164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002168:	f001 fb56 	bl	8003818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002170:	2312      	movs	r3, #18
 8002172:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002174:	2301      	movs	r3, #1
 8002176:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	2300      	movs	r3, #0
 800217a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800217c:	2304      	movs	r3, #4
 800217e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002180:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002184:	4619      	mov	r1, r3
 8002186:	480b      	ldr	r0, [pc, #44]	; (80021b4 <HAL_I2C_MspInit+0xe8>)
 8002188:	f001 fb46 	bl	8003818 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_I2C_MspInit+0xe4>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <HAL_I2C_MspInit+0xe4>)
 8002192:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002196:	6593      	str	r3, [r2, #88]	; 0x58
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_I2C_MspInit+0xe4>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021a4:	bf00      	nop
 80021a6:	3770      	adds	r7, #112	; 0x70
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40005400 	.word	0x40005400
 80021b0:	40021000 	.word	0x40021000
 80021b4:	48000400 	.word	0x48000400

080021b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <HAL_TIM_Base_MspInit+0x38>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d10b      	bne.n	80021e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <HAL_TIM_Base_MspInit+0x3c>)
 80021cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ce:	4a09      	ldr	r2, [pc, #36]	; (80021f4 <HAL_TIM_Base_MspInit+0x3c>)
 80021d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021d4:	6613      	str	r3, [r2, #96]	; 0x60
 80021d6:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <HAL_TIM_Base_MspInit+0x3c>)
 80021d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40012c00 	.word	0x40012c00
 80021f4:	40021000 	.word	0x40021000

080021f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002208:	d10b      	bne.n	8002222 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_TIM_PWM_MspInit+0x38>)
 800220c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220e:	4a08      	ldr	r2, [pc, #32]	; (8002230 <HAL_TIM_PWM_MspInit+0x38>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6593      	str	r3, [r2, #88]	; 0x58
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_TIM_PWM_MspInit+0x38>)
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000

08002234 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a17      	ldr	r2, [pc, #92]	; (80022b0 <HAL_TIM_IC_MspInit+0x7c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d128      	bne.n	80022a8 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002256:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <HAL_TIM_IC_MspInit+0x80>)
 8002258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225a:	4a16      	ldr	r2, [pc, #88]	; (80022b4 <HAL_TIM_IC_MspInit+0x80>)
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	6593      	str	r3, [r2, #88]	; 0x58
 8002262:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <HAL_TIM_IC_MspInit+0x80>)
 8002264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226e:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_TIM_IC_MspInit+0x80>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002272:	4a10      	ldr	r2, [pc, #64]	; (80022b4 <HAL_TIM_IC_MspInit+0x80>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <HAL_TIM_IC_MspInit+0x80>)
 800227c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_R_Pin|ENC_L_Pin;
 8002286:	23c0      	movs	r3, #192	; 0xc0
 8002288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228a:	2302      	movs	r3, #2
 800228c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002292:	2300      	movs	r3, #0
 8002294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002296:	2302      	movs	r3, #2
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	4619      	mov	r1, r3
 80022a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a4:	f001 fab8 	bl	8003818 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022a8:	bf00      	nop
 80022aa:	3728      	adds	r7, #40	; 0x28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40000400 	.word	0x40000400
 80022b4:	40021000 	.word	0x40021000

080022b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	; 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a2c      	ldr	r2, [pc, #176]	; (8002388 <HAL_TIM_MspPostInit+0xd0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d130      	bne.n	800233c <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022da:	4b2c      	ldr	r3, [pc, #176]	; (800238c <HAL_TIM_MspPostInit+0xd4>)
 80022dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022de:	4a2b      	ldr	r2, [pc, #172]	; (800238c <HAL_TIM_MspPostInit+0xd4>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022e6:	4b29      	ldr	r3, [pc, #164]	; (800238c <HAL_TIM_MspPostInit+0xd4>)
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = RS_M2_Pin|RS_M1_Pin|LS_M2_Pin;
 80022f2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80022f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002300:	2300      	movs	r3, #0
 8002302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002304:	2306      	movs	r3, #6
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	4619      	mov	r1, r3
 800230e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002312:	f001 fa81 	bl	8003818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LS_M1_Pin;
 8002316:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800231a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002324:	2300      	movs	r3, #0
 8002326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8002328:	230b      	movs	r3, #11
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LS_M1_GPIO_Port, &GPIO_InitStruct);
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	4619      	mov	r1, r3
 8002332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002336:	f001 fa6f 	bl	8003818 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800233a:	e021      	b.n	8002380 <HAL_TIM_MspPostInit+0xc8>
  else if(htim->Instance==TIM2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002344:	d11c      	bne.n	8002380 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_TIM_MspPostInit+0xd4>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234a:	4a10      	ldr	r2, [pc, #64]	; (800238c <HAL_TIM_MspPostInit+0xd4>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_TIM_MspPostInit+0xd4>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_Pin;
 800235e:	2320      	movs	r3, #32
 8002360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800236e:	2301      	movs	r3, #1
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8002372:	f107 0314 	add.w	r3, r7, #20
 8002376:	4619      	mov	r1, r3
 8002378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800237c:	f001 fa4c 	bl	8003818 <HAL_GPIO_Init>
}
 8002380:	bf00      	nop
 8002382:	3728      	adds	r7, #40	; 0x28
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40012c00 	.word	0x40012c00
 800238c:	40021000 	.word	0x40021000

08002390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b09a      	sub	sp, #104	; 0x68
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023a8:	f107 0310 	add.w	r3, r7, #16
 80023ac:	2244      	movs	r2, #68	; 0x44
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f006 fa60 	bl	8008876 <memset>
  if(huart->Instance==USART2)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a1f      	ldr	r2, [pc, #124]	; (8002438 <HAL_UART_MspInit+0xa8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d136      	bne.n	800242e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023c0:	2302      	movs	r3, #2
 80023c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023c8:	f107 0310 	add.w	r3, r7, #16
 80023cc:	4618      	mov	r0, r3
 80023ce:	f003 f8db 	bl	8005588 <HAL_RCCEx_PeriphCLKConfig>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023d8:	f7ff fdf8 	bl	8001fcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023dc:	4b17      	ldr	r3, [pc, #92]	; (800243c <HAL_UART_MspInit+0xac>)
 80023de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e0:	4a16      	ldr	r2, [pc, #88]	; (800243c <HAL_UART_MspInit+0xac>)
 80023e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e6:	6593      	str	r3, [r2, #88]	; 0x58
 80023e8:	4b14      	ldr	r3, [pc, #80]	; (800243c <HAL_UART_MspInit+0xac>)
 80023ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <HAL_UART_MspInit+0xac>)
 80023f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f8:	4a10      	ldr	r2, [pc, #64]	; (800243c <HAL_UART_MspInit+0xac>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002400:	4b0e      	ldr	r3, [pc, #56]	; (800243c <HAL_UART_MspInit+0xac>)
 8002402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800240c:	230c      	movs	r3, #12
 800240e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002410:	2302      	movs	r3, #2
 8002412:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800241c:	2307      	movs	r3, #7
 800241e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002420:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002424:	4619      	mov	r1, r3
 8002426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800242a:	f001 f9f5 	bl	8003818 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800242e:	bf00      	nop
 8002430:	3768      	adds	r7, #104	; 0x68
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40004400 	.word	0x40004400
 800243c:	40021000 	.word	0x40021000

08002440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002444:	e7fe      	b.n	8002444 <NMI_Handler+0x4>

08002446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800244a:	e7fe      	b.n	800244a <HardFault_Handler+0x4>

0800244c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002450:	e7fe      	b.n	8002450 <MemManage_Handler+0x4>

08002452 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002456:	e7fe      	b.n	8002456 <BusFault_Handler+0x4>

08002458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800245c:	e7fe      	b.n	800245c <UsageFault_Handler+0x4>

0800245e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800248c:	f000 f956 	bl	800273c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002490:	bf00      	nop
 8002492:	bd80      	pop	{r7, pc}

08002494 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return 1;
 8002498:	2301      	movs	r3, #1
}
 800249a:	4618      	mov	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <_kill>:

int _kill(int pid, int sig)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024ae:	f006 fa35 	bl	800891c <__errno>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2216      	movs	r2, #22
 80024b6:	601a      	str	r2, [r3, #0]
  return -1;
 80024b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <_exit>:

void _exit (int status)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024cc:	f04f 31ff 	mov.w	r1, #4294967295
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff ffe7 	bl	80024a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024d6:	e7fe      	b.n	80024d6 <_exit+0x12>

080024d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	e00a      	b.n	8002500 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024ea:	f3af 8000 	nop.w
 80024ee:	4601      	mov	r1, r0
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	60ba      	str	r2, [r7, #8]
 80024f6:	b2ca      	uxtb	r2, r1
 80024f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	3301      	adds	r3, #1
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	dbf0      	blt.n	80024ea <_read+0x12>
  }

  return len;
 8002508:	687b      	ldr	r3, [r7, #4]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b086      	sub	sp, #24
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	e009      	b.n	8002538 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	60ba      	str	r2, [r7, #8]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	3301      	adds	r3, #1
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	429a      	cmp	r2, r3
 800253e:	dbf1      	blt.n	8002524 <_write+0x12>
  }
  return len;
 8002540:	687b      	ldr	r3, [r7, #4]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <_close>:

int _close(int file)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002552:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002572:	605a      	str	r2, [r3, #4]
  return 0;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <_isatty>:

int _isatty(int file)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800258a:	2301      	movs	r3, #1
}
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025bc:	4a14      	ldr	r2, [pc, #80]	; (8002610 <_sbrk+0x5c>)
 80025be:	4b15      	ldr	r3, [pc, #84]	; (8002614 <_sbrk+0x60>)
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c8:	4b13      	ldr	r3, [pc, #76]	; (8002618 <_sbrk+0x64>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d102      	bne.n	80025d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025d0:	4b11      	ldr	r3, [pc, #68]	; (8002618 <_sbrk+0x64>)
 80025d2:	4a12      	ldr	r2, [pc, #72]	; (800261c <_sbrk+0x68>)
 80025d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025d6:	4b10      	ldr	r3, [pc, #64]	; (8002618 <_sbrk+0x64>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d207      	bcs.n	80025f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025e4:	f006 f99a 	bl	800891c <__errno>
 80025e8:	4603      	mov	r3, r0
 80025ea:	220c      	movs	r2, #12
 80025ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ee:	f04f 33ff 	mov.w	r3, #4294967295
 80025f2:	e009      	b.n	8002608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <_sbrk+0x64>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <_sbrk+0x64>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	4a05      	ldr	r2, [pc, #20]	; (8002618 <_sbrk+0x64>)
 8002604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002606:	68fb      	ldr	r3, [r7, #12]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20008000 	.word	0x20008000
 8002614:	00000400 	.word	0x00000400
 8002618:	2000042c 	.word	0x2000042c
 800261c:	20000580 	.word	0x20000580

08002620 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <SystemInit+0x20>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262a:	4a05      	ldr	r2, [pc, #20]	; (8002640 <SystemInit+0x20>)
 800262c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002630:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002644:	480d      	ldr	r0, [pc, #52]	; (800267c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002646:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002648:	f7ff ffea 	bl	8002620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800264c:	480c      	ldr	r0, [pc, #48]	; (8002680 <LoopForever+0x6>)
  ldr r1, =_edata
 800264e:	490d      	ldr	r1, [pc, #52]	; (8002684 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002650:	4a0d      	ldr	r2, [pc, #52]	; (8002688 <LoopForever+0xe>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002654:	e002      	b.n	800265c <LoopCopyDataInit>

08002656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800265a:	3304      	adds	r3, #4

0800265c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800265c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800265e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002660:	d3f9      	bcc.n	8002656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002662:	4a0a      	ldr	r2, [pc, #40]	; (800268c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002664:	4c0a      	ldr	r4, [pc, #40]	; (8002690 <LoopForever+0x16>)
  movs r3, #0
 8002666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002668:	e001      	b.n	800266e <LoopFillZerobss>

0800266a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800266a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800266c:	3204      	adds	r2, #4

0800266e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800266e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002670:	d3fb      	bcc.n	800266a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002672:	f006 f959 	bl	8008928 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002676:	f7fe fff7 	bl	8001668 <main>

0800267a <LoopForever>:

LoopForever:
    b LoopForever
 800267a:	e7fe      	b.n	800267a <LoopForever>
  ldr   r0, =_estack
 800267c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002684:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002688:	0800af4c 	.word	0x0800af4c
  ldr r2, =_sbss
 800268c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002690:	20000580 	.word	0x20000580

08002694 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002694:	e7fe      	b.n	8002694 <ADC1_2_IRQHandler>

08002696 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a0:	2003      	movs	r0, #3
 80026a2:	f001 f887 	bl	80037b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026a6:	2000      	movs	r0, #0
 80026a8:	f000 f80e 	bl	80026c8 <HAL_InitTick>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	71fb      	strb	r3, [r7, #7]
 80026b6:	e001      	b.n	80026bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026b8:	f7ff fc8e 	bl	8001fd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026bc:	79fb      	ldrb	r3, [r7, #7]

}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80026d4:	4b16      	ldr	r3, [pc, #88]	; (8002730 <HAL_InitTick+0x68>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d022      	beq.n	8002722 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <HAL_InitTick+0x6c>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <HAL_InitTick+0x68>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80026ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f0:	4618      	mov	r0, r3
 80026f2:	f001 f884 	bl	80037fe <HAL_SYSTICK_Config>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10f      	bne.n	800271c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b0f      	cmp	r3, #15
 8002700:	d809      	bhi.n	8002716 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002702:	2200      	movs	r2, #0
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	f04f 30ff 	mov.w	r0, #4294967295
 800270a:	f001 f85e 	bl	80037ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <HAL_InitTick+0x70>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	e007      	b.n	8002726 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
 800271a:	e004      	b.n	8002726 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	73fb      	strb	r3, [r7, #15]
 8002720:	e001      	b.n	8002726 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002726:	7bfb      	ldrb	r3, [r7, #15]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	2000000c 	.word	0x2000000c
 8002734:	20000004 	.word	0x20000004
 8002738:	20000008 	.word	0x20000008

0800273c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_IncTick+0x1c>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_IncTick+0x20>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4413      	add	r3, r2
 800274a:	4a03      	ldr	r2, [pc, #12]	; (8002758 <HAL_IncTick+0x1c>)
 800274c:	6013      	str	r3, [r2, #0]
}
 800274e:	bf00      	nop
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	20000430 	.word	0x20000430
 800275c:	2000000c 	.word	0x2000000c

08002760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return uwTick;
 8002764:	4b03      	ldr	r3, [pc, #12]	; (8002774 <HAL_GetTick+0x14>)
 8002766:	681b      	ldr	r3, [r3, #0]
}
 8002768:	4618      	mov	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	20000430 	.word	0x20000430

08002778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002780:	f7ff ffee 	bl	8002760 <HAL_GetTick>
 8002784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002790:	d004      	beq.n	800279c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HAL_Delay+0x40>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4413      	add	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800279c:	bf00      	nop
 800279e:	f7ff ffdf 	bl	8002760 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d8f7      	bhi.n	800279e <HAL_Delay+0x26>
  {
  }
}
 80027ae:	bf00      	nop
 80027b0:	bf00      	nop
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	2000000c 	.word	0x2000000c

080027bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	609a      	str	r2, [r3, #8]
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	609a      	str	r2, [r3, #8]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	3360      	adds	r3, #96	; 0x60
 8002836:	461a      	mov	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b08      	ldr	r3, [pc, #32]	; (8002868 <LL_ADC_SetOffset+0x44>)
 8002846:	4013      	ands	r3, r2
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	4313      	orrs	r3, r2
 8002854:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800285c:	bf00      	nop
 800285e:	371c      	adds	r7, #28
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	03fff000 	.word	0x03fff000

0800286c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3360      	adds	r3, #96	; 0x60
 800287a:	461a      	mov	r2, r3
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	3360      	adds	r3, #96	; 0x60
 80028a8:	461a      	mov	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	431a      	orrs	r2, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028c2:	bf00      	nop
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b087      	sub	sp, #28
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	3360      	adds	r3, #96	; 0x60
 80028de:	461a      	mov	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80028f8:	bf00      	nop
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	3360      	adds	r3, #96	; 0x60
 8002914:	461a      	mov	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	431a      	orrs	r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800292e:	bf00      	nop
 8002930:	371c      	adds	r7, #28
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	615a      	str	r2, [r3, #20]
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	3330      	adds	r3, #48	; 0x30
 8002970:	461a      	mov	r2, r3
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	f003 030c 	and.w	r3, r3, #12
 800297c:	4413      	add	r3, r2
 800297e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	211f      	movs	r1, #31
 800298c:	fa01 f303 	lsl.w	r3, r1, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	401a      	ands	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	0e9b      	lsrs	r3, r3, #26
 8002998:	f003 011f 	and.w	r1, r3, #31
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 031f 	and.w	r3, r3, #31
 80029a2:	fa01 f303 	lsl.w	r3, r1, r3
 80029a6:	431a      	orrs	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029ac:	bf00      	nop
 80029ae:	371c      	adds	r7, #28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	3314      	adds	r3, #20
 80029c8:	461a      	mov	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	0e5b      	lsrs	r3, r3, #25
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	4413      	add	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	0d1b      	lsrs	r3, r3, #20
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	2107      	movs	r1, #7
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	401a      	ands	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	0d1b      	lsrs	r3, r3, #20
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	fa01 f303 	lsl.w	r3, r1, r3
 80029fc:	431a      	orrs	r2, r3
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a02:	bf00      	nop
 8002a04:	371c      	adds	r7, #28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f003 0318 	and.w	r3, r3, #24
 8002a32:	4908      	ldr	r1, [pc, #32]	; (8002a54 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a34:	40d9      	lsrs	r1, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	400b      	ands	r3, r1
 8002a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a46:	bf00      	nop
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	0007ffff 	.word	0x0007ffff

08002a58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002a68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6093      	str	r3, [r2, #8]
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a90:	d101      	bne.n	8002a96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002ab4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ab8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002adc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ae0:	d101      	bne.n	8002ae6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <LL_ADC_IsEnabled+0x18>
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e000      	b.n	8002b0e <LL_ADC_IsEnabled+0x1a>
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d101      	bne.n	8002b32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d101      	bne.n	8002b58 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b089      	sub	sp, #36	; 0x24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e167      	b.n	8002e52 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d109      	bne.n	8002ba4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff fa45 	bl	8002020 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff67 	bl	8002a7c <LL_ADC_IsDeepPowerDownEnabled>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d004      	beq.n	8002bbe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff4d 	bl	8002a58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ff82 	bl	8002acc <LL_ADC_IsInternalRegulatorEnabled>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d115      	bne.n	8002bfa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff ff66 	bl	8002aa4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bd8:	4ba0      	ldr	r3, [pc, #640]	; (8002e5c <HAL_ADC_Init+0x2f4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	099b      	lsrs	r3, r3, #6
 8002bde:	4aa0      	ldr	r2, [pc, #640]	; (8002e60 <HAL_ADC_Init+0x2f8>)
 8002be0:	fba2 2303 	umull	r2, r3, r2, r3
 8002be4:	099b      	lsrs	r3, r3, #6
 8002be6:	3301      	adds	r3, #1
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bec:	e002      	b.n	8002bf4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f9      	bne.n	8002bee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff ff64 	bl	8002acc <LL_ADC_IsInternalRegulatorEnabled>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10d      	bne.n	8002c26 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0e:	f043 0210 	orr.w	r2, r3, #16
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1a:	f043 0201 	orr.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff ff75 	bl	8002b1a <LL_ADC_REG_IsConversionOngoing>
 8002c30:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f040 8100 	bne.w	8002e40 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f040 80fc 	bne.w	8002e40 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c50:	f043 0202 	orr.w	r2, r3, #2
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff ff49 	bl	8002af4 <LL_ADC_IsEnabled>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d111      	bne.n	8002c8c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c68:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c6c:	f7ff ff42 	bl	8002af4 <LL_ADC_IsEnabled>
 8002c70:	4604      	mov	r4, r0
 8002c72:	487c      	ldr	r0, [pc, #496]	; (8002e64 <HAL_ADC_Init+0x2fc>)
 8002c74:	f7ff ff3e 	bl	8002af4 <LL_ADC_IsEnabled>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	4323      	orrs	r3, r4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d105      	bne.n	8002c8c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	4619      	mov	r1, r3
 8002c86:	4878      	ldr	r0, [pc, #480]	; (8002e68 <HAL_ADC_Init+0x300>)
 8002c88:	f7ff fd98 	bl	80027bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	7f5b      	ldrb	r3, [r3, #29]
 8002c90:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c96:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002c9c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002ca2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002caa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d106      	bne.n	8002cc8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	045b      	lsls	r3, r3, #17
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d009      	beq.n	8002ce4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	4b60      	ldr	r3, [pc, #384]	; (8002e6c <HAL_ADC_Init+0x304>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	69b9      	ldr	r1, [r7, #24]
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff ff14 	bl	8002b40 <LL_ADC_INJ_IsConversionOngoing>
 8002d18:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d16d      	bne.n	8002dfc <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d16a      	bne.n	8002dfc <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d2a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d32:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d42:	f023 0302 	bic.w	r3, r3, #2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	69b9      	ldr	r1, [r7, #24]
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d017      	beq.n	8002d88 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691a      	ldr	r2, [r3, #16]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d66:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d70:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6911      	ldr	r1, [r2, #16]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	430b      	orrs	r3, r1
 8002d82:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002d86:	e013      	b.n	8002db0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d96:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002da8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d118      	bne.n	8002dec <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002dc4:	f023 0304 	bic.w	r3, r3, #4
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002dd0:	4311      	orrs	r1, r2
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002dd6:	4311      	orrs	r1, r2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0201 	orr.w	r2, r2, #1
 8002de8:	611a      	str	r2, [r3, #16]
 8002dea:	e007      	b.n	8002dfc <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0201 	bic.w	r2, r2, #1
 8002dfa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d10c      	bne.n	8002e1e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	f023 010f 	bic.w	r1, r3, #15
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	1e5a      	subs	r2, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e1c:	e007      	b.n	8002e2e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 020f 	bic.w	r2, r2, #15
 8002e2c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e32:	f023 0303 	bic.w	r3, r3, #3
 8002e36:	f043 0201 	orr.w	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e3e:	e007      	b.n	8002e50 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	f043 0210 	orr.w	r2, r3, #16
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e50:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3724      	adds	r7, #36	; 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd90      	pop	{r4, r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000004 	.word	0x20000004
 8002e60:	053e2d63 	.word	0x053e2d63
 8002e64:	50000100 	.word	0x50000100
 8002e68:	50000300 	.word	0x50000300
 8002e6c:	fff04007 	.word	0xfff04007

08002e70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b0b6      	sub	sp, #216	; 0xd8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x22>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e3c8      	b.n	8003624 <HAL_ADC_ConfigChannel+0x7b4>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fe3b 	bl	8002b1a <LL_ADC_REG_IsConversionOngoing>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f040 83ad 	bne.w	8003606 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	6859      	ldr	r1, [r3, #4]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	f7ff fd51 	bl	8002960 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fe29 	bl	8002b1a <LL_ADC_REG_IsConversionOngoing>
 8002ec8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fe35 	bl	8002b40 <LL_ADC_INJ_IsConversionOngoing>
 8002ed6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002eda:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f040 81d9 	bne.w	8003296 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ee4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f040 81d4 	bne.w	8003296 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ef6:	d10f      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2200      	movs	r2, #0
 8002f02:	4619      	mov	r1, r3
 8002f04:	f7ff fd58 	bl	80029b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fd12 	bl	800293a <LL_ADC_SetSamplingTimeCommonConfig>
 8002f16:	e00e      	b.n	8002f36 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6818      	ldr	r0, [r3, #0]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	6819      	ldr	r1, [r3, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	461a      	mov	r2, r3
 8002f26:	f7ff fd47 	bl	80029b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fd02 	bl	800293a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	08db      	lsrs	r3, r3, #3
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d022      	beq.n	8002f9e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	6919      	ldr	r1, [r3, #16]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f68:	f7ff fc5c 	bl	8002824 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	6919      	ldr	r1, [r3, #16]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	f7ff fca8 	bl	80028ce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d102      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x124>
 8002f8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f92:	e000      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x126>
 8002f94:	2300      	movs	r3, #0
 8002f96:	461a      	mov	r2, r3
 8002f98:	f7ff fcb4 	bl	8002904 <LL_ADC_SetOffsetSaturation>
 8002f9c:	e17b      	b.n	8003296 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fc61 	bl	800286c <LL_ADC_GetOffsetChannel>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10a      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x15a>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fc56 	bl	800286c <LL_ADC_GetOffsetChannel>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	0e9b      	lsrs	r3, r3, #26
 8002fc4:	f003 021f 	and.w	r2, r3, #31
 8002fc8:	e01e      	b.n	8003008 <HAL_ADC_ConfigChannel+0x198>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff fc4b 	bl	800286c <LL_ADC_GetOffsetChannel>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fe0:	fa93 f3a3 	rbit	r3, r3
 8002fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fe8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002fec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ff0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002ff8:	2320      	movs	r3, #32
 8002ffa:	e004      	b.n	8003006 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002ffc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003000:	fab3 f383 	clz	r3, r3
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x1b0>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	0e9b      	lsrs	r3, r3, #26
 800301a:	f003 031f 	and.w	r3, r3, #31
 800301e:	e018      	b.n	8003052 <HAL_ADC_ConfigChannel+0x1e2>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003028:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800302c:	fa93 f3a3 	rbit	r3, r3
 8003030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800303c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003044:	2320      	movs	r3, #32
 8003046:	e004      	b.n	8003052 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003048:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800304c:	fab3 f383 	clz	r3, r3
 8003050:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003052:	429a      	cmp	r2, r3
 8003054:	d106      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2200      	movs	r2, #0
 800305c:	2100      	movs	r1, #0
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff fc1a 	bl	8002898 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2101      	movs	r1, #1
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fbfe 	bl	800286c <LL_ADC_GetOffsetChannel>
 8003070:	4603      	mov	r3, r0
 8003072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10a      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x220>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2101      	movs	r1, #1
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fbf3 	bl	800286c <LL_ADC_GetOffsetChannel>
 8003086:	4603      	mov	r3, r0
 8003088:	0e9b      	lsrs	r3, r3, #26
 800308a:	f003 021f 	and.w	r2, r3, #31
 800308e:	e01e      	b.n	80030ce <HAL_ADC_ConfigChannel+0x25e>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2101      	movs	r1, #1
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fbe8 	bl	800286c <LL_ADC_GetOffsetChannel>
 800309c:	4603      	mov	r3, r0
 800309e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030a6:	fa93 f3a3 	rbit	r3, r3
 80030aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80030ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80030b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80030be:	2320      	movs	r3, #32
 80030c0:	e004      	b.n	80030cc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80030c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030c6:	fab3 f383 	clz	r3, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d105      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x276>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	0e9b      	lsrs	r3, r3, #26
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	e018      	b.n	8003118 <HAL_ADC_ConfigChannel+0x2a8>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030f2:	fa93 f3a3 	rbit	r3, r3
 80030f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80030fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003102:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800310a:	2320      	movs	r3, #32
 800310c:	e004      	b.n	8003118 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800310e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003112:	fab3 f383 	clz	r3, r3
 8003116:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003118:	429a      	cmp	r2, r3
 800311a:	d106      	bne.n	800312a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2200      	movs	r2, #0
 8003122:	2101      	movs	r1, #1
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fbb7 	bl	8002898 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2102      	movs	r1, #2
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fb9b 	bl	800286c <LL_ADC_GetOffsetChannel>
 8003136:	4603      	mov	r3, r0
 8003138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10a      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x2e6>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2102      	movs	r1, #2
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fb90 	bl	800286c <LL_ADC_GetOffsetChannel>
 800314c:	4603      	mov	r3, r0
 800314e:	0e9b      	lsrs	r3, r3, #26
 8003150:	f003 021f 	and.w	r2, r3, #31
 8003154:	e01e      	b.n	8003194 <HAL_ADC_ConfigChannel+0x324>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2102      	movs	r1, #2
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fb85 	bl	800286c <LL_ADC_GetOffsetChannel>
 8003162:	4603      	mov	r3, r0
 8003164:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003168:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800316c:	fa93 f3a3 	rbit	r3, r3
 8003170:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003174:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003178:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800317c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003184:	2320      	movs	r3, #32
 8003186:	e004      	b.n	8003192 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003188:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800318c:	fab3 f383 	clz	r3, r3
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319c:	2b00      	cmp	r3, #0
 800319e:	d105      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x33c>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	0e9b      	lsrs	r3, r3, #26
 80031a6:	f003 031f 	and.w	r3, r3, #31
 80031aa:	e016      	b.n	80031da <HAL_ADC_ConfigChannel+0x36a>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031b8:	fa93 f3a3 	rbit	r3, r3
 80031bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80031be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80031c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80031cc:	2320      	movs	r3, #32
 80031ce:	e004      	b.n	80031da <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80031d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031d4:	fab3 f383 	clz	r3, r3
 80031d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031da:	429a      	cmp	r2, r3
 80031dc:	d106      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2200      	movs	r2, #0
 80031e4:	2102      	movs	r1, #2
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fb56 	bl	8002898 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2103      	movs	r1, #3
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fb3a 	bl	800286c <LL_ADC_GetOffsetChannel>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10a      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x3a8>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2103      	movs	r1, #3
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fb2f 	bl	800286c <LL_ADC_GetOffsetChannel>
 800320e:	4603      	mov	r3, r0
 8003210:	0e9b      	lsrs	r3, r3, #26
 8003212:	f003 021f 	and.w	r2, r3, #31
 8003216:	e017      	b.n	8003248 <HAL_ADC_ConfigChannel+0x3d8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2103      	movs	r1, #3
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fb24 	bl	800286c <LL_ADC_GetOffsetChannel>
 8003224:	4603      	mov	r3, r0
 8003226:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800322a:	fa93 f3a3 	rbit	r3, r3
 800322e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003230:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003232:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800323a:	2320      	movs	r3, #32
 800323c:	e003      	b.n	8003246 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800323e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003240:	fab3 f383 	clz	r3, r3
 8003244:	b2db      	uxtb	r3, r3
 8003246:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x3f0>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	0e9b      	lsrs	r3, r3, #26
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	e011      	b.n	8003284 <HAL_ADC_ConfigChannel+0x414>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003268:	fa93 f3a3 	rbit	r3, r3
 800326c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800326e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003270:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003278:	2320      	movs	r3, #32
 800327a:	e003      	b.n	8003284 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800327c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003284:	429a      	cmp	r2, r3
 8003286:	d106      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2200      	movs	r2, #0
 800328e:	2103      	movs	r1, #3
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fb01 	bl	8002898 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fc2a 	bl	8002af4 <LL_ADC_IsEnabled>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f040 8140 	bne.w	8003528 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6819      	ldr	r1, [r3, #0]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	461a      	mov	r2, r3
 80032b6:	f7ff fbab 	bl	8002a10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	4a8f      	ldr	r2, [pc, #572]	; (80034fc <HAL_ADC_ConfigChannel+0x68c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	f040 8131 	bne.w	8003528 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10b      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x47e>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	0e9b      	lsrs	r3, r3, #26
 80032dc:	3301      	adds	r3, #1
 80032de:	f003 031f 	and.w	r3, r3, #31
 80032e2:	2b09      	cmp	r3, #9
 80032e4:	bf94      	ite	ls
 80032e6:	2301      	movls	r3, #1
 80032e8:	2300      	movhi	r3, #0
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	e019      	b.n	8003322 <HAL_ADC_ConfigChannel+0x4b2>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f6:	fa93 f3a3 	rbit	r3, r3
 80032fa:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80032fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032fe:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003300:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003306:	2320      	movs	r3, #32
 8003308:	e003      	b.n	8003312 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800330a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800330c:	fab3 f383 	clz	r3, r3
 8003310:	b2db      	uxtb	r3, r3
 8003312:	3301      	adds	r3, #1
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	2b09      	cmp	r3, #9
 800331a:	bf94      	ite	ls
 800331c:	2301      	movls	r3, #1
 800331e:	2300      	movhi	r3, #0
 8003320:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003322:	2b00      	cmp	r3, #0
 8003324:	d079      	beq.n	800341a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800332e:	2b00      	cmp	r3, #0
 8003330:	d107      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x4d2>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	0e9b      	lsrs	r3, r3, #26
 8003338:	3301      	adds	r3, #1
 800333a:	069b      	lsls	r3, r3, #26
 800333c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003340:	e015      	b.n	800336e <HAL_ADC_ConfigChannel+0x4fe>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800334a:	fa93 f3a3 	rbit	r3, r3
 800334e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003352:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800335a:	2320      	movs	r3, #32
 800335c:	e003      	b.n	8003366 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800335e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003360:	fab3 f383 	clz	r3, r3
 8003364:	b2db      	uxtb	r3, r3
 8003366:	3301      	adds	r3, #1
 8003368:	069b      	lsls	r3, r3, #26
 800336a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003376:	2b00      	cmp	r3, #0
 8003378:	d109      	bne.n	800338e <HAL_ADC_ConfigChannel+0x51e>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	0e9b      	lsrs	r3, r3, #26
 8003380:	3301      	adds	r3, #1
 8003382:	f003 031f 	and.w	r3, r3, #31
 8003386:	2101      	movs	r1, #1
 8003388:	fa01 f303 	lsl.w	r3, r1, r3
 800338c:	e017      	b.n	80033be <HAL_ADC_ConfigChannel+0x54e>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800339c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800339e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80033a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80033a6:	2320      	movs	r3, #32
 80033a8:	e003      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80033aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ac:	fab3 f383 	clz	r3, r3
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	3301      	adds	r3, #1
 80033b4:	f003 031f 	and.w	r3, r3, #31
 80033b8:	2101      	movs	r1, #1
 80033ba:	fa01 f303 	lsl.w	r3, r1, r3
 80033be:	ea42 0103 	orr.w	r1, r2, r3
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10a      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x574>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	0e9b      	lsrs	r3, r3, #26
 80033d4:	3301      	adds	r3, #1
 80033d6:	f003 021f 	and.w	r2, r3, #31
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	051b      	lsls	r3, r3, #20
 80033e2:	e018      	b.n	8003416 <HAL_ADC_ConfigChannel+0x5a6>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ec:	fa93 f3a3 	rbit	r3, r3
 80033f0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80033f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80033f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80033fc:	2320      	movs	r3, #32
 80033fe:	e003      	b.n	8003408 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003402:	fab3 f383 	clz	r3, r3
 8003406:	b2db      	uxtb	r3, r3
 8003408:	3301      	adds	r3, #1
 800340a:	f003 021f 	and.w	r2, r3, #31
 800340e:	4613      	mov	r3, r2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4413      	add	r3, r2
 8003414:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003416:	430b      	orrs	r3, r1
 8003418:	e081      	b.n	800351e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003422:	2b00      	cmp	r3, #0
 8003424:	d107      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x5c6>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	0e9b      	lsrs	r3, r3, #26
 800342c:	3301      	adds	r3, #1
 800342e:	069b      	lsls	r3, r3, #26
 8003430:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003434:	e015      	b.n	8003462 <HAL_ADC_ConfigChannel+0x5f2>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003446:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800344e:	2320      	movs	r3, #32
 8003450:	e003      	b.n	800345a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	b2db      	uxtb	r3, r3
 800345a:	3301      	adds	r3, #1
 800345c:	069b      	lsls	r3, r3, #26
 800345e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x612>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	0e9b      	lsrs	r3, r3, #26
 8003474:	3301      	adds	r3, #1
 8003476:	f003 031f 	and.w	r3, r3, #31
 800347a:	2101      	movs	r1, #1
 800347c:	fa01 f303 	lsl.w	r3, r1, r3
 8003480:	e017      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x642>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	fa93 f3a3 	rbit	r3, r3
 800348e:	61fb      	str	r3, [r7, #28]
  return result;
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800349a:	2320      	movs	r3, #32
 800349c:	e003      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	fab3 f383 	clz	r3, r3
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	3301      	adds	r3, #1
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	2101      	movs	r1, #1
 80034ae:	fa01 f303 	lsl.w	r3, r1, r3
 80034b2:	ea42 0103 	orr.w	r1, r2, r3
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10d      	bne.n	80034de <HAL_ADC_ConfigChannel+0x66e>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	0e9b      	lsrs	r3, r3, #26
 80034c8:	3301      	adds	r3, #1
 80034ca:	f003 021f 	and.w	r2, r3, #31
 80034ce:	4613      	mov	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4413      	add	r3, r2
 80034d4:	3b1e      	subs	r3, #30
 80034d6:	051b      	lsls	r3, r3, #20
 80034d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034dc:	e01e      	b.n	800351c <HAL_ADC_ConfigChannel+0x6ac>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	fa93 f3a3 	rbit	r3, r3
 80034ea:	613b      	str	r3, [r7, #16]
  return result;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d104      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80034f6:	2320      	movs	r3, #32
 80034f8:	e006      	b.n	8003508 <HAL_ADC_ConfigChannel+0x698>
 80034fa:	bf00      	nop
 80034fc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	fab3 f383 	clz	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	3301      	adds	r3, #1
 800350a:	f003 021f 	and.w	r2, r3, #31
 800350e:	4613      	mov	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4413      	add	r3, r2
 8003514:	3b1e      	subs	r3, #30
 8003516:	051b      	lsls	r3, r3, #20
 8003518:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800351c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003522:	4619      	mov	r1, r3
 8003524:	f7ff fa48 	bl	80029b8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	4b3f      	ldr	r3, [pc, #252]	; (800362c <HAL_ADC_ConfigChannel+0x7bc>)
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d071      	beq.n	8003618 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003534:	483e      	ldr	r0, [pc, #248]	; (8003630 <HAL_ADC_ConfigChannel+0x7c0>)
 8003536:	f7ff f967 	bl	8002808 <LL_ADC_GetCommonPathInternalCh>
 800353a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a3c      	ldr	r2, [pc, #240]	; (8003634 <HAL_ADC_ConfigChannel+0x7c4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d004      	beq.n	8003552 <HAL_ADC_ConfigChannel+0x6e2>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a3a      	ldr	r2, [pc, #232]	; (8003638 <HAL_ADC_ConfigChannel+0x7c8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d127      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003552:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d121      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003566:	d157      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003568:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800356c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003570:	4619      	mov	r1, r3
 8003572:	482f      	ldr	r0, [pc, #188]	; (8003630 <HAL_ADC_ConfigChannel+0x7c0>)
 8003574:	f7ff f935 	bl	80027e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003578:	4b30      	ldr	r3, [pc, #192]	; (800363c <HAL_ADC_ConfigChannel+0x7cc>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	099b      	lsrs	r3, r3, #6
 800357e:	4a30      	ldr	r2, [pc, #192]	; (8003640 <HAL_ADC_ConfigChannel+0x7d0>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	4613      	mov	r3, r2
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003592:	e002      	b.n	800359a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	3b01      	subs	r3, #1
 8003598:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1f9      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035a0:	e03a      	b.n	8003618 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a27      	ldr	r2, [pc, #156]	; (8003644 <HAL_ADC_ConfigChannel+0x7d4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d113      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10d      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a22      	ldr	r2, [pc, #136]	; (8003648 <HAL_ADC_ConfigChannel+0x7d8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d02a      	beq.n	8003618 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ca:	4619      	mov	r1, r3
 80035cc:	4818      	ldr	r0, [pc, #96]	; (8003630 <HAL_ADC_ConfigChannel+0x7c0>)
 80035ce:	f7ff f908 	bl	80027e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035d2:	e021      	b.n	8003618 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a1c      	ldr	r2, [pc, #112]	; (800364c <HAL_ADC_ConfigChannel+0x7dc>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d11c      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d116      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a16      	ldr	r2, [pc, #88]	; (8003648 <HAL_ADC_ConfigChannel+0x7d8>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d011      	beq.n	8003618 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035fc:	4619      	mov	r1, r3
 80035fe:	480c      	ldr	r0, [pc, #48]	; (8003630 <HAL_ADC_ConfigChannel+0x7c0>)
 8003600:	f7ff f8ef 	bl	80027e2 <LL_ADC_SetCommonPathInternalCh>
 8003604:	e008      	b.n	8003618 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360a:	f043 0220 	orr.w	r2, r3, #32
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003620:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003624:	4618      	mov	r0, r3
 8003626:	37d8      	adds	r7, #216	; 0xd8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	80080000 	.word	0x80080000
 8003630:	50000300 	.word	0x50000300
 8003634:	c3210000 	.word	0xc3210000
 8003638:	90c00010 	.word	0x90c00010
 800363c:	20000004 	.word	0x20000004
 8003640:	053e2d63 	.word	0x053e2d63
 8003644:	c7520000 	.word	0xc7520000
 8003648:	50000100 	.word	0x50000100
 800364c:	cb840000 	.word	0xcb840000

08003650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <__NVIC_SetPriorityGrouping+0x44>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800366c:	4013      	ands	r3, r2
 800366e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800367c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003682:	4a04      	ldr	r2, [pc, #16]	; (8003694 <__NVIC_SetPriorityGrouping+0x44>)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	60d3      	str	r3, [r2, #12]
}
 8003688:	bf00      	nop
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	e000ed00 	.word	0xe000ed00

08003698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800369c:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <__NVIC_GetPriorityGrouping+0x18>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	0a1b      	lsrs	r3, r3, #8
 80036a2:	f003 0307 	and.w	r3, r3, #7
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	e000ed00 	.word	0xe000ed00

080036b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	6039      	str	r1, [r7, #0]
 80036be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	db0a      	blt.n	80036de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	490c      	ldr	r1, [pc, #48]	; (8003700 <__NVIC_SetPriority+0x4c>)
 80036ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d2:	0112      	lsls	r2, r2, #4
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	440b      	add	r3, r1
 80036d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036dc:	e00a      	b.n	80036f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	4908      	ldr	r1, [pc, #32]	; (8003704 <__NVIC_SetPriority+0x50>)
 80036e4:	79fb      	ldrb	r3, [r7, #7]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	3b04      	subs	r3, #4
 80036ec:	0112      	lsls	r2, r2, #4
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	440b      	add	r3, r1
 80036f2:	761a      	strb	r2, [r3, #24]
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	e000e100 	.word	0xe000e100
 8003704:	e000ed00 	.word	0xe000ed00

08003708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003708:	b480      	push	{r7}
 800370a:	b089      	sub	sp, #36	; 0x24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f1c3 0307 	rsb	r3, r3, #7
 8003722:	2b04      	cmp	r3, #4
 8003724:	bf28      	it	cs
 8003726:	2304      	movcs	r3, #4
 8003728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	3304      	adds	r3, #4
 800372e:	2b06      	cmp	r3, #6
 8003730:	d902      	bls.n	8003738 <NVIC_EncodePriority+0x30>
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	3b03      	subs	r3, #3
 8003736:	e000      	b.n	800373a <NVIC_EncodePriority+0x32>
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800373c:	f04f 32ff 	mov.w	r2, #4294967295
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43da      	mvns	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	401a      	ands	r2, r3
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003750:	f04f 31ff 	mov.w	r1, #4294967295
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	fa01 f303 	lsl.w	r3, r1, r3
 800375a:	43d9      	mvns	r1, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003760:	4313      	orrs	r3, r2
         );
}
 8003762:	4618      	mov	r0, r3
 8003764:	3724      	adds	r7, #36	; 0x24
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3b01      	subs	r3, #1
 800377c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003780:	d301      	bcc.n	8003786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003782:	2301      	movs	r3, #1
 8003784:	e00f      	b.n	80037a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003786:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <SysTick_Config+0x40>)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3b01      	subs	r3, #1
 800378c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800378e:	210f      	movs	r1, #15
 8003790:	f04f 30ff 	mov.w	r0, #4294967295
 8003794:	f7ff ff8e 	bl	80036b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <SysTick_Config+0x40>)
 800379a:	2200      	movs	r2, #0
 800379c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800379e:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <SysTick_Config+0x40>)
 80037a0:	2207      	movs	r2, #7
 80037a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	e000e010 	.word	0xe000e010

080037b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff ff47 	bl	8003650 <__NVIC_SetPriorityGrouping>
}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b086      	sub	sp, #24
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	4603      	mov	r3, r0
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
 80037d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037d8:	f7ff ff5e 	bl	8003698 <__NVIC_GetPriorityGrouping>
 80037dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	6978      	ldr	r0, [r7, #20]
 80037e4:	f7ff ff90 	bl	8003708 <NVIC_EncodePriority>
 80037e8:	4602      	mov	r2, r0
 80037ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ee:	4611      	mov	r1, r2
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff ff5f 	bl	80036b4 <__NVIC_SetPriority>
}
 80037f6:	bf00      	nop
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff ffb2 	bl	8003770 <SysTick_Config>
 800380c:	4603      	mov	r3, r0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003826:	e15a      	b.n	8003ade <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	2101      	movs	r1, #1
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	fa01 f303 	lsl.w	r3, r1, r3
 8003834:	4013      	ands	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 814c 	beq.w	8003ad8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	2b01      	cmp	r3, #1
 800384a:	d005      	beq.n	8003858 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003854:	2b02      	cmp	r3, #2
 8003856:	d130      	bne.n	80038ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	2203      	movs	r2, #3
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4013      	ands	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800388e:	2201      	movs	r2, #1
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43db      	mvns	r3, r3
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4013      	ands	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	091b      	lsrs	r3, r3, #4
 80038a4:	f003 0201 	and.w	r2, r3, #1
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	2b03      	cmp	r3, #3
 80038c4:	d017      	beq.n	80038f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	2203      	movs	r2, #3
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43db      	mvns	r3, r3
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d123      	bne.n	800394a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	08da      	lsrs	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3208      	adds	r2, #8
 800390a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800390e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	220f      	movs	r2, #15
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	43db      	mvns	r3, r3
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4013      	ands	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	691a      	ldr	r2, [r3, #16]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	08da      	lsrs	r2, r3, #3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3208      	adds	r2, #8
 8003944:	6939      	ldr	r1, [r7, #16]
 8003946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	2203      	movs	r2, #3
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43db      	mvns	r3, r3
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4013      	ands	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 0203 	and.w	r2, r3, #3
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80a6 	beq.w	8003ad8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800398c:	4b5b      	ldr	r3, [pc, #364]	; (8003afc <HAL_GPIO_Init+0x2e4>)
 800398e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003990:	4a5a      	ldr	r2, [pc, #360]	; (8003afc <HAL_GPIO_Init+0x2e4>)
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	6613      	str	r3, [r2, #96]	; 0x60
 8003998:	4b58      	ldr	r3, [pc, #352]	; (8003afc <HAL_GPIO_Init+0x2e4>)
 800399a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039a4:	4a56      	ldr	r2, [pc, #344]	; (8003b00 <HAL_GPIO_Init+0x2e8>)
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	089b      	lsrs	r3, r3, #2
 80039aa:	3302      	adds	r3, #2
 80039ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	220f      	movs	r2, #15
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	43db      	mvns	r3, r3
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4013      	ands	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039ce:	d01f      	beq.n	8003a10 <HAL_GPIO_Init+0x1f8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a4c      	ldr	r2, [pc, #304]	; (8003b04 <HAL_GPIO_Init+0x2ec>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d019      	beq.n	8003a0c <HAL_GPIO_Init+0x1f4>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a4b      	ldr	r2, [pc, #300]	; (8003b08 <HAL_GPIO_Init+0x2f0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d013      	beq.n	8003a08 <HAL_GPIO_Init+0x1f0>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a4a      	ldr	r2, [pc, #296]	; (8003b0c <HAL_GPIO_Init+0x2f4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d00d      	beq.n	8003a04 <HAL_GPIO_Init+0x1ec>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a49      	ldr	r2, [pc, #292]	; (8003b10 <HAL_GPIO_Init+0x2f8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d007      	beq.n	8003a00 <HAL_GPIO_Init+0x1e8>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a48      	ldr	r2, [pc, #288]	; (8003b14 <HAL_GPIO_Init+0x2fc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d101      	bne.n	80039fc <HAL_GPIO_Init+0x1e4>
 80039f8:	2305      	movs	r3, #5
 80039fa:	e00a      	b.n	8003a12 <HAL_GPIO_Init+0x1fa>
 80039fc:	2306      	movs	r3, #6
 80039fe:	e008      	b.n	8003a12 <HAL_GPIO_Init+0x1fa>
 8003a00:	2304      	movs	r3, #4
 8003a02:	e006      	b.n	8003a12 <HAL_GPIO_Init+0x1fa>
 8003a04:	2303      	movs	r3, #3
 8003a06:	e004      	b.n	8003a12 <HAL_GPIO_Init+0x1fa>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e002      	b.n	8003a12 <HAL_GPIO_Init+0x1fa>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <HAL_GPIO_Init+0x1fa>
 8003a10:	2300      	movs	r3, #0
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	f002 0203 	and.w	r2, r2, #3
 8003a18:	0092      	lsls	r2, r2, #2
 8003a1a:	4093      	lsls	r3, r2
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a22:	4937      	ldr	r1, [pc, #220]	; (8003b00 <HAL_GPIO_Init+0x2e8>)
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	089b      	lsrs	r3, r3, #2
 8003a28:	3302      	adds	r3, #2
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a30:	4b39      	ldr	r3, [pc, #228]	; (8003b18 <HAL_GPIO_Init+0x300>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a54:	4a30      	ldr	r2, [pc, #192]	; (8003b18 <HAL_GPIO_Init+0x300>)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a5a:	4b2f      	ldr	r3, [pc, #188]	; (8003b18 <HAL_GPIO_Init+0x300>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	43db      	mvns	r3, r3
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4013      	ands	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a7e:	4a26      	ldr	r2, [pc, #152]	; (8003b18 <HAL_GPIO_Init+0x300>)
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003a84:	4b24      	ldr	r3, [pc, #144]	; (8003b18 <HAL_GPIO_Init+0x300>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4013      	ands	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003aa8:	4a1b      	ldr	r2, [pc, #108]	; (8003b18 <HAL_GPIO_Init+0x300>)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003aae:	4b1a      	ldr	r3, [pc, #104]	; (8003b18 <HAL_GPIO_Init+0x300>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4013      	ands	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ad2:	4a11      	ldr	r2, [pc, #68]	; (8003b18 <HAL_GPIO_Init+0x300>)
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	3301      	adds	r3, #1
 8003adc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f47f ae9d 	bne.w	8003828 <HAL_GPIO_Init+0x10>
  }
}
 8003aee:	bf00      	nop
 8003af0:	bf00      	nop
 8003af2:	371c      	adds	r7, #28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	40021000 	.word	0x40021000
 8003b00:	40010000 	.word	0x40010000
 8003b04:	48000400 	.word	0x48000400
 8003b08:	48000800 	.word	0x48000800
 8003b0c:	48000c00 	.word	0x48000c00
 8003b10:	48001000 	.word	0x48001000
 8003b14:	48001400 	.word	0x48001400
 8003b18:	40010400 	.word	0x40010400

08003b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	807b      	strh	r3, [r7, #2]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b2c:	787b      	ldrb	r3, [r7, #1]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b32:	887a      	ldrh	r2, [r7, #2]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b38:	e002      	b.n	8003b40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b3a:	887a      	ldrh	r2, [r7, #2]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e08d      	b.n	8003c7a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fe faaa 	bl	80020cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2224      	movs	r2, #36	; 0x24
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0201 	bic.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d107      	bne.n	8003bc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bc2:	609a      	str	r2, [r3, #8]
 8003bc4:	e006      	b.n	8003bd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689a      	ldr	r2, [r3, #8]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003bd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d108      	bne.n	8003bee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bea:	605a      	str	r2, [r3, #4]
 8003bec:	e007      	b.n	8003bfe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69d9      	ldr	r1, [r3, #28]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1a      	ldr	r2, [r3, #32]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	607a      	str	r2, [r7, #4]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	460b      	mov	r3, r1
 8003c92:	817b      	strh	r3, [r7, #10]
 8003c94:	4613      	mov	r3, r2
 8003c96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	f040 80fd 	bne.w	8003ea0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_I2C_Master_Transmit+0x30>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e0f6      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x21e>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cbc:	f7fe fd50 	bl	8002760 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	2319      	movs	r3, #25
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 fbea 	bl	80044a8 <I2C_WaitOnFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e0e1      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2221      	movs	r2, #33	; 0x21
 8003ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2210      	movs	r2, #16
 8003cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	893a      	ldrh	r2, [r7, #8]
 8003cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2bff      	cmp	r3, #255	; 0xff
 8003d0e:	d906      	bls.n	8003d1e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	22ff      	movs	r2, #255	; 0xff
 8003d14:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003d16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	e007      	b.n	8003d2e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003d28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d2c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d024      	beq.n	8003d80 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	781a      	ldrb	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	8979      	ldrh	r1, [r7, #10]
 8003d72:	4b4e      	ldr	r3, [pc, #312]	; (8003eac <HAL_I2C_Master_Transmit+0x228>)
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 fd59 	bl	8004830 <I2C_TransferConfig>
 8003d7e:	e066      	b.n	8003e4e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	8979      	ldrh	r1, [r7, #10]
 8003d88:	4b48      	ldr	r3, [pc, #288]	; (8003eac <HAL_I2C_Master_Transmit+0x228>)
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 fd4e 	bl	8004830 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003d94:	e05b      	b.n	8003e4e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	6a39      	ldr	r1, [r7, #32]
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 fbdd 	bl	800455a <I2C_WaitOnTXISFlagUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e07b      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	781a      	ldrb	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d034      	beq.n	8003e4e <HAL_I2C_Master_Transmit+0x1ca>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d130      	bne.n	8003e4e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	2200      	movs	r2, #0
 8003df4:	2180      	movs	r1, #128	; 0x80
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fb56 	bl	80044a8 <I2C_WaitOnFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e04d      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2bff      	cmp	r3, #255	; 0xff
 8003e0e:	d90e      	bls.n	8003e2e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	22ff      	movs	r2, #255	; 0xff
 8003e14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	8979      	ldrh	r1, [r7, #10]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 fd02 	bl	8004830 <I2C_TransferConfig>
 8003e2c:	e00f      	b.n	8003e4e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	8979      	ldrh	r1, [r7, #10]
 8003e40:	2300      	movs	r3, #0
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fcf1 	bl	8004830 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d19e      	bne.n	8003d96 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	6a39      	ldr	r1, [r7, #32]
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 fbc3 	bl	80045e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e01a      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2220      	movs	r2, #32
 8003e72:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6859      	ldr	r1, [r3, #4]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4b0c      	ldr	r3, [pc, #48]	; (8003eb0 <HAL_I2C_Master_Transmit+0x22c>)
 8003e80:	400b      	ands	r3, r1
 8003e82:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e000      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003ea0:	2302      	movs	r3, #2
  }
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	80002000 	.word	0x80002000
 8003eb0:	fe00e800 	.word	0xfe00e800

08003eb4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	4608      	mov	r0, r1
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	817b      	strh	r3, [r7, #10]
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	813b      	strh	r3, [r7, #8]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b20      	cmp	r3, #32
 8003ed8:	f040 80f9 	bne.w	80040ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <HAL_I2C_Mem_Write+0x34>
 8003ee2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d105      	bne.n	8003ef4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e0ed      	b.n	80040d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_I2C_Mem_Write+0x4e>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e0e6      	b.n	80040d0 <HAL_I2C_Mem_Write+0x21c>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f0a:	f7fe fc29 	bl	8002760 <HAL_GetTick>
 8003f0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	2319      	movs	r3, #25
 8003f16:	2201      	movs	r2, #1
 8003f18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 fac3 	bl	80044a8 <I2C_WaitOnFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e0d1      	b.n	80040d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2221      	movs	r2, #33	; 0x21
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2240      	movs	r2, #64	; 0x40
 8003f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a3a      	ldr	r2, [r7, #32]
 8003f46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f54:	88f8      	ldrh	r0, [r7, #6]
 8003f56:	893a      	ldrh	r2, [r7, #8]
 8003f58:	8979      	ldrh	r1, [r7, #10]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	9301      	str	r3, [sp, #4]
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	4603      	mov	r3, r0
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f9d3 	bl	8004310 <I2C_RequestMemoryWrite>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0a9      	b.n	80040d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2bff      	cmp	r3, #255	; 0xff
 8003f84:	d90e      	bls.n	8003fa4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	22ff      	movs	r2, #255	; 0xff
 8003f8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	8979      	ldrh	r1, [r7, #10]
 8003f94:	2300      	movs	r3, #0
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 fc47 	bl	8004830 <I2C_TransferConfig>
 8003fa2:	e00f      	b.n	8003fc4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	8979      	ldrh	r1, [r7, #10]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 fc36 	bl	8004830 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 fac6 	bl	800455a <I2C_WaitOnTXISFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e07b      	b.n	80040d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	781a      	ldrb	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d034      	beq.n	800407c <HAL_I2C_Mem_Write+0x1c8>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004016:	2b00      	cmp	r3, #0
 8004018:	d130      	bne.n	800407c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	2200      	movs	r2, #0
 8004022:	2180      	movs	r1, #128	; 0x80
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 fa3f 	bl	80044a8 <I2C_WaitOnFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e04d      	b.n	80040d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	2bff      	cmp	r3, #255	; 0xff
 800403c:	d90e      	bls.n	800405c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	22ff      	movs	r2, #255	; 0xff
 8004042:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004048:	b2da      	uxtb	r2, r3
 800404a:	8979      	ldrh	r1, [r7, #10]
 800404c:	2300      	movs	r3, #0
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 fbeb 	bl	8004830 <I2C_TransferConfig>
 800405a:	e00f      	b.n	800407c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406a:	b2da      	uxtb	r2, r3
 800406c:	8979      	ldrh	r1, [r7, #10]
 800406e:	2300      	movs	r3, #0
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 fbda 	bl	8004830 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d19e      	bne.n	8003fc4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 faac 	bl	80045e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e01a      	b.n	80040d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2220      	movs	r2, #32
 80040a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6859      	ldr	r1, [r3, #4]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <HAL_I2C_Mem_Write+0x224>)
 80040ae:	400b      	ands	r3, r1
 80040b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	e000      	b.n	80040d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80040ce:	2302      	movs	r3, #2
  }
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	fe00e800 	.word	0xfe00e800

080040dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	4608      	mov	r0, r1
 80040e6:	4611      	mov	r1, r2
 80040e8:	461a      	mov	r2, r3
 80040ea:	4603      	mov	r3, r0
 80040ec:	817b      	strh	r3, [r7, #10]
 80040ee:	460b      	mov	r3, r1
 80040f0:	813b      	strh	r3, [r7, #8]
 80040f2:	4613      	mov	r3, r2
 80040f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b20      	cmp	r3, #32
 8004100:	f040 80fd 	bne.w	80042fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_I2C_Mem_Read+0x34>
 800410a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800410c:	2b00      	cmp	r3, #0
 800410e:	d105      	bne.n	800411c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004116:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e0f1      	b.n	8004300 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_I2C_Mem_Read+0x4e>
 8004126:	2302      	movs	r3, #2
 8004128:	e0ea      	b.n	8004300 <HAL_I2C_Mem_Read+0x224>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004132:	f7fe fb15 	bl	8002760 <HAL_GetTick>
 8004136:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	2319      	movs	r3, #25
 800413e:	2201      	movs	r2, #1
 8004140:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f9af 	bl	80044a8 <I2C_WaitOnFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0d5      	b.n	8004300 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2222      	movs	r2, #34	; 0x22
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2240      	movs	r2, #64	; 0x40
 8004160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a3a      	ldr	r2, [r7, #32]
 800416e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004174:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800417c:	88f8      	ldrh	r0, [r7, #6]
 800417e:	893a      	ldrh	r2, [r7, #8]
 8004180:	8979      	ldrh	r1, [r7, #10]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	4603      	mov	r3, r0
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f913 	bl	80043b8 <I2C_RequestMemoryRead>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0ad      	b.n	8004300 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2bff      	cmp	r3, #255	; 0xff
 80041ac:	d90e      	bls.n	80041cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	22ff      	movs	r2, #255	; 0xff
 80041b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	8979      	ldrh	r1, [r7, #10]
 80041bc:	4b52      	ldr	r3, [pc, #328]	; (8004308 <HAL_I2C_Mem_Read+0x22c>)
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 fb33 	bl	8004830 <I2C_TransferConfig>
 80041ca:	e00f      	b.n	80041ec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	8979      	ldrh	r1, [r7, #10]
 80041de:	4b4a      	ldr	r3, [pc, #296]	; (8004308 <HAL_I2C_Mem_Read+0x22c>)
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 fb22 	bl	8004830 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f2:	2200      	movs	r2, #0
 80041f4:	2104      	movs	r1, #4
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 f956 	bl	80044a8 <I2C_WaitOnFlagUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e07c      	b.n	8004300 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d034      	beq.n	80042ac <HAL_I2C_Mem_Read+0x1d0>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004246:	2b00      	cmp	r3, #0
 8004248:	d130      	bne.n	80042ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004250:	2200      	movs	r2, #0
 8004252:	2180      	movs	r1, #128	; 0x80
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 f927 	bl	80044a8 <I2C_WaitOnFlagUntilTimeout>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e04d      	b.n	8004300 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004268:	b29b      	uxth	r3, r3
 800426a:	2bff      	cmp	r3, #255	; 0xff
 800426c:	d90e      	bls.n	800428c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	22ff      	movs	r2, #255	; 0xff
 8004272:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004278:	b2da      	uxtb	r2, r3
 800427a:	8979      	ldrh	r1, [r7, #10]
 800427c:	2300      	movs	r3, #0
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 fad3 	bl	8004830 <I2C_TransferConfig>
 800428a:	e00f      	b.n	80042ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429a:	b2da      	uxtb	r2, r3
 800429c:	8979      	ldrh	r1, [r7, #10]
 800429e:	2300      	movs	r3, #0
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 fac2 	bl	8004830 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d19a      	bne.n	80041ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f994 	bl	80045e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e01a      	b.n	8004300 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2220      	movs	r2, #32
 80042d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6859      	ldr	r1, [r3, #4]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <HAL_I2C_Mem_Read+0x230>)
 80042de:	400b      	ands	r3, r1
 80042e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e000      	b.n	8004300 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	80002400 	.word	0x80002400
 800430c:	fe00e800 	.word	0xfe00e800

08004310 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	4608      	mov	r0, r1
 800431a:	4611      	mov	r1, r2
 800431c:	461a      	mov	r2, r3
 800431e:	4603      	mov	r3, r0
 8004320:	817b      	strh	r3, [r7, #10]
 8004322:	460b      	mov	r3, r1
 8004324:	813b      	strh	r3, [r7, #8]
 8004326:	4613      	mov	r3, r2
 8004328:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	b2da      	uxtb	r2, r3
 800432e:	8979      	ldrh	r1, [r7, #10]
 8004330:	4b20      	ldr	r3, [pc, #128]	; (80043b4 <I2C_RequestMemoryWrite+0xa4>)
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 fa79 	bl	8004830 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800433e:	69fa      	ldr	r2, [r7, #28]
 8004340:	69b9      	ldr	r1, [r7, #24]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f909 	bl	800455a <I2C_WaitOnTXISFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e02c      	b.n	80043ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d105      	bne.n	8004364 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004358:	893b      	ldrh	r3, [r7, #8]
 800435a:	b2da      	uxtb	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	629a      	str	r2, [r3, #40]	; 0x28
 8004362:	e015      	b.n	8004390 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004364:	893b      	ldrh	r3, [r7, #8]
 8004366:	0a1b      	lsrs	r3, r3, #8
 8004368:	b29b      	uxth	r3, r3
 800436a:	b2da      	uxtb	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004372:	69fa      	ldr	r2, [r7, #28]
 8004374:	69b9      	ldr	r1, [r7, #24]
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 f8ef 	bl	800455a <I2C_WaitOnTXISFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e012      	b.n	80043ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004386:	893b      	ldrh	r3, [r7, #8]
 8004388:	b2da      	uxtb	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	2200      	movs	r2, #0
 8004398:	2180      	movs	r1, #128	; 0x80
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 f884 	bl	80044a8 <I2C_WaitOnFlagUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	80002000 	.word	0x80002000

080043b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af02      	add	r7, sp, #8
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	4608      	mov	r0, r1
 80043c2:	4611      	mov	r1, r2
 80043c4:	461a      	mov	r2, r3
 80043c6:	4603      	mov	r3, r0
 80043c8:	817b      	strh	r3, [r7, #10]
 80043ca:	460b      	mov	r3, r1
 80043cc:	813b      	strh	r3, [r7, #8]
 80043ce:	4613      	mov	r3, r2
 80043d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80043d2:	88fb      	ldrh	r3, [r7, #6]
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	8979      	ldrh	r1, [r7, #10]
 80043d8:	4b20      	ldr	r3, [pc, #128]	; (800445c <I2C_RequestMemoryRead+0xa4>)
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	2300      	movs	r3, #0
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 fa26 	bl	8004830 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	69b9      	ldr	r1, [r7, #24]
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 f8b6 	bl	800455a <I2C_WaitOnTXISFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e02c      	b.n	8004452 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043f8:	88fb      	ldrh	r3, [r7, #6]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d105      	bne.n	800440a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043fe:	893b      	ldrh	r3, [r7, #8]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	629a      	str	r2, [r3, #40]	; 0x28
 8004408:	e015      	b.n	8004436 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800440a:	893b      	ldrh	r3, [r7, #8]
 800440c:	0a1b      	lsrs	r3, r3, #8
 800440e:	b29b      	uxth	r3, r3
 8004410:	b2da      	uxtb	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004418:	69fa      	ldr	r2, [r7, #28]
 800441a:	69b9      	ldr	r1, [r7, #24]
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 f89c 	bl	800455a <I2C_WaitOnTXISFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e012      	b.n	8004452 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800442c:	893b      	ldrh	r3, [r7, #8]
 800442e:	b2da      	uxtb	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	2200      	movs	r2, #0
 800443e:	2140      	movs	r1, #64	; 0x40
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 f831 	bl	80044a8 <I2C_WaitOnFlagUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	80002000 	.word	0x80002000

08004460 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b02      	cmp	r3, #2
 8004474:	d103      	bne.n	800447e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2200      	movs	r2, #0
 800447c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b01      	cmp	r3, #1
 800448a:	d007      	beq.n	800449c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	619a      	str	r2, [r3, #24]
  }
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	603b      	str	r3, [r7, #0]
 80044b4:	4613      	mov	r3, r2
 80044b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044b8:	e03b      	b.n	8004532 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	6839      	ldr	r1, [r7, #0]
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 f8d6 	bl	8004670 <I2C_IsErrorOccurred>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e041      	b.n	8004552 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d4:	d02d      	beq.n	8004532 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d6:	f7fe f943 	bl	8002760 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d302      	bcc.n	80044ec <I2C_WaitOnFlagUntilTimeout+0x44>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d122      	bne.n	8004532 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699a      	ldr	r2, [r3, #24]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	4013      	ands	r3, r2
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	bf0c      	ite	eq
 80044fc:	2301      	moveq	r3, #1
 80044fe:	2300      	movne	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	461a      	mov	r2, r3
 8004504:	79fb      	ldrb	r3, [r7, #7]
 8004506:	429a      	cmp	r2, r3
 8004508:	d113      	bne.n	8004532 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450e:	f043 0220 	orr.w	r2, r3, #32
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e00f      	b.n	8004552 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699a      	ldr	r2, [r3, #24]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4013      	ands	r3, r2
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	429a      	cmp	r2, r3
 8004540:	bf0c      	ite	eq
 8004542:	2301      	moveq	r3, #1
 8004544:	2300      	movne	r3, #0
 8004546:	b2db      	uxtb	r3, r3
 8004548:	461a      	mov	r2, r3
 800454a:	79fb      	ldrb	r3, [r7, #7]
 800454c:	429a      	cmp	r2, r3
 800454e:	d0b4      	beq.n	80044ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b084      	sub	sp, #16
 800455e:	af00      	add	r7, sp, #0
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004566:	e033      	b.n	80045d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	68b9      	ldr	r1, [r7, #8]
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 f87f 	bl	8004670 <I2C_IsErrorOccurred>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e031      	b.n	80045e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004582:	d025      	beq.n	80045d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004584:	f7fe f8ec 	bl	8002760 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	429a      	cmp	r2, r3
 8004592:	d302      	bcc.n	800459a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d11a      	bne.n	80045d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d013      	beq.n	80045d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ac:	f043 0220 	orr.w	r2, r3, #32
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e007      	b.n	80045e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d1c4      	bne.n	8004568 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045f4:	e02f      	b.n	8004656 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 f838 	bl	8004670 <I2C_IsErrorOccurred>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e02d      	b.n	8004666 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800460a:	f7fe f8a9 	bl	8002760 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	429a      	cmp	r2, r3
 8004618:	d302      	bcc.n	8004620 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d11a      	bne.n	8004656 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b20      	cmp	r3, #32
 800462c:	d013      	beq.n	8004656 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	f043 0220 	orr.w	r2, r3, #32
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e007      	b.n	8004666 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b20      	cmp	r3, #32
 8004662:	d1c8      	bne.n	80045f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08a      	sub	sp, #40	; 0x28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b00      	cmp	r3, #0
 800469a:	d068      	beq.n	800476e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2210      	movs	r2, #16
 80046a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046a4:	e049      	b.n	800473a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ac:	d045      	beq.n	800473a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046ae:	f7fe f857 	bl	8002760 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d302      	bcc.n	80046c4 <I2C_IsErrorOccurred+0x54>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d13a      	bne.n	800473a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e6:	d121      	bne.n	800472c <I2C_IsErrorOccurred+0xbc>
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046ee:	d01d      	beq.n	800472c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80046f0:	7cfb      	ldrb	r3, [r7, #19]
 80046f2:	2b20      	cmp	r3, #32
 80046f4:	d01a      	beq.n	800472c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004704:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004706:	f7fe f82b 	bl	8002760 <HAL_GetTick>
 800470a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800470c:	e00e      	b.n	800472c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800470e:	f7fe f827 	bl	8002760 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b19      	cmp	r3, #25
 800471a:	d907      	bls.n	800472c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	f043 0320 	orr.w	r3, r3, #32
 8004722:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800472a:	e006      	b.n	800473a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	2b20      	cmp	r3, #32
 8004738:	d1e9      	bne.n	800470e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	f003 0320 	and.w	r3, r3, #32
 8004744:	2b20      	cmp	r3, #32
 8004746:	d003      	beq.n	8004750 <I2C_IsErrorOccurred+0xe0>
 8004748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0aa      	beq.n	80046a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004754:	2b00      	cmp	r3, #0
 8004756:	d103      	bne.n	8004760 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2220      	movs	r2, #32
 800475e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	f043 0304 	orr.w	r3, r3, #4
 8004766:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00b      	beq.n	8004798 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004790:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00b      	beq.n	80047ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	f043 0308 	orr.w	r3, r3, #8
 80047a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00b      	beq.n	80047dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	f043 0302 	orr.w	r3, r3, #2
 80047ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80047dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01c      	beq.n	800481e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f7ff fe3b 	bl	8004460 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6859      	ldr	r1, [r3, #4]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	4b0d      	ldr	r3, [pc, #52]	; (800482c <I2C_IsErrorOccurred+0x1bc>)
 80047f6:	400b      	ands	r3, r1
 80047f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	431a      	orrs	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800481e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004822:	4618      	mov	r0, r3
 8004824:	3728      	adds	r7, #40	; 0x28
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	fe00e800 	.word	0xfe00e800

08004830 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	607b      	str	r3, [r7, #4]
 800483a:	460b      	mov	r3, r1
 800483c:	817b      	strh	r3, [r7, #10]
 800483e:	4613      	mov	r3, r2
 8004840:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004842:	897b      	ldrh	r3, [r7, #10]
 8004844:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004848:	7a7b      	ldrb	r3, [r7, #9]
 800484a:	041b      	lsls	r3, r3, #16
 800484c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004850:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	4313      	orrs	r3, r2
 800485a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800485e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	0d5b      	lsrs	r3, r3, #21
 800486a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800486e:	4b08      	ldr	r3, [pc, #32]	; (8004890 <I2C_TransferConfig+0x60>)
 8004870:	430b      	orrs	r3, r1
 8004872:	43db      	mvns	r3, r3
 8004874:	ea02 0103 	and.w	r1, r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	430a      	orrs	r2, r1
 8004880:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004882:	bf00      	nop
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	03ff63ff 	.word	0x03ff63ff

08004894 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b20      	cmp	r3, #32
 80048a8:	d138      	bne.n	800491c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048b4:	2302      	movs	r3, #2
 80048b6:	e032      	b.n	800491e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2224      	movs	r2, #36	; 0x24
 80048c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0201 	bic.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6819      	ldr	r1, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004918:	2300      	movs	r3, #0
 800491a:	e000      	b.n	800491e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800491c:	2302      	movs	r3, #2
  }
}
 800491e:	4618      	mov	r0, r3
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800492a:	b480      	push	{r7}
 800492c:	b085      	sub	sp, #20
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b20      	cmp	r3, #32
 800493e:	d139      	bne.n	80049b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004946:	2b01      	cmp	r3, #1
 8004948:	d101      	bne.n	800494e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800494a:	2302      	movs	r3, #2
 800494c:	e033      	b.n	80049b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2224      	movs	r2, #36	; 0x24
 800495a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 0201 	bic.w	r2, r2, #1
 800496c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800497c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	e000      	b.n	80049b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049b4:	2302      	movs	r3, #2
  }
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d141      	bne.n	8004a56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049d2:	4b4b      	ldr	r3, [pc, #300]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049de:	d131      	bne.n	8004a44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049e0:	4b47      	ldr	r3, [pc, #284]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049e6:	4a46      	ldr	r2, [pc, #280]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049f0:	4b43      	ldr	r3, [pc, #268]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049f8:	4a41      	ldr	r2, [pc, #260]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a00:	4b40      	ldr	r3, [pc, #256]	; (8004b04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2232      	movs	r2, #50	; 0x32
 8004a06:	fb02 f303 	mul.w	r3, r2, r3
 8004a0a:	4a3f      	ldr	r2, [pc, #252]	; (8004b08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a10:	0c9b      	lsrs	r3, r3, #18
 8004a12:	3301      	adds	r3, #1
 8004a14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a16:	e002      	b.n	8004a1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a1e:	4b38      	ldr	r3, [pc, #224]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2a:	d102      	bne.n	8004a32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f2      	bne.n	8004a18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a32:	4b33      	ldr	r3, [pc, #204]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a3e:	d158      	bne.n	8004af2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e057      	b.n	8004af4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a44:	4b2e      	ldr	r3, [pc, #184]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a4a:	4a2d      	ldr	r2, [pc, #180]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004a54:	e04d      	b.n	8004af2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a5c:	d141      	bne.n	8004ae2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a5e:	4b28      	ldr	r3, [pc, #160]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a6a:	d131      	bne.n	8004ad0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a6c:	4b24      	ldr	r3, [pc, #144]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a72:	4a23      	ldr	r2, [pc, #140]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a7c:	4b20      	ldr	r3, [pc, #128]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a84:	4a1e      	ldr	r2, [pc, #120]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a8c:	4b1d      	ldr	r3, [pc, #116]	; (8004b04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2232      	movs	r2, #50	; 0x32
 8004a92:	fb02 f303 	mul.w	r3, r2, r3
 8004a96:	4a1c      	ldr	r2, [pc, #112]	; (8004b08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a98:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9c:	0c9b      	lsrs	r3, r3, #18
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004aa2:	e002      	b.n	8004aaa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004aaa:	4b15      	ldr	r3, [pc, #84]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab6:	d102      	bne.n	8004abe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f2      	bne.n	8004aa4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004abe:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aca:	d112      	bne.n	8004af2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e011      	b.n	8004af4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ad0:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ad6:	4a0a      	ldr	r2, [pc, #40]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004adc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004ae0:	e007      	b.n	8004af2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ae2:	4b07      	ldr	r3, [pc, #28]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004aea:	4a05      	ldr	r2, [pc, #20]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004af0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	40007000 	.word	0x40007000
 8004b04:	20000004 	.word	0x20000004
 8004b08:	431bde83 	.word	0x431bde83

08004b0c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004b10:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	4a04      	ldr	r2, [pc, #16]	; (8004b28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b1a:	6093      	str	r3, [r2, #8]
}
 8004b1c:	bf00      	nop
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40007000 	.word	0x40007000

08004b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e2fe      	b.n	800513c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d075      	beq.n	8004c36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b4a:	4b97      	ldr	r3, [pc, #604]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 030c 	and.w	r3, r3, #12
 8004b52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b54:	4b94      	ldr	r3, [pc, #592]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	2b0c      	cmp	r3, #12
 8004b62:	d102      	bne.n	8004b6a <HAL_RCC_OscConfig+0x3e>
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d002      	beq.n	8004b70 <HAL_RCC_OscConfig+0x44>
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d10b      	bne.n	8004b88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b70:	4b8d      	ldr	r3, [pc, #564]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d05b      	beq.n	8004c34 <HAL_RCC_OscConfig+0x108>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d157      	bne.n	8004c34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e2d9      	b.n	800513c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b90:	d106      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x74>
 8004b92:	4b85      	ldr	r3, [pc, #532]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a84      	ldr	r2, [pc, #528]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	e01d      	b.n	8004bdc <HAL_RCC_OscConfig+0xb0>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ba8:	d10c      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x98>
 8004baa:	4b7f      	ldr	r3, [pc, #508]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a7e      	ldr	r2, [pc, #504]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	4b7c      	ldr	r3, [pc, #496]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a7b      	ldr	r2, [pc, #492]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	e00b      	b.n	8004bdc <HAL_RCC_OscConfig+0xb0>
 8004bc4:	4b78      	ldr	r3, [pc, #480]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a77      	ldr	r2, [pc, #476]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	4b75      	ldr	r3, [pc, #468]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a74      	ldr	r2, [pc, #464]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d013      	beq.n	8004c0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be4:	f7fd fdbc 	bl	8002760 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bec:	f7fd fdb8 	bl	8002760 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b64      	cmp	r3, #100	; 0x64
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e29e      	b.n	800513c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bfe:	4b6a      	ldr	r3, [pc, #424]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0f0      	beq.n	8004bec <HAL_RCC_OscConfig+0xc0>
 8004c0a:	e014      	b.n	8004c36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0c:	f7fd fda8 	bl	8002760 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c14:	f7fd fda4 	bl	8002760 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b64      	cmp	r3, #100	; 0x64
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e28a      	b.n	800513c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c26:	4b60      	ldr	r3, [pc, #384]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1f0      	bne.n	8004c14 <HAL_RCC_OscConfig+0xe8>
 8004c32:	e000      	b.n	8004c36 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d075      	beq.n	8004d2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c42:	4b59      	ldr	r3, [pc, #356]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 030c 	and.w	r3, r3, #12
 8004c4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c4c:	4b56      	ldr	r3, [pc, #344]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b0c      	cmp	r3, #12
 8004c5a:	d102      	bne.n	8004c62 <HAL_RCC_OscConfig+0x136>
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d002      	beq.n	8004c68 <HAL_RCC_OscConfig+0x13c>
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d11f      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c68:	4b4f      	ldr	r3, [pc, #316]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <HAL_RCC_OscConfig+0x154>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e25d      	b.n	800513c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c80:	4b49      	ldr	r3, [pc, #292]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	061b      	lsls	r3, r3, #24
 8004c8e:	4946      	ldr	r1, [pc, #280]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c94:	4b45      	ldr	r3, [pc, #276]	; (8004dac <HAL_RCC_OscConfig+0x280>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fd fd15 	bl	80026c8 <HAL_InitTick>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d043      	beq.n	8004d2c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e249      	b.n	800513c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d023      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cb0:	4b3d      	ldr	r3, [pc, #244]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a3c      	ldr	r2, [pc, #240]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbc:	f7fd fd50 	bl	8002760 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cc4:	f7fd fd4c 	bl	8002760 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e232      	b.n	800513c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cd6:	4b34      	ldr	r3, [pc, #208]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce2:	4b31      	ldr	r3, [pc, #196]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	061b      	lsls	r3, r3, #24
 8004cf0:	492d      	ldr	r1, [pc, #180]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	604b      	str	r3, [r1, #4]
 8004cf6:	e01a      	b.n	8004d2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cf8:	4b2b      	ldr	r3, [pc, #172]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a2a      	ldr	r2, [pc, #168]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004cfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d04:	f7fd fd2c 	bl	8002760 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d0c:	f7fd fd28 	bl	8002760 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e20e      	b.n	800513c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d1e:	4b22      	ldr	r3, [pc, #136]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f0      	bne.n	8004d0c <HAL_RCC_OscConfig+0x1e0>
 8004d2a:	e000      	b.n	8004d2e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d041      	beq.n	8004dbe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d01c      	beq.n	8004d7c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d42:	4b19      	ldr	r3, [pc, #100]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d48:	4a17      	ldr	r2, [pc, #92]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004d4a:	f043 0301 	orr.w	r3, r3, #1
 8004d4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d52:	f7fd fd05 	bl	8002760 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d5a:	f7fd fd01 	bl	8002760 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e1e7      	b.n	800513c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d6c:	4b0e      	ldr	r3, [pc, #56]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0ef      	beq.n	8004d5a <HAL_RCC_OscConfig+0x22e>
 8004d7a:	e020      	b.n	8004dbe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d7c:	4b0a      	ldr	r3, [pc, #40]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d82:	4a09      	ldr	r2, [pc, #36]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004d84:	f023 0301 	bic.w	r3, r3, #1
 8004d88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8c:	f7fd fce8 	bl	8002760 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d92:	e00d      	b.n	8004db0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d94:	f7fd fce4 	bl	8002760 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d906      	bls.n	8004db0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e1ca      	b.n	800513c <HAL_RCC_OscConfig+0x610>
 8004da6:	bf00      	nop
 8004da8:	40021000 	.word	0x40021000
 8004dac:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004db0:	4b8c      	ldr	r3, [pc, #560]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1ea      	bne.n	8004d94 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 80a6 	beq.w	8004f18 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004dd0:	4b84      	ldr	r3, [pc, #528]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <HAL_RCC_OscConfig+0x2b4>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e000      	b.n	8004de2 <HAL_RCC_OscConfig+0x2b6>
 8004de0:	2300      	movs	r3, #0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00d      	beq.n	8004e02 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004de6:	4b7f      	ldr	r3, [pc, #508]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dea:	4a7e      	ldr	r2, [pc, #504]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df0:	6593      	str	r3, [r2, #88]	; 0x58
 8004df2:	4b7c      	ldr	r3, [pc, #496]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e02:	4b79      	ldr	r3, [pc, #484]	; (8004fe8 <HAL_RCC_OscConfig+0x4bc>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d118      	bne.n	8004e40 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e0e:	4b76      	ldr	r3, [pc, #472]	; (8004fe8 <HAL_RCC_OscConfig+0x4bc>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a75      	ldr	r2, [pc, #468]	; (8004fe8 <HAL_RCC_OscConfig+0x4bc>)
 8004e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e1a:	f7fd fca1 	bl	8002760 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e22:	f7fd fc9d 	bl	8002760 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e183      	b.n	800513c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e34:	4b6c      	ldr	r3, [pc, #432]	; (8004fe8 <HAL_RCC_OscConfig+0x4bc>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f0      	beq.n	8004e22 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d108      	bne.n	8004e5a <HAL_RCC_OscConfig+0x32e>
 8004e48:	4b66      	ldr	r3, [pc, #408]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4e:	4a65      	ldr	r2, [pc, #404]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004e50:	f043 0301 	orr.w	r3, r3, #1
 8004e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e58:	e024      	b.n	8004ea4 <HAL_RCC_OscConfig+0x378>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	2b05      	cmp	r3, #5
 8004e60:	d110      	bne.n	8004e84 <HAL_RCC_OscConfig+0x358>
 8004e62:	4b60      	ldr	r3, [pc, #384]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e68:	4a5e      	ldr	r2, [pc, #376]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004e6a:	f043 0304 	orr.w	r3, r3, #4
 8004e6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e72:	4b5c      	ldr	r3, [pc, #368]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e78:	4a5a      	ldr	r2, [pc, #360]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004e7a:	f043 0301 	orr.w	r3, r3, #1
 8004e7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e82:	e00f      	b.n	8004ea4 <HAL_RCC_OscConfig+0x378>
 8004e84:	4b57      	ldr	r3, [pc, #348]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8a:	4a56      	ldr	r2, [pc, #344]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004e8c:	f023 0301 	bic.w	r3, r3, #1
 8004e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e94:	4b53      	ldr	r3, [pc, #332]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9a:	4a52      	ldr	r2, [pc, #328]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004e9c:	f023 0304 	bic.w	r3, r3, #4
 8004ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d016      	beq.n	8004eda <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eac:	f7fd fc58 	bl	8002760 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eb2:	e00a      	b.n	8004eca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb4:	f7fd fc54 	bl	8002760 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e138      	b.n	800513c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eca:	4b46      	ldr	r3, [pc, #280]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0ed      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x388>
 8004ed8:	e015      	b.n	8004f06 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eda:	f7fd fc41 	bl	8002760 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ee0:	e00a      	b.n	8004ef8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee2:	f7fd fc3d 	bl	8002760 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e121      	b.n	800513c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ef8:	4b3a      	ldr	r3, [pc, #232]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1ed      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f06:	7ffb      	ldrb	r3, [r7, #31]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d105      	bne.n	8004f18 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f0c:	4b35      	ldr	r3, [pc, #212]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f10:	4a34      	ldr	r2, [pc, #208]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0320 	and.w	r3, r3, #32
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d03c      	beq.n	8004f9e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01c      	beq.n	8004f66 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f2c:	4b2d      	ldr	r3, [pc, #180]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f32:	4a2c      	ldr	r2, [pc, #176]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004f34:	f043 0301 	orr.w	r3, r3, #1
 8004f38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f3c:	f7fd fc10 	bl	8002760 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f44:	f7fd fc0c 	bl	8002760 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e0f2      	b.n	800513c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f56:	4b23      	ldr	r3, [pc, #140]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004f58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0ef      	beq.n	8004f44 <HAL_RCC_OscConfig+0x418>
 8004f64:	e01b      	b.n	8004f9e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f66:	4b1f      	ldr	r3, [pc, #124]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004f68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f6c:	4a1d      	ldr	r2, [pc, #116]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004f6e:	f023 0301 	bic.w	r3, r3, #1
 8004f72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f76:	f7fd fbf3 	bl	8002760 <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f7e:	f7fd fbef 	bl	8002760 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e0d5      	b.n	800513c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f90:	4b14      	ldr	r3, [pc, #80]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1ef      	bne.n	8004f7e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 80c9 	beq.w	800513a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fa8:	4b0e      	ldr	r3, [pc, #56]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 030c 	and.w	r3, r3, #12
 8004fb0:	2b0c      	cmp	r3, #12
 8004fb2:	f000 8083 	beq.w	80050bc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d15e      	bne.n	800507c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fbe:	4b09      	ldr	r3, [pc, #36]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a08      	ldr	r2, [pc, #32]	; (8004fe4 <HAL_RCC_OscConfig+0x4b8>)
 8004fc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fca:	f7fd fbc9 	bl	8002760 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fd0:	e00c      	b.n	8004fec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd2:	f7fd fbc5 	bl	8002760 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d905      	bls.n	8004fec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e0ab      	b.n	800513c <HAL_RCC_OscConfig+0x610>
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fec:	4b55      	ldr	r3, [pc, #340]	; (8005144 <HAL_RCC_OscConfig+0x618>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1ec      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ff8:	4b52      	ldr	r3, [pc, #328]	; (8005144 <HAL_RCC_OscConfig+0x618>)
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	4b52      	ldr	r3, [pc, #328]	; (8005148 <HAL_RCC_OscConfig+0x61c>)
 8004ffe:	4013      	ands	r3, r2
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6a11      	ldr	r1, [r2, #32]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005008:	3a01      	subs	r2, #1
 800500a:	0112      	lsls	r2, r2, #4
 800500c:	4311      	orrs	r1, r2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005012:	0212      	lsls	r2, r2, #8
 8005014:	4311      	orrs	r1, r2
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800501a:	0852      	lsrs	r2, r2, #1
 800501c:	3a01      	subs	r2, #1
 800501e:	0552      	lsls	r2, r2, #21
 8005020:	4311      	orrs	r1, r2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005026:	0852      	lsrs	r2, r2, #1
 8005028:	3a01      	subs	r2, #1
 800502a:	0652      	lsls	r2, r2, #25
 800502c:	4311      	orrs	r1, r2
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005032:	06d2      	lsls	r2, r2, #27
 8005034:	430a      	orrs	r2, r1
 8005036:	4943      	ldr	r1, [pc, #268]	; (8005144 <HAL_RCC_OscConfig+0x618>)
 8005038:	4313      	orrs	r3, r2
 800503a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800503c:	4b41      	ldr	r3, [pc, #260]	; (8005144 <HAL_RCC_OscConfig+0x618>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a40      	ldr	r2, [pc, #256]	; (8005144 <HAL_RCC_OscConfig+0x618>)
 8005042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005046:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005048:	4b3e      	ldr	r3, [pc, #248]	; (8005144 <HAL_RCC_OscConfig+0x618>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	4a3d      	ldr	r2, [pc, #244]	; (8005144 <HAL_RCC_OscConfig+0x618>)
 800504e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005052:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005054:	f7fd fb84 	bl	8002760 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800505c:	f7fd fb80 	bl	8002760 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e066      	b.n	800513c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800506e:	4b35      	ldr	r3, [pc, #212]	; (8005144 <HAL_RCC_OscConfig+0x618>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0f0      	beq.n	800505c <HAL_RCC_OscConfig+0x530>
 800507a:	e05e      	b.n	800513a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800507c:	4b31      	ldr	r3, [pc, #196]	; (8005144 <HAL_RCC_OscConfig+0x618>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a30      	ldr	r2, [pc, #192]	; (8005144 <HAL_RCC_OscConfig+0x618>)
 8005082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005088:	f7fd fb6a 	bl	8002760 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005090:	f7fd fb66 	bl	8002760 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e04c      	b.n	800513c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050a2:	4b28      	ldr	r3, [pc, #160]	; (8005144 <HAL_RCC_OscConfig+0x618>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1f0      	bne.n	8005090 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80050ae:	4b25      	ldr	r3, [pc, #148]	; (8005144 <HAL_RCC_OscConfig+0x618>)
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	4924      	ldr	r1, [pc, #144]	; (8005144 <HAL_RCC_OscConfig+0x618>)
 80050b4:	4b25      	ldr	r3, [pc, #148]	; (800514c <HAL_RCC_OscConfig+0x620>)
 80050b6:	4013      	ands	r3, r2
 80050b8:	60cb      	str	r3, [r1, #12]
 80050ba:	e03e      	b.n	800513a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d101      	bne.n	80050c8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e039      	b.n	800513c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80050c8:	4b1e      	ldr	r3, [pc, #120]	; (8005144 <HAL_RCC_OscConfig+0x618>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f003 0203 	and.w	r2, r3, #3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d12c      	bne.n	8005136 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	3b01      	subs	r3, #1
 80050e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d123      	bne.n	8005136 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d11b      	bne.n	8005136 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800510a:	429a      	cmp	r2, r3
 800510c:	d113      	bne.n	8005136 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005118:	085b      	lsrs	r3, r3, #1
 800511a:	3b01      	subs	r3, #1
 800511c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800511e:	429a      	cmp	r2, r3
 8005120:	d109      	bne.n	8005136 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512c:	085b      	lsrs	r3, r3, #1
 800512e:	3b01      	subs	r3, #1
 8005130:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005132:	429a      	cmp	r2, r3
 8005134:	d001      	beq.n	800513a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3720      	adds	r7, #32
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40021000 	.word	0x40021000
 8005148:	019f800c 	.word	0x019f800c
 800514c:	feeefffc 	.word	0xfeeefffc

08005150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800515a:	2300      	movs	r3, #0
 800515c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e11e      	b.n	80053a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005168:	4b91      	ldr	r3, [pc, #580]	; (80053b0 <HAL_RCC_ClockConfig+0x260>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d910      	bls.n	8005198 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005176:	4b8e      	ldr	r3, [pc, #568]	; (80053b0 <HAL_RCC_ClockConfig+0x260>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f023 020f 	bic.w	r2, r3, #15
 800517e:	498c      	ldr	r1, [pc, #560]	; (80053b0 <HAL_RCC_ClockConfig+0x260>)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	4313      	orrs	r3, r2
 8005184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005186:	4b8a      	ldr	r3, [pc, #552]	; (80053b0 <HAL_RCC_ClockConfig+0x260>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d001      	beq.n	8005198 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e106      	b.n	80053a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d073      	beq.n	800528c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d129      	bne.n	8005200 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ac:	4b81      	ldr	r3, [pc, #516]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e0f4      	b.n	80053a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80051bc:	f000 f99e 	bl	80054fc <RCC_GetSysClockFreqFromPLLSource>
 80051c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	4a7c      	ldr	r2, [pc, #496]	; (80053b8 <HAL_RCC_ClockConfig+0x268>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d93f      	bls.n	800524a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80051ca:	4b7a      	ldr	r3, [pc, #488]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d009      	beq.n	80051ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d033      	beq.n	800524a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d12f      	bne.n	800524a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051ea:	4b72      	ldr	r3, [pc, #456]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051f2:	4a70      	ldr	r2, [pc, #448]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 80051f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80051fa:	2380      	movs	r3, #128	; 0x80
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	e024      	b.n	800524a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2b02      	cmp	r3, #2
 8005206:	d107      	bne.n	8005218 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005208:	4b6a      	ldr	r3, [pc, #424]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d109      	bne.n	8005228 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e0c6      	b.n	80053a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005218:	4b66      	ldr	r3, [pc, #408]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e0be      	b.n	80053a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005228:	f000 f8ce 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 800522c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	4a61      	ldr	r2, [pc, #388]	; (80053b8 <HAL_RCC_ClockConfig+0x268>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d909      	bls.n	800524a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005236:	4b5f      	ldr	r3, [pc, #380]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800523e:	4a5d      	ldr	r2, [pc, #372]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 8005240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005244:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005246:	2380      	movs	r3, #128	; 0x80
 8005248:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800524a:	4b5a      	ldr	r3, [pc, #360]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f023 0203 	bic.w	r2, r3, #3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	4957      	ldr	r1, [pc, #348]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 8005258:	4313      	orrs	r3, r2
 800525a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800525c:	f7fd fa80 	bl	8002760 <HAL_GetTick>
 8005260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005262:	e00a      	b.n	800527a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005264:	f7fd fa7c 	bl	8002760 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005272:	4293      	cmp	r3, r2
 8005274:	d901      	bls.n	800527a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e095      	b.n	80053a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527a:	4b4e      	ldr	r3, [pc, #312]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 020c 	and.w	r2, r3, #12
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	429a      	cmp	r2, r3
 800528a:	d1eb      	bne.n	8005264 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d023      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d005      	beq.n	80052b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052a4:	4b43      	ldr	r3, [pc, #268]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	4a42      	ldr	r2, [pc, #264]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 80052aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80052ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0308 	and.w	r3, r3, #8
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d007      	beq.n	80052cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80052bc:	4b3d      	ldr	r3, [pc, #244]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80052c4:	4a3b      	ldr	r2, [pc, #236]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 80052c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80052ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052cc:	4b39      	ldr	r3, [pc, #228]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	4936      	ldr	r1, [pc, #216]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	608b      	str	r3, [r1, #8]
 80052de:	e008      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	2b80      	cmp	r3, #128	; 0x80
 80052e4:	d105      	bne.n	80052f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80052e6:	4b33      	ldr	r3, [pc, #204]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	4a32      	ldr	r2, [pc, #200]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 80052ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052f2:	4b2f      	ldr	r3, [pc, #188]	; (80053b0 <HAL_RCC_ClockConfig+0x260>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d21d      	bcs.n	800533c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005300:	4b2b      	ldr	r3, [pc, #172]	; (80053b0 <HAL_RCC_ClockConfig+0x260>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f023 020f 	bic.w	r2, r3, #15
 8005308:	4929      	ldr	r1, [pc, #164]	; (80053b0 <HAL_RCC_ClockConfig+0x260>)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	4313      	orrs	r3, r2
 800530e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005310:	f7fd fa26 	bl	8002760 <HAL_GetTick>
 8005314:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005316:	e00a      	b.n	800532e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005318:	f7fd fa22 	bl	8002760 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	f241 3288 	movw	r2, #5000	; 0x1388
 8005326:	4293      	cmp	r3, r2
 8005328:	d901      	bls.n	800532e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e03b      	b.n	80053a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800532e:	4b20      	ldr	r3, [pc, #128]	; (80053b0 <HAL_RCC_ClockConfig+0x260>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	429a      	cmp	r2, r3
 800533a:	d1ed      	bne.n	8005318 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	d008      	beq.n	800535a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005348:	4b1a      	ldr	r3, [pc, #104]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	4917      	ldr	r1, [pc, #92]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 8005356:	4313      	orrs	r3, r2
 8005358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0308 	and.w	r3, r3, #8
 8005362:	2b00      	cmp	r3, #0
 8005364:	d009      	beq.n	800537a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005366:	4b13      	ldr	r3, [pc, #76]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	490f      	ldr	r1, [pc, #60]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 8005376:	4313      	orrs	r3, r2
 8005378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800537a:	f000 f825 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 800537e:	4602      	mov	r2, r0
 8005380:	4b0c      	ldr	r3, [pc, #48]	; (80053b4 <HAL_RCC_ClockConfig+0x264>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	091b      	lsrs	r3, r3, #4
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	490c      	ldr	r1, [pc, #48]	; (80053bc <HAL_RCC_ClockConfig+0x26c>)
 800538c:	5ccb      	ldrb	r3, [r1, r3]
 800538e:	f003 031f 	and.w	r3, r3, #31
 8005392:	fa22 f303 	lsr.w	r3, r2, r3
 8005396:	4a0a      	ldr	r2, [pc, #40]	; (80053c0 <HAL_RCC_ClockConfig+0x270>)
 8005398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800539a:	4b0a      	ldr	r3, [pc, #40]	; (80053c4 <HAL_RCC_ClockConfig+0x274>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fd f992 	bl	80026c8 <HAL_InitTick>
 80053a4:	4603      	mov	r3, r0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3718      	adds	r7, #24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40022000 	.word	0x40022000
 80053b4:	40021000 	.word	0x40021000
 80053b8:	04c4b400 	.word	0x04c4b400
 80053bc:	0800ab88 	.word	0x0800ab88
 80053c0:	20000004 	.word	0x20000004
 80053c4:	20000008 	.word	0x20000008

080053c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80053ce:	4b2c      	ldr	r3, [pc, #176]	; (8005480 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 030c 	and.w	r3, r3, #12
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d102      	bne.n	80053e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053da:	4b2a      	ldr	r3, [pc, #168]	; (8005484 <HAL_RCC_GetSysClockFreq+0xbc>)
 80053dc:	613b      	str	r3, [r7, #16]
 80053de:	e047      	b.n	8005470 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80053e0:	4b27      	ldr	r3, [pc, #156]	; (8005480 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 030c 	and.w	r3, r3, #12
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d102      	bne.n	80053f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053ec:	4b26      	ldr	r3, [pc, #152]	; (8005488 <HAL_RCC_GetSysClockFreq+0xc0>)
 80053ee:	613b      	str	r3, [r7, #16]
 80053f0:	e03e      	b.n	8005470 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80053f2:	4b23      	ldr	r3, [pc, #140]	; (8005480 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 030c 	and.w	r3, r3, #12
 80053fa:	2b0c      	cmp	r3, #12
 80053fc:	d136      	bne.n	800546c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053fe:	4b20      	ldr	r3, [pc, #128]	; (8005480 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005408:	4b1d      	ldr	r3, [pc, #116]	; (8005480 <HAL_RCC_GetSysClockFreq+0xb8>)
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	091b      	lsrs	r3, r3, #4
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	3301      	adds	r3, #1
 8005414:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b03      	cmp	r3, #3
 800541a:	d10c      	bne.n	8005436 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800541c:	4a1a      	ldr	r2, [pc, #104]	; (8005488 <HAL_RCC_GetSysClockFreq+0xc0>)
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	fbb2 f3f3 	udiv	r3, r2, r3
 8005424:	4a16      	ldr	r2, [pc, #88]	; (8005480 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005426:	68d2      	ldr	r2, [r2, #12]
 8005428:	0a12      	lsrs	r2, r2, #8
 800542a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800542e:	fb02 f303 	mul.w	r3, r2, r3
 8005432:	617b      	str	r3, [r7, #20]
      break;
 8005434:	e00c      	b.n	8005450 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005436:	4a13      	ldr	r2, [pc, #76]	; (8005484 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	fbb2 f3f3 	udiv	r3, r2, r3
 800543e:	4a10      	ldr	r2, [pc, #64]	; (8005480 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005440:	68d2      	ldr	r2, [r2, #12]
 8005442:	0a12      	lsrs	r2, r2, #8
 8005444:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005448:	fb02 f303 	mul.w	r3, r2, r3
 800544c:	617b      	str	r3, [r7, #20]
      break;
 800544e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	0e5b      	lsrs	r3, r3, #25
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	3301      	adds	r3, #1
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	fbb2 f3f3 	udiv	r3, r2, r3
 8005468:	613b      	str	r3, [r7, #16]
 800546a:	e001      	b.n	8005470 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005470:	693b      	ldr	r3, [r7, #16]
}
 8005472:	4618      	mov	r0, r3
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40021000 	.word	0x40021000
 8005484:	00f42400 	.word	0x00f42400
 8005488:	007a1200 	.word	0x007a1200

0800548c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005490:	4b03      	ldr	r3, [pc, #12]	; (80054a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005492:	681b      	ldr	r3, [r3, #0]
}
 8005494:	4618      	mov	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	20000004 	.word	0x20000004

080054a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054a8:	f7ff fff0 	bl	800548c <HAL_RCC_GetHCLKFreq>
 80054ac:	4602      	mov	r2, r0
 80054ae:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	0a1b      	lsrs	r3, r3, #8
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	4904      	ldr	r1, [pc, #16]	; (80054cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80054ba:	5ccb      	ldrb	r3, [r1, r3]
 80054bc:	f003 031f 	and.w	r3, r3, #31
 80054c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40021000 	.word	0x40021000
 80054cc:	0800ab98 	.word	0x0800ab98

080054d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80054d4:	f7ff ffda 	bl	800548c <HAL_RCC_GetHCLKFreq>
 80054d8:	4602      	mov	r2, r0
 80054da:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	0adb      	lsrs	r3, r3, #11
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	4904      	ldr	r1, [pc, #16]	; (80054f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054e6:	5ccb      	ldrb	r3, [r1, r3]
 80054e8:	f003 031f 	and.w	r3, r3, #31
 80054ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	40021000 	.word	0x40021000
 80054f8:	0800ab98 	.word	0x0800ab98

080054fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005502:	4b1e      	ldr	r3, [pc, #120]	; (800557c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800550c:	4b1b      	ldr	r3, [pc, #108]	; (800557c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	3301      	adds	r3, #1
 8005518:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	2b03      	cmp	r3, #3
 800551e:	d10c      	bne.n	800553a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005520:	4a17      	ldr	r2, [pc, #92]	; (8005580 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	fbb2 f3f3 	udiv	r3, r2, r3
 8005528:	4a14      	ldr	r2, [pc, #80]	; (800557c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800552a:	68d2      	ldr	r2, [r2, #12]
 800552c:	0a12      	lsrs	r2, r2, #8
 800552e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005532:	fb02 f303 	mul.w	r3, r2, r3
 8005536:	617b      	str	r3, [r7, #20]
    break;
 8005538:	e00c      	b.n	8005554 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800553a:	4a12      	ldr	r2, [pc, #72]	; (8005584 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005542:	4a0e      	ldr	r2, [pc, #56]	; (800557c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005544:	68d2      	ldr	r2, [r2, #12]
 8005546:	0a12      	lsrs	r2, r2, #8
 8005548:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800554c:	fb02 f303 	mul.w	r3, r2, r3
 8005550:	617b      	str	r3, [r7, #20]
    break;
 8005552:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005554:	4b09      	ldr	r3, [pc, #36]	; (800557c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	0e5b      	lsrs	r3, r3, #25
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	3301      	adds	r3, #1
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	fbb2 f3f3 	udiv	r3, r2, r3
 800556c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800556e:	687b      	ldr	r3, [r7, #4]
}
 8005570:	4618      	mov	r0, r3
 8005572:	371c      	adds	r7, #28
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	40021000 	.word	0x40021000
 8005580:	007a1200 	.word	0x007a1200
 8005584:	00f42400 	.word	0x00f42400

08005588 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005590:	2300      	movs	r3, #0
 8005592:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005594:	2300      	movs	r3, #0
 8005596:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 8098 	beq.w	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055a6:	2300      	movs	r3, #0
 80055a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055aa:	4b43      	ldr	r3, [pc, #268]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10d      	bne.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055b6:	4b40      	ldr	r3, [pc, #256]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ba:	4a3f      	ldr	r2, [pc, #252]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c0:	6593      	str	r3, [r2, #88]	; 0x58
 80055c2:	4b3d      	ldr	r3, [pc, #244]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ca:	60bb      	str	r3, [r7, #8]
 80055cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ce:	2301      	movs	r3, #1
 80055d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055d2:	4b3a      	ldr	r3, [pc, #232]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a39      	ldr	r2, [pc, #228]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055de:	f7fd f8bf 	bl	8002760 <HAL_GetTick>
 80055e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055e4:	e009      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e6:	f7fd f8bb 	bl	8002760 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d902      	bls.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	74fb      	strb	r3, [r7, #19]
        break;
 80055f8:	e005      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055fa:	4b30      	ldr	r3, [pc, #192]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0ef      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005606:	7cfb      	ldrb	r3, [r7, #19]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d159      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800560c:	4b2a      	ldr	r3, [pc, #168]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800560e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005616:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d01e      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	429a      	cmp	r2, r3
 8005626:	d019      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005628:	4b23      	ldr	r3, [pc, #140]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800562a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005632:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005634:	4b20      	ldr	r3, [pc, #128]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563a:	4a1f      	ldr	r2, [pc, #124]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800563c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005644:	4b1c      	ldr	r3, [pc, #112]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564a:	4a1b      	ldr	r2, [pc, #108]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800564c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005654:	4a18      	ldr	r2, [pc, #96]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d016      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005666:	f7fd f87b 	bl	8002760 <HAL_GetTick>
 800566a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800566c:	e00b      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800566e:	f7fd f877 	bl	8002760 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	f241 3288 	movw	r2, #5000	; 0x1388
 800567c:	4293      	cmp	r3, r2
 800567e:	d902      	bls.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	74fb      	strb	r3, [r7, #19]
            break;
 8005684:	e006      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005686:	4b0c      	ldr	r3, [pc, #48]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0ec      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005694:	7cfb      	ldrb	r3, [r7, #19]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10b      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800569a:	4b07      	ldr	r3, [pc, #28]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800569c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a8:	4903      	ldr	r1, [pc, #12]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80056b0:	e008      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056b2:	7cfb      	ldrb	r3, [r7, #19]
 80056b4:	74bb      	strb	r3, [r7, #18]
 80056b6:	e005      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80056b8:	40021000 	.word	0x40021000
 80056bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c0:	7cfb      	ldrb	r3, [r7, #19]
 80056c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056c4:	7c7b      	ldrb	r3, [r7, #17]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d105      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ca:	4ba6      	ldr	r3, [pc, #664]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ce:	4aa5      	ldr	r2, [pc, #660]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056e2:	4ba0      	ldr	r3, [pc, #640]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e8:	f023 0203 	bic.w	r2, r3, #3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	499c      	ldr	r1, [pc, #624]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00a      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005704:	4b97      	ldr	r3, [pc, #604]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570a:	f023 020c 	bic.w	r2, r3, #12
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	4994      	ldr	r1, [pc, #592]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005726:	4b8f      	ldr	r3, [pc, #572]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	498b      	ldr	r1, [pc, #556]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005736:	4313      	orrs	r3, r2
 8005738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00a      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005748:	4b86      	ldr	r3, [pc, #536]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800574a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	4983      	ldr	r1, [pc, #524]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005758:	4313      	orrs	r3, r2
 800575a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800576a:	4b7e      	ldr	r3, [pc, #504]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800576c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005770:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	497a      	ldr	r1, [pc, #488]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800577a:	4313      	orrs	r3, r2
 800577c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800578c:	4b75      	ldr	r3, [pc, #468]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800578e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005792:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	4972      	ldr	r1, [pc, #456]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800579c:	4313      	orrs	r3, r2
 800579e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057ae:	4b6d      	ldr	r3, [pc, #436]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	4969      	ldr	r1, [pc, #420]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057d0:	4b64      	ldr	r3, [pc, #400]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	4961      	ldr	r1, [pc, #388]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057f2:	4b5c      	ldr	r3, [pc, #368]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	4958      	ldr	r1, [pc, #352]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005810:	2b00      	cmp	r3, #0
 8005812:	d015      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005814:	4b53      	ldr	r3, [pc, #332]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005822:	4950      	ldr	r1, [pc, #320]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005824:	4313      	orrs	r3, r2
 8005826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005832:	d105      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005834:	4b4b      	ldr	r3, [pc, #300]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	4a4a      	ldr	r2, [pc, #296]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800583a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800583e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005848:	2b00      	cmp	r3, #0
 800584a:	d015      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800584c:	4b45      	ldr	r3, [pc, #276]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800584e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005852:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585a:	4942      	ldr	r1, [pc, #264]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800585c:	4313      	orrs	r3, r2
 800585e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005866:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800586a:	d105      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800586c:	4b3d      	ldr	r3, [pc, #244]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	4a3c      	ldr	r2, [pc, #240]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005872:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005876:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d015      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005884:	4b37      	ldr	r3, [pc, #220]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005892:	4934      	ldr	r1, [pc, #208]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005894:	4313      	orrs	r3, r2
 8005896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058a2:	d105      	bne.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058a4:	4b2f      	ldr	r3, [pc, #188]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	4a2e      	ldr	r2, [pc, #184]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058ae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d015      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058bc:	4b29      	ldr	r3, [pc, #164]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ca:	4926      	ldr	r1, [pc, #152]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058da:	d105      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058dc:	4b21      	ldr	r3, [pc, #132]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	4a20      	ldr	r2, [pc, #128]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058e6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d015      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058f4:	4b1b      	ldr	r3, [pc, #108]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	4918      	ldr	r1, [pc, #96]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005904:	4313      	orrs	r3, r2
 8005906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005912:	d105      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005914:	4b13      	ldr	r3, [pc, #76]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	4a12      	ldr	r2, [pc, #72]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800591a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800591e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d015      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800592c:	4b0d      	ldr	r3, [pc, #52]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800592e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005932:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593a:	490a      	ldr	r1, [pc, #40]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800593c:	4313      	orrs	r3, r2
 800593e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800594a:	d105      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800594c:	4b05      	ldr	r3, [pc, #20]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	4a04      	ldr	r2, [pc, #16]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005956:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005958:	7cbb      	ldrb	r3, [r7, #18]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3718      	adds	r7, #24
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	40021000 	.word	0x40021000

08005968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e049      	b.n	8005a0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d106      	bne.n	8005994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fc fc12 	bl	80021b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	3304      	adds	r3, #4
 80059a4:	4619      	mov	r1, r3
 80059a6:	4610      	mov	r0, r2
 80059a8:	f000 fc8e 	bl	80062c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b082      	sub	sp, #8
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e049      	b.n	8005abc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d106      	bne.n	8005a42 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7fc fbdb 	bl	80021f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2202      	movs	r2, #2
 8005a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3304      	adds	r3, #4
 8005a52:	4619      	mov	r1, r3
 8005a54:	4610      	mov	r0, r2
 8005a56:	f000 fc37 	bl	80062c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d109      	bne.n	8005ae8 <HAL_TIM_PWM_Start+0x24>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	bf14      	ite	ne
 8005ae0:	2301      	movne	r3, #1
 8005ae2:	2300      	moveq	r3, #0
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	e03c      	b.n	8005b62 <HAL_TIM_PWM_Start+0x9e>
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d109      	bne.n	8005b02 <HAL_TIM_PWM_Start+0x3e>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	bf14      	ite	ne
 8005afa:	2301      	movne	r3, #1
 8005afc:	2300      	moveq	r3, #0
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	e02f      	b.n	8005b62 <HAL_TIM_PWM_Start+0x9e>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d109      	bne.n	8005b1c <HAL_TIM_PWM_Start+0x58>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	bf14      	ite	ne
 8005b14:	2301      	movne	r3, #1
 8005b16:	2300      	moveq	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	e022      	b.n	8005b62 <HAL_TIM_PWM_Start+0x9e>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2b0c      	cmp	r3, #12
 8005b20:	d109      	bne.n	8005b36 <HAL_TIM_PWM_Start+0x72>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	bf14      	ite	ne
 8005b2e:	2301      	movne	r3, #1
 8005b30:	2300      	moveq	r3, #0
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	e015      	b.n	8005b62 <HAL_TIM_PWM_Start+0x9e>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b10      	cmp	r3, #16
 8005b3a:	d109      	bne.n	8005b50 <HAL_TIM_PWM_Start+0x8c>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	bf14      	ite	ne
 8005b48:	2301      	movne	r3, #1
 8005b4a:	2300      	moveq	r3, #0
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	e008      	b.n	8005b62 <HAL_TIM_PWM_Start+0x9e>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	bf14      	ite	ne
 8005b5c:	2301      	movne	r3, #1
 8005b5e:	2300      	moveq	r3, #0
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e097      	b.n	8005c9a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d104      	bne.n	8005b7a <HAL_TIM_PWM_Start+0xb6>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b78:	e023      	b.n	8005bc2 <HAL_TIM_PWM_Start+0xfe>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d104      	bne.n	8005b8a <HAL_TIM_PWM_Start+0xc6>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b88:	e01b      	b.n	8005bc2 <HAL_TIM_PWM_Start+0xfe>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d104      	bne.n	8005b9a <HAL_TIM_PWM_Start+0xd6>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b98:	e013      	b.n	8005bc2 <HAL_TIM_PWM_Start+0xfe>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b0c      	cmp	r3, #12
 8005b9e:	d104      	bne.n	8005baa <HAL_TIM_PWM_Start+0xe6>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ba8:	e00b      	b.n	8005bc2 <HAL_TIM_PWM_Start+0xfe>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b10      	cmp	r3, #16
 8005bae:	d104      	bne.n	8005bba <HAL_TIM_PWM_Start+0xf6>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bb8:	e003      	b.n	8005bc2 <HAL_TIM_PWM_Start+0xfe>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	6839      	ldr	r1, [r7, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f001 f8c8 	bl	8006d60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a33      	ldr	r2, [pc, #204]	; (8005ca4 <HAL_TIM_PWM_Start+0x1e0>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d013      	beq.n	8005c02 <HAL_TIM_PWM_Start+0x13e>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a32      	ldr	r2, [pc, #200]	; (8005ca8 <HAL_TIM_PWM_Start+0x1e4>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00e      	beq.n	8005c02 <HAL_TIM_PWM_Start+0x13e>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a30      	ldr	r2, [pc, #192]	; (8005cac <HAL_TIM_PWM_Start+0x1e8>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d009      	beq.n	8005c02 <HAL_TIM_PWM_Start+0x13e>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a2f      	ldr	r2, [pc, #188]	; (8005cb0 <HAL_TIM_PWM_Start+0x1ec>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d004      	beq.n	8005c02 <HAL_TIM_PWM_Start+0x13e>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a2d      	ldr	r2, [pc, #180]	; (8005cb4 <HAL_TIM_PWM_Start+0x1f0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d101      	bne.n	8005c06 <HAL_TIM_PWM_Start+0x142>
 8005c02:	2301      	movs	r3, #1
 8005c04:	e000      	b.n	8005c08 <HAL_TIM_PWM_Start+0x144>
 8005c06:	2300      	movs	r3, #0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d007      	beq.n	8005c1c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a20      	ldr	r2, [pc, #128]	; (8005ca4 <HAL_TIM_PWM_Start+0x1e0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d018      	beq.n	8005c58 <HAL_TIM_PWM_Start+0x194>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c2e:	d013      	beq.n	8005c58 <HAL_TIM_PWM_Start+0x194>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a20      	ldr	r2, [pc, #128]	; (8005cb8 <HAL_TIM_PWM_Start+0x1f4>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d00e      	beq.n	8005c58 <HAL_TIM_PWM_Start+0x194>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a1f      	ldr	r2, [pc, #124]	; (8005cbc <HAL_TIM_PWM_Start+0x1f8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d009      	beq.n	8005c58 <HAL_TIM_PWM_Start+0x194>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a17      	ldr	r2, [pc, #92]	; (8005ca8 <HAL_TIM_PWM_Start+0x1e4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d004      	beq.n	8005c58 <HAL_TIM_PWM_Start+0x194>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a16      	ldr	r2, [pc, #88]	; (8005cac <HAL_TIM_PWM_Start+0x1e8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d115      	bne.n	8005c84 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	4b18      	ldr	r3, [pc, #96]	; (8005cc0 <HAL_TIM_PWM_Start+0x1fc>)
 8005c60:	4013      	ands	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b06      	cmp	r3, #6
 8005c68:	d015      	beq.n	8005c96 <HAL_TIM_PWM_Start+0x1d2>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c70:	d011      	beq.n	8005c96 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f042 0201 	orr.w	r2, r2, #1
 8005c80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c82:	e008      	b.n	8005c96 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0201 	orr.w	r2, r2, #1
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	e000      	b.n	8005c98 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	40012c00 	.word	0x40012c00
 8005ca8:	40013400 	.word	0x40013400
 8005cac:	40014000 	.word	0x40014000
 8005cb0:	40014400 	.word	0x40014400
 8005cb4:	40014800 	.word	0x40014800
 8005cb8:	40000400 	.word	0x40000400
 8005cbc:	40000800 	.word	0x40000800
 8005cc0:	00010007 	.word	0x00010007

08005cc4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e049      	b.n	8005d6a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7fc faa2 	bl	8002234 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3304      	adds	r3, #4
 8005d00:	4619      	mov	r1, r3
 8005d02:	4610      	mov	r0, r2
 8005d04:	f000 fae0 	bl	80062c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b086      	sub	sp, #24
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	60f8      	str	r0, [r7, #12]
 8005d7a:	60b9      	str	r1, [r7, #8]
 8005d7c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d101      	bne.n	8005d90 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e088      	b.n	8005ea2 <HAL_TIM_IC_ConfigChannel+0x130>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d11b      	bne.n	8005dd6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005dae:	f000 fe1d 	bl	80069ec <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	699a      	ldr	r2, [r3, #24]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 020c 	bic.w	r2, r2, #12
 8005dc0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6999      	ldr	r1, [r3, #24]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	619a      	str	r2, [r3, #24]
 8005dd4:	e060      	b.n	8005e98 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	d11c      	bne.n	8005e16 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005dec:	f000 fe95 	bl	8006b1a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005dfe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6999      	ldr	r1, [r3, #24]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	021a      	lsls	r2, r3, #8
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	619a      	str	r2, [r3, #24]
 8005e14:	e040      	b.n	8005e98 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	d11b      	bne.n	8005e54 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005e2c:	f000 fee2 	bl	8006bf4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	69da      	ldr	r2, [r3, #28]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 020c 	bic.w	r2, r2, #12
 8005e3e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	69d9      	ldr	r1, [r3, #28]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	689a      	ldr	r2, [r3, #8]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	61da      	str	r2, [r3, #28]
 8005e52:	e021      	b.n	8005e98 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b0c      	cmp	r3, #12
 8005e58:	d11c      	bne.n	8005e94 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005e6a:	f000 feff 	bl	8006c6c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69da      	ldr	r2, [r3, #28]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e7c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69d9      	ldr	r1, [r3, #28]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	021a      	lsls	r2, r3, #8
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	61da      	str	r2, [r3, #28]
 8005e92:	e001      	b.n	8005e98 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
	...

08005eac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d101      	bne.n	8005eca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	e0ff      	b.n	80060ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b14      	cmp	r3, #20
 8005ed6:	f200 80f0 	bhi.w	80060ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005eda:	a201      	add	r2, pc, #4	; (adr r2, 8005ee0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee0:	08005f35 	.word	0x08005f35
 8005ee4:	080060bb 	.word	0x080060bb
 8005ee8:	080060bb 	.word	0x080060bb
 8005eec:	080060bb 	.word	0x080060bb
 8005ef0:	08005f75 	.word	0x08005f75
 8005ef4:	080060bb 	.word	0x080060bb
 8005ef8:	080060bb 	.word	0x080060bb
 8005efc:	080060bb 	.word	0x080060bb
 8005f00:	08005fb7 	.word	0x08005fb7
 8005f04:	080060bb 	.word	0x080060bb
 8005f08:	080060bb 	.word	0x080060bb
 8005f0c:	080060bb 	.word	0x080060bb
 8005f10:	08005ff7 	.word	0x08005ff7
 8005f14:	080060bb 	.word	0x080060bb
 8005f18:	080060bb 	.word	0x080060bb
 8005f1c:	080060bb 	.word	0x080060bb
 8005f20:	08006039 	.word	0x08006039
 8005f24:	080060bb 	.word	0x080060bb
 8005f28:	080060bb 	.word	0x080060bb
 8005f2c:	080060bb 	.word	0x080060bb
 8005f30:	08006079 	.word	0x08006079
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68b9      	ldr	r1, [r7, #8]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 fa60 	bl	8006400 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699a      	ldr	r2, [r3, #24]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0208 	orr.w	r2, r2, #8
 8005f4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699a      	ldr	r2, [r3, #24]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f022 0204 	bic.w	r2, r2, #4
 8005f5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6999      	ldr	r1, [r3, #24]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	691a      	ldr	r2, [r3, #16]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	619a      	str	r2, [r3, #24]
      break;
 8005f72:	e0a5      	b.n	80060c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 fad0 	bl	8006520 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699a      	ldr	r2, [r3, #24]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699a      	ldr	r2, [r3, #24]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6999      	ldr	r1, [r3, #24]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	021a      	lsls	r2, r3, #8
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	619a      	str	r2, [r3, #24]
      break;
 8005fb4:	e084      	b.n	80060c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68b9      	ldr	r1, [r7, #8]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 fb39 	bl	8006634 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69da      	ldr	r2, [r3, #28]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f042 0208 	orr.w	r2, r2, #8
 8005fd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	69da      	ldr	r2, [r3, #28]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0204 	bic.w	r2, r2, #4
 8005fe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	69d9      	ldr	r1, [r3, #28]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	691a      	ldr	r2, [r3, #16]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	61da      	str	r2, [r3, #28]
      break;
 8005ff4:	e064      	b.n	80060c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68b9      	ldr	r1, [r7, #8]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 fba1 	bl	8006744 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69da      	ldr	r2, [r3, #28]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	69da      	ldr	r2, [r3, #28]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69d9      	ldr	r1, [r3, #28]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	021a      	lsls	r2, r3, #8
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	61da      	str	r2, [r3, #28]
      break;
 8006036:	e043      	b.n	80060c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68b9      	ldr	r1, [r7, #8]
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fc0a 	bl	8006858 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0208 	orr.w	r2, r2, #8
 8006052:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0204 	bic.w	r2, r2, #4
 8006062:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	691a      	ldr	r2, [r3, #16]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006076:	e023      	b.n	80060c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68b9      	ldr	r1, [r7, #8]
 800607e:	4618      	mov	r0, r3
 8006080:	f000 fc4e 	bl	8006920 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006092:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	021a      	lsls	r2, r3, #8
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80060b8:	e002      	b.n	80060c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	75fb      	strb	r3, [r7, #23]
      break;
 80060be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop

080060d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d101      	bne.n	80060f0 <HAL_TIM_ConfigClockSource+0x1c>
 80060ec:	2302      	movs	r3, #2
 80060ee:	e0de      	b.n	80062ae <HAL_TIM_ConfigClockSource+0x1da>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800610e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800611a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a63      	ldr	r2, [pc, #396]	; (80062b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	f000 80a9 	beq.w	8006282 <HAL_TIM_ConfigClockSource+0x1ae>
 8006130:	4a61      	ldr	r2, [pc, #388]	; (80062b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006132:	4293      	cmp	r3, r2
 8006134:	f200 80ae 	bhi.w	8006294 <HAL_TIM_ConfigClockSource+0x1c0>
 8006138:	4a60      	ldr	r2, [pc, #384]	; (80062bc <HAL_TIM_ConfigClockSource+0x1e8>)
 800613a:	4293      	cmp	r3, r2
 800613c:	f000 80a1 	beq.w	8006282 <HAL_TIM_ConfigClockSource+0x1ae>
 8006140:	4a5e      	ldr	r2, [pc, #376]	; (80062bc <HAL_TIM_ConfigClockSource+0x1e8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	f200 80a6 	bhi.w	8006294 <HAL_TIM_ConfigClockSource+0x1c0>
 8006148:	4a5d      	ldr	r2, [pc, #372]	; (80062c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800614a:	4293      	cmp	r3, r2
 800614c:	f000 8099 	beq.w	8006282 <HAL_TIM_ConfigClockSource+0x1ae>
 8006150:	4a5b      	ldr	r2, [pc, #364]	; (80062c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006152:	4293      	cmp	r3, r2
 8006154:	f200 809e 	bhi.w	8006294 <HAL_TIM_ConfigClockSource+0x1c0>
 8006158:	4a5a      	ldr	r2, [pc, #360]	; (80062c4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	f000 8091 	beq.w	8006282 <HAL_TIM_ConfigClockSource+0x1ae>
 8006160:	4a58      	ldr	r2, [pc, #352]	; (80062c4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006162:	4293      	cmp	r3, r2
 8006164:	f200 8096 	bhi.w	8006294 <HAL_TIM_ConfigClockSource+0x1c0>
 8006168:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800616c:	f000 8089 	beq.w	8006282 <HAL_TIM_ConfigClockSource+0x1ae>
 8006170:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006174:	f200 808e 	bhi.w	8006294 <HAL_TIM_ConfigClockSource+0x1c0>
 8006178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800617c:	d03e      	beq.n	80061fc <HAL_TIM_ConfigClockSource+0x128>
 800617e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006182:	f200 8087 	bhi.w	8006294 <HAL_TIM_ConfigClockSource+0x1c0>
 8006186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800618a:	f000 8086 	beq.w	800629a <HAL_TIM_ConfigClockSource+0x1c6>
 800618e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006192:	d87f      	bhi.n	8006294 <HAL_TIM_ConfigClockSource+0x1c0>
 8006194:	2b70      	cmp	r3, #112	; 0x70
 8006196:	d01a      	beq.n	80061ce <HAL_TIM_ConfigClockSource+0xfa>
 8006198:	2b70      	cmp	r3, #112	; 0x70
 800619a:	d87b      	bhi.n	8006294 <HAL_TIM_ConfigClockSource+0x1c0>
 800619c:	2b60      	cmp	r3, #96	; 0x60
 800619e:	d050      	beq.n	8006242 <HAL_TIM_ConfigClockSource+0x16e>
 80061a0:	2b60      	cmp	r3, #96	; 0x60
 80061a2:	d877      	bhi.n	8006294 <HAL_TIM_ConfigClockSource+0x1c0>
 80061a4:	2b50      	cmp	r3, #80	; 0x50
 80061a6:	d03c      	beq.n	8006222 <HAL_TIM_ConfigClockSource+0x14e>
 80061a8:	2b50      	cmp	r3, #80	; 0x50
 80061aa:	d873      	bhi.n	8006294 <HAL_TIM_ConfigClockSource+0x1c0>
 80061ac:	2b40      	cmp	r3, #64	; 0x40
 80061ae:	d058      	beq.n	8006262 <HAL_TIM_ConfigClockSource+0x18e>
 80061b0:	2b40      	cmp	r3, #64	; 0x40
 80061b2:	d86f      	bhi.n	8006294 <HAL_TIM_ConfigClockSource+0x1c0>
 80061b4:	2b30      	cmp	r3, #48	; 0x30
 80061b6:	d064      	beq.n	8006282 <HAL_TIM_ConfigClockSource+0x1ae>
 80061b8:	2b30      	cmp	r3, #48	; 0x30
 80061ba:	d86b      	bhi.n	8006294 <HAL_TIM_ConfigClockSource+0x1c0>
 80061bc:	2b20      	cmp	r3, #32
 80061be:	d060      	beq.n	8006282 <HAL_TIM_ConfigClockSource+0x1ae>
 80061c0:	2b20      	cmp	r3, #32
 80061c2:	d867      	bhi.n	8006294 <HAL_TIM_ConfigClockSource+0x1c0>
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d05c      	beq.n	8006282 <HAL_TIM_ConfigClockSource+0x1ae>
 80061c8:	2b10      	cmp	r3, #16
 80061ca:	d05a      	beq.n	8006282 <HAL_TIM_ConfigClockSource+0x1ae>
 80061cc:	e062      	b.n	8006294 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061de:	f000 fd9f 	bl	8006d20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	609a      	str	r2, [r3, #8]
      break;
 80061fa:	e04f      	b.n	800629c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800620c:	f000 fd88 	bl	8006d20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689a      	ldr	r2, [r3, #8]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800621e:	609a      	str	r2, [r3, #8]
      break;
 8006220:	e03c      	b.n	800629c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800622e:	461a      	mov	r2, r3
 8006230:	f000 fc44 	bl	8006abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2150      	movs	r1, #80	; 0x50
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fd53 	bl	8006ce6 <TIM_ITRx_SetConfig>
      break;
 8006240:	e02c      	b.n	800629c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800624e:	461a      	mov	r2, r3
 8006250:	f000 fca0 	bl	8006b94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2160      	movs	r1, #96	; 0x60
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fd43 	bl	8006ce6 <TIM_ITRx_SetConfig>
      break;
 8006260:	e01c      	b.n	800629c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800626e:	461a      	mov	r2, r3
 8006270:	f000 fc24 	bl	8006abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2140      	movs	r1, #64	; 0x40
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fd33 	bl	8006ce6 <TIM_ITRx_SetConfig>
      break;
 8006280:	e00c      	b.n	800629c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4619      	mov	r1, r3
 800628c:	4610      	mov	r0, r2
 800628e:	f000 fd2a 	bl	8006ce6 <TIM_ITRx_SetConfig>
      break;
 8006292:	e003      	b.n	800629c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	73fb      	strb	r3, [r7, #15]
      break;
 8006298:	e000      	b.n	800629c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800629a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	00100070 	.word	0x00100070
 80062bc:	00100040 	.word	0x00100040
 80062c0:	00100030 	.word	0x00100030
 80062c4:	00100020 	.word	0x00100020

080062c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a42      	ldr	r2, [pc, #264]	; (80063e4 <TIM_Base_SetConfig+0x11c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00f      	beq.n	8006300 <TIM_Base_SetConfig+0x38>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e6:	d00b      	beq.n	8006300 <TIM_Base_SetConfig+0x38>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a3f      	ldr	r2, [pc, #252]	; (80063e8 <TIM_Base_SetConfig+0x120>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d007      	beq.n	8006300 <TIM_Base_SetConfig+0x38>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a3e      	ldr	r2, [pc, #248]	; (80063ec <TIM_Base_SetConfig+0x124>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d003      	beq.n	8006300 <TIM_Base_SetConfig+0x38>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a3d      	ldr	r2, [pc, #244]	; (80063f0 <TIM_Base_SetConfig+0x128>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d108      	bne.n	8006312 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a33      	ldr	r2, [pc, #204]	; (80063e4 <TIM_Base_SetConfig+0x11c>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d01b      	beq.n	8006352 <TIM_Base_SetConfig+0x8a>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006320:	d017      	beq.n	8006352 <TIM_Base_SetConfig+0x8a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a30      	ldr	r2, [pc, #192]	; (80063e8 <TIM_Base_SetConfig+0x120>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d013      	beq.n	8006352 <TIM_Base_SetConfig+0x8a>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a2f      	ldr	r2, [pc, #188]	; (80063ec <TIM_Base_SetConfig+0x124>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d00f      	beq.n	8006352 <TIM_Base_SetConfig+0x8a>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a2e      	ldr	r2, [pc, #184]	; (80063f0 <TIM_Base_SetConfig+0x128>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d00b      	beq.n	8006352 <TIM_Base_SetConfig+0x8a>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a2d      	ldr	r2, [pc, #180]	; (80063f4 <TIM_Base_SetConfig+0x12c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d007      	beq.n	8006352 <TIM_Base_SetConfig+0x8a>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a2c      	ldr	r2, [pc, #176]	; (80063f8 <TIM_Base_SetConfig+0x130>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d003      	beq.n	8006352 <TIM_Base_SetConfig+0x8a>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a2b      	ldr	r2, [pc, #172]	; (80063fc <TIM_Base_SetConfig+0x134>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d108      	bne.n	8006364 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	4313      	orrs	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	689a      	ldr	r2, [r3, #8]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a16      	ldr	r2, [pc, #88]	; (80063e4 <TIM_Base_SetConfig+0x11c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d00f      	beq.n	80063b0 <TIM_Base_SetConfig+0xe8>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a17      	ldr	r2, [pc, #92]	; (80063f0 <TIM_Base_SetConfig+0x128>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d00b      	beq.n	80063b0 <TIM_Base_SetConfig+0xe8>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a16      	ldr	r2, [pc, #88]	; (80063f4 <TIM_Base_SetConfig+0x12c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d007      	beq.n	80063b0 <TIM_Base_SetConfig+0xe8>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a15      	ldr	r2, [pc, #84]	; (80063f8 <TIM_Base_SetConfig+0x130>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d003      	beq.n	80063b0 <TIM_Base_SetConfig+0xe8>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a14      	ldr	r2, [pc, #80]	; (80063fc <TIM_Base_SetConfig+0x134>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d103      	bne.n	80063b8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	691a      	ldr	r2, [r3, #16]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d105      	bne.n	80063d6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	f023 0201 	bic.w	r2, r3, #1
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	611a      	str	r2, [r3, #16]
  }
}
 80063d6:	bf00      	nop
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	40012c00 	.word	0x40012c00
 80063e8:	40000400 	.word	0x40000400
 80063ec:	40000800 	.word	0x40000800
 80063f0:	40013400 	.word	0x40013400
 80063f4:	40014000 	.word	0x40014000
 80063f8:	40014400 	.word	0x40014400
 80063fc:	40014800 	.word	0x40014800

08006400 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	f023 0201 	bic.w	r2, r3, #1
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800642e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 0303 	bic.w	r3, r3, #3
 800643a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f023 0302 	bic.w	r3, r3, #2
 800644c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a2c      	ldr	r2, [pc, #176]	; (800650c <TIM_OC1_SetConfig+0x10c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d00f      	beq.n	8006480 <TIM_OC1_SetConfig+0x80>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a2b      	ldr	r2, [pc, #172]	; (8006510 <TIM_OC1_SetConfig+0x110>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00b      	beq.n	8006480 <TIM_OC1_SetConfig+0x80>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a2a      	ldr	r2, [pc, #168]	; (8006514 <TIM_OC1_SetConfig+0x114>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d007      	beq.n	8006480 <TIM_OC1_SetConfig+0x80>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a29      	ldr	r2, [pc, #164]	; (8006518 <TIM_OC1_SetConfig+0x118>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <TIM_OC1_SetConfig+0x80>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a28      	ldr	r2, [pc, #160]	; (800651c <TIM_OC1_SetConfig+0x11c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d10c      	bne.n	800649a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f023 0308 	bic.w	r3, r3, #8
 8006486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	4313      	orrs	r3, r2
 8006490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f023 0304 	bic.w	r3, r3, #4
 8006498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a1b      	ldr	r2, [pc, #108]	; (800650c <TIM_OC1_SetConfig+0x10c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d00f      	beq.n	80064c2 <TIM_OC1_SetConfig+0xc2>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a1a      	ldr	r2, [pc, #104]	; (8006510 <TIM_OC1_SetConfig+0x110>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d00b      	beq.n	80064c2 <TIM_OC1_SetConfig+0xc2>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a19      	ldr	r2, [pc, #100]	; (8006514 <TIM_OC1_SetConfig+0x114>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d007      	beq.n	80064c2 <TIM_OC1_SetConfig+0xc2>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a18      	ldr	r2, [pc, #96]	; (8006518 <TIM_OC1_SetConfig+0x118>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d003      	beq.n	80064c2 <TIM_OC1_SetConfig+0xc2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a17      	ldr	r2, [pc, #92]	; (800651c <TIM_OC1_SetConfig+0x11c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d111      	bne.n	80064e6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	4313      	orrs	r3, r2
 80064da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	621a      	str	r2, [r3, #32]
}
 8006500:	bf00      	nop
 8006502:	371c      	adds	r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	40012c00 	.word	0x40012c00
 8006510:	40013400 	.word	0x40013400
 8006514:	40014000 	.word	0x40014000
 8006518:	40014400 	.word	0x40014400
 800651c:	40014800 	.word	0x40014800

08006520 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	f023 0210 	bic.w	r2, r3, #16
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800654e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800655a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	021b      	lsls	r3, r3, #8
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4313      	orrs	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f023 0320 	bic.w	r3, r3, #32
 800656e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	011b      	lsls	r3, r3, #4
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	4313      	orrs	r3, r2
 800657a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a28      	ldr	r2, [pc, #160]	; (8006620 <TIM_OC2_SetConfig+0x100>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d003      	beq.n	800658c <TIM_OC2_SetConfig+0x6c>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a27      	ldr	r2, [pc, #156]	; (8006624 <TIM_OC2_SetConfig+0x104>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d10d      	bne.n	80065a8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	4313      	orrs	r3, r2
 800659e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a1d      	ldr	r2, [pc, #116]	; (8006620 <TIM_OC2_SetConfig+0x100>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d00f      	beq.n	80065d0 <TIM_OC2_SetConfig+0xb0>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a1c      	ldr	r2, [pc, #112]	; (8006624 <TIM_OC2_SetConfig+0x104>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00b      	beq.n	80065d0 <TIM_OC2_SetConfig+0xb0>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a1b      	ldr	r2, [pc, #108]	; (8006628 <TIM_OC2_SetConfig+0x108>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d007      	beq.n	80065d0 <TIM_OC2_SetConfig+0xb0>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a1a      	ldr	r2, [pc, #104]	; (800662c <TIM_OC2_SetConfig+0x10c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d003      	beq.n	80065d0 <TIM_OC2_SetConfig+0xb0>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a19      	ldr	r2, [pc, #100]	; (8006630 <TIM_OC2_SetConfig+0x110>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d113      	bne.n	80065f8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	621a      	str	r2, [r3, #32]
}
 8006612:	bf00      	nop
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	40012c00 	.word	0x40012c00
 8006624:	40013400 	.word	0x40013400
 8006628:	40014000 	.word	0x40014000
 800662c:	40014400 	.word	0x40014400
 8006630:	40014800 	.word	0x40014800

08006634 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0303 	bic.w	r3, r3, #3
 800666e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	021b      	lsls	r3, r3, #8
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	4313      	orrs	r3, r2
 800668c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a27      	ldr	r2, [pc, #156]	; (8006730 <TIM_OC3_SetConfig+0xfc>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d003      	beq.n	800669e <TIM_OC3_SetConfig+0x6a>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a26      	ldr	r2, [pc, #152]	; (8006734 <TIM_OC3_SetConfig+0x100>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d10d      	bne.n	80066ba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	021b      	lsls	r3, r3, #8
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a1c      	ldr	r2, [pc, #112]	; (8006730 <TIM_OC3_SetConfig+0xfc>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00f      	beq.n	80066e2 <TIM_OC3_SetConfig+0xae>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a1b      	ldr	r2, [pc, #108]	; (8006734 <TIM_OC3_SetConfig+0x100>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00b      	beq.n	80066e2 <TIM_OC3_SetConfig+0xae>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a1a      	ldr	r2, [pc, #104]	; (8006738 <TIM_OC3_SetConfig+0x104>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d007      	beq.n	80066e2 <TIM_OC3_SetConfig+0xae>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a19      	ldr	r2, [pc, #100]	; (800673c <TIM_OC3_SetConfig+0x108>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d003      	beq.n	80066e2 <TIM_OC3_SetConfig+0xae>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a18      	ldr	r2, [pc, #96]	; (8006740 <TIM_OC3_SetConfig+0x10c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d113      	bne.n	800670a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4313      	orrs	r3, r2
 8006708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	621a      	str	r2, [r3, #32]
}
 8006724:	bf00      	nop
 8006726:	371c      	adds	r7, #28
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	40012c00 	.word	0x40012c00
 8006734:	40013400 	.word	0x40013400
 8006738:	40014000 	.word	0x40014000
 800673c:	40014400 	.word	0x40014400
 8006740:	40014800 	.word	0x40014800

08006744 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800677e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	021b      	lsls	r3, r3, #8
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	031b      	lsls	r3, r3, #12
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	4313      	orrs	r3, r2
 800679e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a28      	ldr	r2, [pc, #160]	; (8006844 <TIM_OC4_SetConfig+0x100>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d003      	beq.n	80067b0 <TIM_OC4_SetConfig+0x6c>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a27      	ldr	r2, [pc, #156]	; (8006848 <TIM_OC4_SetConfig+0x104>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d10d      	bne.n	80067cc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	031b      	lsls	r3, r3, #12
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a1d      	ldr	r2, [pc, #116]	; (8006844 <TIM_OC4_SetConfig+0x100>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d00f      	beq.n	80067f4 <TIM_OC4_SetConfig+0xb0>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a1c      	ldr	r2, [pc, #112]	; (8006848 <TIM_OC4_SetConfig+0x104>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d00b      	beq.n	80067f4 <TIM_OC4_SetConfig+0xb0>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a1b      	ldr	r2, [pc, #108]	; (800684c <TIM_OC4_SetConfig+0x108>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d007      	beq.n	80067f4 <TIM_OC4_SetConfig+0xb0>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a1a      	ldr	r2, [pc, #104]	; (8006850 <TIM_OC4_SetConfig+0x10c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d003      	beq.n	80067f4 <TIM_OC4_SetConfig+0xb0>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a19      	ldr	r2, [pc, #100]	; (8006854 <TIM_OC4_SetConfig+0x110>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d113      	bne.n	800681c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067fa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006802:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	019b      	lsls	r3, r3, #6
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	4313      	orrs	r3, r2
 800680e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	019b      	lsls	r3, r3, #6
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	4313      	orrs	r3, r2
 800681a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	621a      	str	r2, [r3, #32]
}
 8006836:	bf00      	nop
 8006838:	371c      	adds	r7, #28
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	40012c00 	.word	0x40012c00
 8006848:	40013400 	.word	0x40013400
 800684c:	40014000 	.word	0x40014000
 8006850:	40014400 	.word	0x40014400
 8006854:	40014800 	.word	0x40014800

08006858 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800687e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800689c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	041b      	lsls	r3, r3, #16
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a17      	ldr	r2, [pc, #92]	; (800690c <TIM_OC5_SetConfig+0xb4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00f      	beq.n	80068d2 <TIM_OC5_SetConfig+0x7a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a16      	ldr	r2, [pc, #88]	; (8006910 <TIM_OC5_SetConfig+0xb8>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d00b      	beq.n	80068d2 <TIM_OC5_SetConfig+0x7a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a15      	ldr	r2, [pc, #84]	; (8006914 <TIM_OC5_SetConfig+0xbc>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d007      	beq.n	80068d2 <TIM_OC5_SetConfig+0x7a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a14      	ldr	r2, [pc, #80]	; (8006918 <TIM_OC5_SetConfig+0xc0>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d003      	beq.n	80068d2 <TIM_OC5_SetConfig+0x7a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a13      	ldr	r2, [pc, #76]	; (800691c <TIM_OC5_SetConfig+0xc4>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d109      	bne.n	80068e6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	021b      	lsls	r3, r3, #8
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	621a      	str	r2, [r3, #32]
}
 8006900:	bf00      	nop
 8006902:	371c      	adds	r7, #28
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	40012c00 	.word	0x40012c00
 8006910:	40013400 	.word	0x40013400
 8006914:	40014000 	.word	0x40014000
 8006918:	40014400 	.word	0x40014400
 800691c:	40014800 	.word	0x40014800

08006920 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800694e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	021b      	lsls	r3, r3, #8
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4313      	orrs	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006966:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	051b      	lsls	r3, r3, #20
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a18      	ldr	r2, [pc, #96]	; (80069d8 <TIM_OC6_SetConfig+0xb8>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d00f      	beq.n	800699c <TIM_OC6_SetConfig+0x7c>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a17      	ldr	r2, [pc, #92]	; (80069dc <TIM_OC6_SetConfig+0xbc>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d00b      	beq.n	800699c <TIM_OC6_SetConfig+0x7c>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a16      	ldr	r2, [pc, #88]	; (80069e0 <TIM_OC6_SetConfig+0xc0>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d007      	beq.n	800699c <TIM_OC6_SetConfig+0x7c>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a15      	ldr	r2, [pc, #84]	; (80069e4 <TIM_OC6_SetConfig+0xc4>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d003      	beq.n	800699c <TIM_OC6_SetConfig+0x7c>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a14      	ldr	r2, [pc, #80]	; (80069e8 <TIM_OC6_SetConfig+0xc8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d109      	bne.n	80069b0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	029b      	lsls	r3, r3, #10
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	621a      	str	r2, [r3, #32]
}
 80069ca:	bf00      	nop
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	40012c00 	.word	0x40012c00
 80069dc:	40013400 	.word	0x40013400
 80069e0:	40014000 	.word	0x40014000
 80069e4:	40014400 	.word	0x40014400
 80069e8:	40014800 	.word	0x40014800

080069ec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b087      	sub	sp, #28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	f023 0201 	bic.w	r2, r3, #1
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4a24      	ldr	r2, [pc, #144]	; (8006aa8 <TIM_TI1_SetConfig+0xbc>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d013      	beq.n	8006a42 <TIM_TI1_SetConfig+0x56>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a20:	d00f      	beq.n	8006a42 <TIM_TI1_SetConfig+0x56>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4a21      	ldr	r2, [pc, #132]	; (8006aac <TIM_TI1_SetConfig+0xc0>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d00b      	beq.n	8006a42 <TIM_TI1_SetConfig+0x56>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	4a20      	ldr	r2, [pc, #128]	; (8006ab0 <TIM_TI1_SetConfig+0xc4>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d007      	beq.n	8006a42 <TIM_TI1_SetConfig+0x56>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4a1f      	ldr	r2, [pc, #124]	; (8006ab4 <TIM_TI1_SetConfig+0xc8>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d003      	beq.n	8006a42 <TIM_TI1_SetConfig+0x56>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	4a1e      	ldr	r2, [pc, #120]	; (8006ab8 <TIM_TI1_SetConfig+0xcc>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d101      	bne.n	8006a46 <TIM_TI1_SetConfig+0x5a>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e000      	b.n	8006a48 <TIM_TI1_SetConfig+0x5c>
 8006a46:	2300      	movs	r3, #0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d008      	beq.n	8006a5e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f023 0303 	bic.w	r3, r3, #3
 8006a52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	e003      	b.n	8006a66 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f043 0301 	orr.w	r3, r3, #1
 8006a64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	011b      	lsls	r3, r3, #4
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f023 030a 	bic.w	r3, r3, #10
 8006a80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	f003 030a 	and.w	r3, r3, #10
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	621a      	str	r2, [r3, #32]
}
 8006a9a:	bf00      	nop
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	40012c00 	.word	0x40012c00
 8006aac:	40000400 	.word	0x40000400
 8006ab0:	40000800 	.word	0x40000800
 8006ab4:	40013400 	.word	0x40013400
 8006ab8:	40014000 	.word	0x40014000

08006abc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	f023 0201 	bic.w	r2, r3, #1
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	011b      	lsls	r3, r3, #4
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f023 030a 	bic.w	r3, r3, #10
 8006af8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	621a      	str	r2, [r3, #32]
}
 8006b0e:	bf00      	nop
 8006b10:	371c      	adds	r7, #28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b087      	sub	sp, #28
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
 8006b26:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	f023 0210 	bic.w	r2, r3, #16
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	021b      	lsls	r3, r3, #8
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	031b      	lsls	r3, r3, #12
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	011b      	lsls	r3, r3, #4
 8006b72:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	621a      	str	r2, [r3, #32]
}
 8006b88:	bf00      	nop
 8006b8a:	371c      	adds	r7, #28
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	f023 0210 	bic.w	r2, r3, #16
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	031b      	lsls	r3, r3, #12
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bd0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	011b      	lsls	r3, r3, #4
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	621a      	str	r2, [r3, #32]
}
 8006be8:	bf00      	nop
 8006bea:	371c      	adds	r7, #28
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	f023 0303 	bic.w	r3, r3, #3
 8006c20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c30:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	011b      	lsls	r3, r3, #4
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006c44:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	021b      	lsls	r3, r3, #8
 8006c4a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	621a      	str	r2, [r3, #32]
}
 8006c60:	bf00      	nop
 8006c62:	371c      	adds	r7, #28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c98:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	021b      	lsls	r3, r3, #8
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006caa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	031b      	lsls	r3, r3, #12
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006cbe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	031b      	lsls	r3, r3, #12
 8006cc4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	621a      	str	r2, [r3, #32]
}
 8006cda:	bf00      	nop
 8006cdc:	371c      	adds	r7, #28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b085      	sub	sp, #20
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	f043 0307 	orr.w	r3, r3, #7
 8006d0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	609a      	str	r2, [r3, #8]
}
 8006d14:	bf00      	nop
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
 8006d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	021a      	lsls	r2, r3, #8
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	431a      	orrs	r2, r3
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	609a      	str	r2, [r3, #8]
}
 8006d54:	bf00      	nop
 8006d56:	371c      	adds	r7, #28
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f003 031f 	and.w	r3, r3, #31
 8006d72:	2201      	movs	r2, #1
 8006d74:	fa02 f303 	lsl.w	r3, r2, r3
 8006d78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6a1a      	ldr	r2, [r3, #32]
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	43db      	mvns	r3, r3
 8006d82:	401a      	ands	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6a1a      	ldr	r2, [r3, #32]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f003 031f 	and.w	r3, r3, #31
 8006d92:	6879      	ldr	r1, [r7, #4]
 8006d94:	fa01 f303 	lsl.w	r3, r1, r3
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	621a      	str	r2, [r3, #32]
}
 8006d9e:	bf00      	nop
 8006da0:	371c      	adds	r7, #28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
	...

08006dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d101      	bne.n	8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	e065      	b.n	8006e90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a2c      	ldr	r2, [pc, #176]	; (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d004      	beq.n	8006df8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a2b      	ldr	r2, [pc, #172]	; (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d108      	bne.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006dfe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a1b      	ldr	r2, [pc, #108]	; (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d018      	beq.n	8006e64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e3a:	d013      	beq.n	8006e64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a18      	ldr	r2, [pc, #96]	; (8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d00e      	beq.n	8006e64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a17      	ldr	r2, [pc, #92]	; (8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d009      	beq.n	8006e64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a12      	ldr	r2, [pc, #72]	; (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d004      	beq.n	8006e64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a13      	ldr	r2, [pc, #76]	; (8006eac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d10c      	bne.n	8006e7e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	40012c00 	.word	0x40012c00
 8006ea0:	40013400 	.word	0x40013400
 8006ea4:	40000400 	.word	0x40000400
 8006ea8:	40000800 	.word	0x40000800
 8006eac:	40014000 	.word	0x40014000

08006eb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d101      	bne.n	8006ecc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ec8:	2302      	movs	r3, #2
 8006eca:	e073      	b.n	8006fb4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f32:	4313      	orrs	r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	041b      	lsls	r3, r3, #16
 8006f42:	4313      	orrs	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a19      	ldr	r2, [pc, #100]	; (8006fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d004      	beq.n	8006f68 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a18      	ldr	r2, [pc, #96]	; (8006fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d11c      	bne.n	8006fa2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f72:	051b      	lsls	r3, r3, #20
 8006f74:	4313      	orrs	r3, r2
 8006f76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	4313      	orrs	r3, r2
 8006f92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	40012c00 	.word	0x40012c00
 8006fc4:	40013400 	.word	0x40013400

08006fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d101      	bne.n	8006fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e042      	b.n	8007060 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d106      	bne.n	8006ff2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7fb f9cf 	bl	8002390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2224      	movs	r2, #36	; 0x24
 8006ff6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f022 0201 	bic.w	r2, r2, #1
 8007008:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fb82 	bl	800771c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f8b3 	bl	8007184 <UART_SetConfig>
 800701e:	4603      	mov	r3, r0
 8007020:	2b01      	cmp	r3, #1
 8007022:	d101      	bne.n	8007028 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e01b      	b.n	8007060 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007036:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689a      	ldr	r2, [r3, #8]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007046:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f042 0201 	orr.w	r2, r2, #1
 8007056:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fc01 	bl	8007860 <UART_CheckIdleState>
 800705e:	4603      	mov	r3, r0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b08a      	sub	sp, #40	; 0x28
 800706c:	af02      	add	r7, sp, #8
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	603b      	str	r3, [r7, #0]
 8007074:	4613      	mov	r3, r2
 8007076:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800707e:	2b20      	cmp	r3, #32
 8007080:	d17b      	bne.n	800717a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <HAL_UART_Transmit+0x26>
 8007088:	88fb      	ldrh	r3, [r7, #6]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e074      	b.n	800717c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2221      	movs	r2, #33	; 0x21
 800709e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070a2:	f7fb fb5d 	bl	8002760 <HAL_GetTick>
 80070a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	88fa      	ldrh	r2, [r7, #6]
 80070ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	88fa      	ldrh	r2, [r7, #6]
 80070b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c0:	d108      	bne.n	80070d4 <HAL_UART_Transmit+0x6c>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d104      	bne.n	80070d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80070ca:	2300      	movs	r3, #0
 80070cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	61bb      	str	r3, [r7, #24]
 80070d2:	e003      	b.n	80070dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070d8:	2300      	movs	r3, #0
 80070da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070dc:	e030      	b.n	8007140 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2200      	movs	r2, #0
 80070e6:	2180      	movs	r1, #128	; 0x80
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 fc63 	bl	80079b4 <UART_WaitOnFlagUntilTimeout>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d005      	beq.n	8007100 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2220      	movs	r2, #32
 80070f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e03d      	b.n	800717c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10b      	bne.n	800711e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	461a      	mov	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007114:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	3302      	adds	r3, #2
 800711a:	61bb      	str	r3, [r7, #24]
 800711c:	e007      	b.n	800712e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	781a      	ldrb	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	3301      	adds	r3, #1
 800712c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007134:	b29b      	uxth	r3, r3
 8007136:	3b01      	subs	r3, #1
 8007138:	b29a      	uxth	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007146:	b29b      	uxth	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1c8      	bne.n	80070de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	2200      	movs	r2, #0
 8007154:	2140      	movs	r1, #64	; 0x40
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 fc2c 	bl	80079b4 <UART_WaitOnFlagUntilTimeout>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d005      	beq.n	800716e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2220      	movs	r2, #32
 8007166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e006      	b.n	800717c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2220      	movs	r2, #32
 8007172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	e000      	b.n	800717c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800717a:	2302      	movs	r3, #2
  }
}
 800717c:	4618      	mov	r0, r3
 800717e:	3720      	adds	r7, #32
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007188:	b08c      	sub	sp, #48	; 0x30
 800718a:	af00      	add	r7, sp, #0
 800718c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	431a      	orrs	r2, r3
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	431a      	orrs	r2, r3
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	69db      	ldr	r3, [r3, #28]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	4bab      	ldr	r3, [pc, #684]	; (8007460 <UART_SetConfig+0x2dc>)
 80071b4:	4013      	ands	r3, r2
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	6812      	ldr	r2, [r2, #0]
 80071ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071bc:	430b      	orrs	r3, r1
 80071be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	68da      	ldr	r2, [r3, #12]
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4aa0      	ldr	r2, [pc, #640]	; (8007464 <UART_SetConfig+0x2e0>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d004      	beq.n	80071f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071ec:	4313      	orrs	r3, r2
 80071ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80071fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	6812      	ldr	r2, [r2, #0]
 8007202:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007204:	430b      	orrs	r3, r1
 8007206:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720e:	f023 010f 	bic.w	r1, r3, #15
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a91      	ldr	r2, [pc, #580]	; (8007468 <UART_SetConfig+0x2e4>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d125      	bne.n	8007274 <UART_SetConfig+0xf0>
 8007228:	4b90      	ldr	r3, [pc, #576]	; (800746c <UART_SetConfig+0x2e8>)
 800722a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800722e:	f003 0303 	and.w	r3, r3, #3
 8007232:	2b03      	cmp	r3, #3
 8007234:	d81a      	bhi.n	800726c <UART_SetConfig+0xe8>
 8007236:	a201      	add	r2, pc, #4	; (adr r2, 800723c <UART_SetConfig+0xb8>)
 8007238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723c:	0800724d 	.word	0x0800724d
 8007240:	0800725d 	.word	0x0800725d
 8007244:	08007255 	.word	0x08007255
 8007248:	08007265 	.word	0x08007265
 800724c:	2301      	movs	r3, #1
 800724e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007252:	e0d6      	b.n	8007402 <UART_SetConfig+0x27e>
 8007254:	2302      	movs	r3, #2
 8007256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800725a:	e0d2      	b.n	8007402 <UART_SetConfig+0x27e>
 800725c:	2304      	movs	r3, #4
 800725e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007262:	e0ce      	b.n	8007402 <UART_SetConfig+0x27e>
 8007264:	2308      	movs	r3, #8
 8007266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800726a:	e0ca      	b.n	8007402 <UART_SetConfig+0x27e>
 800726c:	2310      	movs	r3, #16
 800726e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007272:	e0c6      	b.n	8007402 <UART_SetConfig+0x27e>
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a7d      	ldr	r2, [pc, #500]	; (8007470 <UART_SetConfig+0x2ec>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d138      	bne.n	80072f0 <UART_SetConfig+0x16c>
 800727e:	4b7b      	ldr	r3, [pc, #492]	; (800746c <UART_SetConfig+0x2e8>)
 8007280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007284:	f003 030c 	and.w	r3, r3, #12
 8007288:	2b0c      	cmp	r3, #12
 800728a:	d82d      	bhi.n	80072e8 <UART_SetConfig+0x164>
 800728c:	a201      	add	r2, pc, #4	; (adr r2, 8007294 <UART_SetConfig+0x110>)
 800728e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007292:	bf00      	nop
 8007294:	080072c9 	.word	0x080072c9
 8007298:	080072e9 	.word	0x080072e9
 800729c:	080072e9 	.word	0x080072e9
 80072a0:	080072e9 	.word	0x080072e9
 80072a4:	080072d9 	.word	0x080072d9
 80072a8:	080072e9 	.word	0x080072e9
 80072ac:	080072e9 	.word	0x080072e9
 80072b0:	080072e9 	.word	0x080072e9
 80072b4:	080072d1 	.word	0x080072d1
 80072b8:	080072e9 	.word	0x080072e9
 80072bc:	080072e9 	.word	0x080072e9
 80072c0:	080072e9 	.word	0x080072e9
 80072c4:	080072e1 	.word	0x080072e1
 80072c8:	2300      	movs	r3, #0
 80072ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ce:	e098      	b.n	8007402 <UART_SetConfig+0x27e>
 80072d0:	2302      	movs	r3, #2
 80072d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072d6:	e094      	b.n	8007402 <UART_SetConfig+0x27e>
 80072d8:	2304      	movs	r3, #4
 80072da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072de:	e090      	b.n	8007402 <UART_SetConfig+0x27e>
 80072e0:	2308      	movs	r3, #8
 80072e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072e6:	e08c      	b.n	8007402 <UART_SetConfig+0x27e>
 80072e8:	2310      	movs	r3, #16
 80072ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ee:	e088      	b.n	8007402 <UART_SetConfig+0x27e>
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a5f      	ldr	r2, [pc, #380]	; (8007474 <UART_SetConfig+0x2f0>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d125      	bne.n	8007346 <UART_SetConfig+0x1c2>
 80072fa:	4b5c      	ldr	r3, [pc, #368]	; (800746c <UART_SetConfig+0x2e8>)
 80072fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007300:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007304:	2b30      	cmp	r3, #48	; 0x30
 8007306:	d016      	beq.n	8007336 <UART_SetConfig+0x1b2>
 8007308:	2b30      	cmp	r3, #48	; 0x30
 800730a:	d818      	bhi.n	800733e <UART_SetConfig+0x1ba>
 800730c:	2b20      	cmp	r3, #32
 800730e:	d00a      	beq.n	8007326 <UART_SetConfig+0x1a2>
 8007310:	2b20      	cmp	r3, #32
 8007312:	d814      	bhi.n	800733e <UART_SetConfig+0x1ba>
 8007314:	2b00      	cmp	r3, #0
 8007316:	d002      	beq.n	800731e <UART_SetConfig+0x19a>
 8007318:	2b10      	cmp	r3, #16
 800731a:	d008      	beq.n	800732e <UART_SetConfig+0x1aa>
 800731c:	e00f      	b.n	800733e <UART_SetConfig+0x1ba>
 800731e:	2300      	movs	r3, #0
 8007320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007324:	e06d      	b.n	8007402 <UART_SetConfig+0x27e>
 8007326:	2302      	movs	r3, #2
 8007328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800732c:	e069      	b.n	8007402 <UART_SetConfig+0x27e>
 800732e:	2304      	movs	r3, #4
 8007330:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007334:	e065      	b.n	8007402 <UART_SetConfig+0x27e>
 8007336:	2308      	movs	r3, #8
 8007338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800733c:	e061      	b.n	8007402 <UART_SetConfig+0x27e>
 800733e:	2310      	movs	r3, #16
 8007340:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007344:	e05d      	b.n	8007402 <UART_SetConfig+0x27e>
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a4b      	ldr	r2, [pc, #300]	; (8007478 <UART_SetConfig+0x2f4>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d125      	bne.n	800739c <UART_SetConfig+0x218>
 8007350:	4b46      	ldr	r3, [pc, #280]	; (800746c <UART_SetConfig+0x2e8>)
 8007352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007356:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800735a:	2bc0      	cmp	r3, #192	; 0xc0
 800735c:	d016      	beq.n	800738c <UART_SetConfig+0x208>
 800735e:	2bc0      	cmp	r3, #192	; 0xc0
 8007360:	d818      	bhi.n	8007394 <UART_SetConfig+0x210>
 8007362:	2b80      	cmp	r3, #128	; 0x80
 8007364:	d00a      	beq.n	800737c <UART_SetConfig+0x1f8>
 8007366:	2b80      	cmp	r3, #128	; 0x80
 8007368:	d814      	bhi.n	8007394 <UART_SetConfig+0x210>
 800736a:	2b00      	cmp	r3, #0
 800736c:	d002      	beq.n	8007374 <UART_SetConfig+0x1f0>
 800736e:	2b40      	cmp	r3, #64	; 0x40
 8007370:	d008      	beq.n	8007384 <UART_SetConfig+0x200>
 8007372:	e00f      	b.n	8007394 <UART_SetConfig+0x210>
 8007374:	2300      	movs	r3, #0
 8007376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800737a:	e042      	b.n	8007402 <UART_SetConfig+0x27e>
 800737c:	2302      	movs	r3, #2
 800737e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007382:	e03e      	b.n	8007402 <UART_SetConfig+0x27e>
 8007384:	2304      	movs	r3, #4
 8007386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800738a:	e03a      	b.n	8007402 <UART_SetConfig+0x27e>
 800738c:	2308      	movs	r3, #8
 800738e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007392:	e036      	b.n	8007402 <UART_SetConfig+0x27e>
 8007394:	2310      	movs	r3, #16
 8007396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800739a:	e032      	b.n	8007402 <UART_SetConfig+0x27e>
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a30      	ldr	r2, [pc, #192]	; (8007464 <UART_SetConfig+0x2e0>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d12a      	bne.n	80073fc <UART_SetConfig+0x278>
 80073a6:	4b31      	ldr	r3, [pc, #196]	; (800746c <UART_SetConfig+0x2e8>)
 80073a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80073b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073b4:	d01a      	beq.n	80073ec <UART_SetConfig+0x268>
 80073b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073ba:	d81b      	bhi.n	80073f4 <UART_SetConfig+0x270>
 80073bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073c0:	d00c      	beq.n	80073dc <UART_SetConfig+0x258>
 80073c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073c6:	d815      	bhi.n	80073f4 <UART_SetConfig+0x270>
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <UART_SetConfig+0x250>
 80073cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073d0:	d008      	beq.n	80073e4 <UART_SetConfig+0x260>
 80073d2:	e00f      	b.n	80073f4 <UART_SetConfig+0x270>
 80073d4:	2300      	movs	r3, #0
 80073d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073da:	e012      	b.n	8007402 <UART_SetConfig+0x27e>
 80073dc:	2302      	movs	r3, #2
 80073de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073e2:	e00e      	b.n	8007402 <UART_SetConfig+0x27e>
 80073e4:	2304      	movs	r3, #4
 80073e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ea:	e00a      	b.n	8007402 <UART_SetConfig+0x27e>
 80073ec:	2308      	movs	r3, #8
 80073ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073f2:	e006      	b.n	8007402 <UART_SetConfig+0x27e>
 80073f4:	2310      	movs	r3, #16
 80073f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073fa:	e002      	b.n	8007402 <UART_SetConfig+0x27e>
 80073fc:	2310      	movs	r3, #16
 80073fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a17      	ldr	r2, [pc, #92]	; (8007464 <UART_SetConfig+0x2e0>)
 8007408:	4293      	cmp	r3, r2
 800740a:	f040 80a8 	bne.w	800755e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800740e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007412:	2b08      	cmp	r3, #8
 8007414:	d834      	bhi.n	8007480 <UART_SetConfig+0x2fc>
 8007416:	a201      	add	r2, pc, #4	; (adr r2, 800741c <UART_SetConfig+0x298>)
 8007418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741c:	08007441 	.word	0x08007441
 8007420:	08007481 	.word	0x08007481
 8007424:	08007449 	.word	0x08007449
 8007428:	08007481 	.word	0x08007481
 800742c:	0800744f 	.word	0x0800744f
 8007430:	08007481 	.word	0x08007481
 8007434:	08007481 	.word	0x08007481
 8007438:	08007481 	.word	0x08007481
 800743c:	08007457 	.word	0x08007457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007440:	f7fe f830 	bl	80054a4 <HAL_RCC_GetPCLK1Freq>
 8007444:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007446:	e021      	b.n	800748c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007448:	4b0c      	ldr	r3, [pc, #48]	; (800747c <UART_SetConfig+0x2f8>)
 800744a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800744c:	e01e      	b.n	800748c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800744e:	f7fd ffbb 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 8007452:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007454:	e01a      	b.n	800748c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800745a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800745c:	e016      	b.n	800748c <UART_SetConfig+0x308>
 800745e:	bf00      	nop
 8007460:	cfff69f3 	.word	0xcfff69f3
 8007464:	40008000 	.word	0x40008000
 8007468:	40013800 	.word	0x40013800
 800746c:	40021000 	.word	0x40021000
 8007470:	40004400 	.word	0x40004400
 8007474:	40004800 	.word	0x40004800
 8007478:	40004c00 	.word	0x40004c00
 800747c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800748a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 812a 	beq.w	80076e8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	4a9e      	ldr	r2, [pc, #632]	; (8007714 <UART_SetConfig+0x590>)
 800749a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800749e:	461a      	mov	r2, r3
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80074a6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	4613      	mov	r3, r2
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	4413      	add	r3, r2
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d305      	bcc.n	80074c4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d903      	bls.n	80074cc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80074ca:	e10d      	b.n	80076e8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	2200      	movs	r2, #0
 80074d0:	60bb      	str	r3, [r7, #8]
 80074d2:	60fa      	str	r2, [r7, #12]
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d8:	4a8e      	ldr	r2, [pc, #568]	; (8007714 <UART_SetConfig+0x590>)
 80074da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	2200      	movs	r2, #0
 80074e2:	603b      	str	r3, [r7, #0]
 80074e4:	607a      	str	r2, [r7, #4]
 80074e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80074ee:	f7f9 fba3 	bl	8000c38 <__aeabi_uldivmod>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	4610      	mov	r0, r2
 80074f8:	4619      	mov	r1, r3
 80074fa:	f04f 0200 	mov.w	r2, #0
 80074fe:	f04f 0300 	mov.w	r3, #0
 8007502:	020b      	lsls	r3, r1, #8
 8007504:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007508:	0202      	lsls	r2, r0, #8
 800750a:	6979      	ldr	r1, [r7, #20]
 800750c:	6849      	ldr	r1, [r1, #4]
 800750e:	0849      	lsrs	r1, r1, #1
 8007510:	2000      	movs	r0, #0
 8007512:	460c      	mov	r4, r1
 8007514:	4605      	mov	r5, r0
 8007516:	eb12 0804 	adds.w	r8, r2, r4
 800751a:	eb43 0905 	adc.w	r9, r3, r5
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	469a      	mov	sl, r3
 8007526:	4693      	mov	fp, r2
 8007528:	4652      	mov	r2, sl
 800752a:	465b      	mov	r3, fp
 800752c:	4640      	mov	r0, r8
 800752e:	4649      	mov	r1, r9
 8007530:	f7f9 fb82 	bl	8000c38 <__aeabi_uldivmod>
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	4613      	mov	r3, r2
 800753a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007542:	d308      	bcc.n	8007556 <UART_SetConfig+0x3d2>
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800754a:	d204      	bcs.n	8007556 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6a3a      	ldr	r2, [r7, #32]
 8007552:	60da      	str	r2, [r3, #12]
 8007554:	e0c8      	b.n	80076e8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800755c:	e0c4      	b.n	80076e8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007566:	d167      	bne.n	8007638 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007568:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800756c:	2b08      	cmp	r3, #8
 800756e:	d828      	bhi.n	80075c2 <UART_SetConfig+0x43e>
 8007570:	a201      	add	r2, pc, #4	; (adr r2, 8007578 <UART_SetConfig+0x3f4>)
 8007572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007576:	bf00      	nop
 8007578:	0800759d 	.word	0x0800759d
 800757c:	080075a5 	.word	0x080075a5
 8007580:	080075ad 	.word	0x080075ad
 8007584:	080075c3 	.word	0x080075c3
 8007588:	080075b3 	.word	0x080075b3
 800758c:	080075c3 	.word	0x080075c3
 8007590:	080075c3 	.word	0x080075c3
 8007594:	080075c3 	.word	0x080075c3
 8007598:	080075bb 	.word	0x080075bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800759c:	f7fd ff82 	bl	80054a4 <HAL_RCC_GetPCLK1Freq>
 80075a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075a2:	e014      	b.n	80075ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075a4:	f7fd ff94 	bl	80054d0 <HAL_RCC_GetPCLK2Freq>
 80075a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075aa:	e010      	b.n	80075ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075ac:	4b5a      	ldr	r3, [pc, #360]	; (8007718 <UART_SetConfig+0x594>)
 80075ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075b0:	e00d      	b.n	80075ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075b2:	f7fd ff09 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 80075b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075b8:	e009      	b.n	80075ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075c0:	e005      	b.n	80075ce <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80075c2:	2300      	movs	r3, #0
 80075c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80075cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f000 8089 	beq.w	80076e8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075da:	4a4e      	ldr	r2, [pc, #312]	; (8007714 <UART_SetConfig+0x590>)
 80075dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075e0:	461a      	mov	r2, r3
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80075e8:	005a      	lsls	r2, r3, #1
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	085b      	lsrs	r3, r3, #1
 80075f0:	441a      	add	r2, r3
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	2b0f      	cmp	r3, #15
 8007600:	d916      	bls.n	8007630 <UART_SetConfig+0x4ac>
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007608:	d212      	bcs.n	8007630 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	b29b      	uxth	r3, r3
 800760e:	f023 030f 	bic.w	r3, r3, #15
 8007612:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	085b      	lsrs	r3, r3, #1
 8007618:	b29b      	uxth	r3, r3
 800761a:	f003 0307 	and.w	r3, r3, #7
 800761e:	b29a      	uxth	r2, r3
 8007620:	8bfb      	ldrh	r3, [r7, #30]
 8007622:	4313      	orrs	r3, r2
 8007624:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	8bfa      	ldrh	r2, [r7, #30]
 800762c:	60da      	str	r2, [r3, #12]
 800762e:	e05b      	b.n	80076e8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007636:	e057      	b.n	80076e8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007638:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800763c:	2b08      	cmp	r3, #8
 800763e:	d828      	bhi.n	8007692 <UART_SetConfig+0x50e>
 8007640:	a201      	add	r2, pc, #4	; (adr r2, 8007648 <UART_SetConfig+0x4c4>)
 8007642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007646:	bf00      	nop
 8007648:	0800766d 	.word	0x0800766d
 800764c:	08007675 	.word	0x08007675
 8007650:	0800767d 	.word	0x0800767d
 8007654:	08007693 	.word	0x08007693
 8007658:	08007683 	.word	0x08007683
 800765c:	08007693 	.word	0x08007693
 8007660:	08007693 	.word	0x08007693
 8007664:	08007693 	.word	0x08007693
 8007668:	0800768b 	.word	0x0800768b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800766c:	f7fd ff1a 	bl	80054a4 <HAL_RCC_GetPCLK1Freq>
 8007670:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007672:	e014      	b.n	800769e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007674:	f7fd ff2c 	bl	80054d0 <HAL_RCC_GetPCLK2Freq>
 8007678:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800767a:	e010      	b.n	800769e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800767c:	4b26      	ldr	r3, [pc, #152]	; (8007718 <UART_SetConfig+0x594>)
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007680:	e00d      	b.n	800769e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007682:	f7fd fea1 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 8007686:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007688:	e009      	b.n	800769e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800768a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800768e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007690:	e005      	b.n	800769e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800769c:	bf00      	nop
    }

    if (pclk != 0U)
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d021      	beq.n	80076e8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a8:	4a1a      	ldr	r2, [pc, #104]	; (8007714 <UART_SetConfig+0x590>)
 80076aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076ae:	461a      	mov	r2, r3
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	085b      	lsrs	r3, r3, #1
 80076bc:	441a      	add	r2, r3
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	2b0f      	cmp	r3, #15
 80076cc:	d909      	bls.n	80076e2 <UART_SetConfig+0x55e>
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d4:	d205      	bcs.n	80076e2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	b29a      	uxth	r2, r3
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	60da      	str	r2, [r3, #12]
 80076e0:	e002      	b.n	80076e8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2200      	movs	r2, #0
 80076fc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2200      	movs	r2, #0
 8007702:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007704:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007708:	4618      	mov	r0, r3
 800770a:	3730      	adds	r7, #48	; 0x30
 800770c:	46bd      	mov	sp, r7
 800770e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007712:	bf00      	nop
 8007714:	0800aba0 	.word	0x0800aba0
 8007718:	00f42400 	.word	0x00f42400

0800771c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007728:	f003 0308 	and.w	r3, r3, #8
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00a      	beq.n	8007746 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	430a      	orrs	r2, r1
 8007744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00a      	beq.n	8007768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	430a      	orrs	r2, r1
 8007766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776c:	f003 0302 	and.w	r3, r3, #2
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00a      	beq.n	800778a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	430a      	orrs	r2, r1
 8007788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778e:	f003 0304 	and.w	r3, r3, #4
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00a      	beq.n	80077ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	430a      	orrs	r2, r1
 80077aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b0:	f003 0310 	and.w	r3, r3, #16
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00a      	beq.n	80077ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	430a      	orrs	r2, r1
 80077cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d2:	f003 0320 	and.w	r3, r3, #32
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00a      	beq.n	80077f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	430a      	orrs	r2, r1
 80077ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d01a      	beq.n	8007832 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800781a:	d10a      	bne.n	8007832 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00a      	beq.n	8007854 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	430a      	orrs	r2, r1
 8007852:	605a      	str	r2, [r3, #4]
  }
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b098      	sub	sp, #96	; 0x60
 8007864:	af02      	add	r7, sp, #8
 8007866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007870:	f7fa ff76 	bl	8002760 <HAL_GetTick>
 8007874:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0308 	and.w	r3, r3, #8
 8007880:	2b08      	cmp	r3, #8
 8007882:	d12f      	bne.n	80078e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007884:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800788c:	2200      	movs	r2, #0
 800788e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f88e 	bl	80079b4 <UART_WaitOnFlagUntilTimeout>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d022      	beq.n	80078e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a6:	e853 3f00 	ldrex	r3, [r3]
 80078aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078b2:	653b      	str	r3, [r7, #80]	; 0x50
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	461a      	mov	r2, r3
 80078ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078bc:	647b      	str	r3, [r7, #68]	; 0x44
 80078be:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078c4:	e841 2300 	strex	r3, r2, [r1]
 80078c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1e6      	bne.n	800789e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2220      	movs	r2, #32
 80078d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e063      	b.n	80079ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0304 	and.w	r3, r3, #4
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d149      	bne.n	8007986 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078fa:	2200      	movs	r2, #0
 80078fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f857 	bl	80079b4 <UART_WaitOnFlagUntilTimeout>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d03c      	beq.n	8007986 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	e853 3f00 	ldrex	r3, [r3]
 8007918:	623b      	str	r3, [r7, #32]
   return(result);
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007920:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	461a      	mov	r2, r3
 8007928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800792a:	633b      	str	r3, [r7, #48]	; 0x30
 800792c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007932:	e841 2300 	strex	r3, r2, [r1]
 8007936:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1e6      	bne.n	800790c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3308      	adds	r3, #8
 8007944:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	e853 3f00 	ldrex	r3, [r3]
 800794c:	60fb      	str	r3, [r7, #12]
   return(result);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f023 0301 	bic.w	r3, r3, #1
 8007954:	64bb      	str	r3, [r7, #72]	; 0x48
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3308      	adds	r3, #8
 800795c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800795e:	61fa      	str	r2, [r7, #28]
 8007960:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007962:	69b9      	ldr	r1, [r7, #24]
 8007964:	69fa      	ldr	r2, [r7, #28]
 8007966:	e841 2300 	strex	r3, r2, [r1]
 800796a:	617b      	str	r3, [r7, #20]
   return(result);
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1e5      	bne.n	800793e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2220      	movs	r2, #32
 8007976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e012      	b.n	80079ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2220      	movs	r2, #32
 800798a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2220      	movs	r2, #32
 8007992:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3758      	adds	r7, #88	; 0x58
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	603b      	str	r3, [r7, #0]
 80079c0:	4613      	mov	r3, r2
 80079c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079c4:	e04f      	b.n	8007a66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079cc:	d04b      	beq.n	8007a66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079ce:	f7fa fec7 	bl	8002760 <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d302      	bcc.n	80079e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d101      	bne.n	80079e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e04e      	b.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0304 	and.w	r3, r3, #4
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d037      	beq.n	8007a66 <UART_WaitOnFlagUntilTimeout+0xb2>
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2b80      	cmp	r3, #128	; 0x80
 80079fa:	d034      	beq.n	8007a66 <UART_WaitOnFlagUntilTimeout+0xb2>
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2b40      	cmp	r3, #64	; 0x40
 8007a00:	d031      	beq.n	8007a66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	69db      	ldr	r3, [r3, #28]
 8007a08:	f003 0308 	and.w	r3, r3, #8
 8007a0c:	2b08      	cmp	r3, #8
 8007a0e:	d110      	bne.n	8007a32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2208      	movs	r2, #8
 8007a16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f000 f838 	bl	8007a8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2208      	movs	r2, #8
 8007a22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e029      	b.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	69db      	ldr	r3, [r3, #28]
 8007a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a40:	d111      	bne.n	8007a66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 f81e 	bl	8007a8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e00f      	b.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	69da      	ldr	r2, [r3, #28]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	4013      	ands	r3, r2
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	bf0c      	ite	eq
 8007a76:	2301      	moveq	r3, #1
 8007a78:	2300      	movne	r3, #0
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	79fb      	ldrb	r3, [r7, #7]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d0a0      	beq.n	80079c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b095      	sub	sp, #84	; 0x54
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a9e:	e853 3f00 	ldrex	r3, [r3]
 8007aa2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab4:	643b      	str	r3, [r7, #64]	; 0x40
 8007ab6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007aba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007abc:	e841 2300 	strex	r3, r2, [r1]
 8007ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e6      	bne.n	8007a96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	3308      	adds	r3, #8
 8007ace:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	e853 3f00 	ldrex	r3, [r3]
 8007ad6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ade:	f023 0301 	bic.w	r3, r3, #1
 8007ae2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3308      	adds	r3, #8
 8007aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007aee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007af4:	e841 2300 	strex	r3, r2, [r1]
 8007af8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e3      	bne.n	8007ac8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d118      	bne.n	8007b3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	f023 0310 	bic.w	r3, r3, #16
 8007b1c:	647b      	str	r3, [r7, #68]	; 0x44
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b26:	61bb      	str	r3, [r7, #24]
 8007b28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2a:	6979      	ldr	r1, [r7, #20]
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	613b      	str	r3, [r7, #16]
   return(result);
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1e6      	bne.n	8007b08 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007b4e:	bf00      	nop
 8007b50:	3754      	adds	r7, #84	; 0x54
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b085      	sub	sp, #20
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d101      	bne.n	8007b70 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	e027      	b.n	8007bc0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2224      	movs	r2, #36	; 0x24
 8007b7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 0201 	bic.w	r2, r2, #1
 8007b96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d101      	bne.n	8007be4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007be0:	2302      	movs	r3, #2
 8007be2:	e02d      	b.n	8007c40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2224      	movs	r2, #36	; 0x24
 8007bf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f022 0201 	bic.w	r2, r2, #1
 8007c0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	430a      	orrs	r2, r1
 8007c1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f84f 	bl	8007cc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2220      	movs	r2, #32
 8007c32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d101      	bne.n	8007c60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	e02d      	b.n	8007cbc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2224      	movs	r2, #36	; 0x24
 8007c6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f022 0201 	bic.w	r2, r2, #1
 8007c86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	430a      	orrs	r2, r1
 8007c9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f811 	bl	8007cc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2220      	movs	r2, #32
 8007cae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d108      	bne.n	8007ce6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ce4:	e031      	b.n	8007d4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ce6:	2308      	movs	r3, #8
 8007ce8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007cea:	2308      	movs	r3, #8
 8007cec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	0e5b      	lsrs	r3, r3, #25
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	f003 0307 	and.w	r3, r3, #7
 8007cfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	0f5b      	lsrs	r3, r3, #29
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	f003 0307 	and.w	r3, r3, #7
 8007d0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d0e:	7bbb      	ldrb	r3, [r7, #14]
 8007d10:	7b3a      	ldrb	r2, [r7, #12]
 8007d12:	4911      	ldr	r1, [pc, #68]	; (8007d58 <UARTEx_SetNbDataToProcess+0x94>)
 8007d14:	5c8a      	ldrb	r2, [r1, r2]
 8007d16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d1a:	7b3a      	ldrb	r2, [r7, #12]
 8007d1c:	490f      	ldr	r1, [pc, #60]	; (8007d5c <UARTEx_SetNbDataToProcess+0x98>)
 8007d1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d20:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	7b7a      	ldrb	r2, [r7, #13]
 8007d30:	4909      	ldr	r1, [pc, #36]	; (8007d58 <UARTEx_SetNbDataToProcess+0x94>)
 8007d32:	5c8a      	ldrb	r2, [r1, r2]
 8007d34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d38:	7b7a      	ldrb	r2, [r7, #13]
 8007d3a:	4908      	ldr	r1, [pc, #32]	; (8007d5c <UARTEx_SetNbDataToProcess+0x98>)
 8007d3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007d4a:	bf00      	nop
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	0800abb8 	.word	0x0800abb8
 8007d5c:	0800abc0 	.word	0x0800abc0

08007d60 <__cvt>:
 8007d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d64:	ec55 4b10 	vmov	r4, r5, d0
 8007d68:	2d00      	cmp	r5, #0
 8007d6a:	460e      	mov	r6, r1
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	462b      	mov	r3, r5
 8007d70:	bfbb      	ittet	lt
 8007d72:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d76:	461d      	movlt	r5, r3
 8007d78:	2300      	movge	r3, #0
 8007d7a:	232d      	movlt	r3, #45	; 0x2d
 8007d7c:	700b      	strb	r3, [r1, #0]
 8007d7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d80:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d84:	4691      	mov	r9, r2
 8007d86:	f023 0820 	bic.w	r8, r3, #32
 8007d8a:	bfbc      	itt	lt
 8007d8c:	4622      	movlt	r2, r4
 8007d8e:	4614      	movlt	r4, r2
 8007d90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d94:	d005      	beq.n	8007da2 <__cvt+0x42>
 8007d96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d9a:	d100      	bne.n	8007d9e <__cvt+0x3e>
 8007d9c:	3601      	adds	r6, #1
 8007d9e:	2102      	movs	r1, #2
 8007da0:	e000      	b.n	8007da4 <__cvt+0x44>
 8007da2:	2103      	movs	r1, #3
 8007da4:	ab03      	add	r3, sp, #12
 8007da6:	9301      	str	r3, [sp, #4]
 8007da8:	ab02      	add	r3, sp, #8
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	ec45 4b10 	vmov	d0, r4, r5
 8007db0:	4653      	mov	r3, sl
 8007db2:	4632      	mov	r2, r6
 8007db4:	f000 fe78 	bl	8008aa8 <_dtoa_r>
 8007db8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007dbc:	4607      	mov	r7, r0
 8007dbe:	d102      	bne.n	8007dc6 <__cvt+0x66>
 8007dc0:	f019 0f01 	tst.w	r9, #1
 8007dc4:	d022      	beq.n	8007e0c <__cvt+0xac>
 8007dc6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007dca:	eb07 0906 	add.w	r9, r7, r6
 8007dce:	d110      	bne.n	8007df2 <__cvt+0x92>
 8007dd0:	783b      	ldrb	r3, [r7, #0]
 8007dd2:	2b30      	cmp	r3, #48	; 0x30
 8007dd4:	d10a      	bne.n	8007dec <__cvt+0x8c>
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2300      	movs	r3, #0
 8007dda:	4620      	mov	r0, r4
 8007ddc:	4629      	mov	r1, r5
 8007dde:	f7f8 fe9b 	bl	8000b18 <__aeabi_dcmpeq>
 8007de2:	b918      	cbnz	r0, 8007dec <__cvt+0x8c>
 8007de4:	f1c6 0601 	rsb	r6, r6, #1
 8007de8:	f8ca 6000 	str.w	r6, [sl]
 8007dec:	f8da 3000 	ldr.w	r3, [sl]
 8007df0:	4499      	add	r9, r3
 8007df2:	2200      	movs	r2, #0
 8007df4:	2300      	movs	r3, #0
 8007df6:	4620      	mov	r0, r4
 8007df8:	4629      	mov	r1, r5
 8007dfa:	f7f8 fe8d 	bl	8000b18 <__aeabi_dcmpeq>
 8007dfe:	b108      	cbz	r0, 8007e04 <__cvt+0xa4>
 8007e00:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e04:	2230      	movs	r2, #48	; 0x30
 8007e06:	9b03      	ldr	r3, [sp, #12]
 8007e08:	454b      	cmp	r3, r9
 8007e0a:	d307      	bcc.n	8007e1c <__cvt+0xbc>
 8007e0c:	9b03      	ldr	r3, [sp, #12]
 8007e0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e10:	1bdb      	subs	r3, r3, r7
 8007e12:	4638      	mov	r0, r7
 8007e14:	6013      	str	r3, [r2, #0]
 8007e16:	b004      	add	sp, #16
 8007e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e1c:	1c59      	adds	r1, r3, #1
 8007e1e:	9103      	str	r1, [sp, #12]
 8007e20:	701a      	strb	r2, [r3, #0]
 8007e22:	e7f0      	b.n	8007e06 <__cvt+0xa6>

08007e24 <__exponent>:
 8007e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e26:	4603      	mov	r3, r0
 8007e28:	2900      	cmp	r1, #0
 8007e2a:	bfb8      	it	lt
 8007e2c:	4249      	neglt	r1, r1
 8007e2e:	f803 2b02 	strb.w	r2, [r3], #2
 8007e32:	bfb4      	ite	lt
 8007e34:	222d      	movlt	r2, #45	; 0x2d
 8007e36:	222b      	movge	r2, #43	; 0x2b
 8007e38:	2909      	cmp	r1, #9
 8007e3a:	7042      	strb	r2, [r0, #1]
 8007e3c:	dd2a      	ble.n	8007e94 <__exponent+0x70>
 8007e3e:	f10d 0207 	add.w	r2, sp, #7
 8007e42:	4617      	mov	r7, r2
 8007e44:	260a      	movs	r6, #10
 8007e46:	4694      	mov	ip, r2
 8007e48:	fb91 f5f6 	sdiv	r5, r1, r6
 8007e4c:	fb06 1415 	mls	r4, r6, r5, r1
 8007e50:	3430      	adds	r4, #48	; 0x30
 8007e52:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007e56:	460c      	mov	r4, r1
 8007e58:	2c63      	cmp	r4, #99	; 0x63
 8007e5a:	f102 32ff 	add.w	r2, r2, #4294967295
 8007e5e:	4629      	mov	r1, r5
 8007e60:	dcf1      	bgt.n	8007e46 <__exponent+0x22>
 8007e62:	3130      	adds	r1, #48	; 0x30
 8007e64:	f1ac 0402 	sub.w	r4, ip, #2
 8007e68:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007e6c:	1c41      	adds	r1, r0, #1
 8007e6e:	4622      	mov	r2, r4
 8007e70:	42ba      	cmp	r2, r7
 8007e72:	d30a      	bcc.n	8007e8a <__exponent+0x66>
 8007e74:	f10d 0209 	add.w	r2, sp, #9
 8007e78:	eba2 020c 	sub.w	r2, r2, ip
 8007e7c:	42bc      	cmp	r4, r7
 8007e7e:	bf88      	it	hi
 8007e80:	2200      	movhi	r2, #0
 8007e82:	4413      	add	r3, r2
 8007e84:	1a18      	subs	r0, r3, r0
 8007e86:	b003      	add	sp, #12
 8007e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e8a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007e8e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007e92:	e7ed      	b.n	8007e70 <__exponent+0x4c>
 8007e94:	2330      	movs	r3, #48	; 0x30
 8007e96:	3130      	adds	r1, #48	; 0x30
 8007e98:	7083      	strb	r3, [r0, #2]
 8007e9a:	70c1      	strb	r1, [r0, #3]
 8007e9c:	1d03      	adds	r3, r0, #4
 8007e9e:	e7f1      	b.n	8007e84 <__exponent+0x60>

08007ea0 <_printf_float>:
 8007ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea4:	ed2d 8b02 	vpush	{d8}
 8007ea8:	b08d      	sub	sp, #52	; 0x34
 8007eaa:	460c      	mov	r4, r1
 8007eac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007eb0:	4616      	mov	r6, r2
 8007eb2:	461f      	mov	r7, r3
 8007eb4:	4605      	mov	r5, r0
 8007eb6:	f000 fce7 	bl	8008888 <_localeconv_r>
 8007eba:	f8d0 a000 	ldr.w	sl, [r0]
 8007ebe:	4650      	mov	r0, sl
 8007ec0:	f7f8 f9fe 	bl	80002c0 <strlen>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ec8:	6823      	ldr	r3, [r4, #0]
 8007eca:	9305      	str	r3, [sp, #20]
 8007ecc:	f8d8 3000 	ldr.w	r3, [r8]
 8007ed0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007ed4:	3307      	adds	r3, #7
 8007ed6:	f023 0307 	bic.w	r3, r3, #7
 8007eda:	f103 0208 	add.w	r2, r3, #8
 8007ede:	f8c8 2000 	str.w	r2, [r8]
 8007ee2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ee6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007eea:	9307      	str	r3, [sp, #28]
 8007eec:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ef0:	ee08 0a10 	vmov	s16, r0
 8007ef4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007ef8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007efc:	4b9e      	ldr	r3, [pc, #632]	; (8008178 <_printf_float+0x2d8>)
 8007efe:	f04f 32ff 	mov.w	r2, #4294967295
 8007f02:	f7f8 fe3b 	bl	8000b7c <__aeabi_dcmpun>
 8007f06:	bb88      	cbnz	r0, 8007f6c <_printf_float+0xcc>
 8007f08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f0c:	4b9a      	ldr	r3, [pc, #616]	; (8008178 <_printf_float+0x2d8>)
 8007f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f12:	f7f8 fe15 	bl	8000b40 <__aeabi_dcmple>
 8007f16:	bb48      	cbnz	r0, 8007f6c <_printf_float+0xcc>
 8007f18:	2200      	movs	r2, #0
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	4640      	mov	r0, r8
 8007f1e:	4649      	mov	r1, r9
 8007f20:	f7f8 fe04 	bl	8000b2c <__aeabi_dcmplt>
 8007f24:	b110      	cbz	r0, 8007f2c <_printf_float+0x8c>
 8007f26:	232d      	movs	r3, #45	; 0x2d
 8007f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f2c:	4a93      	ldr	r2, [pc, #588]	; (800817c <_printf_float+0x2dc>)
 8007f2e:	4b94      	ldr	r3, [pc, #592]	; (8008180 <_printf_float+0x2e0>)
 8007f30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f34:	bf94      	ite	ls
 8007f36:	4690      	movls	r8, r2
 8007f38:	4698      	movhi	r8, r3
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	6123      	str	r3, [r4, #16]
 8007f3e:	9b05      	ldr	r3, [sp, #20]
 8007f40:	f023 0304 	bic.w	r3, r3, #4
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	f04f 0900 	mov.w	r9, #0
 8007f4a:	9700      	str	r7, [sp, #0]
 8007f4c:	4633      	mov	r3, r6
 8007f4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f50:	4621      	mov	r1, r4
 8007f52:	4628      	mov	r0, r5
 8007f54:	f000 f9da 	bl	800830c <_printf_common>
 8007f58:	3001      	adds	r0, #1
 8007f5a:	f040 8090 	bne.w	800807e <_printf_float+0x1de>
 8007f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f62:	b00d      	add	sp, #52	; 0x34
 8007f64:	ecbd 8b02 	vpop	{d8}
 8007f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f6c:	4642      	mov	r2, r8
 8007f6e:	464b      	mov	r3, r9
 8007f70:	4640      	mov	r0, r8
 8007f72:	4649      	mov	r1, r9
 8007f74:	f7f8 fe02 	bl	8000b7c <__aeabi_dcmpun>
 8007f78:	b140      	cbz	r0, 8007f8c <_printf_float+0xec>
 8007f7a:	464b      	mov	r3, r9
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	bfbc      	itt	lt
 8007f80:	232d      	movlt	r3, #45	; 0x2d
 8007f82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f86:	4a7f      	ldr	r2, [pc, #508]	; (8008184 <_printf_float+0x2e4>)
 8007f88:	4b7f      	ldr	r3, [pc, #508]	; (8008188 <_printf_float+0x2e8>)
 8007f8a:	e7d1      	b.n	8007f30 <_printf_float+0x90>
 8007f8c:	6863      	ldr	r3, [r4, #4]
 8007f8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f92:	9206      	str	r2, [sp, #24]
 8007f94:	1c5a      	adds	r2, r3, #1
 8007f96:	d13f      	bne.n	8008018 <_printf_float+0x178>
 8007f98:	2306      	movs	r3, #6
 8007f9a:	6063      	str	r3, [r4, #4]
 8007f9c:	9b05      	ldr	r3, [sp, #20]
 8007f9e:	6861      	ldr	r1, [r4, #4]
 8007fa0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	9303      	str	r3, [sp, #12]
 8007fa8:	ab0a      	add	r3, sp, #40	; 0x28
 8007faa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007fae:	ab09      	add	r3, sp, #36	; 0x24
 8007fb0:	ec49 8b10 	vmov	d0, r8, r9
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	6022      	str	r2, [r4, #0]
 8007fb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	f7ff fecf 	bl	8007d60 <__cvt>
 8007fc2:	9b06      	ldr	r3, [sp, #24]
 8007fc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fc6:	2b47      	cmp	r3, #71	; 0x47
 8007fc8:	4680      	mov	r8, r0
 8007fca:	d108      	bne.n	8007fde <_printf_float+0x13e>
 8007fcc:	1cc8      	adds	r0, r1, #3
 8007fce:	db02      	blt.n	8007fd6 <_printf_float+0x136>
 8007fd0:	6863      	ldr	r3, [r4, #4]
 8007fd2:	4299      	cmp	r1, r3
 8007fd4:	dd41      	ble.n	800805a <_printf_float+0x1ba>
 8007fd6:	f1ab 0302 	sub.w	r3, fp, #2
 8007fda:	fa5f fb83 	uxtb.w	fp, r3
 8007fde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007fe2:	d820      	bhi.n	8008026 <_printf_float+0x186>
 8007fe4:	3901      	subs	r1, #1
 8007fe6:	465a      	mov	r2, fp
 8007fe8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007fec:	9109      	str	r1, [sp, #36]	; 0x24
 8007fee:	f7ff ff19 	bl	8007e24 <__exponent>
 8007ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ff4:	1813      	adds	r3, r2, r0
 8007ff6:	2a01      	cmp	r2, #1
 8007ff8:	4681      	mov	r9, r0
 8007ffa:	6123      	str	r3, [r4, #16]
 8007ffc:	dc02      	bgt.n	8008004 <_printf_float+0x164>
 8007ffe:	6822      	ldr	r2, [r4, #0]
 8008000:	07d2      	lsls	r2, r2, #31
 8008002:	d501      	bpl.n	8008008 <_printf_float+0x168>
 8008004:	3301      	adds	r3, #1
 8008006:	6123      	str	r3, [r4, #16]
 8008008:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800800c:	2b00      	cmp	r3, #0
 800800e:	d09c      	beq.n	8007f4a <_printf_float+0xaa>
 8008010:	232d      	movs	r3, #45	; 0x2d
 8008012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008016:	e798      	b.n	8007f4a <_printf_float+0xaa>
 8008018:	9a06      	ldr	r2, [sp, #24]
 800801a:	2a47      	cmp	r2, #71	; 0x47
 800801c:	d1be      	bne.n	8007f9c <_printf_float+0xfc>
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1bc      	bne.n	8007f9c <_printf_float+0xfc>
 8008022:	2301      	movs	r3, #1
 8008024:	e7b9      	b.n	8007f9a <_printf_float+0xfa>
 8008026:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800802a:	d118      	bne.n	800805e <_printf_float+0x1be>
 800802c:	2900      	cmp	r1, #0
 800802e:	6863      	ldr	r3, [r4, #4]
 8008030:	dd0b      	ble.n	800804a <_printf_float+0x1aa>
 8008032:	6121      	str	r1, [r4, #16]
 8008034:	b913      	cbnz	r3, 800803c <_printf_float+0x19c>
 8008036:	6822      	ldr	r2, [r4, #0]
 8008038:	07d0      	lsls	r0, r2, #31
 800803a:	d502      	bpl.n	8008042 <_printf_float+0x1a2>
 800803c:	3301      	adds	r3, #1
 800803e:	440b      	add	r3, r1
 8008040:	6123      	str	r3, [r4, #16]
 8008042:	65a1      	str	r1, [r4, #88]	; 0x58
 8008044:	f04f 0900 	mov.w	r9, #0
 8008048:	e7de      	b.n	8008008 <_printf_float+0x168>
 800804a:	b913      	cbnz	r3, 8008052 <_printf_float+0x1b2>
 800804c:	6822      	ldr	r2, [r4, #0]
 800804e:	07d2      	lsls	r2, r2, #31
 8008050:	d501      	bpl.n	8008056 <_printf_float+0x1b6>
 8008052:	3302      	adds	r3, #2
 8008054:	e7f4      	b.n	8008040 <_printf_float+0x1a0>
 8008056:	2301      	movs	r3, #1
 8008058:	e7f2      	b.n	8008040 <_printf_float+0x1a0>
 800805a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800805e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008060:	4299      	cmp	r1, r3
 8008062:	db05      	blt.n	8008070 <_printf_float+0x1d0>
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	6121      	str	r1, [r4, #16]
 8008068:	07d8      	lsls	r0, r3, #31
 800806a:	d5ea      	bpl.n	8008042 <_printf_float+0x1a2>
 800806c:	1c4b      	adds	r3, r1, #1
 800806e:	e7e7      	b.n	8008040 <_printf_float+0x1a0>
 8008070:	2900      	cmp	r1, #0
 8008072:	bfd4      	ite	le
 8008074:	f1c1 0202 	rsble	r2, r1, #2
 8008078:	2201      	movgt	r2, #1
 800807a:	4413      	add	r3, r2
 800807c:	e7e0      	b.n	8008040 <_printf_float+0x1a0>
 800807e:	6823      	ldr	r3, [r4, #0]
 8008080:	055a      	lsls	r2, r3, #21
 8008082:	d407      	bmi.n	8008094 <_printf_float+0x1f4>
 8008084:	6923      	ldr	r3, [r4, #16]
 8008086:	4642      	mov	r2, r8
 8008088:	4631      	mov	r1, r6
 800808a:	4628      	mov	r0, r5
 800808c:	47b8      	blx	r7
 800808e:	3001      	adds	r0, #1
 8008090:	d12c      	bne.n	80080ec <_printf_float+0x24c>
 8008092:	e764      	b.n	8007f5e <_printf_float+0xbe>
 8008094:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008098:	f240 80e0 	bls.w	800825c <_printf_float+0x3bc>
 800809c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080a0:	2200      	movs	r2, #0
 80080a2:	2300      	movs	r3, #0
 80080a4:	f7f8 fd38 	bl	8000b18 <__aeabi_dcmpeq>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d034      	beq.n	8008116 <_printf_float+0x276>
 80080ac:	4a37      	ldr	r2, [pc, #220]	; (800818c <_printf_float+0x2ec>)
 80080ae:	2301      	movs	r3, #1
 80080b0:	4631      	mov	r1, r6
 80080b2:	4628      	mov	r0, r5
 80080b4:	47b8      	blx	r7
 80080b6:	3001      	adds	r0, #1
 80080b8:	f43f af51 	beq.w	8007f5e <_printf_float+0xbe>
 80080bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080c0:	429a      	cmp	r2, r3
 80080c2:	db02      	blt.n	80080ca <_printf_float+0x22a>
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	07d8      	lsls	r0, r3, #31
 80080c8:	d510      	bpl.n	80080ec <_printf_float+0x24c>
 80080ca:	ee18 3a10 	vmov	r3, s16
 80080ce:	4652      	mov	r2, sl
 80080d0:	4631      	mov	r1, r6
 80080d2:	4628      	mov	r0, r5
 80080d4:	47b8      	blx	r7
 80080d6:	3001      	adds	r0, #1
 80080d8:	f43f af41 	beq.w	8007f5e <_printf_float+0xbe>
 80080dc:	f04f 0800 	mov.w	r8, #0
 80080e0:	f104 091a 	add.w	r9, r4, #26
 80080e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080e6:	3b01      	subs	r3, #1
 80080e8:	4543      	cmp	r3, r8
 80080ea:	dc09      	bgt.n	8008100 <_printf_float+0x260>
 80080ec:	6823      	ldr	r3, [r4, #0]
 80080ee:	079b      	lsls	r3, r3, #30
 80080f0:	f100 8107 	bmi.w	8008302 <_printf_float+0x462>
 80080f4:	68e0      	ldr	r0, [r4, #12]
 80080f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080f8:	4298      	cmp	r0, r3
 80080fa:	bfb8      	it	lt
 80080fc:	4618      	movlt	r0, r3
 80080fe:	e730      	b.n	8007f62 <_printf_float+0xc2>
 8008100:	2301      	movs	r3, #1
 8008102:	464a      	mov	r2, r9
 8008104:	4631      	mov	r1, r6
 8008106:	4628      	mov	r0, r5
 8008108:	47b8      	blx	r7
 800810a:	3001      	adds	r0, #1
 800810c:	f43f af27 	beq.w	8007f5e <_printf_float+0xbe>
 8008110:	f108 0801 	add.w	r8, r8, #1
 8008114:	e7e6      	b.n	80080e4 <_printf_float+0x244>
 8008116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008118:	2b00      	cmp	r3, #0
 800811a:	dc39      	bgt.n	8008190 <_printf_float+0x2f0>
 800811c:	4a1b      	ldr	r2, [pc, #108]	; (800818c <_printf_float+0x2ec>)
 800811e:	2301      	movs	r3, #1
 8008120:	4631      	mov	r1, r6
 8008122:	4628      	mov	r0, r5
 8008124:	47b8      	blx	r7
 8008126:	3001      	adds	r0, #1
 8008128:	f43f af19 	beq.w	8007f5e <_printf_float+0xbe>
 800812c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008130:	4313      	orrs	r3, r2
 8008132:	d102      	bne.n	800813a <_printf_float+0x29a>
 8008134:	6823      	ldr	r3, [r4, #0]
 8008136:	07d9      	lsls	r1, r3, #31
 8008138:	d5d8      	bpl.n	80080ec <_printf_float+0x24c>
 800813a:	ee18 3a10 	vmov	r3, s16
 800813e:	4652      	mov	r2, sl
 8008140:	4631      	mov	r1, r6
 8008142:	4628      	mov	r0, r5
 8008144:	47b8      	blx	r7
 8008146:	3001      	adds	r0, #1
 8008148:	f43f af09 	beq.w	8007f5e <_printf_float+0xbe>
 800814c:	f04f 0900 	mov.w	r9, #0
 8008150:	f104 0a1a 	add.w	sl, r4, #26
 8008154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008156:	425b      	negs	r3, r3
 8008158:	454b      	cmp	r3, r9
 800815a:	dc01      	bgt.n	8008160 <_printf_float+0x2c0>
 800815c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800815e:	e792      	b.n	8008086 <_printf_float+0x1e6>
 8008160:	2301      	movs	r3, #1
 8008162:	4652      	mov	r2, sl
 8008164:	4631      	mov	r1, r6
 8008166:	4628      	mov	r0, r5
 8008168:	47b8      	blx	r7
 800816a:	3001      	adds	r0, #1
 800816c:	f43f aef7 	beq.w	8007f5e <_printf_float+0xbe>
 8008170:	f109 0901 	add.w	r9, r9, #1
 8008174:	e7ee      	b.n	8008154 <_printf_float+0x2b4>
 8008176:	bf00      	nop
 8008178:	7fefffff 	.word	0x7fefffff
 800817c:	0800abc8 	.word	0x0800abc8
 8008180:	0800abcc 	.word	0x0800abcc
 8008184:	0800abd0 	.word	0x0800abd0
 8008188:	0800abd4 	.word	0x0800abd4
 800818c:	0800abd8 	.word	0x0800abd8
 8008190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008192:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008194:	429a      	cmp	r2, r3
 8008196:	bfa8      	it	ge
 8008198:	461a      	movge	r2, r3
 800819a:	2a00      	cmp	r2, #0
 800819c:	4691      	mov	r9, r2
 800819e:	dc37      	bgt.n	8008210 <_printf_float+0x370>
 80081a0:	f04f 0b00 	mov.w	fp, #0
 80081a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081a8:	f104 021a 	add.w	r2, r4, #26
 80081ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081ae:	9305      	str	r3, [sp, #20]
 80081b0:	eba3 0309 	sub.w	r3, r3, r9
 80081b4:	455b      	cmp	r3, fp
 80081b6:	dc33      	bgt.n	8008220 <_printf_float+0x380>
 80081b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081bc:	429a      	cmp	r2, r3
 80081be:	db3b      	blt.n	8008238 <_printf_float+0x398>
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	07da      	lsls	r2, r3, #31
 80081c4:	d438      	bmi.n	8008238 <_printf_float+0x398>
 80081c6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80081ca:	eba2 0903 	sub.w	r9, r2, r3
 80081ce:	9b05      	ldr	r3, [sp, #20]
 80081d0:	1ad2      	subs	r2, r2, r3
 80081d2:	4591      	cmp	r9, r2
 80081d4:	bfa8      	it	ge
 80081d6:	4691      	movge	r9, r2
 80081d8:	f1b9 0f00 	cmp.w	r9, #0
 80081dc:	dc35      	bgt.n	800824a <_printf_float+0x3aa>
 80081de:	f04f 0800 	mov.w	r8, #0
 80081e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081e6:	f104 0a1a 	add.w	sl, r4, #26
 80081ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081ee:	1a9b      	subs	r3, r3, r2
 80081f0:	eba3 0309 	sub.w	r3, r3, r9
 80081f4:	4543      	cmp	r3, r8
 80081f6:	f77f af79 	ble.w	80080ec <_printf_float+0x24c>
 80081fa:	2301      	movs	r3, #1
 80081fc:	4652      	mov	r2, sl
 80081fe:	4631      	mov	r1, r6
 8008200:	4628      	mov	r0, r5
 8008202:	47b8      	blx	r7
 8008204:	3001      	adds	r0, #1
 8008206:	f43f aeaa 	beq.w	8007f5e <_printf_float+0xbe>
 800820a:	f108 0801 	add.w	r8, r8, #1
 800820e:	e7ec      	b.n	80081ea <_printf_float+0x34a>
 8008210:	4613      	mov	r3, r2
 8008212:	4631      	mov	r1, r6
 8008214:	4642      	mov	r2, r8
 8008216:	4628      	mov	r0, r5
 8008218:	47b8      	blx	r7
 800821a:	3001      	adds	r0, #1
 800821c:	d1c0      	bne.n	80081a0 <_printf_float+0x300>
 800821e:	e69e      	b.n	8007f5e <_printf_float+0xbe>
 8008220:	2301      	movs	r3, #1
 8008222:	4631      	mov	r1, r6
 8008224:	4628      	mov	r0, r5
 8008226:	9205      	str	r2, [sp, #20]
 8008228:	47b8      	blx	r7
 800822a:	3001      	adds	r0, #1
 800822c:	f43f ae97 	beq.w	8007f5e <_printf_float+0xbe>
 8008230:	9a05      	ldr	r2, [sp, #20]
 8008232:	f10b 0b01 	add.w	fp, fp, #1
 8008236:	e7b9      	b.n	80081ac <_printf_float+0x30c>
 8008238:	ee18 3a10 	vmov	r3, s16
 800823c:	4652      	mov	r2, sl
 800823e:	4631      	mov	r1, r6
 8008240:	4628      	mov	r0, r5
 8008242:	47b8      	blx	r7
 8008244:	3001      	adds	r0, #1
 8008246:	d1be      	bne.n	80081c6 <_printf_float+0x326>
 8008248:	e689      	b.n	8007f5e <_printf_float+0xbe>
 800824a:	9a05      	ldr	r2, [sp, #20]
 800824c:	464b      	mov	r3, r9
 800824e:	4442      	add	r2, r8
 8008250:	4631      	mov	r1, r6
 8008252:	4628      	mov	r0, r5
 8008254:	47b8      	blx	r7
 8008256:	3001      	adds	r0, #1
 8008258:	d1c1      	bne.n	80081de <_printf_float+0x33e>
 800825a:	e680      	b.n	8007f5e <_printf_float+0xbe>
 800825c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800825e:	2a01      	cmp	r2, #1
 8008260:	dc01      	bgt.n	8008266 <_printf_float+0x3c6>
 8008262:	07db      	lsls	r3, r3, #31
 8008264:	d53a      	bpl.n	80082dc <_printf_float+0x43c>
 8008266:	2301      	movs	r3, #1
 8008268:	4642      	mov	r2, r8
 800826a:	4631      	mov	r1, r6
 800826c:	4628      	mov	r0, r5
 800826e:	47b8      	blx	r7
 8008270:	3001      	adds	r0, #1
 8008272:	f43f ae74 	beq.w	8007f5e <_printf_float+0xbe>
 8008276:	ee18 3a10 	vmov	r3, s16
 800827a:	4652      	mov	r2, sl
 800827c:	4631      	mov	r1, r6
 800827e:	4628      	mov	r0, r5
 8008280:	47b8      	blx	r7
 8008282:	3001      	adds	r0, #1
 8008284:	f43f ae6b 	beq.w	8007f5e <_printf_float+0xbe>
 8008288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800828c:	2200      	movs	r2, #0
 800828e:	2300      	movs	r3, #0
 8008290:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008294:	f7f8 fc40 	bl	8000b18 <__aeabi_dcmpeq>
 8008298:	b9d8      	cbnz	r0, 80082d2 <_printf_float+0x432>
 800829a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800829e:	f108 0201 	add.w	r2, r8, #1
 80082a2:	4631      	mov	r1, r6
 80082a4:	4628      	mov	r0, r5
 80082a6:	47b8      	blx	r7
 80082a8:	3001      	adds	r0, #1
 80082aa:	d10e      	bne.n	80082ca <_printf_float+0x42a>
 80082ac:	e657      	b.n	8007f5e <_printf_float+0xbe>
 80082ae:	2301      	movs	r3, #1
 80082b0:	4652      	mov	r2, sl
 80082b2:	4631      	mov	r1, r6
 80082b4:	4628      	mov	r0, r5
 80082b6:	47b8      	blx	r7
 80082b8:	3001      	adds	r0, #1
 80082ba:	f43f ae50 	beq.w	8007f5e <_printf_float+0xbe>
 80082be:	f108 0801 	add.w	r8, r8, #1
 80082c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c4:	3b01      	subs	r3, #1
 80082c6:	4543      	cmp	r3, r8
 80082c8:	dcf1      	bgt.n	80082ae <_printf_float+0x40e>
 80082ca:	464b      	mov	r3, r9
 80082cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80082d0:	e6da      	b.n	8008088 <_printf_float+0x1e8>
 80082d2:	f04f 0800 	mov.w	r8, #0
 80082d6:	f104 0a1a 	add.w	sl, r4, #26
 80082da:	e7f2      	b.n	80082c2 <_printf_float+0x422>
 80082dc:	2301      	movs	r3, #1
 80082de:	4642      	mov	r2, r8
 80082e0:	e7df      	b.n	80082a2 <_printf_float+0x402>
 80082e2:	2301      	movs	r3, #1
 80082e4:	464a      	mov	r2, r9
 80082e6:	4631      	mov	r1, r6
 80082e8:	4628      	mov	r0, r5
 80082ea:	47b8      	blx	r7
 80082ec:	3001      	adds	r0, #1
 80082ee:	f43f ae36 	beq.w	8007f5e <_printf_float+0xbe>
 80082f2:	f108 0801 	add.w	r8, r8, #1
 80082f6:	68e3      	ldr	r3, [r4, #12]
 80082f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082fa:	1a5b      	subs	r3, r3, r1
 80082fc:	4543      	cmp	r3, r8
 80082fe:	dcf0      	bgt.n	80082e2 <_printf_float+0x442>
 8008300:	e6f8      	b.n	80080f4 <_printf_float+0x254>
 8008302:	f04f 0800 	mov.w	r8, #0
 8008306:	f104 0919 	add.w	r9, r4, #25
 800830a:	e7f4      	b.n	80082f6 <_printf_float+0x456>

0800830c <_printf_common>:
 800830c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008310:	4616      	mov	r6, r2
 8008312:	4699      	mov	r9, r3
 8008314:	688a      	ldr	r2, [r1, #8]
 8008316:	690b      	ldr	r3, [r1, #16]
 8008318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800831c:	4293      	cmp	r3, r2
 800831e:	bfb8      	it	lt
 8008320:	4613      	movlt	r3, r2
 8008322:	6033      	str	r3, [r6, #0]
 8008324:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008328:	4607      	mov	r7, r0
 800832a:	460c      	mov	r4, r1
 800832c:	b10a      	cbz	r2, 8008332 <_printf_common+0x26>
 800832e:	3301      	adds	r3, #1
 8008330:	6033      	str	r3, [r6, #0]
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	0699      	lsls	r1, r3, #26
 8008336:	bf42      	ittt	mi
 8008338:	6833      	ldrmi	r3, [r6, #0]
 800833a:	3302      	addmi	r3, #2
 800833c:	6033      	strmi	r3, [r6, #0]
 800833e:	6825      	ldr	r5, [r4, #0]
 8008340:	f015 0506 	ands.w	r5, r5, #6
 8008344:	d106      	bne.n	8008354 <_printf_common+0x48>
 8008346:	f104 0a19 	add.w	sl, r4, #25
 800834a:	68e3      	ldr	r3, [r4, #12]
 800834c:	6832      	ldr	r2, [r6, #0]
 800834e:	1a9b      	subs	r3, r3, r2
 8008350:	42ab      	cmp	r3, r5
 8008352:	dc26      	bgt.n	80083a2 <_printf_common+0x96>
 8008354:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008358:	1e13      	subs	r3, r2, #0
 800835a:	6822      	ldr	r2, [r4, #0]
 800835c:	bf18      	it	ne
 800835e:	2301      	movne	r3, #1
 8008360:	0692      	lsls	r2, r2, #26
 8008362:	d42b      	bmi.n	80083bc <_printf_common+0xb0>
 8008364:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008368:	4649      	mov	r1, r9
 800836a:	4638      	mov	r0, r7
 800836c:	47c0      	blx	r8
 800836e:	3001      	adds	r0, #1
 8008370:	d01e      	beq.n	80083b0 <_printf_common+0xa4>
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	6922      	ldr	r2, [r4, #16]
 8008376:	f003 0306 	and.w	r3, r3, #6
 800837a:	2b04      	cmp	r3, #4
 800837c:	bf02      	ittt	eq
 800837e:	68e5      	ldreq	r5, [r4, #12]
 8008380:	6833      	ldreq	r3, [r6, #0]
 8008382:	1aed      	subeq	r5, r5, r3
 8008384:	68a3      	ldr	r3, [r4, #8]
 8008386:	bf0c      	ite	eq
 8008388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800838c:	2500      	movne	r5, #0
 800838e:	4293      	cmp	r3, r2
 8008390:	bfc4      	itt	gt
 8008392:	1a9b      	subgt	r3, r3, r2
 8008394:	18ed      	addgt	r5, r5, r3
 8008396:	2600      	movs	r6, #0
 8008398:	341a      	adds	r4, #26
 800839a:	42b5      	cmp	r5, r6
 800839c:	d11a      	bne.n	80083d4 <_printf_common+0xc8>
 800839e:	2000      	movs	r0, #0
 80083a0:	e008      	b.n	80083b4 <_printf_common+0xa8>
 80083a2:	2301      	movs	r3, #1
 80083a4:	4652      	mov	r2, sl
 80083a6:	4649      	mov	r1, r9
 80083a8:	4638      	mov	r0, r7
 80083aa:	47c0      	blx	r8
 80083ac:	3001      	adds	r0, #1
 80083ae:	d103      	bne.n	80083b8 <_printf_common+0xac>
 80083b0:	f04f 30ff 	mov.w	r0, #4294967295
 80083b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b8:	3501      	adds	r5, #1
 80083ba:	e7c6      	b.n	800834a <_printf_common+0x3e>
 80083bc:	18e1      	adds	r1, r4, r3
 80083be:	1c5a      	adds	r2, r3, #1
 80083c0:	2030      	movs	r0, #48	; 0x30
 80083c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083c6:	4422      	add	r2, r4
 80083c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083d0:	3302      	adds	r3, #2
 80083d2:	e7c7      	b.n	8008364 <_printf_common+0x58>
 80083d4:	2301      	movs	r3, #1
 80083d6:	4622      	mov	r2, r4
 80083d8:	4649      	mov	r1, r9
 80083da:	4638      	mov	r0, r7
 80083dc:	47c0      	blx	r8
 80083de:	3001      	adds	r0, #1
 80083e0:	d0e6      	beq.n	80083b0 <_printf_common+0xa4>
 80083e2:	3601      	adds	r6, #1
 80083e4:	e7d9      	b.n	800839a <_printf_common+0x8e>
	...

080083e8 <_printf_i>:
 80083e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083ec:	7e0f      	ldrb	r7, [r1, #24]
 80083ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083f0:	2f78      	cmp	r7, #120	; 0x78
 80083f2:	4691      	mov	r9, r2
 80083f4:	4680      	mov	r8, r0
 80083f6:	460c      	mov	r4, r1
 80083f8:	469a      	mov	sl, r3
 80083fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083fe:	d807      	bhi.n	8008410 <_printf_i+0x28>
 8008400:	2f62      	cmp	r7, #98	; 0x62
 8008402:	d80a      	bhi.n	800841a <_printf_i+0x32>
 8008404:	2f00      	cmp	r7, #0
 8008406:	f000 80d4 	beq.w	80085b2 <_printf_i+0x1ca>
 800840a:	2f58      	cmp	r7, #88	; 0x58
 800840c:	f000 80c0 	beq.w	8008590 <_printf_i+0x1a8>
 8008410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008414:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008418:	e03a      	b.n	8008490 <_printf_i+0xa8>
 800841a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800841e:	2b15      	cmp	r3, #21
 8008420:	d8f6      	bhi.n	8008410 <_printf_i+0x28>
 8008422:	a101      	add	r1, pc, #4	; (adr r1, 8008428 <_printf_i+0x40>)
 8008424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008428:	08008481 	.word	0x08008481
 800842c:	08008495 	.word	0x08008495
 8008430:	08008411 	.word	0x08008411
 8008434:	08008411 	.word	0x08008411
 8008438:	08008411 	.word	0x08008411
 800843c:	08008411 	.word	0x08008411
 8008440:	08008495 	.word	0x08008495
 8008444:	08008411 	.word	0x08008411
 8008448:	08008411 	.word	0x08008411
 800844c:	08008411 	.word	0x08008411
 8008450:	08008411 	.word	0x08008411
 8008454:	08008599 	.word	0x08008599
 8008458:	080084c1 	.word	0x080084c1
 800845c:	08008553 	.word	0x08008553
 8008460:	08008411 	.word	0x08008411
 8008464:	08008411 	.word	0x08008411
 8008468:	080085bb 	.word	0x080085bb
 800846c:	08008411 	.word	0x08008411
 8008470:	080084c1 	.word	0x080084c1
 8008474:	08008411 	.word	0x08008411
 8008478:	08008411 	.word	0x08008411
 800847c:	0800855b 	.word	0x0800855b
 8008480:	682b      	ldr	r3, [r5, #0]
 8008482:	1d1a      	adds	r2, r3, #4
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	602a      	str	r2, [r5, #0]
 8008488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800848c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008490:	2301      	movs	r3, #1
 8008492:	e09f      	b.n	80085d4 <_printf_i+0x1ec>
 8008494:	6820      	ldr	r0, [r4, #0]
 8008496:	682b      	ldr	r3, [r5, #0]
 8008498:	0607      	lsls	r7, r0, #24
 800849a:	f103 0104 	add.w	r1, r3, #4
 800849e:	6029      	str	r1, [r5, #0]
 80084a0:	d501      	bpl.n	80084a6 <_printf_i+0xbe>
 80084a2:	681e      	ldr	r6, [r3, #0]
 80084a4:	e003      	b.n	80084ae <_printf_i+0xc6>
 80084a6:	0646      	lsls	r6, r0, #25
 80084a8:	d5fb      	bpl.n	80084a2 <_printf_i+0xba>
 80084aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80084ae:	2e00      	cmp	r6, #0
 80084b0:	da03      	bge.n	80084ba <_printf_i+0xd2>
 80084b2:	232d      	movs	r3, #45	; 0x2d
 80084b4:	4276      	negs	r6, r6
 80084b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084ba:	485a      	ldr	r0, [pc, #360]	; (8008624 <_printf_i+0x23c>)
 80084bc:	230a      	movs	r3, #10
 80084be:	e012      	b.n	80084e6 <_printf_i+0xfe>
 80084c0:	682b      	ldr	r3, [r5, #0]
 80084c2:	6820      	ldr	r0, [r4, #0]
 80084c4:	1d19      	adds	r1, r3, #4
 80084c6:	6029      	str	r1, [r5, #0]
 80084c8:	0605      	lsls	r5, r0, #24
 80084ca:	d501      	bpl.n	80084d0 <_printf_i+0xe8>
 80084cc:	681e      	ldr	r6, [r3, #0]
 80084ce:	e002      	b.n	80084d6 <_printf_i+0xee>
 80084d0:	0641      	lsls	r1, r0, #25
 80084d2:	d5fb      	bpl.n	80084cc <_printf_i+0xe4>
 80084d4:	881e      	ldrh	r6, [r3, #0]
 80084d6:	4853      	ldr	r0, [pc, #332]	; (8008624 <_printf_i+0x23c>)
 80084d8:	2f6f      	cmp	r7, #111	; 0x6f
 80084da:	bf0c      	ite	eq
 80084dc:	2308      	moveq	r3, #8
 80084de:	230a      	movne	r3, #10
 80084e0:	2100      	movs	r1, #0
 80084e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084e6:	6865      	ldr	r5, [r4, #4]
 80084e8:	60a5      	str	r5, [r4, #8]
 80084ea:	2d00      	cmp	r5, #0
 80084ec:	bfa2      	ittt	ge
 80084ee:	6821      	ldrge	r1, [r4, #0]
 80084f0:	f021 0104 	bicge.w	r1, r1, #4
 80084f4:	6021      	strge	r1, [r4, #0]
 80084f6:	b90e      	cbnz	r6, 80084fc <_printf_i+0x114>
 80084f8:	2d00      	cmp	r5, #0
 80084fa:	d04b      	beq.n	8008594 <_printf_i+0x1ac>
 80084fc:	4615      	mov	r5, r2
 80084fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8008502:	fb03 6711 	mls	r7, r3, r1, r6
 8008506:	5dc7      	ldrb	r7, [r0, r7]
 8008508:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800850c:	4637      	mov	r7, r6
 800850e:	42bb      	cmp	r3, r7
 8008510:	460e      	mov	r6, r1
 8008512:	d9f4      	bls.n	80084fe <_printf_i+0x116>
 8008514:	2b08      	cmp	r3, #8
 8008516:	d10b      	bne.n	8008530 <_printf_i+0x148>
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	07de      	lsls	r6, r3, #31
 800851c:	d508      	bpl.n	8008530 <_printf_i+0x148>
 800851e:	6923      	ldr	r3, [r4, #16]
 8008520:	6861      	ldr	r1, [r4, #4]
 8008522:	4299      	cmp	r1, r3
 8008524:	bfde      	ittt	le
 8008526:	2330      	movle	r3, #48	; 0x30
 8008528:	f805 3c01 	strble.w	r3, [r5, #-1]
 800852c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008530:	1b52      	subs	r2, r2, r5
 8008532:	6122      	str	r2, [r4, #16]
 8008534:	f8cd a000 	str.w	sl, [sp]
 8008538:	464b      	mov	r3, r9
 800853a:	aa03      	add	r2, sp, #12
 800853c:	4621      	mov	r1, r4
 800853e:	4640      	mov	r0, r8
 8008540:	f7ff fee4 	bl	800830c <_printf_common>
 8008544:	3001      	adds	r0, #1
 8008546:	d14a      	bne.n	80085de <_printf_i+0x1f6>
 8008548:	f04f 30ff 	mov.w	r0, #4294967295
 800854c:	b004      	add	sp, #16
 800854e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	f043 0320 	orr.w	r3, r3, #32
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	4833      	ldr	r0, [pc, #204]	; (8008628 <_printf_i+0x240>)
 800855c:	2778      	movs	r7, #120	; 0x78
 800855e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	6829      	ldr	r1, [r5, #0]
 8008566:	061f      	lsls	r7, r3, #24
 8008568:	f851 6b04 	ldr.w	r6, [r1], #4
 800856c:	d402      	bmi.n	8008574 <_printf_i+0x18c>
 800856e:	065f      	lsls	r7, r3, #25
 8008570:	bf48      	it	mi
 8008572:	b2b6      	uxthmi	r6, r6
 8008574:	07df      	lsls	r7, r3, #31
 8008576:	bf48      	it	mi
 8008578:	f043 0320 	orrmi.w	r3, r3, #32
 800857c:	6029      	str	r1, [r5, #0]
 800857e:	bf48      	it	mi
 8008580:	6023      	strmi	r3, [r4, #0]
 8008582:	b91e      	cbnz	r6, 800858c <_printf_i+0x1a4>
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	f023 0320 	bic.w	r3, r3, #32
 800858a:	6023      	str	r3, [r4, #0]
 800858c:	2310      	movs	r3, #16
 800858e:	e7a7      	b.n	80084e0 <_printf_i+0xf8>
 8008590:	4824      	ldr	r0, [pc, #144]	; (8008624 <_printf_i+0x23c>)
 8008592:	e7e4      	b.n	800855e <_printf_i+0x176>
 8008594:	4615      	mov	r5, r2
 8008596:	e7bd      	b.n	8008514 <_printf_i+0x12c>
 8008598:	682b      	ldr	r3, [r5, #0]
 800859a:	6826      	ldr	r6, [r4, #0]
 800859c:	6961      	ldr	r1, [r4, #20]
 800859e:	1d18      	adds	r0, r3, #4
 80085a0:	6028      	str	r0, [r5, #0]
 80085a2:	0635      	lsls	r5, r6, #24
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	d501      	bpl.n	80085ac <_printf_i+0x1c4>
 80085a8:	6019      	str	r1, [r3, #0]
 80085aa:	e002      	b.n	80085b2 <_printf_i+0x1ca>
 80085ac:	0670      	lsls	r0, r6, #25
 80085ae:	d5fb      	bpl.n	80085a8 <_printf_i+0x1c0>
 80085b0:	8019      	strh	r1, [r3, #0]
 80085b2:	2300      	movs	r3, #0
 80085b4:	6123      	str	r3, [r4, #16]
 80085b6:	4615      	mov	r5, r2
 80085b8:	e7bc      	b.n	8008534 <_printf_i+0x14c>
 80085ba:	682b      	ldr	r3, [r5, #0]
 80085bc:	1d1a      	adds	r2, r3, #4
 80085be:	602a      	str	r2, [r5, #0]
 80085c0:	681d      	ldr	r5, [r3, #0]
 80085c2:	6862      	ldr	r2, [r4, #4]
 80085c4:	2100      	movs	r1, #0
 80085c6:	4628      	mov	r0, r5
 80085c8:	f7f7 fe2a 	bl	8000220 <memchr>
 80085cc:	b108      	cbz	r0, 80085d2 <_printf_i+0x1ea>
 80085ce:	1b40      	subs	r0, r0, r5
 80085d0:	6060      	str	r0, [r4, #4]
 80085d2:	6863      	ldr	r3, [r4, #4]
 80085d4:	6123      	str	r3, [r4, #16]
 80085d6:	2300      	movs	r3, #0
 80085d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085dc:	e7aa      	b.n	8008534 <_printf_i+0x14c>
 80085de:	6923      	ldr	r3, [r4, #16]
 80085e0:	462a      	mov	r2, r5
 80085e2:	4649      	mov	r1, r9
 80085e4:	4640      	mov	r0, r8
 80085e6:	47d0      	blx	sl
 80085e8:	3001      	adds	r0, #1
 80085ea:	d0ad      	beq.n	8008548 <_printf_i+0x160>
 80085ec:	6823      	ldr	r3, [r4, #0]
 80085ee:	079b      	lsls	r3, r3, #30
 80085f0:	d413      	bmi.n	800861a <_printf_i+0x232>
 80085f2:	68e0      	ldr	r0, [r4, #12]
 80085f4:	9b03      	ldr	r3, [sp, #12]
 80085f6:	4298      	cmp	r0, r3
 80085f8:	bfb8      	it	lt
 80085fa:	4618      	movlt	r0, r3
 80085fc:	e7a6      	b.n	800854c <_printf_i+0x164>
 80085fe:	2301      	movs	r3, #1
 8008600:	4632      	mov	r2, r6
 8008602:	4649      	mov	r1, r9
 8008604:	4640      	mov	r0, r8
 8008606:	47d0      	blx	sl
 8008608:	3001      	adds	r0, #1
 800860a:	d09d      	beq.n	8008548 <_printf_i+0x160>
 800860c:	3501      	adds	r5, #1
 800860e:	68e3      	ldr	r3, [r4, #12]
 8008610:	9903      	ldr	r1, [sp, #12]
 8008612:	1a5b      	subs	r3, r3, r1
 8008614:	42ab      	cmp	r3, r5
 8008616:	dcf2      	bgt.n	80085fe <_printf_i+0x216>
 8008618:	e7eb      	b.n	80085f2 <_printf_i+0x20a>
 800861a:	2500      	movs	r5, #0
 800861c:	f104 0619 	add.w	r6, r4, #25
 8008620:	e7f5      	b.n	800860e <_printf_i+0x226>
 8008622:	bf00      	nop
 8008624:	0800abda 	.word	0x0800abda
 8008628:	0800abeb 	.word	0x0800abeb

0800862c <std>:
 800862c:	2300      	movs	r3, #0
 800862e:	b510      	push	{r4, lr}
 8008630:	4604      	mov	r4, r0
 8008632:	e9c0 3300 	strd	r3, r3, [r0]
 8008636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800863a:	6083      	str	r3, [r0, #8]
 800863c:	8181      	strh	r1, [r0, #12]
 800863e:	6643      	str	r3, [r0, #100]	; 0x64
 8008640:	81c2      	strh	r2, [r0, #14]
 8008642:	6183      	str	r3, [r0, #24]
 8008644:	4619      	mov	r1, r3
 8008646:	2208      	movs	r2, #8
 8008648:	305c      	adds	r0, #92	; 0x5c
 800864a:	f000 f914 	bl	8008876 <memset>
 800864e:	4b0d      	ldr	r3, [pc, #52]	; (8008684 <std+0x58>)
 8008650:	6263      	str	r3, [r4, #36]	; 0x24
 8008652:	4b0d      	ldr	r3, [pc, #52]	; (8008688 <std+0x5c>)
 8008654:	62a3      	str	r3, [r4, #40]	; 0x28
 8008656:	4b0d      	ldr	r3, [pc, #52]	; (800868c <std+0x60>)
 8008658:	62e3      	str	r3, [r4, #44]	; 0x2c
 800865a:	4b0d      	ldr	r3, [pc, #52]	; (8008690 <std+0x64>)
 800865c:	6323      	str	r3, [r4, #48]	; 0x30
 800865e:	4b0d      	ldr	r3, [pc, #52]	; (8008694 <std+0x68>)
 8008660:	6224      	str	r4, [r4, #32]
 8008662:	429c      	cmp	r4, r3
 8008664:	d006      	beq.n	8008674 <std+0x48>
 8008666:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800866a:	4294      	cmp	r4, r2
 800866c:	d002      	beq.n	8008674 <std+0x48>
 800866e:	33d0      	adds	r3, #208	; 0xd0
 8008670:	429c      	cmp	r4, r3
 8008672:	d105      	bne.n	8008680 <std+0x54>
 8008674:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800867c:	f000 b978 	b.w	8008970 <__retarget_lock_init_recursive>
 8008680:	bd10      	pop	{r4, pc}
 8008682:	bf00      	nop
 8008684:	080087f1 	.word	0x080087f1
 8008688:	08008813 	.word	0x08008813
 800868c:	0800884b 	.word	0x0800884b
 8008690:	0800886f 	.word	0x0800886f
 8008694:	20000434 	.word	0x20000434

08008698 <stdio_exit_handler>:
 8008698:	4a02      	ldr	r2, [pc, #8]	; (80086a4 <stdio_exit_handler+0xc>)
 800869a:	4903      	ldr	r1, [pc, #12]	; (80086a8 <stdio_exit_handler+0x10>)
 800869c:	4803      	ldr	r0, [pc, #12]	; (80086ac <stdio_exit_handler+0x14>)
 800869e:	f000 b869 	b.w	8008774 <_fwalk_sglue>
 80086a2:	bf00      	nop
 80086a4:	20000010 	.word	0x20000010
 80086a8:	0800a341 	.word	0x0800a341
 80086ac:	2000001c 	.word	0x2000001c

080086b0 <cleanup_stdio>:
 80086b0:	6841      	ldr	r1, [r0, #4]
 80086b2:	4b0c      	ldr	r3, [pc, #48]	; (80086e4 <cleanup_stdio+0x34>)
 80086b4:	4299      	cmp	r1, r3
 80086b6:	b510      	push	{r4, lr}
 80086b8:	4604      	mov	r4, r0
 80086ba:	d001      	beq.n	80086c0 <cleanup_stdio+0x10>
 80086bc:	f001 fe40 	bl	800a340 <_fflush_r>
 80086c0:	68a1      	ldr	r1, [r4, #8]
 80086c2:	4b09      	ldr	r3, [pc, #36]	; (80086e8 <cleanup_stdio+0x38>)
 80086c4:	4299      	cmp	r1, r3
 80086c6:	d002      	beq.n	80086ce <cleanup_stdio+0x1e>
 80086c8:	4620      	mov	r0, r4
 80086ca:	f001 fe39 	bl	800a340 <_fflush_r>
 80086ce:	68e1      	ldr	r1, [r4, #12]
 80086d0:	4b06      	ldr	r3, [pc, #24]	; (80086ec <cleanup_stdio+0x3c>)
 80086d2:	4299      	cmp	r1, r3
 80086d4:	d004      	beq.n	80086e0 <cleanup_stdio+0x30>
 80086d6:	4620      	mov	r0, r4
 80086d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086dc:	f001 be30 	b.w	800a340 <_fflush_r>
 80086e0:	bd10      	pop	{r4, pc}
 80086e2:	bf00      	nop
 80086e4:	20000434 	.word	0x20000434
 80086e8:	2000049c 	.word	0x2000049c
 80086ec:	20000504 	.word	0x20000504

080086f0 <global_stdio_init.part.0>:
 80086f0:	b510      	push	{r4, lr}
 80086f2:	4b0b      	ldr	r3, [pc, #44]	; (8008720 <global_stdio_init.part.0+0x30>)
 80086f4:	4c0b      	ldr	r4, [pc, #44]	; (8008724 <global_stdio_init.part.0+0x34>)
 80086f6:	4a0c      	ldr	r2, [pc, #48]	; (8008728 <global_stdio_init.part.0+0x38>)
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	4620      	mov	r0, r4
 80086fc:	2200      	movs	r2, #0
 80086fe:	2104      	movs	r1, #4
 8008700:	f7ff ff94 	bl	800862c <std>
 8008704:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008708:	2201      	movs	r2, #1
 800870a:	2109      	movs	r1, #9
 800870c:	f7ff ff8e 	bl	800862c <std>
 8008710:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008714:	2202      	movs	r2, #2
 8008716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800871a:	2112      	movs	r1, #18
 800871c:	f7ff bf86 	b.w	800862c <std>
 8008720:	2000056c 	.word	0x2000056c
 8008724:	20000434 	.word	0x20000434
 8008728:	08008699 	.word	0x08008699

0800872c <__sfp_lock_acquire>:
 800872c:	4801      	ldr	r0, [pc, #4]	; (8008734 <__sfp_lock_acquire+0x8>)
 800872e:	f000 b920 	b.w	8008972 <__retarget_lock_acquire_recursive>
 8008732:	bf00      	nop
 8008734:	20000575 	.word	0x20000575

08008738 <__sfp_lock_release>:
 8008738:	4801      	ldr	r0, [pc, #4]	; (8008740 <__sfp_lock_release+0x8>)
 800873a:	f000 b91b 	b.w	8008974 <__retarget_lock_release_recursive>
 800873e:	bf00      	nop
 8008740:	20000575 	.word	0x20000575

08008744 <__sinit>:
 8008744:	b510      	push	{r4, lr}
 8008746:	4604      	mov	r4, r0
 8008748:	f7ff fff0 	bl	800872c <__sfp_lock_acquire>
 800874c:	6a23      	ldr	r3, [r4, #32]
 800874e:	b11b      	cbz	r3, 8008758 <__sinit+0x14>
 8008750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008754:	f7ff bff0 	b.w	8008738 <__sfp_lock_release>
 8008758:	4b04      	ldr	r3, [pc, #16]	; (800876c <__sinit+0x28>)
 800875a:	6223      	str	r3, [r4, #32]
 800875c:	4b04      	ldr	r3, [pc, #16]	; (8008770 <__sinit+0x2c>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1f5      	bne.n	8008750 <__sinit+0xc>
 8008764:	f7ff ffc4 	bl	80086f0 <global_stdio_init.part.0>
 8008768:	e7f2      	b.n	8008750 <__sinit+0xc>
 800876a:	bf00      	nop
 800876c:	080086b1 	.word	0x080086b1
 8008770:	2000056c 	.word	0x2000056c

08008774 <_fwalk_sglue>:
 8008774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008778:	4607      	mov	r7, r0
 800877a:	4688      	mov	r8, r1
 800877c:	4614      	mov	r4, r2
 800877e:	2600      	movs	r6, #0
 8008780:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008784:	f1b9 0901 	subs.w	r9, r9, #1
 8008788:	d505      	bpl.n	8008796 <_fwalk_sglue+0x22>
 800878a:	6824      	ldr	r4, [r4, #0]
 800878c:	2c00      	cmp	r4, #0
 800878e:	d1f7      	bne.n	8008780 <_fwalk_sglue+0xc>
 8008790:	4630      	mov	r0, r6
 8008792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008796:	89ab      	ldrh	r3, [r5, #12]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d907      	bls.n	80087ac <_fwalk_sglue+0x38>
 800879c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087a0:	3301      	adds	r3, #1
 80087a2:	d003      	beq.n	80087ac <_fwalk_sglue+0x38>
 80087a4:	4629      	mov	r1, r5
 80087a6:	4638      	mov	r0, r7
 80087a8:	47c0      	blx	r8
 80087aa:	4306      	orrs	r6, r0
 80087ac:	3568      	adds	r5, #104	; 0x68
 80087ae:	e7e9      	b.n	8008784 <_fwalk_sglue+0x10>

080087b0 <siprintf>:
 80087b0:	b40e      	push	{r1, r2, r3}
 80087b2:	b500      	push	{lr}
 80087b4:	b09c      	sub	sp, #112	; 0x70
 80087b6:	ab1d      	add	r3, sp, #116	; 0x74
 80087b8:	9002      	str	r0, [sp, #8]
 80087ba:	9006      	str	r0, [sp, #24]
 80087bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80087c0:	4809      	ldr	r0, [pc, #36]	; (80087e8 <siprintf+0x38>)
 80087c2:	9107      	str	r1, [sp, #28]
 80087c4:	9104      	str	r1, [sp, #16]
 80087c6:	4909      	ldr	r1, [pc, #36]	; (80087ec <siprintf+0x3c>)
 80087c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80087cc:	9105      	str	r1, [sp, #20]
 80087ce:	6800      	ldr	r0, [r0, #0]
 80087d0:	9301      	str	r3, [sp, #4]
 80087d2:	a902      	add	r1, sp, #8
 80087d4:	f001 fc30 	bl	800a038 <_svfiprintf_r>
 80087d8:	9b02      	ldr	r3, [sp, #8]
 80087da:	2200      	movs	r2, #0
 80087dc:	701a      	strb	r2, [r3, #0]
 80087de:	b01c      	add	sp, #112	; 0x70
 80087e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80087e4:	b003      	add	sp, #12
 80087e6:	4770      	bx	lr
 80087e8:	20000068 	.word	0x20000068
 80087ec:	ffff0208 	.word	0xffff0208

080087f0 <__sread>:
 80087f0:	b510      	push	{r4, lr}
 80087f2:	460c      	mov	r4, r1
 80087f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087f8:	f000 f86c 	bl	80088d4 <_read_r>
 80087fc:	2800      	cmp	r0, #0
 80087fe:	bfab      	itete	ge
 8008800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008802:	89a3      	ldrhlt	r3, [r4, #12]
 8008804:	181b      	addge	r3, r3, r0
 8008806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800880a:	bfac      	ite	ge
 800880c:	6563      	strge	r3, [r4, #84]	; 0x54
 800880e:	81a3      	strhlt	r3, [r4, #12]
 8008810:	bd10      	pop	{r4, pc}

08008812 <__swrite>:
 8008812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008816:	461f      	mov	r7, r3
 8008818:	898b      	ldrh	r3, [r1, #12]
 800881a:	05db      	lsls	r3, r3, #23
 800881c:	4605      	mov	r5, r0
 800881e:	460c      	mov	r4, r1
 8008820:	4616      	mov	r6, r2
 8008822:	d505      	bpl.n	8008830 <__swrite+0x1e>
 8008824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008828:	2302      	movs	r3, #2
 800882a:	2200      	movs	r2, #0
 800882c:	f000 f840 	bl	80088b0 <_lseek_r>
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	4632      	mov	r2, r6
 800883e:	463b      	mov	r3, r7
 8008840:	4628      	mov	r0, r5
 8008842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008846:	f000 b857 	b.w	80088f8 <_write_r>

0800884a <__sseek>:
 800884a:	b510      	push	{r4, lr}
 800884c:	460c      	mov	r4, r1
 800884e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008852:	f000 f82d 	bl	80088b0 <_lseek_r>
 8008856:	1c43      	adds	r3, r0, #1
 8008858:	89a3      	ldrh	r3, [r4, #12]
 800885a:	bf15      	itete	ne
 800885c:	6560      	strne	r0, [r4, #84]	; 0x54
 800885e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008866:	81a3      	strheq	r3, [r4, #12]
 8008868:	bf18      	it	ne
 800886a:	81a3      	strhne	r3, [r4, #12]
 800886c:	bd10      	pop	{r4, pc}

0800886e <__sclose>:
 800886e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008872:	f000 b80d 	b.w	8008890 <_close_r>

08008876 <memset>:
 8008876:	4402      	add	r2, r0
 8008878:	4603      	mov	r3, r0
 800887a:	4293      	cmp	r3, r2
 800887c:	d100      	bne.n	8008880 <memset+0xa>
 800887e:	4770      	bx	lr
 8008880:	f803 1b01 	strb.w	r1, [r3], #1
 8008884:	e7f9      	b.n	800887a <memset+0x4>
	...

08008888 <_localeconv_r>:
 8008888:	4800      	ldr	r0, [pc, #0]	; (800888c <_localeconv_r+0x4>)
 800888a:	4770      	bx	lr
 800888c:	2000015c 	.word	0x2000015c

08008890 <_close_r>:
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	4d06      	ldr	r5, [pc, #24]	; (80088ac <_close_r+0x1c>)
 8008894:	2300      	movs	r3, #0
 8008896:	4604      	mov	r4, r0
 8008898:	4608      	mov	r0, r1
 800889a:	602b      	str	r3, [r5, #0]
 800889c:	f7f9 fe55 	bl	800254a <_close>
 80088a0:	1c43      	adds	r3, r0, #1
 80088a2:	d102      	bne.n	80088aa <_close_r+0x1a>
 80088a4:	682b      	ldr	r3, [r5, #0]
 80088a6:	b103      	cbz	r3, 80088aa <_close_r+0x1a>
 80088a8:	6023      	str	r3, [r4, #0]
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
 80088ac:	20000570 	.word	0x20000570

080088b0 <_lseek_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	4d07      	ldr	r5, [pc, #28]	; (80088d0 <_lseek_r+0x20>)
 80088b4:	4604      	mov	r4, r0
 80088b6:	4608      	mov	r0, r1
 80088b8:	4611      	mov	r1, r2
 80088ba:	2200      	movs	r2, #0
 80088bc:	602a      	str	r2, [r5, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	f7f9 fe6a 	bl	8002598 <_lseek>
 80088c4:	1c43      	adds	r3, r0, #1
 80088c6:	d102      	bne.n	80088ce <_lseek_r+0x1e>
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	b103      	cbz	r3, 80088ce <_lseek_r+0x1e>
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	bd38      	pop	{r3, r4, r5, pc}
 80088d0:	20000570 	.word	0x20000570

080088d4 <_read_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	4d07      	ldr	r5, [pc, #28]	; (80088f4 <_read_r+0x20>)
 80088d8:	4604      	mov	r4, r0
 80088da:	4608      	mov	r0, r1
 80088dc:	4611      	mov	r1, r2
 80088de:	2200      	movs	r2, #0
 80088e0:	602a      	str	r2, [r5, #0]
 80088e2:	461a      	mov	r2, r3
 80088e4:	f7f9 fdf8 	bl	80024d8 <_read>
 80088e8:	1c43      	adds	r3, r0, #1
 80088ea:	d102      	bne.n	80088f2 <_read_r+0x1e>
 80088ec:	682b      	ldr	r3, [r5, #0]
 80088ee:	b103      	cbz	r3, 80088f2 <_read_r+0x1e>
 80088f0:	6023      	str	r3, [r4, #0]
 80088f2:	bd38      	pop	{r3, r4, r5, pc}
 80088f4:	20000570 	.word	0x20000570

080088f8 <_write_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	4d07      	ldr	r5, [pc, #28]	; (8008918 <_write_r+0x20>)
 80088fc:	4604      	mov	r4, r0
 80088fe:	4608      	mov	r0, r1
 8008900:	4611      	mov	r1, r2
 8008902:	2200      	movs	r2, #0
 8008904:	602a      	str	r2, [r5, #0]
 8008906:	461a      	mov	r2, r3
 8008908:	f7f9 fe03 	bl	8002512 <_write>
 800890c:	1c43      	adds	r3, r0, #1
 800890e:	d102      	bne.n	8008916 <_write_r+0x1e>
 8008910:	682b      	ldr	r3, [r5, #0]
 8008912:	b103      	cbz	r3, 8008916 <_write_r+0x1e>
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	bd38      	pop	{r3, r4, r5, pc}
 8008918:	20000570 	.word	0x20000570

0800891c <__errno>:
 800891c:	4b01      	ldr	r3, [pc, #4]	; (8008924 <__errno+0x8>)
 800891e:	6818      	ldr	r0, [r3, #0]
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	20000068 	.word	0x20000068

08008928 <__libc_init_array>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	4d0d      	ldr	r5, [pc, #52]	; (8008960 <__libc_init_array+0x38>)
 800892c:	4c0d      	ldr	r4, [pc, #52]	; (8008964 <__libc_init_array+0x3c>)
 800892e:	1b64      	subs	r4, r4, r5
 8008930:	10a4      	asrs	r4, r4, #2
 8008932:	2600      	movs	r6, #0
 8008934:	42a6      	cmp	r6, r4
 8008936:	d109      	bne.n	800894c <__libc_init_array+0x24>
 8008938:	4d0b      	ldr	r5, [pc, #44]	; (8008968 <__libc_init_array+0x40>)
 800893a:	4c0c      	ldr	r4, [pc, #48]	; (800896c <__libc_init_array+0x44>)
 800893c:	f002 f896 	bl	800aa6c <_init>
 8008940:	1b64      	subs	r4, r4, r5
 8008942:	10a4      	asrs	r4, r4, #2
 8008944:	2600      	movs	r6, #0
 8008946:	42a6      	cmp	r6, r4
 8008948:	d105      	bne.n	8008956 <__libc_init_array+0x2e>
 800894a:	bd70      	pop	{r4, r5, r6, pc}
 800894c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008950:	4798      	blx	r3
 8008952:	3601      	adds	r6, #1
 8008954:	e7ee      	b.n	8008934 <__libc_init_array+0xc>
 8008956:	f855 3b04 	ldr.w	r3, [r5], #4
 800895a:	4798      	blx	r3
 800895c:	3601      	adds	r6, #1
 800895e:	e7f2      	b.n	8008946 <__libc_init_array+0x1e>
 8008960:	0800af44 	.word	0x0800af44
 8008964:	0800af44 	.word	0x0800af44
 8008968:	0800af44 	.word	0x0800af44
 800896c:	0800af48 	.word	0x0800af48

08008970 <__retarget_lock_init_recursive>:
 8008970:	4770      	bx	lr

08008972 <__retarget_lock_acquire_recursive>:
 8008972:	4770      	bx	lr

08008974 <__retarget_lock_release_recursive>:
 8008974:	4770      	bx	lr

08008976 <memcpy>:
 8008976:	440a      	add	r2, r1
 8008978:	4291      	cmp	r1, r2
 800897a:	f100 33ff 	add.w	r3, r0, #4294967295
 800897e:	d100      	bne.n	8008982 <memcpy+0xc>
 8008980:	4770      	bx	lr
 8008982:	b510      	push	{r4, lr}
 8008984:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008988:	f803 4f01 	strb.w	r4, [r3, #1]!
 800898c:	4291      	cmp	r1, r2
 800898e:	d1f9      	bne.n	8008984 <memcpy+0xe>
 8008990:	bd10      	pop	{r4, pc}

08008992 <quorem>:
 8008992:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008996:	6903      	ldr	r3, [r0, #16]
 8008998:	690c      	ldr	r4, [r1, #16]
 800899a:	42a3      	cmp	r3, r4
 800899c:	4607      	mov	r7, r0
 800899e:	db7e      	blt.n	8008a9e <quorem+0x10c>
 80089a0:	3c01      	subs	r4, #1
 80089a2:	f101 0814 	add.w	r8, r1, #20
 80089a6:	f100 0514 	add.w	r5, r0, #20
 80089aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089ae:	9301      	str	r3, [sp, #4]
 80089b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089b8:	3301      	adds	r3, #1
 80089ba:	429a      	cmp	r2, r3
 80089bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80089c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80089c8:	d331      	bcc.n	8008a2e <quorem+0x9c>
 80089ca:	f04f 0e00 	mov.w	lr, #0
 80089ce:	4640      	mov	r0, r8
 80089d0:	46ac      	mov	ip, r5
 80089d2:	46f2      	mov	sl, lr
 80089d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80089d8:	b293      	uxth	r3, r2
 80089da:	fb06 e303 	mla	r3, r6, r3, lr
 80089de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80089e2:	0c1a      	lsrs	r2, r3, #16
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	ebaa 0303 	sub.w	r3, sl, r3
 80089ea:	f8dc a000 	ldr.w	sl, [ip]
 80089ee:	fa13 f38a 	uxtah	r3, r3, sl
 80089f2:	fb06 220e 	mla	r2, r6, lr, r2
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	9b00      	ldr	r3, [sp, #0]
 80089fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80089fe:	b292      	uxth	r2, r2
 8008a00:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008a04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a08:	f8bd 3000 	ldrh.w	r3, [sp]
 8008a0c:	4581      	cmp	r9, r0
 8008a0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a12:	f84c 3b04 	str.w	r3, [ip], #4
 8008a16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a1a:	d2db      	bcs.n	80089d4 <quorem+0x42>
 8008a1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a20:	b92b      	cbnz	r3, 8008a2e <quorem+0x9c>
 8008a22:	9b01      	ldr	r3, [sp, #4]
 8008a24:	3b04      	subs	r3, #4
 8008a26:	429d      	cmp	r5, r3
 8008a28:	461a      	mov	r2, r3
 8008a2a:	d32c      	bcc.n	8008a86 <quorem+0xf4>
 8008a2c:	613c      	str	r4, [r7, #16]
 8008a2e:	4638      	mov	r0, r7
 8008a30:	f001 f9a8 	bl	8009d84 <__mcmp>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	db22      	blt.n	8008a7e <quorem+0xec>
 8008a38:	3601      	adds	r6, #1
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a42:	f8d1 c000 	ldr.w	ip, [r1]
 8008a46:	b293      	uxth	r3, r2
 8008a48:	1ac3      	subs	r3, r0, r3
 8008a4a:	0c12      	lsrs	r2, r2, #16
 8008a4c:	fa13 f38c 	uxtah	r3, r3, ip
 8008a50:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008a54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a5e:	45c1      	cmp	r9, r8
 8008a60:	f841 3b04 	str.w	r3, [r1], #4
 8008a64:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a68:	d2e9      	bcs.n	8008a3e <quorem+0xac>
 8008a6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a72:	b922      	cbnz	r2, 8008a7e <quorem+0xec>
 8008a74:	3b04      	subs	r3, #4
 8008a76:	429d      	cmp	r5, r3
 8008a78:	461a      	mov	r2, r3
 8008a7a:	d30a      	bcc.n	8008a92 <quorem+0x100>
 8008a7c:	613c      	str	r4, [r7, #16]
 8008a7e:	4630      	mov	r0, r6
 8008a80:	b003      	add	sp, #12
 8008a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a86:	6812      	ldr	r2, [r2, #0]
 8008a88:	3b04      	subs	r3, #4
 8008a8a:	2a00      	cmp	r2, #0
 8008a8c:	d1ce      	bne.n	8008a2c <quorem+0x9a>
 8008a8e:	3c01      	subs	r4, #1
 8008a90:	e7c9      	b.n	8008a26 <quorem+0x94>
 8008a92:	6812      	ldr	r2, [r2, #0]
 8008a94:	3b04      	subs	r3, #4
 8008a96:	2a00      	cmp	r2, #0
 8008a98:	d1f0      	bne.n	8008a7c <quorem+0xea>
 8008a9a:	3c01      	subs	r4, #1
 8008a9c:	e7eb      	b.n	8008a76 <quorem+0xe4>
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	e7ee      	b.n	8008a80 <quorem+0xee>
 8008aa2:	0000      	movs	r0, r0
 8008aa4:	0000      	movs	r0, r0
	...

08008aa8 <_dtoa_r>:
 8008aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aac:	ed2d 8b04 	vpush	{d8-d9}
 8008ab0:	69c5      	ldr	r5, [r0, #28]
 8008ab2:	b093      	sub	sp, #76	; 0x4c
 8008ab4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008ab8:	ec57 6b10 	vmov	r6, r7, d0
 8008abc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008ac0:	9107      	str	r1, [sp, #28]
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	920a      	str	r2, [sp, #40]	; 0x28
 8008ac6:	930d      	str	r3, [sp, #52]	; 0x34
 8008ac8:	b975      	cbnz	r5, 8008ae8 <_dtoa_r+0x40>
 8008aca:	2010      	movs	r0, #16
 8008acc:	f000 fe2a 	bl	8009724 <malloc>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	61e0      	str	r0, [r4, #28]
 8008ad4:	b920      	cbnz	r0, 8008ae0 <_dtoa_r+0x38>
 8008ad6:	4bae      	ldr	r3, [pc, #696]	; (8008d90 <_dtoa_r+0x2e8>)
 8008ad8:	21ef      	movs	r1, #239	; 0xef
 8008ada:	48ae      	ldr	r0, [pc, #696]	; (8008d94 <_dtoa_r+0x2ec>)
 8008adc:	f001 fc82 	bl	800a3e4 <__assert_func>
 8008ae0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ae4:	6005      	str	r5, [r0, #0]
 8008ae6:	60c5      	str	r5, [r0, #12]
 8008ae8:	69e3      	ldr	r3, [r4, #28]
 8008aea:	6819      	ldr	r1, [r3, #0]
 8008aec:	b151      	cbz	r1, 8008b04 <_dtoa_r+0x5c>
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	604a      	str	r2, [r1, #4]
 8008af2:	2301      	movs	r3, #1
 8008af4:	4093      	lsls	r3, r2
 8008af6:	608b      	str	r3, [r1, #8]
 8008af8:	4620      	mov	r0, r4
 8008afa:	f000 ff07 	bl	800990c <_Bfree>
 8008afe:	69e3      	ldr	r3, [r4, #28]
 8008b00:	2200      	movs	r2, #0
 8008b02:	601a      	str	r2, [r3, #0]
 8008b04:	1e3b      	subs	r3, r7, #0
 8008b06:	bfbb      	ittet	lt
 8008b08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008b0c:	9303      	strlt	r3, [sp, #12]
 8008b0e:	2300      	movge	r3, #0
 8008b10:	2201      	movlt	r2, #1
 8008b12:	bfac      	ite	ge
 8008b14:	f8c8 3000 	strge.w	r3, [r8]
 8008b18:	f8c8 2000 	strlt.w	r2, [r8]
 8008b1c:	4b9e      	ldr	r3, [pc, #632]	; (8008d98 <_dtoa_r+0x2f0>)
 8008b1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008b22:	ea33 0308 	bics.w	r3, r3, r8
 8008b26:	d11b      	bne.n	8008b60 <_dtoa_r+0xb8>
 8008b28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b2e:	6013      	str	r3, [r2, #0]
 8008b30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008b34:	4333      	orrs	r3, r6
 8008b36:	f000 8593 	beq.w	8009660 <_dtoa_r+0xbb8>
 8008b3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b3c:	b963      	cbnz	r3, 8008b58 <_dtoa_r+0xb0>
 8008b3e:	4b97      	ldr	r3, [pc, #604]	; (8008d9c <_dtoa_r+0x2f4>)
 8008b40:	e027      	b.n	8008b92 <_dtoa_r+0xea>
 8008b42:	4b97      	ldr	r3, [pc, #604]	; (8008da0 <_dtoa_r+0x2f8>)
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	3308      	adds	r3, #8
 8008b48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b4a:	6013      	str	r3, [r2, #0]
 8008b4c:	9800      	ldr	r0, [sp, #0]
 8008b4e:	b013      	add	sp, #76	; 0x4c
 8008b50:	ecbd 8b04 	vpop	{d8-d9}
 8008b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b58:	4b90      	ldr	r3, [pc, #576]	; (8008d9c <_dtoa_r+0x2f4>)
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	3303      	adds	r3, #3
 8008b5e:	e7f3      	b.n	8008b48 <_dtoa_r+0xa0>
 8008b60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b64:	2200      	movs	r2, #0
 8008b66:	ec51 0b17 	vmov	r0, r1, d7
 8008b6a:	eeb0 8a47 	vmov.f32	s16, s14
 8008b6e:	eef0 8a67 	vmov.f32	s17, s15
 8008b72:	2300      	movs	r3, #0
 8008b74:	f7f7 ffd0 	bl	8000b18 <__aeabi_dcmpeq>
 8008b78:	4681      	mov	r9, r0
 8008b7a:	b160      	cbz	r0, 8008b96 <_dtoa_r+0xee>
 8008b7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b7e:	2301      	movs	r3, #1
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 8568 	beq.w	800965a <_dtoa_r+0xbb2>
 8008b8a:	4b86      	ldr	r3, [pc, #536]	; (8008da4 <_dtoa_r+0x2fc>)
 8008b8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b8e:	6013      	str	r3, [r2, #0]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	e7da      	b.n	8008b4c <_dtoa_r+0xa4>
 8008b96:	aa10      	add	r2, sp, #64	; 0x40
 8008b98:	a911      	add	r1, sp, #68	; 0x44
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	eeb0 0a48 	vmov.f32	s0, s16
 8008ba0:	eef0 0a68 	vmov.f32	s1, s17
 8008ba4:	f001 f994 	bl	8009ed0 <__d2b>
 8008ba8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008bac:	4682      	mov	sl, r0
 8008bae:	2d00      	cmp	r5, #0
 8008bb0:	d07f      	beq.n	8008cb2 <_dtoa_r+0x20a>
 8008bb2:	ee18 3a90 	vmov	r3, s17
 8008bb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008bbe:	ec51 0b18 	vmov	r0, r1, d8
 8008bc2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008bc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008bca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008bce:	4619      	mov	r1, r3
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	4b75      	ldr	r3, [pc, #468]	; (8008da8 <_dtoa_r+0x300>)
 8008bd4:	f7f7 fb80 	bl	80002d8 <__aeabi_dsub>
 8008bd8:	a367      	add	r3, pc, #412	; (adr r3, 8008d78 <_dtoa_r+0x2d0>)
 8008bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bde:	f7f7 fd33 	bl	8000648 <__aeabi_dmul>
 8008be2:	a367      	add	r3, pc, #412	; (adr r3, 8008d80 <_dtoa_r+0x2d8>)
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	f7f7 fb78 	bl	80002dc <__adddf3>
 8008bec:	4606      	mov	r6, r0
 8008bee:	4628      	mov	r0, r5
 8008bf0:	460f      	mov	r7, r1
 8008bf2:	f7f7 fcbf 	bl	8000574 <__aeabi_i2d>
 8008bf6:	a364      	add	r3, pc, #400	; (adr r3, 8008d88 <_dtoa_r+0x2e0>)
 8008bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfc:	f7f7 fd24 	bl	8000648 <__aeabi_dmul>
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	4630      	mov	r0, r6
 8008c06:	4639      	mov	r1, r7
 8008c08:	f7f7 fb68 	bl	80002dc <__adddf3>
 8008c0c:	4606      	mov	r6, r0
 8008c0e:	460f      	mov	r7, r1
 8008c10:	f7f7 ffca 	bl	8000ba8 <__aeabi_d2iz>
 8008c14:	2200      	movs	r2, #0
 8008c16:	4683      	mov	fp, r0
 8008c18:	2300      	movs	r3, #0
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	4639      	mov	r1, r7
 8008c1e:	f7f7 ff85 	bl	8000b2c <__aeabi_dcmplt>
 8008c22:	b148      	cbz	r0, 8008c38 <_dtoa_r+0x190>
 8008c24:	4658      	mov	r0, fp
 8008c26:	f7f7 fca5 	bl	8000574 <__aeabi_i2d>
 8008c2a:	4632      	mov	r2, r6
 8008c2c:	463b      	mov	r3, r7
 8008c2e:	f7f7 ff73 	bl	8000b18 <__aeabi_dcmpeq>
 8008c32:	b908      	cbnz	r0, 8008c38 <_dtoa_r+0x190>
 8008c34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c38:	f1bb 0f16 	cmp.w	fp, #22
 8008c3c:	d857      	bhi.n	8008cee <_dtoa_r+0x246>
 8008c3e:	4b5b      	ldr	r3, [pc, #364]	; (8008dac <_dtoa_r+0x304>)
 8008c40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c48:	ec51 0b18 	vmov	r0, r1, d8
 8008c4c:	f7f7 ff6e 	bl	8000b2c <__aeabi_dcmplt>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d04e      	beq.n	8008cf2 <_dtoa_r+0x24a>
 8008c54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c58:	2300      	movs	r3, #0
 8008c5a:	930c      	str	r3, [sp, #48]	; 0x30
 8008c5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c5e:	1b5b      	subs	r3, r3, r5
 8008c60:	1e5a      	subs	r2, r3, #1
 8008c62:	bf45      	ittet	mi
 8008c64:	f1c3 0301 	rsbmi	r3, r3, #1
 8008c68:	9305      	strmi	r3, [sp, #20]
 8008c6a:	2300      	movpl	r3, #0
 8008c6c:	2300      	movmi	r3, #0
 8008c6e:	9206      	str	r2, [sp, #24]
 8008c70:	bf54      	ite	pl
 8008c72:	9305      	strpl	r3, [sp, #20]
 8008c74:	9306      	strmi	r3, [sp, #24]
 8008c76:	f1bb 0f00 	cmp.w	fp, #0
 8008c7a:	db3c      	blt.n	8008cf6 <_dtoa_r+0x24e>
 8008c7c:	9b06      	ldr	r3, [sp, #24]
 8008c7e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008c82:	445b      	add	r3, fp
 8008c84:	9306      	str	r3, [sp, #24]
 8008c86:	2300      	movs	r3, #0
 8008c88:	9308      	str	r3, [sp, #32]
 8008c8a:	9b07      	ldr	r3, [sp, #28]
 8008c8c:	2b09      	cmp	r3, #9
 8008c8e:	d868      	bhi.n	8008d62 <_dtoa_r+0x2ba>
 8008c90:	2b05      	cmp	r3, #5
 8008c92:	bfc4      	itt	gt
 8008c94:	3b04      	subgt	r3, #4
 8008c96:	9307      	strgt	r3, [sp, #28]
 8008c98:	9b07      	ldr	r3, [sp, #28]
 8008c9a:	f1a3 0302 	sub.w	r3, r3, #2
 8008c9e:	bfcc      	ite	gt
 8008ca0:	2500      	movgt	r5, #0
 8008ca2:	2501      	movle	r5, #1
 8008ca4:	2b03      	cmp	r3, #3
 8008ca6:	f200 8085 	bhi.w	8008db4 <_dtoa_r+0x30c>
 8008caa:	e8df f003 	tbb	[pc, r3]
 8008cae:	3b2e      	.short	0x3b2e
 8008cb0:	5839      	.short	0x5839
 8008cb2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008cb6:	441d      	add	r5, r3
 8008cb8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008cbc:	2b20      	cmp	r3, #32
 8008cbe:	bfc1      	itttt	gt
 8008cc0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008cc4:	fa08 f803 	lslgt.w	r8, r8, r3
 8008cc8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008ccc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008cd0:	bfd6      	itet	le
 8008cd2:	f1c3 0320 	rsble	r3, r3, #32
 8008cd6:	ea48 0003 	orrgt.w	r0, r8, r3
 8008cda:	fa06 f003 	lslle.w	r0, r6, r3
 8008cde:	f7f7 fc39 	bl	8000554 <__aeabi_ui2d>
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008ce8:	3d01      	subs	r5, #1
 8008cea:	920e      	str	r2, [sp, #56]	; 0x38
 8008cec:	e76f      	b.n	8008bce <_dtoa_r+0x126>
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e7b3      	b.n	8008c5a <_dtoa_r+0x1b2>
 8008cf2:	900c      	str	r0, [sp, #48]	; 0x30
 8008cf4:	e7b2      	b.n	8008c5c <_dtoa_r+0x1b4>
 8008cf6:	9b05      	ldr	r3, [sp, #20]
 8008cf8:	eba3 030b 	sub.w	r3, r3, fp
 8008cfc:	9305      	str	r3, [sp, #20]
 8008cfe:	f1cb 0300 	rsb	r3, fp, #0
 8008d02:	9308      	str	r3, [sp, #32]
 8008d04:	2300      	movs	r3, #0
 8008d06:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d08:	e7bf      	b.n	8008c8a <_dtoa_r+0x1e2>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	dc52      	bgt.n	8008dba <_dtoa_r+0x312>
 8008d14:	2301      	movs	r3, #1
 8008d16:	9301      	str	r3, [sp, #4]
 8008d18:	9304      	str	r3, [sp, #16]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	920a      	str	r2, [sp, #40]	; 0x28
 8008d1e:	e00b      	b.n	8008d38 <_dtoa_r+0x290>
 8008d20:	2301      	movs	r3, #1
 8008d22:	e7f3      	b.n	8008d0c <_dtoa_r+0x264>
 8008d24:	2300      	movs	r3, #0
 8008d26:	9309      	str	r3, [sp, #36]	; 0x24
 8008d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d2a:	445b      	add	r3, fp
 8008d2c:	9301      	str	r3, [sp, #4]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	9304      	str	r3, [sp, #16]
 8008d34:	bfb8      	it	lt
 8008d36:	2301      	movlt	r3, #1
 8008d38:	69e0      	ldr	r0, [r4, #28]
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	2204      	movs	r2, #4
 8008d3e:	f102 0614 	add.w	r6, r2, #20
 8008d42:	429e      	cmp	r6, r3
 8008d44:	d93d      	bls.n	8008dc2 <_dtoa_r+0x31a>
 8008d46:	6041      	str	r1, [r0, #4]
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f000 fd9f 	bl	800988c <_Balloc>
 8008d4e:	9000      	str	r0, [sp, #0]
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d139      	bne.n	8008dc8 <_dtoa_r+0x320>
 8008d54:	4b16      	ldr	r3, [pc, #88]	; (8008db0 <_dtoa_r+0x308>)
 8008d56:	4602      	mov	r2, r0
 8008d58:	f240 11af 	movw	r1, #431	; 0x1af
 8008d5c:	e6bd      	b.n	8008ada <_dtoa_r+0x32>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e7e1      	b.n	8008d26 <_dtoa_r+0x27e>
 8008d62:	2501      	movs	r5, #1
 8008d64:	2300      	movs	r3, #0
 8008d66:	9307      	str	r3, [sp, #28]
 8008d68:	9509      	str	r5, [sp, #36]	; 0x24
 8008d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d6e:	9301      	str	r3, [sp, #4]
 8008d70:	9304      	str	r3, [sp, #16]
 8008d72:	2200      	movs	r2, #0
 8008d74:	2312      	movs	r3, #18
 8008d76:	e7d1      	b.n	8008d1c <_dtoa_r+0x274>
 8008d78:	636f4361 	.word	0x636f4361
 8008d7c:	3fd287a7 	.word	0x3fd287a7
 8008d80:	8b60c8b3 	.word	0x8b60c8b3
 8008d84:	3fc68a28 	.word	0x3fc68a28
 8008d88:	509f79fb 	.word	0x509f79fb
 8008d8c:	3fd34413 	.word	0x3fd34413
 8008d90:	0800ac09 	.word	0x0800ac09
 8008d94:	0800ac20 	.word	0x0800ac20
 8008d98:	7ff00000 	.word	0x7ff00000
 8008d9c:	0800ac05 	.word	0x0800ac05
 8008da0:	0800abfc 	.word	0x0800abfc
 8008da4:	0800abd9 	.word	0x0800abd9
 8008da8:	3ff80000 	.word	0x3ff80000
 8008dac:	0800ad10 	.word	0x0800ad10
 8008db0:	0800ac78 	.word	0x0800ac78
 8008db4:	2301      	movs	r3, #1
 8008db6:	9309      	str	r3, [sp, #36]	; 0x24
 8008db8:	e7d7      	b.n	8008d6a <_dtoa_r+0x2c2>
 8008dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dbc:	9301      	str	r3, [sp, #4]
 8008dbe:	9304      	str	r3, [sp, #16]
 8008dc0:	e7ba      	b.n	8008d38 <_dtoa_r+0x290>
 8008dc2:	3101      	adds	r1, #1
 8008dc4:	0052      	lsls	r2, r2, #1
 8008dc6:	e7ba      	b.n	8008d3e <_dtoa_r+0x296>
 8008dc8:	69e3      	ldr	r3, [r4, #28]
 8008dca:	9a00      	ldr	r2, [sp, #0]
 8008dcc:	601a      	str	r2, [r3, #0]
 8008dce:	9b04      	ldr	r3, [sp, #16]
 8008dd0:	2b0e      	cmp	r3, #14
 8008dd2:	f200 80a8 	bhi.w	8008f26 <_dtoa_r+0x47e>
 8008dd6:	2d00      	cmp	r5, #0
 8008dd8:	f000 80a5 	beq.w	8008f26 <_dtoa_r+0x47e>
 8008ddc:	f1bb 0f00 	cmp.w	fp, #0
 8008de0:	dd38      	ble.n	8008e54 <_dtoa_r+0x3ac>
 8008de2:	4bc0      	ldr	r3, [pc, #768]	; (80090e4 <_dtoa_r+0x63c>)
 8008de4:	f00b 020f 	and.w	r2, fp, #15
 8008de8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008df0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008df4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008df8:	d019      	beq.n	8008e2e <_dtoa_r+0x386>
 8008dfa:	4bbb      	ldr	r3, [pc, #748]	; (80090e8 <_dtoa_r+0x640>)
 8008dfc:	ec51 0b18 	vmov	r0, r1, d8
 8008e00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e04:	f7f7 fd4a 	bl	800089c <__aeabi_ddiv>
 8008e08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e0c:	f008 080f 	and.w	r8, r8, #15
 8008e10:	2503      	movs	r5, #3
 8008e12:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80090e8 <_dtoa_r+0x640>
 8008e16:	f1b8 0f00 	cmp.w	r8, #0
 8008e1a:	d10a      	bne.n	8008e32 <_dtoa_r+0x38a>
 8008e1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e20:	4632      	mov	r2, r6
 8008e22:	463b      	mov	r3, r7
 8008e24:	f7f7 fd3a 	bl	800089c <__aeabi_ddiv>
 8008e28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e2c:	e02b      	b.n	8008e86 <_dtoa_r+0x3de>
 8008e2e:	2502      	movs	r5, #2
 8008e30:	e7ef      	b.n	8008e12 <_dtoa_r+0x36a>
 8008e32:	f018 0f01 	tst.w	r8, #1
 8008e36:	d008      	beq.n	8008e4a <_dtoa_r+0x3a2>
 8008e38:	4630      	mov	r0, r6
 8008e3a:	4639      	mov	r1, r7
 8008e3c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008e40:	f7f7 fc02 	bl	8000648 <__aeabi_dmul>
 8008e44:	3501      	adds	r5, #1
 8008e46:	4606      	mov	r6, r0
 8008e48:	460f      	mov	r7, r1
 8008e4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008e4e:	f109 0908 	add.w	r9, r9, #8
 8008e52:	e7e0      	b.n	8008e16 <_dtoa_r+0x36e>
 8008e54:	f000 809f 	beq.w	8008f96 <_dtoa_r+0x4ee>
 8008e58:	f1cb 0600 	rsb	r6, fp, #0
 8008e5c:	4ba1      	ldr	r3, [pc, #644]	; (80090e4 <_dtoa_r+0x63c>)
 8008e5e:	4fa2      	ldr	r7, [pc, #648]	; (80090e8 <_dtoa_r+0x640>)
 8008e60:	f006 020f 	and.w	r2, r6, #15
 8008e64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6c:	ec51 0b18 	vmov	r0, r1, d8
 8008e70:	f7f7 fbea 	bl	8000648 <__aeabi_dmul>
 8008e74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e78:	1136      	asrs	r6, r6, #4
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	2502      	movs	r5, #2
 8008e7e:	2e00      	cmp	r6, #0
 8008e80:	d17e      	bne.n	8008f80 <_dtoa_r+0x4d8>
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1d0      	bne.n	8008e28 <_dtoa_r+0x380>
 8008e86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e88:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f000 8084 	beq.w	8008f9a <_dtoa_r+0x4f2>
 8008e92:	4b96      	ldr	r3, [pc, #600]	; (80090ec <_dtoa_r+0x644>)
 8008e94:	2200      	movs	r2, #0
 8008e96:	4640      	mov	r0, r8
 8008e98:	4649      	mov	r1, r9
 8008e9a:	f7f7 fe47 	bl	8000b2c <__aeabi_dcmplt>
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	d07b      	beq.n	8008f9a <_dtoa_r+0x4f2>
 8008ea2:	9b04      	ldr	r3, [sp, #16]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d078      	beq.n	8008f9a <_dtoa_r+0x4f2>
 8008ea8:	9b01      	ldr	r3, [sp, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	dd39      	ble.n	8008f22 <_dtoa_r+0x47a>
 8008eae:	4b90      	ldr	r3, [pc, #576]	; (80090f0 <_dtoa_r+0x648>)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	4640      	mov	r0, r8
 8008eb4:	4649      	mov	r1, r9
 8008eb6:	f7f7 fbc7 	bl	8000648 <__aeabi_dmul>
 8008eba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ebe:	9e01      	ldr	r6, [sp, #4]
 8008ec0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008ec4:	3501      	adds	r5, #1
 8008ec6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008eca:	4628      	mov	r0, r5
 8008ecc:	f7f7 fb52 	bl	8000574 <__aeabi_i2d>
 8008ed0:	4642      	mov	r2, r8
 8008ed2:	464b      	mov	r3, r9
 8008ed4:	f7f7 fbb8 	bl	8000648 <__aeabi_dmul>
 8008ed8:	4b86      	ldr	r3, [pc, #536]	; (80090f4 <_dtoa_r+0x64c>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	f7f7 f9fe 	bl	80002dc <__adddf3>
 8008ee0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008ee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ee8:	9303      	str	r3, [sp, #12]
 8008eea:	2e00      	cmp	r6, #0
 8008eec:	d158      	bne.n	8008fa0 <_dtoa_r+0x4f8>
 8008eee:	4b82      	ldr	r3, [pc, #520]	; (80090f8 <_dtoa_r+0x650>)
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	4640      	mov	r0, r8
 8008ef4:	4649      	mov	r1, r9
 8008ef6:	f7f7 f9ef 	bl	80002d8 <__aeabi_dsub>
 8008efa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008efe:	4680      	mov	r8, r0
 8008f00:	4689      	mov	r9, r1
 8008f02:	f7f7 fe31 	bl	8000b68 <__aeabi_dcmpgt>
 8008f06:	2800      	cmp	r0, #0
 8008f08:	f040 8296 	bne.w	8009438 <_dtoa_r+0x990>
 8008f0c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008f10:	4640      	mov	r0, r8
 8008f12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f16:	4649      	mov	r1, r9
 8008f18:	f7f7 fe08 	bl	8000b2c <__aeabi_dcmplt>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	f040 8289 	bne.w	8009434 <_dtoa_r+0x98c>
 8008f22:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008f26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f2c0 814e 	blt.w	80091ca <_dtoa_r+0x722>
 8008f2e:	f1bb 0f0e 	cmp.w	fp, #14
 8008f32:	f300 814a 	bgt.w	80091ca <_dtoa_r+0x722>
 8008f36:	4b6b      	ldr	r3, [pc, #428]	; (80090e4 <_dtoa_r+0x63c>)
 8008f38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008f3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f280 80dc 	bge.w	8009100 <_dtoa_r+0x658>
 8008f48:	9b04      	ldr	r3, [sp, #16]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f300 80d8 	bgt.w	8009100 <_dtoa_r+0x658>
 8008f50:	f040 826f 	bne.w	8009432 <_dtoa_r+0x98a>
 8008f54:	4b68      	ldr	r3, [pc, #416]	; (80090f8 <_dtoa_r+0x650>)
 8008f56:	2200      	movs	r2, #0
 8008f58:	4640      	mov	r0, r8
 8008f5a:	4649      	mov	r1, r9
 8008f5c:	f7f7 fb74 	bl	8000648 <__aeabi_dmul>
 8008f60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f64:	f7f7 fdf6 	bl	8000b54 <__aeabi_dcmpge>
 8008f68:	9e04      	ldr	r6, [sp, #16]
 8008f6a:	4637      	mov	r7, r6
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	f040 8245 	bne.w	80093fc <_dtoa_r+0x954>
 8008f72:	9d00      	ldr	r5, [sp, #0]
 8008f74:	2331      	movs	r3, #49	; 0x31
 8008f76:	f805 3b01 	strb.w	r3, [r5], #1
 8008f7a:	f10b 0b01 	add.w	fp, fp, #1
 8008f7e:	e241      	b.n	8009404 <_dtoa_r+0x95c>
 8008f80:	07f2      	lsls	r2, r6, #31
 8008f82:	d505      	bpl.n	8008f90 <_dtoa_r+0x4e8>
 8008f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f88:	f7f7 fb5e 	bl	8000648 <__aeabi_dmul>
 8008f8c:	3501      	adds	r5, #1
 8008f8e:	2301      	movs	r3, #1
 8008f90:	1076      	asrs	r6, r6, #1
 8008f92:	3708      	adds	r7, #8
 8008f94:	e773      	b.n	8008e7e <_dtoa_r+0x3d6>
 8008f96:	2502      	movs	r5, #2
 8008f98:	e775      	b.n	8008e86 <_dtoa_r+0x3de>
 8008f9a:	9e04      	ldr	r6, [sp, #16]
 8008f9c:	465f      	mov	r7, fp
 8008f9e:	e792      	b.n	8008ec6 <_dtoa_r+0x41e>
 8008fa0:	9900      	ldr	r1, [sp, #0]
 8008fa2:	4b50      	ldr	r3, [pc, #320]	; (80090e4 <_dtoa_r+0x63c>)
 8008fa4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fa8:	4431      	add	r1, r6
 8008faa:	9102      	str	r1, [sp, #8]
 8008fac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fae:	eeb0 9a47 	vmov.f32	s18, s14
 8008fb2:	eef0 9a67 	vmov.f32	s19, s15
 8008fb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008fba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008fbe:	2900      	cmp	r1, #0
 8008fc0:	d044      	beq.n	800904c <_dtoa_r+0x5a4>
 8008fc2:	494e      	ldr	r1, [pc, #312]	; (80090fc <_dtoa_r+0x654>)
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	f7f7 fc69 	bl	800089c <__aeabi_ddiv>
 8008fca:	ec53 2b19 	vmov	r2, r3, d9
 8008fce:	f7f7 f983 	bl	80002d8 <__aeabi_dsub>
 8008fd2:	9d00      	ldr	r5, [sp, #0]
 8008fd4:	ec41 0b19 	vmov	d9, r0, r1
 8008fd8:	4649      	mov	r1, r9
 8008fda:	4640      	mov	r0, r8
 8008fdc:	f7f7 fde4 	bl	8000ba8 <__aeabi_d2iz>
 8008fe0:	4606      	mov	r6, r0
 8008fe2:	f7f7 fac7 	bl	8000574 <__aeabi_i2d>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	4640      	mov	r0, r8
 8008fec:	4649      	mov	r1, r9
 8008fee:	f7f7 f973 	bl	80002d8 <__aeabi_dsub>
 8008ff2:	3630      	adds	r6, #48	; 0x30
 8008ff4:	f805 6b01 	strb.w	r6, [r5], #1
 8008ff8:	ec53 2b19 	vmov	r2, r3, d9
 8008ffc:	4680      	mov	r8, r0
 8008ffe:	4689      	mov	r9, r1
 8009000:	f7f7 fd94 	bl	8000b2c <__aeabi_dcmplt>
 8009004:	2800      	cmp	r0, #0
 8009006:	d164      	bne.n	80090d2 <_dtoa_r+0x62a>
 8009008:	4642      	mov	r2, r8
 800900a:	464b      	mov	r3, r9
 800900c:	4937      	ldr	r1, [pc, #220]	; (80090ec <_dtoa_r+0x644>)
 800900e:	2000      	movs	r0, #0
 8009010:	f7f7 f962 	bl	80002d8 <__aeabi_dsub>
 8009014:	ec53 2b19 	vmov	r2, r3, d9
 8009018:	f7f7 fd88 	bl	8000b2c <__aeabi_dcmplt>
 800901c:	2800      	cmp	r0, #0
 800901e:	f040 80b6 	bne.w	800918e <_dtoa_r+0x6e6>
 8009022:	9b02      	ldr	r3, [sp, #8]
 8009024:	429d      	cmp	r5, r3
 8009026:	f43f af7c 	beq.w	8008f22 <_dtoa_r+0x47a>
 800902a:	4b31      	ldr	r3, [pc, #196]	; (80090f0 <_dtoa_r+0x648>)
 800902c:	ec51 0b19 	vmov	r0, r1, d9
 8009030:	2200      	movs	r2, #0
 8009032:	f7f7 fb09 	bl	8000648 <__aeabi_dmul>
 8009036:	4b2e      	ldr	r3, [pc, #184]	; (80090f0 <_dtoa_r+0x648>)
 8009038:	ec41 0b19 	vmov	d9, r0, r1
 800903c:	2200      	movs	r2, #0
 800903e:	4640      	mov	r0, r8
 8009040:	4649      	mov	r1, r9
 8009042:	f7f7 fb01 	bl	8000648 <__aeabi_dmul>
 8009046:	4680      	mov	r8, r0
 8009048:	4689      	mov	r9, r1
 800904a:	e7c5      	b.n	8008fd8 <_dtoa_r+0x530>
 800904c:	ec51 0b17 	vmov	r0, r1, d7
 8009050:	f7f7 fafa 	bl	8000648 <__aeabi_dmul>
 8009054:	9b02      	ldr	r3, [sp, #8]
 8009056:	9d00      	ldr	r5, [sp, #0]
 8009058:	930f      	str	r3, [sp, #60]	; 0x3c
 800905a:	ec41 0b19 	vmov	d9, r0, r1
 800905e:	4649      	mov	r1, r9
 8009060:	4640      	mov	r0, r8
 8009062:	f7f7 fda1 	bl	8000ba8 <__aeabi_d2iz>
 8009066:	4606      	mov	r6, r0
 8009068:	f7f7 fa84 	bl	8000574 <__aeabi_i2d>
 800906c:	3630      	adds	r6, #48	; 0x30
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	4640      	mov	r0, r8
 8009074:	4649      	mov	r1, r9
 8009076:	f7f7 f92f 	bl	80002d8 <__aeabi_dsub>
 800907a:	f805 6b01 	strb.w	r6, [r5], #1
 800907e:	9b02      	ldr	r3, [sp, #8]
 8009080:	429d      	cmp	r5, r3
 8009082:	4680      	mov	r8, r0
 8009084:	4689      	mov	r9, r1
 8009086:	f04f 0200 	mov.w	r2, #0
 800908a:	d124      	bne.n	80090d6 <_dtoa_r+0x62e>
 800908c:	4b1b      	ldr	r3, [pc, #108]	; (80090fc <_dtoa_r+0x654>)
 800908e:	ec51 0b19 	vmov	r0, r1, d9
 8009092:	f7f7 f923 	bl	80002dc <__adddf3>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	4640      	mov	r0, r8
 800909c:	4649      	mov	r1, r9
 800909e:	f7f7 fd63 	bl	8000b68 <__aeabi_dcmpgt>
 80090a2:	2800      	cmp	r0, #0
 80090a4:	d173      	bne.n	800918e <_dtoa_r+0x6e6>
 80090a6:	ec53 2b19 	vmov	r2, r3, d9
 80090aa:	4914      	ldr	r1, [pc, #80]	; (80090fc <_dtoa_r+0x654>)
 80090ac:	2000      	movs	r0, #0
 80090ae:	f7f7 f913 	bl	80002d8 <__aeabi_dsub>
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
 80090b6:	4640      	mov	r0, r8
 80090b8:	4649      	mov	r1, r9
 80090ba:	f7f7 fd37 	bl	8000b2c <__aeabi_dcmplt>
 80090be:	2800      	cmp	r0, #0
 80090c0:	f43f af2f 	beq.w	8008f22 <_dtoa_r+0x47a>
 80090c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80090c6:	1e6b      	subs	r3, r5, #1
 80090c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80090ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090ce:	2b30      	cmp	r3, #48	; 0x30
 80090d0:	d0f8      	beq.n	80090c4 <_dtoa_r+0x61c>
 80090d2:	46bb      	mov	fp, r7
 80090d4:	e04a      	b.n	800916c <_dtoa_r+0x6c4>
 80090d6:	4b06      	ldr	r3, [pc, #24]	; (80090f0 <_dtoa_r+0x648>)
 80090d8:	f7f7 fab6 	bl	8000648 <__aeabi_dmul>
 80090dc:	4680      	mov	r8, r0
 80090de:	4689      	mov	r9, r1
 80090e0:	e7bd      	b.n	800905e <_dtoa_r+0x5b6>
 80090e2:	bf00      	nop
 80090e4:	0800ad10 	.word	0x0800ad10
 80090e8:	0800ace8 	.word	0x0800ace8
 80090ec:	3ff00000 	.word	0x3ff00000
 80090f0:	40240000 	.word	0x40240000
 80090f4:	401c0000 	.word	0x401c0000
 80090f8:	40140000 	.word	0x40140000
 80090fc:	3fe00000 	.word	0x3fe00000
 8009100:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009104:	9d00      	ldr	r5, [sp, #0]
 8009106:	4642      	mov	r2, r8
 8009108:	464b      	mov	r3, r9
 800910a:	4630      	mov	r0, r6
 800910c:	4639      	mov	r1, r7
 800910e:	f7f7 fbc5 	bl	800089c <__aeabi_ddiv>
 8009112:	f7f7 fd49 	bl	8000ba8 <__aeabi_d2iz>
 8009116:	9001      	str	r0, [sp, #4]
 8009118:	f7f7 fa2c 	bl	8000574 <__aeabi_i2d>
 800911c:	4642      	mov	r2, r8
 800911e:	464b      	mov	r3, r9
 8009120:	f7f7 fa92 	bl	8000648 <__aeabi_dmul>
 8009124:	4602      	mov	r2, r0
 8009126:	460b      	mov	r3, r1
 8009128:	4630      	mov	r0, r6
 800912a:	4639      	mov	r1, r7
 800912c:	f7f7 f8d4 	bl	80002d8 <__aeabi_dsub>
 8009130:	9e01      	ldr	r6, [sp, #4]
 8009132:	9f04      	ldr	r7, [sp, #16]
 8009134:	3630      	adds	r6, #48	; 0x30
 8009136:	f805 6b01 	strb.w	r6, [r5], #1
 800913a:	9e00      	ldr	r6, [sp, #0]
 800913c:	1bae      	subs	r6, r5, r6
 800913e:	42b7      	cmp	r7, r6
 8009140:	4602      	mov	r2, r0
 8009142:	460b      	mov	r3, r1
 8009144:	d134      	bne.n	80091b0 <_dtoa_r+0x708>
 8009146:	f7f7 f8c9 	bl	80002dc <__adddf3>
 800914a:	4642      	mov	r2, r8
 800914c:	464b      	mov	r3, r9
 800914e:	4606      	mov	r6, r0
 8009150:	460f      	mov	r7, r1
 8009152:	f7f7 fd09 	bl	8000b68 <__aeabi_dcmpgt>
 8009156:	b9c8      	cbnz	r0, 800918c <_dtoa_r+0x6e4>
 8009158:	4642      	mov	r2, r8
 800915a:	464b      	mov	r3, r9
 800915c:	4630      	mov	r0, r6
 800915e:	4639      	mov	r1, r7
 8009160:	f7f7 fcda 	bl	8000b18 <__aeabi_dcmpeq>
 8009164:	b110      	cbz	r0, 800916c <_dtoa_r+0x6c4>
 8009166:	9b01      	ldr	r3, [sp, #4]
 8009168:	07db      	lsls	r3, r3, #31
 800916a:	d40f      	bmi.n	800918c <_dtoa_r+0x6e4>
 800916c:	4651      	mov	r1, sl
 800916e:	4620      	mov	r0, r4
 8009170:	f000 fbcc 	bl	800990c <_Bfree>
 8009174:	2300      	movs	r3, #0
 8009176:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009178:	702b      	strb	r3, [r5, #0]
 800917a:	f10b 0301 	add.w	r3, fp, #1
 800917e:	6013      	str	r3, [r2, #0]
 8009180:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009182:	2b00      	cmp	r3, #0
 8009184:	f43f ace2 	beq.w	8008b4c <_dtoa_r+0xa4>
 8009188:	601d      	str	r5, [r3, #0]
 800918a:	e4df      	b.n	8008b4c <_dtoa_r+0xa4>
 800918c:	465f      	mov	r7, fp
 800918e:	462b      	mov	r3, r5
 8009190:	461d      	mov	r5, r3
 8009192:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009196:	2a39      	cmp	r2, #57	; 0x39
 8009198:	d106      	bne.n	80091a8 <_dtoa_r+0x700>
 800919a:	9a00      	ldr	r2, [sp, #0]
 800919c:	429a      	cmp	r2, r3
 800919e:	d1f7      	bne.n	8009190 <_dtoa_r+0x6e8>
 80091a0:	9900      	ldr	r1, [sp, #0]
 80091a2:	2230      	movs	r2, #48	; 0x30
 80091a4:	3701      	adds	r7, #1
 80091a6:	700a      	strb	r2, [r1, #0]
 80091a8:	781a      	ldrb	r2, [r3, #0]
 80091aa:	3201      	adds	r2, #1
 80091ac:	701a      	strb	r2, [r3, #0]
 80091ae:	e790      	b.n	80090d2 <_dtoa_r+0x62a>
 80091b0:	4ba3      	ldr	r3, [pc, #652]	; (8009440 <_dtoa_r+0x998>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	f7f7 fa48 	bl	8000648 <__aeabi_dmul>
 80091b8:	2200      	movs	r2, #0
 80091ba:	2300      	movs	r3, #0
 80091bc:	4606      	mov	r6, r0
 80091be:	460f      	mov	r7, r1
 80091c0:	f7f7 fcaa 	bl	8000b18 <__aeabi_dcmpeq>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d09e      	beq.n	8009106 <_dtoa_r+0x65e>
 80091c8:	e7d0      	b.n	800916c <_dtoa_r+0x6c4>
 80091ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091cc:	2a00      	cmp	r2, #0
 80091ce:	f000 80ca 	beq.w	8009366 <_dtoa_r+0x8be>
 80091d2:	9a07      	ldr	r2, [sp, #28]
 80091d4:	2a01      	cmp	r2, #1
 80091d6:	f300 80ad 	bgt.w	8009334 <_dtoa_r+0x88c>
 80091da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091dc:	2a00      	cmp	r2, #0
 80091de:	f000 80a5 	beq.w	800932c <_dtoa_r+0x884>
 80091e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80091e6:	9e08      	ldr	r6, [sp, #32]
 80091e8:	9d05      	ldr	r5, [sp, #20]
 80091ea:	9a05      	ldr	r2, [sp, #20]
 80091ec:	441a      	add	r2, r3
 80091ee:	9205      	str	r2, [sp, #20]
 80091f0:	9a06      	ldr	r2, [sp, #24]
 80091f2:	2101      	movs	r1, #1
 80091f4:	441a      	add	r2, r3
 80091f6:	4620      	mov	r0, r4
 80091f8:	9206      	str	r2, [sp, #24]
 80091fa:	f000 fc3d 	bl	8009a78 <__i2b>
 80091fe:	4607      	mov	r7, r0
 8009200:	b165      	cbz	r5, 800921c <_dtoa_r+0x774>
 8009202:	9b06      	ldr	r3, [sp, #24]
 8009204:	2b00      	cmp	r3, #0
 8009206:	dd09      	ble.n	800921c <_dtoa_r+0x774>
 8009208:	42ab      	cmp	r3, r5
 800920a:	9a05      	ldr	r2, [sp, #20]
 800920c:	bfa8      	it	ge
 800920e:	462b      	movge	r3, r5
 8009210:	1ad2      	subs	r2, r2, r3
 8009212:	9205      	str	r2, [sp, #20]
 8009214:	9a06      	ldr	r2, [sp, #24]
 8009216:	1aed      	subs	r5, r5, r3
 8009218:	1ad3      	subs	r3, r2, r3
 800921a:	9306      	str	r3, [sp, #24]
 800921c:	9b08      	ldr	r3, [sp, #32]
 800921e:	b1f3      	cbz	r3, 800925e <_dtoa_r+0x7b6>
 8009220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009222:	2b00      	cmp	r3, #0
 8009224:	f000 80a3 	beq.w	800936e <_dtoa_r+0x8c6>
 8009228:	2e00      	cmp	r6, #0
 800922a:	dd10      	ble.n	800924e <_dtoa_r+0x7a6>
 800922c:	4639      	mov	r1, r7
 800922e:	4632      	mov	r2, r6
 8009230:	4620      	mov	r0, r4
 8009232:	f000 fce1 	bl	8009bf8 <__pow5mult>
 8009236:	4652      	mov	r2, sl
 8009238:	4601      	mov	r1, r0
 800923a:	4607      	mov	r7, r0
 800923c:	4620      	mov	r0, r4
 800923e:	f000 fc31 	bl	8009aa4 <__multiply>
 8009242:	4651      	mov	r1, sl
 8009244:	4680      	mov	r8, r0
 8009246:	4620      	mov	r0, r4
 8009248:	f000 fb60 	bl	800990c <_Bfree>
 800924c:	46c2      	mov	sl, r8
 800924e:	9b08      	ldr	r3, [sp, #32]
 8009250:	1b9a      	subs	r2, r3, r6
 8009252:	d004      	beq.n	800925e <_dtoa_r+0x7b6>
 8009254:	4651      	mov	r1, sl
 8009256:	4620      	mov	r0, r4
 8009258:	f000 fcce 	bl	8009bf8 <__pow5mult>
 800925c:	4682      	mov	sl, r0
 800925e:	2101      	movs	r1, #1
 8009260:	4620      	mov	r0, r4
 8009262:	f000 fc09 	bl	8009a78 <__i2b>
 8009266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009268:	2b00      	cmp	r3, #0
 800926a:	4606      	mov	r6, r0
 800926c:	f340 8081 	ble.w	8009372 <_dtoa_r+0x8ca>
 8009270:	461a      	mov	r2, r3
 8009272:	4601      	mov	r1, r0
 8009274:	4620      	mov	r0, r4
 8009276:	f000 fcbf 	bl	8009bf8 <__pow5mult>
 800927a:	9b07      	ldr	r3, [sp, #28]
 800927c:	2b01      	cmp	r3, #1
 800927e:	4606      	mov	r6, r0
 8009280:	dd7a      	ble.n	8009378 <_dtoa_r+0x8d0>
 8009282:	f04f 0800 	mov.w	r8, #0
 8009286:	6933      	ldr	r3, [r6, #16]
 8009288:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800928c:	6918      	ldr	r0, [r3, #16]
 800928e:	f000 fba5 	bl	80099dc <__hi0bits>
 8009292:	f1c0 0020 	rsb	r0, r0, #32
 8009296:	9b06      	ldr	r3, [sp, #24]
 8009298:	4418      	add	r0, r3
 800929a:	f010 001f 	ands.w	r0, r0, #31
 800929e:	f000 8094 	beq.w	80093ca <_dtoa_r+0x922>
 80092a2:	f1c0 0320 	rsb	r3, r0, #32
 80092a6:	2b04      	cmp	r3, #4
 80092a8:	f340 8085 	ble.w	80093b6 <_dtoa_r+0x90e>
 80092ac:	9b05      	ldr	r3, [sp, #20]
 80092ae:	f1c0 001c 	rsb	r0, r0, #28
 80092b2:	4403      	add	r3, r0
 80092b4:	9305      	str	r3, [sp, #20]
 80092b6:	9b06      	ldr	r3, [sp, #24]
 80092b8:	4403      	add	r3, r0
 80092ba:	4405      	add	r5, r0
 80092bc:	9306      	str	r3, [sp, #24]
 80092be:	9b05      	ldr	r3, [sp, #20]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	dd05      	ble.n	80092d0 <_dtoa_r+0x828>
 80092c4:	4651      	mov	r1, sl
 80092c6:	461a      	mov	r2, r3
 80092c8:	4620      	mov	r0, r4
 80092ca:	f000 fcef 	bl	8009cac <__lshift>
 80092ce:	4682      	mov	sl, r0
 80092d0:	9b06      	ldr	r3, [sp, #24]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	dd05      	ble.n	80092e2 <_dtoa_r+0x83a>
 80092d6:	4631      	mov	r1, r6
 80092d8:	461a      	mov	r2, r3
 80092da:	4620      	mov	r0, r4
 80092dc:	f000 fce6 	bl	8009cac <__lshift>
 80092e0:	4606      	mov	r6, r0
 80092e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d072      	beq.n	80093ce <_dtoa_r+0x926>
 80092e8:	4631      	mov	r1, r6
 80092ea:	4650      	mov	r0, sl
 80092ec:	f000 fd4a 	bl	8009d84 <__mcmp>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	da6c      	bge.n	80093ce <_dtoa_r+0x926>
 80092f4:	2300      	movs	r3, #0
 80092f6:	4651      	mov	r1, sl
 80092f8:	220a      	movs	r2, #10
 80092fa:	4620      	mov	r0, r4
 80092fc:	f000 fb28 	bl	8009950 <__multadd>
 8009300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009302:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009306:	4682      	mov	sl, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 81b0 	beq.w	800966e <_dtoa_r+0xbc6>
 800930e:	2300      	movs	r3, #0
 8009310:	4639      	mov	r1, r7
 8009312:	220a      	movs	r2, #10
 8009314:	4620      	mov	r0, r4
 8009316:	f000 fb1b 	bl	8009950 <__multadd>
 800931a:	9b01      	ldr	r3, [sp, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	4607      	mov	r7, r0
 8009320:	f300 8096 	bgt.w	8009450 <_dtoa_r+0x9a8>
 8009324:	9b07      	ldr	r3, [sp, #28]
 8009326:	2b02      	cmp	r3, #2
 8009328:	dc59      	bgt.n	80093de <_dtoa_r+0x936>
 800932a:	e091      	b.n	8009450 <_dtoa_r+0x9a8>
 800932c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800932e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009332:	e758      	b.n	80091e6 <_dtoa_r+0x73e>
 8009334:	9b04      	ldr	r3, [sp, #16]
 8009336:	1e5e      	subs	r6, r3, #1
 8009338:	9b08      	ldr	r3, [sp, #32]
 800933a:	42b3      	cmp	r3, r6
 800933c:	bfbf      	itttt	lt
 800933e:	9b08      	ldrlt	r3, [sp, #32]
 8009340:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009342:	9608      	strlt	r6, [sp, #32]
 8009344:	1af3      	sublt	r3, r6, r3
 8009346:	bfb4      	ite	lt
 8009348:	18d2      	addlt	r2, r2, r3
 800934a:	1b9e      	subge	r6, r3, r6
 800934c:	9b04      	ldr	r3, [sp, #16]
 800934e:	bfbc      	itt	lt
 8009350:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009352:	2600      	movlt	r6, #0
 8009354:	2b00      	cmp	r3, #0
 8009356:	bfb7      	itett	lt
 8009358:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800935c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009360:	1a9d      	sublt	r5, r3, r2
 8009362:	2300      	movlt	r3, #0
 8009364:	e741      	b.n	80091ea <_dtoa_r+0x742>
 8009366:	9e08      	ldr	r6, [sp, #32]
 8009368:	9d05      	ldr	r5, [sp, #20]
 800936a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800936c:	e748      	b.n	8009200 <_dtoa_r+0x758>
 800936e:	9a08      	ldr	r2, [sp, #32]
 8009370:	e770      	b.n	8009254 <_dtoa_r+0x7ac>
 8009372:	9b07      	ldr	r3, [sp, #28]
 8009374:	2b01      	cmp	r3, #1
 8009376:	dc19      	bgt.n	80093ac <_dtoa_r+0x904>
 8009378:	9b02      	ldr	r3, [sp, #8]
 800937a:	b9bb      	cbnz	r3, 80093ac <_dtoa_r+0x904>
 800937c:	9b03      	ldr	r3, [sp, #12]
 800937e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009382:	b99b      	cbnz	r3, 80093ac <_dtoa_r+0x904>
 8009384:	9b03      	ldr	r3, [sp, #12]
 8009386:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800938a:	0d1b      	lsrs	r3, r3, #20
 800938c:	051b      	lsls	r3, r3, #20
 800938e:	b183      	cbz	r3, 80093b2 <_dtoa_r+0x90a>
 8009390:	9b05      	ldr	r3, [sp, #20]
 8009392:	3301      	adds	r3, #1
 8009394:	9305      	str	r3, [sp, #20]
 8009396:	9b06      	ldr	r3, [sp, #24]
 8009398:	3301      	adds	r3, #1
 800939a:	9306      	str	r3, [sp, #24]
 800939c:	f04f 0801 	mov.w	r8, #1
 80093a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f47f af6f 	bne.w	8009286 <_dtoa_r+0x7de>
 80093a8:	2001      	movs	r0, #1
 80093aa:	e774      	b.n	8009296 <_dtoa_r+0x7ee>
 80093ac:	f04f 0800 	mov.w	r8, #0
 80093b0:	e7f6      	b.n	80093a0 <_dtoa_r+0x8f8>
 80093b2:	4698      	mov	r8, r3
 80093b4:	e7f4      	b.n	80093a0 <_dtoa_r+0x8f8>
 80093b6:	d082      	beq.n	80092be <_dtoa_r+0x816>
 80093b8:	9a05      	ldr	r2, [sp, #20]
 80093ba:	331c      	adds	r3, #28
 80093bc:	441a      	add	r2, r3
 80093be:	9205      	str	r2, [sp, #20]
 80093c0:	9a06      	ldr	r2, [sp, #24]
 80093c2:	441a      	add	r2, r3
 80093c4:	441d      	add	r5, r3
 80093c6:	9206      	str	r2, [sp, #24]
 80093c8:	e779      	b.n	80092be <_dtoa_r+0x816>
 80093ca:	4603      	mov	r3, r0
 80093cc:	e7f4      	b.n	80093b8 <_dtoa_r+0x910>
 80093ce:	9b04      	ldr	r3, [sp, #16]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	dc37      	bgt.n	8009444 <_dtoa_r+0x99c>
 80093d4:	9b07      	ldr	r3, [sp, #28]
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	dd34      	ble.n	8009444 <_dtoa_r+0x99c>
 80093da:	9b04      	ldr	r3, [sp, #16]
 80093dc:	9301      	str	r3, [sp, #4]
 80093de:	9b01      	ldr	r3, [sp, #4]
 80093e0:	b963      	cbnz	r3, 80093fc <_dtoa_r+0x954>
 80093e2:	4631      	mov	r1, r6
 80093e4:	2205      	movs	r2, #5
 80093e6:	4620      	mov	r0, r4
 80093e8:	f000 fab2 	bl	8009950 <__multadd>
 80093ec:	4601      	mov	r1, r0
 80093ee:	4606      	mov	r6, r0
 80093f0:	4650      	mov	r0, sl
 80093f2:	f000 fcc7 	bl	8009d84 <__mcmp>
 80093f6:	2800      	cmp	r0, #0
 80093f8:	f73f adbb 	bgt.w	8008f72 <_dtoa_r+0x4ca>
 80093fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093fe:	9d00      	ldr	r5, [sp, #0]
 8009400:	ea6f 0b03 	mvn.w	fp, r3
 8009404:	f04f 0800 	mov.w	r8, #0
 8009408:	4631      	mov	r1, r6
 800940a:	4620      	mov	r0, r4
 800940c:	f000 fa7e 	bl	800990c <_Bfree>
 8009410:	2f00      	cmp	r7, #0
 8009412:	f43f aeab 	beq.w	800916c <_dtoa_r+0x6c4>
 8009416:	f1b8 0f00 	cmp.w	r8, #0
 800941a:	d005      	beq.n	8009428 <_dtoa_r+0x980>
 800941c:	45b8      	cmp	r8, r7
 800941e:	d003      	beq.n	8009428 <_dtoa_r+0x980>
 8009420:	4641      	mov	r1, r8
 8009422:	4620      	mov	r0, r4
 8009424:	f000 fa72 	bl	800990c <_Bfree>
 8009428:	4639      	mov	r1, r7
 800942a:	4620      	mov	r0, r4
 800942c:	f000 fa6e 	bl	800990c <_Bfree>
 8009430:	e69c      	b.n	800916c <_dtoa_r+0x6c4>
 8009432:	2600      	movs	r6, #0
 8009434:	4637      	mov	r7, r6
 8009436:	e7e1      	b.n	80093fc <_dtoa_r+0x954>
 8009438:	46bb      	mov	fp, r7
 800943a:	4637      	mov	r7, r6
 800943c:	e599      	b.n	8008f72 <_dtoa_r+0x4ca>
 800943e:	bf00      	nop
 8009440:	40240000 	.word	0x40240000
 8009444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009446:	2b00      	cmp	r3, #0
 8009448:	f000 80c8 	beq.w	80095dc <_dtoa_r+0xb34>
 800944c:	9b04      	ldr	r3, [sp, #16]
 800944e:	9301      	str	r3, [sp, #4]
 8009450:	2d00      	cmp	r5, #0
 8009452:	dd05      	ble.n	8009460 <_dtoa_r+0x9b8>
 8009454:	4639      	mov	r1, r7
 8009456:	462a      	mov	r2, r5
 8009458:	4620      	mov	r0, r4
 800945a:	f000 fc27 	bl	8009cac <__lshift>
 800945e:	4607      	mov	r7, r0
 8009460:	f1b8 0f00 	cmp.w	r8, #0
 8009464:	d05b      	beq.n	800951e <_dtoa_r+0xa76>
 8009466:	6879      	ldr	r1, [r7, #4]
 8009468:	4620      	mov	r0, r4
 800946a:	f000 fa0f 	bl	800988c <_Balloc>
 800946e:	4605      	mov	r5, r0
 8009470:	b928      	cbnz	r0, 800947e <_dtoa_r+0x9d6>
 8009472:	4b83      	ldr	r3, [pc, #524]	; (8009680 <_dtoa_r+0xbd8>)
 8009474:	4602      	mov	r2, r0
 8009476:	f240 21ef 	movw	r1, #751	; 0x2ef
 800947a:	f7ff bb2e 	b.w	8008ada <_dtoa_r+0x32>
 800947e:	693a      	ldr	r2, [r7, #16]
 8009480:	3202      	adds	r2, #2
 8009482:	0092      	lsls	r2, r2, #2
 8009484:	f107 010c 	add.w	r1, r7, #12
 8009488:	300c      	adds	r0, #12
 800948a:	f7ff fa74 	bl	8008976 <memcpy>
 800948e:	2201      	movs	r2, #1
 8009490:	4629      	mov	r1, r5
 8009492:	4620      	mov	r0, r4
 8009494:	f000 fc0a 	bl	8009cac <__lshift>
 8009498:	9b00      	ldr	r3, [sp, #0]
 800949a:	3301      	adds	r3, #1
 800949c:	9304      	str	r3, [sp, #16]
 800949e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094a2:	4413      	add	r3, r2
 80094a4:	9308      	str	r3, [sp, #32]
 80094a6:	9b02      	ldr	r3, [sp, #8]
 80094a8:	f003 0301 	and.w	r3, r3, #1
 80094ac:	46b8      	mov	r8, r7
 80094ae:	9306      	str	r3, [sp, #24]
 80094b0:	4607      	mov	r7, r0
 80094b2:	9b04      	ldr	r3, [sp, #16]
 80094b4:	4631      	mov	r1, r6
 80094b6:	3b01      	subs	r3, #1
 80094b8:	4650      	mov	r0, sl
 80094ba:	9301      	str	r3, [sp, #4]
 80094bc:	f7ff fa69 	bl	8008992 <quorem>
 80094c0:	4641      	mov	r1, r8
 80094c2:	9002      	str	r0, [sp, #8]
 80094c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80094c8:	4650      	mov	r0, sl
 80094ca:	f000 fc5b 	bl	8009d84 <__mcmp>
 80094ce:	463a      	mov	r2, r7
 80094d0:	9005      	str	r0, [sp, #20]
 80094d2:	4631      	mov	r1, r6
 80094d4:	4620      	mov	r0, r4
 80094d6:	f000 fc71 	bl	8009dbc <__mdiff>
 80094da:	68c2      	ldr	r2, [r0, #12]
 80094dc:	4605      	mov	r5, r0
 80094de:	bb02      	cbnz	r2, 8009522 <_dtoa_r+0xa7a>
 80094e0:	4601      	mov	r1, r0
 80094e2:	4650      	mov	r0, sl
 80094e4:	f000 fc4e 	bl	8009d84 <__mcmp>
 80094e8:	4602      	mov	r2, r0
 80094ea:	4629      	mov	r1, r5
 80094ec:	4620      	mov	r0, r4
 80094ee:	9209      	str	r2, [sp, #36]	; 0x24
 80094f0:	f000 fa0c 	bl	800990c <_Bfree>
 80094f4:	9b07      	ldr	r3, [sp, #28]
 80094f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094f8:	9d04      	ldr	r5, [sp, #16]
 80094fa:	ea43 0102 	orr.w	r1, r3, r2
 80094fe:	9b06      	ldr	r3, [sp, #24]
 8009500:	4319      	orrs	r1, r3
 8009502:	d110      	bne.n	8009526 <_dtoa_r+0xa7e>
 8009504:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009508:	d029      	beq.n	800955e <_dtoa_r+0xab6>
 800950a:	9b05      	ldr	r3, [sp, #20]
 800950c:	2b00      	cmp	r3, #0
 800950e:	dd02      	ble.n	8009516 <_dtoa_r+0xa6e>
 8009510:	9b02      	ldr	r3, [sp, #8]
 8009512:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009516:	9b01      	ldr	r3, [sp, #4]
 8009518:	f883 9000 	strb.w	r9, [r3]
 800951c:	e774      	b.n	8009408 <_dtoa_r+0x960>
 800951e:	4638      	mov	r0, r7
 8009520:	e7ba      	b.n	8009498 <_dtoa_r+0x9f0>
 8009522:	2201      	movs	r2, #1
 8009524:	e7e1      	b.n	80094ea <_dtoa_r+0xa42>
 8009526:	9b05      	ldr	r3, [sp, #20]
 8009528:	2b00      	cmp	r3, #0
 800952a:	db04      	blt.n	8009536 <_dtoa_r+0xa8e>
 800952c:	9907      	ldr	r1, [sp, #28]
 800952e:	430b      	orrs	r3, r1
 8009530:	9906      	ldr	r1, [sp, #24]
 8009532:	430b      	orrs	r3, r1
 8009534:	d120      	bne.n	8009578 <_dtoa_r+0xad0>
 8009536:	2a00      	cmp	r2, #0
 8009538:	dded      	ble.n	8009516 <_dtoa_r+0xa6e>
 800953a:	4651      	mov	r1, sl
 800953c:	2201      	movs	r2, #1
 800953e:	4620      	mov	r0, r4
 8009540:	f000 fbb4 	bl	8009cac <__lshift>
 8009544:	4631      	mov	r1, r6
 8009546:	4682      	mov	sl, r0
 8009548:	f000 fc1c 	bl	8009d84 <__mcmp>
 800954c:	2800      	cmp	r0, #0
 800954e:	dc03      	bgt.n	8009558 <_dtoa_r+0xab0>
 8009550:	d1e1      	bne.n	8009516 <_dtoa_r+0xa6e>
 8009552:	f019 0f01 	tst.w	r9, #1
 8009556:	d0de      	beq.n	8009516 <_dtoa_r+0xa6e>
 8009558:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800955c:	d1d8      	bne.n	8009510 <_dtoa_r+0xa68>
 800955e:	9a01      	ldr	r2, [sp, #4]
 8009560:	2339      	movs	r3, #57	; 0x39
 8009562:	7013      	strb	r3, [r2, #0]
 8009564:	462b      	mov	r3, r5
 8009566:	461d      	mov	r5, r3
 8009568:	3b01      	subs	r3, #1
 800956a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800956e:	2a39      	cmp	r2, #57	; 0x39
 8009570:	d06c      	beq.n	800964c <_dtoa_r+0xba4>
 8009572:	3201      	adds	r2, #1
 8009574:	701a      	strb	r2, [r3, #0]
 8009576:	e747      	b.n	8009408 <_dtoa_r+0x960>
 8009578:	2a00      	cmp	r2, #0
 800957a:	dd07      	ble.n	800958c <_dtoa_r+0xae4>
 800957c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009580:	d0ed      	beq.n	800955e <_dtoa_r+0xab6>
 8009582:	9a01      	ldr	r2, [sp, #4]
 8009584:	f109 0301 	add.w	r3, r9, #1
 8009588:	7013      	strb	r3, [r2, #0]
 800958a:	e73d      	b.n	8009408 <_dtoa_r+0x960>
 800958c:	9b04      	ldr	r3, [sp, #16]
 800958e:	9a08      	ldr	r2, [sp, #32]
 8009590:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009594:	4293      	cmp	r3, r2
 8009596:	d043      	beq.n	8009620 <_dtoa_r+0xb78>
 8009598:	4651      	mov	r1, sl
 800959a:	2300      	movs	r3, #0
 800959c:	220a      	movs	r2, #10
 800959e:	4620      	mov	r0, r4
 80095a0:	f000 f9d6 	bl	8009950 <__multadd>
 80095a4:	45b8      	cmp	r8, r7
 80095a6:	4682      	mov	sl, r0
 80095a8:	f04f 0300 	mov.w	r3, #0
 80095ac:	f04f 020a 	mov.w	r2, #10
 80095b0:	4641      	mov	r1, r8
 80095b2:	4620      	mov	r0, r4
 80095b4:	d107      	bne.n	80095c6 <_dtoa_r+0xb1e>
 80095b6:	f000 f9cb 	bl	8009950 <__multadd>
 80095ba:	4680      	mov	r8, r0
 80095bc:	4607      	mov	r7, r0
 80095be:	9b04      	ldr	r3, [sp, #16]
 80095c0:	3301      	adds	r3, #1
 80095c2:	9304      	str	r3, [sp, #16]
 80095c4:	e775      	b.n	80094b2 <_dtoa_r+0xa0a>
 80095c6:	f000 f9c3 	bl	8009950 <__multadd>
 80095ca:	4639      	mov	r1, r7
 80095cc:	4680      	mov	r8, r0
 80095ce:	2300      	movs	r3, #0
 80095d0:	220a      	movs	r2, #10
 80095d2:	4620      	mov	r0, r4
 80095d4:	f000 f9bc 	bl	8009950 <__multadd>
 80095d8:	4607      	mov	r7, r0
 80095da:	e7f0      	b.n	80095be <_dtoa_r+0xb16>
 80095dc:	9b04      	ldr	r3, [sp, #16]
 80095de:	9301      	str	r3, [sp, #4]
 80095e0:	9d00      	ldr	r5, [sp, #0]
 80095e2:	4631      	mov	r1, r6
 80095e4:	4650      	mov	r0, sl
 80095e6:	f7ff f9d4 	bl	8008992 <quorem>
 80095ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80095ee:	9b00      	ldr	r3, [sp, #0]
 80095f0:	f805 9b01 	strb.w	r9, [r5], #1
 80095f4:	1aea      	subs	r2, r5, r3
 80095f6:	9b01      	ldr	r3, [sp, #4]
 80095f8:	4293      	cmp	r3, r2
 80095fa:	dd07      	ble.n	800960c <_dtoa_r+0xb64>
 80095fc:	4651      	mov	r1, sl
 80095fe:	2300      	movs	r3, #0
 8009600:	220a      	movs	r2, #10
 8009602:	4620      	mov	r0, r4
 8009604:	f000 f9a4 	bl	8009950 <__multadd>
 8009608:	4682      	mov	sl, r0
 800960a:	e7ea      	b.n	80095e2 <_dtoa_r+0xb3a>
 800960c:	9b01      	ldr	r3, [sp, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	bfc8      	it	gt
 8009612:	461d      	movgt	r5, r3
 8009614:	9b00      	ldr	r3, [sp, #0]
 8009616:	bfd8      	it	le
 8009618:	2501      	movle	r5, #1
 800961a:	441d      	add	r5, r3
 800961c:	f04f 0800 	mov.w	r8, #0
 8009620:	4651      	mov	r1, sl
 8009622:	2201      	movs	r2, #1
 8009624:	4620      	mov	r0, r4
 8009626:	f000 fb41 	bl	8009cac <__lshift>
 800962a:	4631      	mov	r1, r6
 800962c:	4682      	mov	sl, r0
 800962e:	f000 fba9 	bl	8009d84 <__mcmp>
 8009632:	2800      	cmp	r0, #0
 8009634:	dc96      	bgt.n	8009564 <_dtoa_r+0xabc>
 8009636:	d102      	bne.n	800963e <_dtoa_r+0xb96>
 8009638:	f019 0f01 	tst.w	r9, #1
 800963c:	d192      	bne.n	8009564 <_dtoa_r+0xabc>
 800963e:	462b      	mov	r3, r5
 8009640:	461d      	mov	r5, r3
 8009642:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009646:	2a30      	cmp	r2, #48	; 0x30
 8009648:	d0fa      	beq.n	8009640 <_dtoa_r+0xb98>
 800964a:	e6dd      	b.n	8009408 <_dtoa_r+0x960>
 800964c:	9a00      	ldr	r2, [sp, #0]
 800964e:	429a      	cmp	r2, r3
 8009650:	d189      	bne.n	8009566 <_dtoa_r+0xabe>
 8009652:	f10b 0b01 	add.w	fp, fp, #1
 8009656:	2331      	movs	r3, #49	; 0x31
 8009658:	e796      	b.n	8009588 <_dtoa_r+0xae0>
 800965a:	4b0a      	ldr	r3, [pc, #40]	; (8009684 <_dtoa_r+0xbdc>)
 800965c:	f7ff ba99 	b.w	8008b92 <_dtoa_r+0xea>
 8009660:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009662:	2b00      	cmp	r3, #0
 8009664:	f47f aa6d 	bne.w	8008b42 <_dtoa_r+0x9a>
 8009668:	4b07      	ldr	r3, [pc, #28]	; (8009688 <_dtoa_r+0xbe0>)
 800966a:	f7ff ba92 	b.w	8008b92 <_dtoa_r+0xea>
 800966e:	9b01      	ldr	r3, [sp, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	dcb5      	bgt.n	80095e0 <_dtoa_r+0xb38>
 8009674:	9b07      	ldr	r3, [sp, #28]
 8009676:	2b02      	cmp	r3, #2
 8009678:	f73f aeb1 	bgt.w	80093de <_dtoa_r+0x936>
 800967c:	e7b0      	b.n	80095e0 <_dtoa_r+0xb38>
 800967e:	bf00      	nop
 8009680:	0800ac78 	.word	0x0800ac78
 8009684:	0800abd8 	.word	0x0800abd8
 8009688:	0800abfc 	.word	0x0800abfc

0800968c <_free_r>:
 800968c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800968e:	2900      	cmp	r1, #0
 8009690:	d044      	beq.n	800971c <_free_r+0x90>
 8009692:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009696:	9001      	str	r0, [sp, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	f1a1 0404 	sub.w	r4, r1, #4
 800969e:	bfb8      	it	lt
 80096a0:	18e4      	addlt	r4, r4, r3
 80096a2:	f000 f8e7 	bl	8009874 <__malloc_lock>
 80096a6:	4a1e      	ldr	r2, [pc, #120]	; (8009720 <_free_r+0x94>)
 80096a8:	9801      	ldr	r0, [sp, #4]
 80096aa:	6813      	ldr	r3, [r2, #0]
 80096ac:	b933      	cbnz	r3, 80096bc <_free_r+0x30>
 80096ae:	6063      	str	r3, [r4, #4]
 80096b0:	6014      	str	r4, [r2, #0]
 80096b2:	b003      	add	sp, #12
 80096b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096b8:	f000 b8e2 	b.w	8009880 <__malloc_unlock>
 80096bc:	42a3      	cmp	r3, r4
 80096be:	d908      	bls.n	80096d2 <_free_r+0x46>
 80096c0:	6825      	ldr	r5, [r4, #0]
 80096c2:	1961      	adds	r1, r4, r5
 80096c4:	428b      	cmp	r3, r1
 80096c6:	bf01      	itttt	eq
 80096c8:	6819      	ldreq	r1, [r3, #0]
 80096ca:	685b      	ldreq	r3, [r3, #4]
 80096cc:	1949      	addeq	r1, r1, r5
 80096ce:	6021      	streq	r1, [r4, #0]
 80096d0:	e7ed      	b.n	80096ae <_free_r+0x22>
 80096d2:	461a      	mov	r2, r3
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	b10b      	cbz	r3, 80096dc <_free_r+0x50>
 80096d8:	42a3      	cmp	r3, r4
 80096da:	d9fa      	bls.n	80096d2 <_free_r+0x46>
 80096dc:	6811      	ldr	r1, [r2, #0]
 80096de:	1855      	adds	r5, r2, r1
 80096e0:	42a5      	cmp	r5, r4
 80096e2:	d10b      	bne.n	80096fc <_free_r+0x70>
 80096e4:	6824      	ldr	r4, [r4, #0]
 80096e6:	4421      	add	r1, r4
 80096e8:	1854      	adds	r4, r2, r1
 80096ea:	42a3      	cmp	r3, r4
 80096ec:	6011      	str	r1, [r2, #0]
 80096ee:	d1e0      	bne.n	80096b2 <_free_r+0x26>
 80096f0:	681c      	ldr	r4, [r3, #0]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	6053      	str	r3, [r2, #4]
 80096f6:	440c      	add	r4, r1
 80096f8:	6014      	str	r4, [r2, #0]
 80096fa:	e7da      	b.n	80096b2 <_free_r+0x26>
 80096fc:	d902      	bls.n	8009704 <_free_r+0x78>
 80096fe:	230c      	movs	r3, #12
 8009700:	6003      	str	r3, [r0, #0]
 8009702:	e7d6      	b.n	80096b2 <_free_r+0x26>
 8009704:	6825      	ldr	r5, [r4, #0]
 8009706:	1961      	adds	r1, r4, r5
 8009708:	428b      	cmp	r3, r1
 800970a:	bf04      	itt	eq
 800970c:	6819      	ldreq	r1, [r3, #0]
 800970e:	685b      	ldreq	r3, [r3, #4]
 8009710:	6063      	str	r3, [r4, #4]
 8009712:	bf04      	itt	eq
 8009714:	1949      	addeq	r1, r1, r5
 8009716:	6021      	streq	r1, [r4, #0]
 8009718:	6054      	str	r4, [r2, #4]
 800971a:	e7ca      	b.n	80096b2 <_free_r+0x26>
 800971c:	b003      	add	sp, #12
 800971e:	bd30      	pop	{r4, r5, pc}
 8009720:	20000578 	.word	0x20000578

08009724 <malloc>:
 8009724:	4b02      	ldr	r3, [pc, #8]	; (8009730 <malloc+0xc>)
 8009726:	4601      	mov	r1, r0
 8009728:	6818      	ldr	r0, [r3, #0]
 800972a:	f000 b823 	b.w	8009774 <_malloc_r>
 800972e:	bf00      	nop
 8009730:	20000068 	.word	0x20000068

08009734 <sbrk_aligned>:
 8009734:	b570      	push	{r4, r5, r6, lr}
 8009736:	4e0e      	ldr	r6, [pc, #56]	; (8009770 <sbrk_aligned+0x3c>)
 8009738:	460c      	mov	r4, r1
 800973a:	6831      	ldr	r1, [r6, #0]
 800973c:	4605      	mov	r5, r0
 800973e:	b911      	cbnz	r1, 8009746 <sbrk_aligned+0x12>
 8009740:	f000 fe40 	bl	800a3c4 <_sbrk_r>
 8009744:	6030      	str	r0, [r6, #0]
 8009746:	4621      	mov	r1, r4
 8009748:	4628      	mov	r0, r5
 800974a:	f000 fe3b 	bl	800a3c4 <_sbrk_r>
 800974e:	1c43      	adds	r3, r0, #1
 8009750:	d00a      	beq.n	8009768 <sbrk_aligned+0x34>
 8009752:	1cc4      	adds	r4, r0, #3
 8009754:	f024 0403 	bic.w	r4, r4, #3
 8009758:	42a0      	cmp	r0, r4
 800975a:	d007      	beq.n	800976c <sbrk_aligned+0x38>
 800975c:	1a21      	subs	r1, r4, r0
 800975e:	4628      	mov	r0, r5
 8009760:	f000 fe30 	bl	800a3c4 <_sbrk_r>
 8009764:	3001      	adds	r0, #1
 8009766:	d101      	bne.n	800976c <sbrk_aligned+0x38>
 8009768:	f04f 34ff 	mov.w	r4, #4294967295
 800976c:	4620      	mov	r0, r4
 800976e:	bd70      	pop	{r4, r5, r6, pc}
 8009770:	2000057c 	.word	0x2000057c

08009774 <_malloc_r>:
 8009774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009778:	1ccd      	adds	r5, r1, #3
 800977a:	f025 0503 	bic.w	r5, r5, #3
 800977e:	3508      	adds	r5, #8
 8009780:	2d0c      	cmp	r5, #12
 8009782:	bf38      	it	cc
 8009784:	250c      	movcc	r5, #12
 8009786:	2d00      	cmp	r5, #0
 8009788:	4607      	mov	r7, r0
 800978a:	db01      	blt.n	8009790 <_malloc_r+0x1c>
 800978c:	42a9      	cmp	r1, r5
 800978e:	d905      	bls.n	800979c <_malloc_r+0x28>
 8009790:	230c      	movs	r3, #12
 8009792:	603b      	str	r3, [r7, #0]
 8009794:	2600      	movs	r6, #0
 8009796:	4630      	mov	r0, r6
 8009798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800979c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009870 <_malloc_r+0xfc>
 80097a0:	f000 f868 	bl	8009874 <__malloc_lock>
 80097a4:	f8d8 3000 	ldr.w	r3, [r8]
 80097a8:	461c      	mov	r4, r3
 80097aa:	bb5c      	cbnz	r4, 8009804 <_malloc_r+0x90>
 80097ac:	4629      	mov	r1, r5
 80097ae:	4638      	mov	r0, r7
 80097b0:	f7ff ffc0 	bl	8009734 <sbrk_aligned>
 80097b4:	1c43      	adds	r3, r0, #1
 80097b6:	4604      	mov	r4, r0
 80097b8:	d155      	bne.n	8009866 <_malloc_r+0xf2>
 80097ba:	f8d8 4000 	ldr.w	r4, [r8]
 80097be:	4626      	mov	r6, r4
 80097c0:	2e00      	cmp	r6, #0
 80097c2:	d145      	bne.n	8009850 <_malloc_r+0xdc>
 80097c4:	2c00      	cmp	r4, #0
 80097c6:	d048      	beq.n	800985a <_malloc_r+0xe6>
 80097c8:	6823      	ldr	r3, [r4, #0]
 80097ca:	4631      	mov	r1, r6
 80097cc:	4638      	mov	r0, r7
 80097ce:	eb04 0903 	add.w	r9, r4, r3
 80097d2:	f000 fdf7 	bl	800a3c4 <_sbrk_r>
 80097d6:	4581      	cmp	r9, r0
 80097d8:	d13f      	bne.n	800985a <_malloc_r+0xe6>
 80097da:	6821      	ldr	r1, [r4, #0]
 80097dc:	1a6d      	subs	r5, r5, r1
 80097de:	4629      	mov	r1, r5
 80097e0:	4638      	mov	r0, r7
 80097e2:	f7ff ffa7 	bl	8009734 <sbrk_aligned>
 80097e6:	3001      	adds	r0, #1
 80097e8:	d037      	beq.n	800985a <_malloc_r+0xe6>
 80097ea:	6823      	ldr	r3, [r4, #0]
 80097ec:	442b      	add	r3, r5
 80097ee:	6023      	str	r3, [r4, #0]
 80097f0:	f8d8 3000 	ldr.w	r3, [r8]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d038      	beq.n	800986a <_malloc_r+0xf6>
 80097f8:	685a      	ldr	r2, [r3, #4]
 80097fa:	42a2      	cmp	r2, r4
 80097fc:	d12b      	bne.n	8009856 <_malloc_r+0xe2>
 80097fe:	2200      	movs	r2, #0
 8009800:	605a      	str	r2, [r3, #4]
 8009802:	e00f      	b.n	8009824 <_malloc_r+0xb0>
 8009804:	6822      	ldr	r2, [r4, #0]
 8009806:	1b52      	subs	r2, r2, r5
 8009808:	d41f      	bmi.n	800984a <_malloc_r+0xd6>
 800980a:	2a0b      	cmp	r2, #11
 800980c:	d917      	bls.n	800983e <_malloc_r+0xca>
 800980e:	1961      	adds	r1, r4, r5
 8009810:	42a3      	cmp	r3, r4
 8009812:	6025      	str	r5, [r4, #0]
 8009814:	bf18      	it	ne
 8009816:	6059      	strne	r1, [r3, #4]
 8009818:	6863      	ldr	r3, [r4, #4]
 800981a:	bf08      	it	eq
 800981c:	f8c8 1000 	streq.w	r1, [r8]
 8009820:	5162      	str	r2, [r4, r5]
 8009822:	604b      	str	r3, [r1, #4]
 8009824:	4638      	mov	r0, r7
 8009826:	f104 060b 	add.w	r6, r4, #11
 800982a:	f000 f829 	bl	8009880 <__malloc_unlock>
 800982e:	f026 0607 	bic.w	r6, r6, #7
 8009832:	1d23      	adds	r3, r4, #4
 8009834:	1af2      	subs	r2, r6, r3
 8009836:	d0ae      	beq.n	8009796 <_malloc_r+0x22>
 8009838:	1b9b      	subs	r3, r3, r6
 800983a:	50a3      	str	r3, [r4, r2]
 800983c:	e7ab      	b.n	8009796 <_malloc_r+0x22>
 800983e:	42a3      	cmp	r3, r4
 8009840:	6862      	ldr	r2, [r4, #4]
 8009842:	d1dd      	bne.n	8009800 <_malloc_r+0x8c>
 8009844:	f8c8 2000 	str.w	r2, [r8]
 8009848:	e7ec      	b.n	8009824 <_malloc_r+0xb0>
 800984a:	4623      	mov	r3, r4
 800984c:	6864      	ldr	r4, [r4, #4]
 800984e:	e7ac      	b.n	80097aa <_malloc_r+0x36>
 8009850:	4634      	mov	r4, r6
 8009852:	6876      	ldr	r6, [r6, #4]
 8009854:	e7b4      	b.n	80097c0 <_malloc_r+0x4c>
 8009856:	4613      	mov	r3, r2
 8009858:	e7cc      	b.n	80097f4 <_malloc_r+0x80>
 800985a:	230c      	movs	r3, #12
 800985c:	603b      	str	r3, [r7, #0]
 800985e:	4638      	mov	r0, r7
 8009860:	f000 f80e 	bl	8009880 <__malloc_unlock>
 8009864:	e797      	b.n	8009796 <_malloc_r+0x22>
 8009866:	6025      	str	r5, [r4, #0]
 8009868:	e7dc      	b.n	8009824 <_malloc_r+0xb0>
 800986a:	605b      	str	r3, [r3, #4]
 800986c:	deff      	udf	#255	; 0xff
 800986e:	bf00      	nop
 8009870:	20000578 	.word	0x20000578

08009874 <__malloc_lock>:
 8009874:	4801      	ldr	r0, [pc, #4]	; (800987c <__malloc_lock+0x8>)
 8009876:	f7ff b87c 	b.w	8008972 <__retarget_lock_acquire_recursive>
 800987a:	bf00      	nop
 800987c:	20000574 	.word	0x20000574

08009880 <__malloc_unlock>:
 8009880:	4801      	ldr	r0, [pc, #4]	; (8009888 <__malloc_unlock+0x8>)
 8009882:	f7ff b877 	b.w	8008974 <__retarget_lock_release_recursive>
 8009886:	bf00      	nop
 8009888:	20000574 	.word	0x20000574

0800988c <_Balloc>:
 800988c:	b570      	push	{r4, r5, r6, lr}
 800988e:	69c6      	ldr	r6, [r0, #28]
 8009890:	4604      	mov	r4, r0
 8009892:	460d      	mov	r5, r1
 8009894:	b976      	cbnz	r6, 80098b4 <_Balloc+0x28>
 8009896:	2010      	movs	r0, #16
 8009898:	f7ff ff44 	bl	8009724 <malloc>
 800989c:	4602      	mov	r2, r0
 800989e:	61e0      	str	r0, [r4, #28]
 80098a0:	b920      	cbnz	r0, 80098ac <_Balloc+0x20>
 80098a2:	4b18      	ldr	r3, [pc, #96]	; (8009904 <_Balloc+0x78>)
 80098a4:	4818      	ldr	r0, [pc, #96]	; (8009908 <_Balloc+0x7c>)
 80098a6:	216b      	movs	r1, #107	; 0x6b
 80098a8:	f000 fd9c 	bl	800a3e4 <__assert_func>
 80098ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098b0:	6006      	str	r6, [r0, #0]
 80098b2:	60c6      	str	r6, [r0, #12]
 80098b4:	69e6      	ldr	r6, [r4, #28]
 80098b6:	68f3      	ldr	r3, [r6, #12]
 80098b8:	b183      	cbz	r3, 80098dc <_Balloc+0x50>
 80098ba:	69e3      	ldr	r3, [r4, #28]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098c2:	b9b8      	cbnz	r0, 80098f4 <_Balloc+0x68>
 80098c4:	2101      	movs	r1, #1
 80098c6:	fa01 f605 	lsl.w	r6, r1, r5
 80098ca:	1d72      	adds	r2, r6, #5
 80098cc:	0092      	lsls	r2, r2, #2
 80098ce:	4620      	mov	r0, r4
 80098d0:	f000 fda6 	bl	800a420 <_calloc_r>
 80098d4:	b160      	cbz	r0, 80098f0 <_Balloc+0x64>
 80098d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098da:	e00e      	b.n	80098fa <_Balloc+0x6e>
 80098dc:	2221      	movs	r2, #33	; 0x21
 80098de:	2104      	movs	r1, #4
 80098e0:	4620      	mov	r0, r4
 80098e2:	f000 fd9d 	bl	800a420 <_calloc_r>
 80098e6:	69e3      	ldr	r3, [r4, #28]
 80098e8:	60f0      	str	r0, [r6, #12]
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1e4      	bne.n	80098ba <_Balloc+0x2e>
 80098f0:	2000      	movs	r0, #0
 80098f2:	bd70      	pop	{r4, r5, r6, pc}
 80098f4:	6802      	ldr	r2, [r0, #0]
 80098f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098fa:	2300      	movs	r3, #0
 80098fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009900:	e7f7      	b.n	80098f2 <_Balloc+0x66>
 8009902:	bf00      	nop
 8009904:	0800ac09 	.word	0x0800ac09
 8009908:	0800ac89 	.word	0x0800ac89

0800990c <_Bfree>:
 800990c:	b570      	push	{r4, r5, r6, lr}
 800990e:	69c6      	ldr	r6, [r0, #28]
 8009910:	4605      	mov	r5, r0
 8009912:	460c      	mov	r4, r1
 8009914:	b976      	cbnz	r6, 8009934 <_Bfree+0x28>
 8009916:	2010      	movs	r0, #16
 8009918:	f7ff ff04 	bl	8009724 <malloc>
 800991c:	4602      	mov	r2, r0
 800991e:	61e8      	str	r0, [r5, #28]
 8009920:	b920      	cbnz	r0, 800992c <_Bfree+0x20>
 8009922:	4b09      	ldr	r3, [pc, #36]	; (8009948 <_Bfree+0x3c>)
 8009924:	4809      	ldr	r0, [pc, #36]	; (800994c <_Bfree+0x40>)
 8009926:	218f      	movs	r1, #143	; 0x8f
 8009928:	f000 fd5c 	bl	800a3e4 <__assert_func>
 800992c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009930:	6006      	str	r6, [r0, #0]
 8009932:	60c6      	str	r6, [r0, #12]
 8009934:	b13c      	cbz	r4, 8009946 <_Bfree+0x3a>
 8009936:	69eb      	ldr	r3, [r5, #28]
 8009938:	6862      	ldr	r2, [r4, #4]
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009940:	6021      	str	r1, [r4, #0]
 8009942:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009946:	bd70      	pop	{r4, r5, r6, pc}
 8009948:	0800ac09 	.word	0x0800ac09
 800994c:	0800ac89 	.word	0x0800ac89

08009950 <__multadd>:
 8009950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009954:	690d      	ldr	r5, [r1, #16]
 8009956:	4607      	mov	r7, r0
 8009958:	460c      	mov	r4, r1
 800995a:	461e      	mov	r6, r3
 800995c:	f101 0c14 	add.w	ip, r1, #20
 8009960:	2000      	movs	r0, #0
 8009962:	f8dc 3000 	ldr.w	r3, [ip]
 8009966:	b299      	uxth	r1, r3
 8009968:	fb02 6101 	mla	r1, r2, r1, r6
 800996c:	0c1e      	lsrs	r6, r3, #16
 800996e:	0c0b      	lsrs	r3, r1, #16
 8009970:	fb02 3306 	mla	r3, r2, r6, r3
 8009974:	b289      	uxth	r1, r1
 8009976:	3001      	adds	r0, #1
 8009978:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800997c:	4285      	cmp	r5, r0
 800997e:	f84c 1b04 	str.w	r1, [ip], #4
 8009982:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009986:	dcec      	bgt.n	8009962 <__multadd+0x12>
 8009988:	b30e      	cbz	r6, 80099ce <__multadd+0x7e>
 800998a:	68a3      	ldr	r3, [r4, #8]
 800998c:	42ab      	cmp	r3, r5
 800998e:	dc19      	bgt.n	80099c4 <__multadd+0x74>
 8009990:	6861      	ldr	r1, [r4, #4]
 8009992:	4638      	mov	r0, r7
 8009994:	3101      	adds	r1, #1
 8009996:	f7ff ff79 	bl	800988c <_Balloc>
 800999a:	4680      	mov	r8, r0
 800999c:	b928      	cbnz	r0, 80099aa <__multadd+0x5a>
 800999e:	4602      	mov	r2, r0
 80099a0:	4b0c      	ldr	r3, [pc, #48]	; (80099d4 <__multadd+0x84>)
 80099a2:	480d      	ldr	r0, [pc, #52]	; (80099d8 <__multadd+0x88>)
 80099a4:	21ba      	movs	r1, #186	; 0xba
 80099a6:	f000 fd1d 	bl	800a3e4 <__assert_func>
 80099aa:	6922      	ldr	r2, [r4, #16]
 80099ac:	3202      	adds	r2, #2
 80099ae:	f104 010c 	add.w	r1, r4, #12
 80099b2:	0092      	lsls	r2, r2, #2
 80099b4:	300c      	adds	r0, #12
 80099b6:	f7fe ffde 	bl	8008976 <memcpy>
 80099ba:	4621      	mov	r1, r4
 80099bc:	4638      	mov	r0, r7
 80099be:	f7ff ffa5 	bl	800990c <_Bfree>
 80099c2:	4644      	mov	r4, r8
 80099c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80099c8:	3501      	adds	r5, #1
 80099ca:	615e      	str	r6, [r3, #20]
 80099cc:	6125      	str	r5, [r4, #16]
 80099ce:	4620      	mov	r0, r4
 80099d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d4:	0800ac78 	.word	0x0800ac78
 80099d8:	0800ac89 	.word	0x0800ac89

080099dc <__hi0bits>:
 80099dc:	0c03      	lsrs	r3, r0, #16
 80099de:	041b      	lsls	r3, r3, #16
 80099e0:	b9d3      	cbnz	r3, 8009a18 <__hi0bits+0x3c>
 80099e2:	0400      	lsls	r0, r0, #16
 80099e4:	2310      	movs	r3, #16
 80099e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80099ea:	bf04      	itt	eq
 80099ec:	0200      	lsleq	r0, r0, #8
 80099ee:	3308      	addeq	r3, #8
 80099f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80099f4:	bf04      	itt	eq
 80099f6:	0100      	lsleq	r0, r0, #4
 80099f8:	3304      	addeq	r3, #4
 80099fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80099fe:	bf04      	itt	eq
 8009a00:	0080      	lsleq	r0, r0, #2
 8009a02:	3302      	addeq	r3, #2
 8009a04:	2800      	cmp	r0, #0
 8009a06:	db05      	blt.n	8009a14 <__hi0bits+0x38>
 8009a08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009a0c:	f103 0301 	add.w	r3, r3, #1
 8009a10:	bf08      	it	eq
 8009a12:	2320      	moveq	r3, #32
 8009a14:	4618      	mov	r0, r3
 8009a16:	4770      	bx	lr
 8009a18:	2300      	movs	r3, #0
 8009a1a:	e7e4      	b.n	80099e6 <__hi0bits+0xa>

08009a1c <__lo0bits>:
 8009a1c:	6803      	ldr	r3, [r0, #0]
 8009a1e:	f013 0207 	ands.w	r2, r3, #7
 8009a22:	d00c      	beq.n	8009a3e <__lo0bits+0x22>
 8009a24:	07d9      	lsls	r1, r3, #31
 8009a26:	d422      	bmi.n	8009a6e <__lo0bits+0x52>
 8009a28:	079a      	lsls	r2, r3, #30
 8009a2a:	bf49      	itett	mi
 8009a2c:	085b      	lsrmi	r3, r3, #1
 8009a2e:	089b      	lsrpl	r3, r3, #2
 8009a30:	6003      	strmi	r3, [r0, #0]
 8009a32:	2201      	movmi	r2, #1
 8009a34:	bf5c      	itt	pl
 8009a36:	6003      	strpl	r3, [r0, #0]
 8009a38:	2202      	movpl	r2, #2
 8009a3a:	4610      	mov	r0, r2
 8009a3c:	4770      	bx	lr
 8009a3e:	b299      	uxth	r1, r3
 8009a40:	b909      	cbnz	r1, 8009a46 <__lo0bits+0x2a>
 8009a42:	0c1b      	lsrs	r3, r3, #16
 8009a44:	2210      	movs	r2, #16
 8009a46:	b2d9      	uxtb	r1, r3
 8009a48:	b909      	cbnz	r1, 8009a4e <__lo0bits+0x32>
 8009a4a:	3208      	adds	r2, #8
 8009a4c:	0a1b      	lsrs	r3, r3, #8
 8009a4e:	0719      	lsls	r1, r3, #28
 8009a50:	bf04      	itt	eq
 8009a52:	091b      	lsreq	r3, r3, #4
 8009a54:	3204      	addeq	r2, #4
 8009a56:	0799      	lsls	r1, r3, #30
 8009a58:	bf04      	itt	eq
 8009a5a:	089b      	lsreq	r3, r3, #2
 8009a5c:	3202      	addeq	r2, #2
 8009a5e:	07d9      	lsls	r1, r3, #31
 8009a60:	d403      	bmi.n	8009a6a <__lo0bits+0x4e>
 8009a62:	085b      	lsrs	r3, r3, #1
 8009a64:	f102 0201 	add.w	r2, r2, #1
 8009a68:	d003      	beq.n	8009a72 <__lo0bits+0x56>
 8009a6a:	6003      	str	r3, [r0, #0]
 8009a6c:	e7e5      	b.n	8009a3a <__lo0bits+0x1e>
 8009a6e:	2200      	movs	r2, #0
 8009a70:	e7e3      	b.n	8009a3a <__lo0bits+0x1e>
 8009a72:	2220      	movs	r2, #32
 8009a74:	e7e1      	b.n	8009a3a <__lo0bits+0x1e>
	...

08009a78 <__i2b>:
 8009a78:	b510      	push	{r4, lr}
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	2101      	movs	r1, #1
 8009a7e:	f7ff ff05 	bl	800988c <_Balloc>
 8009a82:	4602      	mov	r2, r0
 8009a84:	b928      	cbnz	r0, 8009a92 <__i2b+0x1a>
 8009a86:	4b05      	ldr	r3, [pc, #20]	; (8009a9c <__i2b+0x24>)
 8009a88:	4805      	ldr	r0, [pc, #20]	; (8009aa0 <__i2b+0x28>)
 8009a8a:	f240 1145 	movw	r1, #325	; 0x145
 8009a8e:	f000 fca9 	bl	800a3e4 <__assert_func>
 8009a92:	2301      	movs	r3, #1
 8009a94:	6144      	str	r4, [r0, #20]
 8009a96:	6103      	str	r3, [r0, #16]
 8009a98:	bd10      	pop	{r4, pc}
 8009a9a:	bf00      	nop
 8009a9c:	0800ac78 	.word	0x0800ac78
 8009aa0:	0800ac89 	.word	0x0800ac89

08009aa4 <__multiply>:
 8009aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa8:	4691      	mov	r9, r2
 8009aaa:	690a      	ldr	r2, [r1, #16]
 8009aac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	bfb8      	it	lt
 8009ab4:	460b      	movlt	r3, r1
 8009ab6:	460c      	mov	r4, r1
 8009ab8:	bfbc      	itt	lt
 8009aba:	464c      	movlt	r4, r9
 8009abc:	4699      	movlt	r9, r3
 8009abe:	6927      	ldr	r7, [r4, #16]
 8009ac0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ac4:	68a3      	ldr	r3, [r4, #8]
 8009ac6:	6861      	ldr	r1, [r4, #4]
 8009ac8:	eb07 060a 	add.w	r6, r7, sl
 8009acc:	42b3      	cmp	r3, r6
 8009ace:	b085      	sub	sp, #20
 8009ad0:	bfb8      	it	lt
 8009ad2:	3101      	addlt	r1, #1
 8009ad4:	f7ff feda 	bl	800988c <_Balloc>
 8009ad8:	b930      	cbnz	r0, 8009ae8 <__multiply+0x44>
 8009ada:	4602      	mov	r2, r0
 8009adc:	4b44      	ldr	r3, [pc, #272]	; (8009bf0 <__multiply+0x14c>)
 8009ade:	4845      	ldr	r0, [pc, #276]	; (8009bf4 <__multiply+0x150>)
 8009ae0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009ae4:	f000 fc7e 	bl	800a3e4 <__assert_func>
 8009ae8:	f100 0514 	add.w	r5, r0, #20
 8009aec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009af0:	462b      	mov	r3, r5
 8009af2:	2200      	movs	r2, #0
 8009af4:	4543      	cmp	r3, r8
 8009af6:	d321      	bcc.n	8009b3c <__multiply+0x98>
 8009af8:	f104 0314 	add.w	r3, r4, #20
 8009afc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009b00:	f109 0314 	add.w	r3, r9, #20
 8009b04:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009b08:	9202      	str	r2, [sp, #8]
 8009b0a:	1b3a      	subs	r2, r7, r4
 8009b0c:	3a15      	subs	r2, #21
 8009b0e:	f022 0203 	bic.w	r2, r2, #3
 8009b12:	3204      	adds	r2, #4
 8009b14:	f104 0115 	add.w	r1, r4, #21
 8009b18:	428f      	cmp	r7, r1
 8009b1a:	bf38      	it	cc
 8009b1c:	2204      	movcc	r2, #4
 8009b1e:	9201      	str	r2, [sp, #4]
 8009b20:	9a02      	ldr	r2, [sp, #8]
 8009b22:	9303      	str	r3, [sp, #12]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d80c      	bhi.n	8009b42 <__multiply+0x9e>
 8009b28:	2e00      	cmp	r6, #0
 8009b2a:	dd03      	ble.n	8009b34 <__multiply+0x90>
 8009b2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d05b      	beq.n	8009bec <__multiply+0x148>
 8009b34:	6106      	str	r6, [r0, #16]
 8009b36:	b005      	add	sp, #20
 8009b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b3c:	f843 2b04 	str.w	r2, [r3], #4
 8009b40:	e7d8      	b.n	8009af4 <__multiply+0x50>
 8009b42:	f8b3 a000 	ldrh.w	sl, [r3]
 8009b46:	f1ba 0f00 	cmp.w	sl, #0
 8009b4a:	d024      	beq.n	8009b96 <__multiply+0xf2>
 8009b4c:	f104 0e14 	add.w	lr, r4, #20
 8009b50:	46a9      	mov	r9, r5
 8009b52:	f04f 0c00 	mov.w	ip, #0
 8009b56:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009b5a:	f8d9 1000 	ldr.w	r1, [r9]
 8009b5e:	fa1f fb82 	uxth.w	fp, r2
 8009b62:	b289      	uxth	r1, r1
 8009b64:	fb0a 110b 	mla	r1, sl, fp, r1
 8009b68:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009b6c:	f8d9 2000 	ldr.w	r2, [r9]
 8009b70:	4461      	add	r1, ip
 8009b72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b76:	fb0a c20b 	mla	r2, sl, fp, ip
 8009b7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b7e:	b289      	uxth	r1, r1
 8009b80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b84:	4577      	cmp	r7, lr
 8009b86:	f849 1b04 	str.w	r1, [r9], #4
 8009b8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b8e:	d8e2      	bhi.n	8009b56 <__multiply+0xb2>
 8009b90:	9a01      	ldr	r2, [sp, #4]
 8009b92:	f845 c002 	str.w	ip, [r5, r2]
 8009b96:	9a03      	ldr	r2, [sp, #12]
 8009b98:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b9c:	3304      	adds	r3, #4
 8009b9e:	f1b9 0f00 	cmp.w	r9, #0
 8009ba2:	d021      	beq.n	8009be8 <__multiply+0x144>
 8009ba4:	6829      	ldr	r1, [r5, #0]
 8009ba6:	f104 0c14 	add.w	ip, r4, #20
 8009baa:	46ae      	mov	lr, r5
 8009bac:	f04f 0a00 	mov.w	sl, #0
 8009bb0:	f8bc b000 	ldrh.w	fp, [ip]
 8009bb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009bb8:	fb09 220b 	mla	r2, r9, fp, r2
 8009bbc:	4452      	add	r2, sl
 8009bbe:	b289      	uxth	r1, r1
 8009bc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009bc4:	f84e 1b04 	str.w	r1, [lr], #4
 8009bc8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009bcc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009bd0:	f8be 1000 	ldrh.w	r1, [lr]
 8009bd4:	fb09 110a 	mla	r1, r9, sl, r1
 8009bd8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009bdc:	4567      	cmp	r7, ip
 8009bde:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009be2:	d8e5      	bhi.n	8009bb0 <__multiply+0x10c>
 8009be4:	9a01      	ldr	r2, [sp, #4]
 8009be6:	50a9      	str	r1, [r5, r2]
 8009be8:	3504      	adds	r5, #4
 8009bea:	e799      	b.n	8009b20 <__multiply+0x7c>
 8009bec:	3e01      	subs	r6, #1
 8009bee:	e79b      	b.n	8009b28 <__multiply+0x84>
 8009bf0:	0800ac78 	.word	0x0800ac78
 8009bf4:	0800ac89 	.word	0x0800ac89

08009bf8 <__pow5mult>:
 8009bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bfc:	4615      	mov	r5, r2
 8009bfe:	f012 0203 	ands.w	r2, r2, #3
 8009c02:	4606      	mov	r6, r0
 8009c04:	460f      	mov	r7, r1
 8009c06:	d007      	beq.n	8009c18 <__pow5mult+0x20>
 8009c08:	4c25      	ldr	r4, [pc, #148]	; (8009ca0 <__pow5mult+0xa8>)
 8009c0a:	3a01      	subs	r2, #1
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c12:	f7ff fe9d 	bl	8009950 <__multadd>
 8009c16:	4607      	mov	r7, r0
 8009c18:	10ad      	asrs	r5, r5, #2
 8009c1a:	d03d      	beq.n	8009c98 <__pow5mult+0xa0>
 8009c1c:	69f4      	ldr	r4, [r6, #28]
 8009c1e:	b97c      	cbnz	r4, 8009c40 <__pow5mult+0x48>
 8009c20:	2010      	movs	r0, #16
 8009c22:	f7ff fd7f 	bl	8009724 <malloc>
 8009c26:	4602      	mov	r2, r0
 8009c28:	61f0      	str	r0, [r6, #28]
 8009c2a:	b928      	cbnz	r0, 8009c38 <__pow5mult+0x40>
 8009c2c:	4b1d      	ldr	r3, [pc, #116]	; (8009ca4 <__pow5mult+0xac>)
 8009c2e:	481e      	ldr	r0, [pc, #120]	; (8009ca8 <__pow5mult+0xb0>)
 8009c30:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009c34:	f000 fbd6 	bl	800a3e4 <__assert_func>
 8009c38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c3c:	6004      	str	r4, [r0, #0]
 8009c3e:	60c4      	str	r4, [r0, #12]
 8009c40:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009c44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c48:	b94c      	cbnz	r4, 8009c5e <__pow5mult+0x66>
 8009c4a:	f240 2171 	movw	r1, #625	; 0x271
 8009c4e:	4630      	mov	r0, r6
 8009c50:	f7ff ff12 	bl	8009a78 <__i2b>
 8009c54:	2300      	movs	r3, #0
 8009c56:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c5a:	4604      	mov	r4, r0
 8009c5c:	6003      	str	r3, [r0, #0]
 8009c5e:	f04f 0900 	mov.w	r9, #0
 8009c62:	07eb      	lsls	r3, r5, #31
 8009c64:	d50a      	bpl.n	8009c7c <__pow5mult+0x84>
 8009c66:	4639      	mov	r1, r7
 8009c68:	4622      	mov	r2, r4
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	f7ff ff1a 	bl	8009aa4 <__multiply>
 8009c70:	4639      	mov	r1, r7
 8009c72:	4680      	mov	r8, r0
 8009c74:	4630      	mov	r0, r6
 8009c76:	f7ff fe49 	bl	800990c <_Bfree>
 8009c7a:	4647      	mov	r7, r8
 8009c7c:	106d      	asrs	r5, r5, #1
 8009c7e:	d00b      	beq.n	8009c98 <__pow5mult+0xa0>
 8009c80:	6820      	ldr	r0, [r4, #0]
 8009c82:	b938      	cbnz	r0, 8009c94 <__pow5mult+0x9c>
 8009c84:	4622      	mov	r2, r4
 8009c86:	4621      	mov	r1, r4
 8009c88:	4630      	mov	r0, r6
 8009c8a:	f7ff ff0b 	bl	8009aa4 <__multiply>
 8009c8e:	6020      	str	r0, [r4, #0]
 8009c90:	f8c0 9000 	str.w	r9, [r0]
 8009c94:	4604      	mov	r4, r0
 8009c96:	e7e4      	b.n	8009c62 <__pow5mult+0x6a>
 8009c98:	4638      	mov	r0, r7
 8009c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c9e:	bf00      	nop
 8009ca0:	0800add8 	.word	0x0800add8
 8009ca4:	0800ac09 	.word	0x0800ac09
 8009ca8:	0800ac89 	.word	0x0800ac89

08009cac <__lshift>:
 8009cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cb0:	460c      	mov	r4, r1
 8009cb2:	6849      	ldr	r1, [r1, #4]
 8009cb4:	6923      	ldr	r3, [r4, #16]
 8009cb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009cba:	68a3      	ldr	r3, [r4, #8]
 8009cbc:	4607      	mov	r7, r0
 8009cbe:	4691      	mov	r9, r2
 8009cc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009cc4:	f108 0601 	add.w	r6, r8, #1
 8009cc8:	42b3      	cmp	r3, r6
 8009cca:	db0b      	blt.n	8009ce4 <__lshift+0x38>
 8009ccc:	4638      	mov	r0, r7
 8009cce:	f7ff fddd 	bl	800988c <_Balloc>
 8009cd2:	4605      	mov	r5, r0
 8009cd4:	b948      	cbnz	r0, 8009cea <__lshift+0x3e>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	4b28      	ldr	r3, [pc, #160]	; (8009d7c <__lshift+0xd0>)
 8009cda:	4829      	ldr	r0, [pc, #164]	; (8009d80 <__lshift+0xd4>)
 8009cdc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009ce0:	f000 fb80 	bl	800a3e4 <__assert_func>
 8009ce4:	3101      	adds	r1, #1
 8009ce6:	005b      	lsls	r3, r3, #1
 8009ce8:	e7ee      	b.n	8009cc8 <__lshift+0x1c>
 8009cea:	2300      	movs	r3, #0
 8009cec:	f100 0114 	add.w	r1, r0, #20
 8009cf0:	f100 0210 	add.w	r2, r0, #16
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	4553      	cmp	r3, sl
 8009cf8:	db33      	blt.n	8009d62 <__lshift+0xb6>
 8009cfa:	6920      	ldr	r0, [r4, #16]
 8009cfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d00:	f104 0314 	add.w	r3, r4, #20
 8009d04:	f019 091f 	ands.w	r9, r9, #31
 8009d08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d10:	d02b      	beq.n	8009d6a <__lshift+0xbe>
 8009d12:	f1c9 0e20 	rsb	lr, r9, #32
 8009d16:	468a      	mov	sl, r1
 8009d18:	2200      	movs	r2, #0
 8009d1a:	6818      	ldr	r0, [r3, #0]
 8009d1c:	fa00 f009 	lsl.w	r0, r0, r9
 8009d20:	4310      	orrs	r0, r2
 8009d22:	f84a 0b04 	str.w	r0, [sl], #4
 8009d26:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d2a:	459c      	cmp	ip, r3
 8009d2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d30:	d8f3      	bhi.n	8009d1a <__lshift+0x6e>
 8009d32:	ebac 0304 	sub.w	r3, ip, r4
 8009d36:	3b15      	subs	r3, #21
 8009d38:	f023 0303 	bic.w	r3, r3, #3
 8009d3c:	3304      	adds	r3, #4
 8009d3e:	f104 0015 	add.w	r0, r4, #21
 8009d42:	4584      	cmp	ip, r0
 8009d44:	bf38      	it	cc
 8009d46:	2304      	movcc	r3, #4
 8009d48:	50ca      	str	r2, [r1, r3]
 8009d4a:	b10a      	cbz	r2, 8009d50 <__lshift+0xa4>
 8009d4c:	f108 0602 	add.w	r6, r8, #2
 8009d50:	3e01      	subs	r6, #1
 8009d52:	4638      	mov	r0, r7
 8009d54:	612e      	str	r6, [r5, #16]
 8009d56:	4621      	mov	r1, r4
 8009d58:	f7ff fdd8 	bl	800990c <_Bfree>
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d62:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d66:	3301      	adds	r3, #1
 8009d68:	e7c5      	b.n	8009cf6 <__lshift+0x4a>
 8009d6a:	3904      	subs	r1, #4
 8009d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d70:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d74:	459c      	cmp	ip, r3
 8009d76:	d8f9      	bhi.n	8009d6c <__lshift+0xc0>
 8009d78:	e7ea      	b.n	8009d50 <__lshift+0xa4>
 8009d7a:	bf00      	nop
 8009d7c:	0800ac78 	.word	0x0800ac78
 8009d80:	0800ac89 	.word	0x0800ac89

08009d84 <__mcmp>:
 8009d84:	b530      	push	{r4, r5, lr}
 8009d86:	6902      	ldr	r2, [r0, #16]
 8009d88:	690c      	ldr	r4, [r1, #16]
 8009d8a:	1b12      	subs	r2, r2, r4
 8009d8c:	d10e      	bne.n	8009dac <__mcmp+0x28>
 8009d8e:	f100 0314 	add.w	r3, r0, #20
 8009d92:	3114      	adds	r1, #20
 8009d94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009d98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009d9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009da0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009da4:	42a5      	cmp	r5, r4
 8009da6:	d003      	beq.n	8009db0 <__mcmp+0x2c>
 8009da8:	d305      	bcc.n	8009db6 <__mcmp+0x32>
 8009daa:	2201      	movs	r2, #1
 8009dac:	4610      	mov	r0, r2
 8009dae:	bd30      	pop	{r4, r5, pc}
 8009db0:	4283      	cmp	r3, r0
 8009db2:	d3f3      	bcc.n	8009d9c <__mcmp+0x18>
 8009db4:	e7fa      	b.n	8009dac <__mcmp+0x28>
 8009db6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dba:	e7f7      	b.n	8009dac <__mcmp+0x28>

08009dbc <__mdiff>:
 8009dbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc0:	460c      	mov	r4, r1
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	4611      	mov	r1, r2
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	4690      	mov	r8, r2
 8009dca:	f7ff ffdb 	bl	8009d84 <__mcmp>
 8009dce:	1e05      	subs	r5, r0, #0
 8009dd0:	d110      	bne.n	8009df4 <__mdiff+0x38>
 8009dd2:	4629      	mov	r1, r5
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	f7ff fd59 	bl	800988c <_Balloc>
 8009dda:	b930      	cbnz	r0, 8009dea <__mdiff+0x2e>
 8009ddc:	4b3a      	ldr	r3, [pc, #232]	; (8009ec8 <__mdiff+0x10c>)
 8009dde:	4602      	mov	r2, r0
 8009de0:	f240 2137 	movw	r1, #567	; 0x237
 8009de4:	4839      	ldr	r0, [pc, #228]	; (8009ecc <__mdiff+0x110>)
 8009de6:	f000 fafd 	bl	800a3e4 <__assert_func>
 8009dea:	2301      	movs	r3, #1
 8009dec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009df0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df4:	bfa4      	itt	ge
 8009df6:	4643      	movge	r3, r8
 8009df8:	46a0      	movge	r8, r4
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e00:	bfa6      	itte	ge
 8009e02:	461c      	movge	r4, r3
 8009e04:	2500      	movge	r5, #0
 8009e06:	2501      	movlt	r5, #1
 8009e08:	f7ff fd40 	bl	800988c <_Balloc>
 8009e0c:	b920      	cbnz	r0, 8009e18 <__mdiff+0x5c>
 8009e0e:	4b2e      	ldr	r3, [pc, #184]	; (8009ec8 <__mdiff+0x10c>)
 8009e10:	4602      	mov	r2, r0
 8009e12:	f240 2145 	movw	r1, #581	; 0x245
 8009e16:	e7e5      	b.n	8009de4 <__mdiff+0x28>
 8009e18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009e1c:	6926      	ldr	r6, [r4, #16]
 8009e1e:	60c5      	str	r5, [r0, #12]
 8009e20:	f104 0914 	add.w	r9, r4, #20
 8009e24:	f108 0514 	add.w	r5, r8, #20
 8009e28:	f100 0e14 	add.w	lr, r0, #20
 8009e2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009e30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009e34:	f108 0210 	add.w	r2, r8, #16
 8009e38:	46f2      	mov	sl, lr
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009e44:	fa11 f88b 	uxtah	r8, r1, fp
 8009e48:	b299      	uxth	r1, r3
 8009e4a:	0c1b      	lsrs	r3, r3, #16
 8009e4c:	eba8 0801 	sub.w	r8, r8, r1
 8009e50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e54:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009e58:	fa1f f888 	uxth.w	r8, r8
 8009e5c:	1419      	asrs	r1, r3, #16
 8009e5e:	454e      	cmp	r6, r9
 8009e60:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009e64:	f84a 3b04 	str.w	r3, [sl], #4
 8009e68:	d8e8      	bhi.n	8009e3c <__mdiff+0x80>
 8009e6a:	1b33      	subs	r3, r6, r4
 8009e6c:	3b15      	subs	r3, #21
 8009e6e:	f023 0303 	bic.w	r3, r3, #3
 8009e72:	3304      	adds	r3, #4
 8009e74:	3415      	adds	r4, #21
 8009e76:	42a6      	cmp	r6, r4
 8009e78:	bf38      	it	cc
 8009e7a:	2304      	movcc	r3, #4
 8009e7c:	441d      	add	r5, r3
 8009e7e:	4473      	add	r3, lr
 8009e80:	469e      	mov	lr, r3
 8009e82:	462e      	mov	r6, r5
 8009e84:	4566      	cmp	r6, ip
 8009e86:	d30e      	bcc.n	8009ea6 <__mdiff+0xea>
 8009e88:	f10c 0203 	add.w	r2, ip, #3
 8009e8c:	1b52      	subs	r2, r2, r5
 8009e8e:	f022 0203 	bic.w	r2, r2, #3
 8009e92:	3d03      	subs	r5, #3
 8009e94:	45ac      	cmp	ip, r5
 8009e96:	bf38      	it	cc
 8009e98:	2200      	movcc	r2, #0
 8009e9a:	4413      	add	r3, r2
 8009e9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009ea0:	b17a      	cbz	r2, 8009ec2 <__mdiff+0x106>
 8009ea2:	6107      	str	r7, [r0, #16]
 8009ea4:	e7a4      	b.n	8009df0 <__mdiff+0x34>
 8009ea6:	f856 8b04 	ldr.w	r8, [r6], #4
 8009eaa:	fa11 f288 	uxtah	r2, r1, r8
 8009eae:	1414      	asrs	r4, r2, #16
 8009eb0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009eb4:	b292      	uxth	r2, r2
 8009eb6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009eba:	f84e 2b04 	str.w	r2, [lr], #4
 8009ebe:	1421      	asrs	r1, r4, #16
 8009ec0:	e7e0      	b.n	8009e84 <__mdiff+0xc8>
 8009ec2:	3f01      	subs	r7, #1
 8009ec4:	e7ea      	b.n	8009e9c <__mdiff+0xe0>
 8009ec6:	bf00      	nop
 8009ec8:	0800ac78 	.word	0x0800ac78
 8009ecc:	0800ac89 	.word	0x0800ac89

08009ed0 <__d2b>:
 8009ed0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ed4:	460f      	mov	r7, r1
 8009ed6:	2101      	movs	r1, #1
 8009ed8:	ec59 8b10 	vmov	r8, r9, d0
 8009edc:	4616      	mov	r6, r2
 8009ede:	f7ff fcd5 	bl	800988c <_Balloc>
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	b930      	cbnz	r0, 8009ef4 <__d2b+0x24>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	4b24      	ldr	r3, [pc, #144]	; (8009f7c <__d2b+0xac>)
 8009eea:	4825      	ldr	r0, [pc, #148]	; (8009f80 <__d2b+0xb0>)
 8009eec:	f240 310f 	movw	r1, #783	; 0x30f
 8009ef0:	f000 fa78 	bl	800a3e4 <__assert_func>
 8009ef4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009ef8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009efc:	bb2d      	cbnz	r5, 8009f4a <__d2b+0x7a>
 8009efe:	9301      	str	r3, [sp, #4]
 8009f00:	f1b8 0300 	subs.w	r3, r8, #0
 8009f04:	d026      	beq.n	8009f54 <__d2b+0x84>
 8009f06:	4668      	mov	r0, sp
 8009f08:	9300      	str	r3, [sp, #0]
 8009f0a:	f7ff fd87 	bl	8009a1c <__lo0bits>
 8009f0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009f12:	b1e8      	cbz	r0, 8009f50 <__d2b+0x80>
 8009f14:	f1c0 0320 	rsb	r3, r0, #32
 8009f18:	fa02 f303 	lsl.w	r3, r2, r3
 8009f1c:	430b      	orrs	r3, r1
 8009f1e:	40c2      	lsrs	r2, r0
 8009f20:	6163      	str	r3, [r4, #20]
 8009f22:	9201      	str	r2, [sp, #4]
 8009f24:	9b01      	ldr	r3, [sp, #4]
 8009f26:	61a3      	str	r3, [r4, #24]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	bf14      	ite	ne
 8009f2c:	2202      	movne	r2, #2
 8009f2e:	2201      	moveq	r2, #1
 8009f30:	6122      	str	r2, [r4, #16]
 8009f32:	b1bd      	cbz	r5, 8009f64 <__d2b+0x94>
 8009f34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f38:	4405      	add	r5, r0
 8009f3a:	603d      	str	r5, [r7, #0]
 8009f3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f40:	6030      	str	r0, [r6, #0]
 8009f42:	4620      	mov	r0, r4
 8009f44:	b003      	add	sp, #12
 8009f46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f4e:	e7d6      	b.n	8009efe <__d2b+0x2e>
 8009f50:	6161      	str	r1, [r4, #20]
 8009f52:	e7e7      	b.n	8009f24 <__d2b+0x54>
 8009f54:	a801      	add	r0, sp, #4
 8009f56:	f7ff fd61 	bl	8009a1c <__lo0bits>
 8009f5a:	9b01      	ldr	r3, [sp, #4]
 8009f5c:	6163      	str	r3, [r4, #20]
 8009f5e:	3020      	adds	r0, #32
 8009f60:	2201      	movs	r2, #1
 8009f62:	e7e5      	b.n	8009f30 <__d2b+0x60>
 8009f64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f6c:	6038      	str	r0, [r7, #0]
 8009f6e:	6918      	ldr	r0, [r3, #16]
 8009f70:	f7ff fd34 	bl	80099dc <__hi0bits>
 8009f74:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f78:	e7e2      	b.n	8009f40 <__d2b+0x70>
 8009f7a:	bf00      	nop
 8009f7c:	0800ac78 	.word	0x0800ac78
 8009f80:	0800ac89 	.word	0x0800ac89

08009f84 <__ssputs_r>:
 8009f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f88:	688e      	ldr	r6, [r1, #8]
 8009f8a:	461f      	mov	r7, r3
 8009f8c:	42be      	cmp	r6, r7
 8009f8e:	680b      	ldr	r3, [r1, #0]
 8009f90:	4682      	mov	sl, r0
 8009f92:	460c      	mov	r4, r1
 8009f94:	4690      	mov	r8, r2
 8009f96:	d82c      	bhi.n	8009ff2 <__ssputs_r+0x6e>
 8009f98:	898a      	ldrh	r2, [r1, #12]
 8009f9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f9e:	d026      	beq.n	8009fee <__ssputs_r+0x6a>
 8009fa0:	6965      	ldr	r5, [r4, #20]
 8009fa2:	6909      	ldr	r1, [r1, #16]
 8009fa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fa8:	eba3 0901 	sub.w	r9, r3, r1
 8009fac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fb0:	1c7b      	adds	r3, r7, #1
 8009fb2:	444b      	add	r3, r9
 8009fb4:	106d      	asrs	r5, r5, #1
 8009fb6:	429d      	cmp	r5, r3
 8009fb8:	bf38      	it	cc
 8009fba:	461d      	movcc	r5, r3
 8009fbc:	0553      	lsls	r3, r2, #21
 8009fbe:	d527      	bpl.n	800a010 <__ssputs_r+0x8c>
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	f7ff fbd7 	bl	8009774 <_malloc_r>
 8009fc6:	4606      	mov	r6, r0
 8009fc8:	b360      	cbz	r0, 800a024 <__ssputs_r+0xa0>
 8009fca:	6921      	ldr	r1, [r4, #16]
 8009fcc:	464a      	mov	r2, r9
 8009fce:	f7fe fcd2 	bl	8008976 <memcpy>
 8009fd2:	89a3      	ldrh	r3, [r4, #12]
 8009fd4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fdc:	81a3      	strh	r3, [r4, #12]
 8009fde:	6126      	str	r6, [r4, #16]
 8009fe0:	6165      	str	r5, [r4, #20]
 8009fe2:	444e      	add	r6, r9
 8009fe4:	eba5 0509 	sub.w	r5, r5, r9
 8009fe8:	6026      	str	r6, [r4, #0]
 8009fea:	60a5      	str	r5, [r4, #8]
 8009fec:	463e      	mov	r6, r7
 8009fee:	42be      	cmp	r6, r7
 8009ff0:	d900      	bls.n	8009ff4 <__ssputs_r+0x70>
 8009ff2:	463e      	mov	r6, r7
 8009ff4:	6820      	ldr	r0, [r4, #0]
 8009ff6:	4632      	mov	r2, r6
 8009ff8:	4641      	mov	r1, r8
 8009ffa:	f000 f9c9 	bl	800a390 <memmove>
 8009ffe:	68a3      	ldr	r3, [r4, #8]
 800a000:	1b9b      	subs	r3, r3, r6
 800a002:	60a3      	str	r3, [r4, #8]
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	4433      	add	r3, r6
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	2000      	movs	r0, #0
 800a00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a010:	462a      	mov	r2, r5
 800a012:	f000 fa2d 	bl	800a470 <_realloc_r>
 800a016:	4606      	mov	r6, r0
 800a018:	2800      	cmp	r0, #0
 800a01a:	d1e0      	bne.n	8009fde <__ssputs_r+0x5a>
 800a01c:	6921      	ldr	r1, [r4, #16]
 800a01e:	4650      	mov	r0, sl
 800a020:	f7ff fb34 	bl	800968c <_free_r>
 800a024:	230c      	movs	r3, #12
 800a026:	f8ca 3000 	str.w	r3, [sl]
 800a02a:	89a3      	ldrh	r3, [r4, #12]
 800a02c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a030:	81a3      	strh	r3, [r4, #12]
 800a032:	f04f 30ff 	mov.w	r0, #4294967295
 800a036:	e7e9      	b.n	800a00c <__ssputs_r+0x88>

0800a038 <_svfiprintf_r>:
 800a038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03c:	4698      	mov	r8, r3
 800a03e:	898b      	ldrh	r3, [r1, #12]
 800a040:	061b      	lsls	r3, r3, #24
 800a042:	b09d      	sub	sp, #116	; 0x74
 800a044:	4607      	mov	r7, r0
 800a046:	460d      	mov	r5, r1
 800a048:	4614      	mov	r4, r2
 800a04a:	d50e      	bpl.n	800a06a <_svfiprintf_r+0x32>
 800a04c:	690b      	ldr	r3, [r1, #16]
 800a04e:	b963      	cbnz	r3, 800a06a <_svfiprintf_r+0x32>
 800a050:	2140      	movs	r1, #64	; 0x40
 800a052:	f7ff fb8f 	bl	8009774 <_malloc_r>
 800a056:	6028      	str	r0, [r5, #0]
 800a058:	6128      	str	r0, [r5, #16]
 800a05a:	b920      	cbnz	r0, 800a066 <_svfiprintf_r+0x2e>
 800a05c:	230c      	movs	r3, #12
 800a05e:	603b      	str	r3, [r7, #0]
 800a060:	f04f 30ff 	mov.w	r0, #4294967295
 800a064:	e0d0      	b.n	800a208 <_svfiprintf_r+0x1d0>
 800a066:	2340      	movs	r3, #64	; 0x40
 800a068:	616b      	str	r3, [r5, #20]
 800a06a:	2300      	movs	r3, #0
 800a06c:	9309      	str	r3, [sp, #36]	; 0x24
 800a06e:	2320      	movs	r3, #32
 800a070:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a074:	f8cd 800c 	str.w	r8, [sp, #12]
 800a078:	2330      	movs	r3, #48	; 0x30
 800a07a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a220 <_svfiprintf_r+0x1e8>
 800a07e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a082:	f04f 0901 	mov.w	r9, #1
 800a086:	4623      	mov	r3, r4
 800a088:	469a      	mov	sl, r3
 800a08a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a08e:	b10a      	cbz	r2, 800a094 <_svfiprintf_r+0x5c>
 800a090:	2a25      	cmp	r2, #37	; 0x25
 800a092:	d1f9      	bne.n	800a088 <_svfiprintf_r+0x50>
 800a094:	ebba 0b04 	subs.w	fp, sl, r4
 800a098:	d00b      	beq.n	800a0b2 <_svfiprintf_r+0x7a>
 800a09a:	465b      	mov	r3, fp
 800a09c:	4622      	mov	r2, r4
 800a09e:	4629      	mov	r1, r5
 800a0a0:	4638      	mov	r0, r7
 800a0a2:	f7ff ff6f 	bl	8009f84 <__ssputs_r>
 800a0a6:	3001      	adds	r0, #1
 800a0a8:	f000 80a9 	beq.w	800a1fe <_svfiprintf_r+0x1c6>
 800a0ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0ae:	445a      	add	r2, fp
 800a0b0:	9209      	str	r2, [sp, #36]	; 0x24
 800a0b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	f000 80a1 	beq.w	800a1fe <_svfiprintf_r+0x1c6>
 800a0bc:	2300      	movs	r3, #0
 800a0be:	f04f 32ff 	mov.w	r2, #4294967295
 800a0c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0c6:	f10a 0a01 	add.w	sl, sl, #1
 800a0ca:	9304      	str	r3, [sp, #16]
 800a0cc:	9307      	str	r3, [sp, #28]
 800a0ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0d2:	931a      	str	r3, [sp, #104]	; 0x68
 800a0d4:	4654      	mov	r4, sl
 800a0d6:	2205      	movs	r2, #5
 800a0d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0dc:	4850      	ldr	r0, [pc, #320]	; (800a220 <_svfiprintf_r+0x1e8>)
 800a0de:	f7f6 f89f 	bl	8000220 <memchr>
 800a0e2:	9a04      	ldr	r2, [sp, #16]
 800a0e4:	b9d8      	cbnz	r0, 800a11e <_svfiprintf_r+0xe6>
 800a0e6:	06d0      	lsls	r0, r2, #27
 800a0e8:	bf44      	itt	mi
 800a0ea:	2320      	movmi	r3, #32
 800a0ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0f0:	0711      	lsls	r1, r2, #28
 800a0f2:	bf44      	itt	mi
 800a0f4:	232b      	movmi	r3, #43	; 0x2b
 800a0f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a0fe:	2b2a      	cmp	r3, #42	; 0x2a
 800a100:	d015      	beq.n	800a12e <_svfiprintf_r+0xf6>
 800a102:	9a07      	ldr	r2, [sp, #28]
 800a104:	4654      	mov	r4, sl
 800a106:	2000      	movs	r0, #0
 800a108:	f04f 0c0a 	mov.w	ip, #10
 800a10c:	4621      	mov	r1, r4
 800a10e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a112:	3b30      	subs	r3, #48	; 0x30
 800a114:	2b09      	cmp	r3, #9
 800a116:	d94d      	bls.n	800a1b4 <_svfiprintf_r+0x17c>
 800a118:	b1b0      	cbz	r0, 800a148 <_svfiprintf_r+0x110>
 800a11a:	9207      	str	r2, [sp, #28]
 800a11c:	e014      	b.n	800a148 <_svfiprintf_r+0x110>
 800a11e:	eba0 0308 	sub.w	r3, r0, r8
 800a122:	fa09 f303 	lsl.w	r3, r9, r3
 800a126:	4313      	orrs	r3, r2
 800a128:	9304      	str	r3, [sp, #16]
 800a12a:	46a2      	mov	sl, r4
 800a12c:	e7d2      	b.n	800a0d4 <_svfiprintf_r+0x9c>
 800a12e:	9b03      	ldr	r3, [sp, #12]
 800a130:	1d19      	adds	r1, r3, #4
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	9103      	str	r1, [sp, #12]
 800a136:	2b00      	cmp	r3, #0
 800a138:	bfbb      	ittet	lt
 800a13a:	425b      	neglt	r3, r3
 800a13c:	f042 0202 	orrlt.w	r2, r2, #2
 800a140:	9307      	strge	r3, [sp, #28]
 800a142:	9307      	strlt	r3, [sp, #28]
 800a144:	bfb8      	it	lt
 800a146:	9204      	strlt	r2, [sp, #16]
 800a148:	7823      	ldrb	r3, [r4, #0]
 800a14a:	2b2e      	cmp	r3, #46	; 0x2e
 800a14c:	d10c      	bne.n	800a168 <_svfiprintf_r+0x130>
 800a14e:	7863      	ldrb	r3, [r4, #1]
 800a150:	2b2a      	cmp	r3, #42	; 0x2a
 800a152:	d134      	bne.n	800a1be <_svfiprintf_r+0x186>
 800a154:	9b03      	ldr	r3, [sp, #12]
 800a156:	1d1a      	adds	r2, r3, #4
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	9203      	str	r2, [sp, #12]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	bfb8      	it	lt
 800a160:	f04f 33ff 	movlt.w	r3, #4294967295
 800a164:	3402      	adds	r4, #2
 800a166:	9305      	str	r3, [sp, #20]
 800a168:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a230 <_svfiprintf_r+0x1f8>
 800a16c:	7821      	ldrb	r1, [r4, #0]
 800a16e:	2203      	movs	r2, #3
 800a170:	4650      	mov	r0, sl
 800a172:	f7f6 f855 	bl	8000220 <memchr>
 800a176:	b138      	cbz	r0, 800a188 <_svfiprintf_r+0x150>
 800a178:	9b04      	ldr	r3, [sp, #16]
 800a17a:	eba0 000a 	sub.w	r0, r0, sl
 800a17e:	2240      	movs	r2, #64	; 0x40
 800a180:	4082      	lsls	r2, r0
 800a182:	4313      	orrs	r3, r2
 800a184:	3401      	adds	r4, #1
 800a186:	9304      	str	r3, [sp, #16]
 800a188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a18c:	4825      	ldr	r0, [pc, #148]	; (800a224 <_svfiprintf_r+0x1ec>)
 800a18e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a192:	2206      	movs	r2, #6
 800a194:	f7f6 f844 	bl	8000220 <memchr>
 800a198:	2800      	cmp	r0, #0
 800a19a:	d038      	beq.n	800a20e <_svfiprintf_r+0x1d6>
 800a19c:	4b22      	ldr	r3, [pc, #136]	; (800a228 <_svfiprintf_r+0x1f0>)
 800a19e:	bb1b      	cbnz	r3, 800a1e8 <_svfiprintf_r+0x1b0>
 800a1a0:	9b03      	ldr	r3, [sp, #12]
 800a1a2:	3307      	adds	r3, #7
 800a1a4:	f023 0307 	bic.w	r3, r3, #7
 800a1a8:	3308      	adds	r3, #8
 800a1aa:	9303      	str	r3, [sp, #12]
 800a1ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ae:	4433      	add	r3, r6
 800a1b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1b2:	e768      	b.n	800a086 <_svfiprintf_r+0x4e>
 800a1b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1b8:	460c      	mov	r4, r1
 800a1ba:	2001      	movs	r0, #1
 800a1bc:	e7a6      	b.n	800a10c <_svfiprintf_r+0xd4>
 800a1be:	2300      	movs	r3, #0
 800a1c0:	3401      	adds	r4, #1
 800a1c2:	9305      	str	r3, [sp, #20]
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	f04f 0c0a 	mov.w	ip, #10
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1d0:	3a30      	subs	r2, #48	; 0x30
 800a1d2:	2a09      	cmp	r2, #9
 800a1d4:	d903      	bls.n	800a1de <_svfiprintf_r+0x1a6>
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d0c6      	beq.n	800a168 <_svfiprintf_r+0x130>
 800a1da:	9105      	str	r1, [sp, #20]
 800a1dc:	e7c4      	b.n	800a168 <_svfiprintf_r+0x130>
 800a1de:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	e7f0      	b.n	800a1ca <_svfiprintf_r+0x192>
 800a1e8:	ab03      	add	r3, sp, #12
 800a1ea:	9300      	str	r3, [sp, #0]
 800a1ec:	462a      	mov	r2, r5
 800a1ee:	4b0f      	ldr	r3, [pc, #60]	; (800a22c <_svfiprintf_r+0x1f4>)
 800a1f0:	a904      	add	r1, sp, #16
 800a1f2:	4638      	mov	r0, r7
 800a1f4:	f7fd fe54 	bl	8007ea0 <_printf_float>
 800a1f8:	1c42      	adds	r2, r0, #1
 800a1fa:	4606      	mov	r6, r0
 800a1fc:	d1d6      	bne.n	800a1ac <_svfiprintf_r+0x174>
 800a1fe:	89ab      	ldrh	r3, [r5, #12]
 800a200:	065b      	lsls	r3, r3, #25
 800a202:	f53f af2d 	bmi.w	800a060 <_svfiprintf_r+0x28>
 800a206:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a208:	b01d      	add	sp, #116	; 0x74
 800a20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a20e:	ab03      	add	r3, sp, #12
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	462a      	mov	r2, r5
 800a214:	4b05      	ldr	r3, [pc, #20]	; (800a22c <_svfiprintf_r+0x1f4>)
 800a216:	a904      	add	r1, sp, #16
 800a218:	4638      	mov	r0, r7
 800a21a:	f7fe f8e5 	bl	80083e8 <_printf_i>
 800a21e:	e7eb      	b.n	800a1f8 <_svfiprintf_r+0x1c0>
 800a220:	0800ade4 	.word	0x0800ade4
 800a224:	0800adee 	.word	0x0800adee
 800a228:	08007ea1 	.word	0x08007ea1
 800a22c:	08009f85 	.word	0x08009f85
 800a230:	0800adea 	.word	0x0800adea

0800a234 <__sflush_r>:
 800a234:	898a      	ldrh	r2, [r1, #12]
 800a236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a23a:	4605      	mov	r5, r0
 800a23c:	0710      	lsls	r0, r2, #28
 800a23e:	460c      	mov	r4, r1
 800a240:	d458      	bmi.n	800a2f4 <__sflush_r+0xc0>
 800a242:	684b      	ldr	r3, [r1, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	dc05      	bgt.n	800a254 <__sflush_r+0x20>
 800a248:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	dc02      	bgt.n	800a254 <__sflush_r+0x20>
 800a24e:	2000      	movs	r0, #0
 800a250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a254:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a256:	2e00      	cmp	r6, #0
 800a258:	d0f9      	beq.n	800a24e <__sflush_r+0x1a>
 800a25a:	2300      	movs	r3, #0
 800a25c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a260:	682f      	ldr	r7, [r5, #0]
 800a262:	6a21      	ldr	r1, [r4, #32]
 800a264:	602b      	str	r3, [r5, #0]
 800a266:	d032      	beq.n	800a2ce <__sflush_r+0x9a>
 800a268:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a26a:	89a3      	ldrh	r3, [r4, #12]
 800a26c:	075a      	lsls	r2, r3, #29
 800a26e:	d505      	bpl.n	800a27c <__sflush_r+0x48>
 800a270:	6863      	ldr	r3, [r4, #4]
 800a272:	1ac0      	subs	r0, r0, r3
 800a274:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a276:	b10b      	cbz	r3, 800a27c <__sflush_r+0x48>
 800a278:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a27a:	1ac0      	subs	r0, r0, r3
 800a27c:	2300      	movs	r3, #0
 800a27e:	4602      	mov	r2, r0
 800a280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a282:	6a21      	ldr	r1, [r4, #32]
 800a284:	4628      	mov	r0, r5
 800a286:	47b0      	blx	r6
 800a288:	1c43      	adds	r3, r0, #1
 800a28a:	89a3      	ldrh	r3, [r4, #12]
 800a28c:	d106      	bne.n	800a29c <__sflush_r+0x68>
 800a28e:	6829      	ldr	r1, [r5, #0]
 800a290:	291d      	cmp	r1, #29
 800a292:	d82b      	bhi.n	800a2ec <__sflush_r+0xb8>
 800a294:	4a29      	ldr	r2, [pc, #164]	; (800a33c <__sflush_r+0x108>)
 800a296:	410a      	asrs	r2, r1
 800a298:	07d6      	lsls	r6, r2, #31
 800a29a:	d427      	bmi.n	800a2ec <__sflush_r+0xb8>
 800a29c:	2200      	movs	r2, #0
 800a29e:	6062      	str	r2, [r4, #4]
 800a2a0:	04d9      	lsls	r1, r3, #19
 800a2a2:	6922      	ldr	r2, [r4, #16]
 800a2a4:	6022      	str	r2, [r4, #0]
 800a2a6:	d504      	bpl.n	800a2b2 <__sflush_r+0x7e>
 800a2a8:	1c42      	adds	r2, r0, #1
 800a2aa:	d101      	bne.n	800a2b0 <__sflush_r+0x7c>
 800a2ac:	682b      	ldr	r3, [r5, #0]
 800a2ae:	b903      	cbnz	r3, 800a2b2 <__sflush_r+0x7e>
 800a2b0:	6560      	str	r0, [r4, #84]	; 0x54
 800a2b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2b4:	602f      	str	r7, [r5, #0]
 800a2b6:	2900      	cmp	r1, #0
 800a2b8:	d0c9      	beq.n	800a24e <__sflush_r+0x1a>
 800a2ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2be:	4299      	cmp	r1, r3
 800a2c0:	d002      	beq.n	800a2c8 <__sflush_r+0x94>
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	f7ff f9e2 	bl	800968c <_free_r>
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	6360      	str	r0, [r4, #52]	; 0x34
 800a2cc:	e7c0      	b.n	800a250 <__sflush_r+0x1c>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	47b0      	blx	r6
 800a2d4:	1c41      	adds	r1, r0, #1
 800a2d6:	d1c8      	bne.n	800a26a <__sflush_r+0x36>
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d0c5      	beq.n	800a26a <__sflush_r+0x36>
 800a2de:	2b1d      	cmp	r3, #29
 800a2e0:	d001      	beq.n	800a2e6 <__sflush_r+0xb2>
 800a2e2:	2b16      	cmp	r3, #22
 800a2e4:	d101      	bne.n	800a2ea <__sflush_r+0xb6>
 800a2e6:	602f      	str	r7, [r5, #0]
 800a2e8:	e7b1      	b.n	800a24e <__sflush_r+0x1a>
 800a2ea:	89a3      	ldrh	r3, [r4, #12]
 800a2ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2f0:	81a3      	strh	r3, [r4, #12]
 800a2f2:	e7ad      	b.n	800a250 <__sflush_r+0x1c>
 800a2f4:	690f      	ldr	r7, [r1, #16]
 800a2f6:	2f00      	cmp	r7, #0
 800a2f8:	d0a9      	beq.n	800a24e <__sflush_r+0x1a>
 800a2fa:	0793      	lsls	r3, r2, #30
 800a2fc:	680e      	ldr	r6, [r1, #0]
 800a2fe:	bf08      	it	eq
 800a300:	694b      	ldreq	r3, [r1, #20]
 800a302:	600f      	str	r7, [r1, #0]
 800a304:	bf18      	it	ne
 800a306:	2300      	movne	r3, #0
 800a308:	eba6 0807 	sub.w	r8, r6, r7
 800a30c:	608b      	str	r3, [r1, #8]
 800a30e:	f1b8 0f00 	cmp.w	r8, #0
 800a312:	dd9c      	ble.n	800a24e <__sflush_r+0x1a>
 800a314:	6a21      	ldr	r1, [r4, #32]
 800a316:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a318:	4643      	mov	r3, r8
 800a31a:	463a      	mov	r2, r7
 800a31c:	4628      	mov	r0, r5
 800a31e:	47b0      	blx	r6
 800a320:	2800      	cmp	r0, #0
 800a322:	dc06      	bgt.n	800a332 <__sflush_r+0xfe>
 800a324:	89a3      	ldrh	r3, [r4, #12]
 800a326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a32a:	81a3      	strh	r3, [r4, #12]
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295
 800a330:	e78e      	b.n	800a250 <__sflush_r+0x1c>
 800a332:	4407      	add	r7, r0
 800a334:	eba8 0800 	sub.w	r8, r8, r0
 800a338:	e7e9      	b.n	800a30e <__sflush_r+0xda>
 800a33a:	bf00      	nop
 800a33c:	dfbffffe 	.word	0xdfbffffe

0800a340 <_fflush_r>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	690b      	ldr	r3, [r1, #16]
 800a344:	4605      	mov	r5, r0
 800a346:	460c      	mov	r4, r1
 800a348:	b913      	cbnz	r3, 800a350 <_fflush_r+0x10>
 800a34a:	2500      	movs	r5, #0
 800a34c:	4628      	mov	r0, r5
 800a34e:	bd38      	pop	{r3, r4, r5, pc}
 800a350:	b118      	cbz	r0, 800a35a <_fflush_r+0x1a>
 800a352:	6a03      	ldr	r3, [r0, #32]
 800a354:	b90b      	cbnz	r3, 800a35a <_fflush_r+0x1a>
 800a356:	f7fe f9f5 	bl	8008744 <__sinit>
 800a35a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d0f3      	beq.n	800a34a <_fflush_r+0xa>
 800a362:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a364:	07d0      	lsls	r0, r2, #31
 800a366:	d404      	bmi.n	800a372 <_fflush_r+0x32>
 800a368:	0599      	lsls	r1, r3, #22
 800a36a:	d402      	bmi.n	800a372 <_fflush_r+0x32>
 800a36c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a36e:	f7fe fb00 	bl	8008972 <__retarget_lock_acquire_recursive>
 800a372:	4628      	mov	r0, r5
 800a374:	4621      	mov	r1, r4
 800a376:	f7ff ff5d 	bl	800a234 <__sflush_r>
 800a37a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a37c:	07da      	lsls	r2, r3, #31
 800a37e:	4605      	mov	r5, r0
 800a380:	d4e4      	bmi.n	800a34c <_fflush_r+0xc>
 800a382:	89a3      	ldrh	r3, [r4, #12]
 800a384:	059b      	lsls	r3, r3, #22
 800a386:	d4e1      	bmi.n	800a34c <_fflush_r+0xc>
 800a388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a38a:	f7fe faf3 	bl	8008974 <__retarget_lock_release_recursive>
 800a38e:	e7dd      	b.n	800a34c <_fflush_r+0xc>

0800a390 <memmove>:
 800a390:	4288      	cmp	r0, r1
 800a392:	b510      	push	{r4, lr}
 800a394:	eb01 0402 	add.w	r4, r1, r2
 800a398:	d902      	bls.n	800a3a0 <memmove+0x10>
 800a39a:	4284      	cmp	r4, r0
 800a39c:	4623      	mov	r3, r4
 800a39e:	d807      	bhi.n	800a3b0 <memmove+0x20>
 800a3a0:	1e43      	subs	r3, r0, #1
 800a3a2:	42a1      	cmp	r1, r4
 800a3a4:	d008      	beq.n	800a3b8 <memmove+0x28>
 800a3a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3ae:	e7f8      	b.n	800a3a2 <memmove+0x12>
 800a3b0:	4402      	add	r2, r0
 800a3b2:	4601      	mov	r1, r0
 800a3b4:	428a      	cmp	r2, r1
 800a3b6:	d100      	bne.n	800a3ba <memmove+0x2a>
 800a3b8:	bd10      	pop	{r4, pc}
 800a3ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3c2:	e7f7      	b.n	800a3b4 <memmove+0x24>

0800a3c4 <_sbrk_r>:
 800a3c4:	b538      	push	{r3, r4, r5, lr}
 800a3c6:	4d06      	ldr	r5, [pc, #24]	; (800a3e0 <_sbrk_r+0x1c>)
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	4608      	mov	r0, r1
 800a3ce:	602b      	str	r3, [r5, #0]
 800a3d0:	f7f8 f8f0 	bl	80025b4 <_sbrk>
 800a3d4:	1c43      	adds	r3, r0, #1
 800a3d6:	d102      	bne.n	800a3de <_sbrk_r+0x1a>
 800a3d8:	682b      	ldr	r3, [r5, #0]
 800a3da:	b103      	cbz	r3, 800a3de <_sbrk_r+0x1a>
 800a3dc:	6023      	str	r3, [r4, #0]
 800a3de:	bd38      	pop	{r3, r4, r5, pc}
 800a3e0:	20000570 	.word	0x20000570

0800a3e4 <__assert_func>:
 800a3e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3e6:	4614      	mov	r4, r2
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	4b09      	ldr	r3, [pc, #36]	; (800a410 <__assert_func+0x2c>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4605      	mov	r5, r0
 800a3f0:	68d8      	ldr	r0, [r3, #12]
 800a3f2:	b14c      	cbz	r4, 800a408 <__assert_func+0x24>
 800a3f4:	4b07      	ldr	r3, [pc, #28]	; (800a414 <__assert_func+0x30>)
 800a3f6:	9100      	str	r1, [sp, #0]
 800a3f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3fc:	4906      	ldr	r1, [pc, #24]	; (800a418 <__assert_func+0x34>)
 800a3fe:	462b      	mov	r3, r5
 800a400:	f000 f872 	bl	800a4e8 <fiprintf>
 800a404:	f000 f882 	bl	800a50c <abort>
 800a408:	4b04      	ldr	r3, [pc, #16]	; (800a41c <__assert_func+0x38>)
 800a40a:	461c      	mov	r4, r3
 800a40c:	e7f3      	b.n	800a3f6 <__assert_func+0x12>
 800a40e:	bf00      	nop
 800a410:	20000068 	.word	0x20000068
 800a414:	0800adff 	.word	0x0800adff
 800a418:	0800ae0c 	.word	0x0800ae0c
 800a41c:	0800ae3a 	.word	0x0800ae3a

0800a420 <_calloc_r>:
 800a420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a422:	fba1 2402 	umull	r2, r4, r1, r2
 800a426:	b94c      	cbnz	r4, 800a43c <_calloc_r+0x1c>
 800a428:	4611      	mov	r1, r2
 800a42a:	9201      	str	r2, [sp, #4]
 800a42c:	f7ff f9a2 	bl	8009774 <_malloc_r>
 800a430:	9a01      	ldr	r2, [sp, #4]
 800a432:	4605      	mov	r5, r0
 800a434:	b930      	cbnz	r0, 800a444 <_calloc_r+0x24>
 800a436:	4628      	mov	r0, r5
 800a438:	b003      	add	sp, #12
 800a43a:	bd30      	pop	{r4, r5, pc}
 800a43c:	220c      	movs	r2, #12
 800a43e:	6002      	str	r2, [r0, #0]
 800a440:	2500      	movs	r5, #0
 800a442:	e7f8      	b.n	800a436 <_calloc_r+0x16>
 800a444:	4621      	mov	r1, r4
 800a446:	f7fe fa16 	bl	8008876 <memset>
 800a44a:	e7f4      	b.n	800a436 <_calloc_r+0x16>

0800a44c <__ascii_mbtowc>:
 800a44c:	b082      	sub	sp, #8
 800a44e:	b901      	cbnz	r1, 800a452 <__ascii_mbtowc+0x6>
 800a450:	a901      	add	r1, sp, #4
 800a452:	b142      	cbz	r2, 800a466 <__ascii_mbtowc+0x1a>
 800a454:	b14b      	cbz	r3, 800a46a <__ascii_mbtowc+0x1e>
 800a456:	7813      	ldrb	r3, [r2, #0]
 800a458:	600b      	str	r3, [r1, #0]
 800a45a:	7812      	ldrb	r2, [r2, #0]
 800a45c:	1e10      	subs	r0, r2, #0
 800a45e:	bf18      	it	ne
 800a460:	2001      	movne	r0, #1
 800a462:	b002      	add	sp, #8
 800a464:	4770      	bx	lr
 800a466:	4610      	mov	r0, r2
 800a468:	e7fb      	b.n	800a462 <__ascii_mbtowc+0x16>
 800a46a:	f06f 0001 	mvn.w	r0, #1
 800a46e:	e7f8      	b.n	800a462 <__ascii_mbtowc+0x16>

0800a470 <_realloc_r>:
 800a470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a474:	4680      	mov	r8, r0
 800a476:	4614      	mov	r4, r2
 800a478:	460e      	mov	r6, r1
 800a47a:	b921      	cbnz	r1, 800a486 <_realloc_r+0x16>
 800a47c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a480:	4611      	mov	r1, r2
 800a482:	f7ff b977 	b.w	8009774 <_malloc_r>
 800a486:	b92a      	cbnz	r2, 800a494 <_realloc_r+0x24>
 800a488:	f7ff f900 	bl	800968c <_free_r>
 800a48c:	4625      	mov	r5, r4
 800a48e:	4628      	mov	r0, r5
 800a490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a494:	f000 f841 	bl	800a51a <_malloc_usable_size_r>
 800a498:	4284      	cmp	r4, r0
 800a49a:	4607      	mov	r7, r0
 800a49c:	d802      	bhi.n	800a4a4 <_realloc_r+0x34>
 800a49e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a4a2:	d812      	bhi.n	800a4ca <_realloc_r+0x5a>
 800a4a4:	4621      	mov	r1, r4
 800a4a6:	4640      	mov	r0, r8
 800a4a8:	f7ff f964 	bl	8009774 <_malloc_r>
 800a4ac:	4605      	mov	r5, r0
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	d0ed      	beq.n	800a48e <_realloc_r+0x1e>
 800a4b2:	42bc      	cmp	r4, r7
 800a4b4:	4622      	mov	r2, r4
 800a4b6:	4631      	mov	r1, r6
 800a4b8:	bf28      	it	cs
 800a4ba:	463a      	movcs	r2, r7
 800a4bc:	f7fe fa5b 	bl	8008976 <memcpy>
 800a4c0:	4631      	mov	r1, r6
 800a4c2:	4640      	mov	r0, r8
 800a4c4:	f7ff f8e2 	bl	800968c <_free_r>
 800a4c8:	e7e1      	b.n	800a48e <_realloc_r+0x1e>
 800a4ca:	4635      	mov	r5, r6
 800a4cc:	e7df      	b.n	800a48e <_realloc_r+0x1e>

0800a4ce <__ascii_wctomb>:
 800a4ce:	b149      	cbz	r1, 800a4e4 <__ascii_wctomb+0x16>
 800a4d0:	2aff      	cmp	r2, #255	; 0xff
 800a4d2:	bf85      	ittet	hi
 800a4d4:	238a      	movhi	r3, #138	; 0x8a
 800a4d6:	6003      	strhi	r3, [r0, #0]
 800a4d8:	700a      	strbls	r2, [r1, #0]
 800a4da:	f04f 30ff 	movhi.w	r0, #4294967295
 800a4de:	bf98      	it	ls
 800a4e0:	2001      	movls	r0, #1
 800a4e2:	4770      	bx	lr
 800a4e4:	4608      	mov	r0, r1
 800a4e6:	4770      	bx	lr

0800a4e8 <fiprintf>:
 800a4e8:	b40e      	push	{r1, r2, r3}
 800a4ea:	b503      	push	{r0, r1, lr}
 800a4ec:	4601      	mov	r1, r0
 800a4ee:	ab03      	add	r3, sp, #12
 800a4f0:	4805      	ldr	r0, [pc, #20]	; (800a508 <fiprintf+0x20>)
 800a4f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4f6:	6800      	ldr	r0, [r0, #0]
 800a4f8:	9301      	str	r3, [sp, #4]
 800a4fa:	f000 f83f 	bl	800a57c <_vfiprintf_r>
 800a4fe:	b002      	add	sp, #8
 800a500:	f85d eb04 	ldr.w	lr, [sp], #4
 800a504:	b003      	add	sp, #12
 800a506:	4770      	bx	lr
 800a508:	20000068 	.word	0x20000068

0800a50c <abort>:
 800a50c:	b508      	push	{r3, lr}
 800a50e:	2006      	movs	r0, #6
 800a510:	f000 fa0c 	bl	800a92c <raise>
 800a514:	2001      	movs	r0, #1
 800a516:	f7f7 ffd5 	bl	80024c4 <_exit>

0800a51a <_malloc_usable_size_r>:
 800a51a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a51e:	1f18      	subs	r0, r3, #4
 800a520:	2b00      	cmp	r3, #0
 800a522:	bfbc      	itt	lt
 800a524:	580b      	ldrlt	r3, [r1, r0]
 800a526:	18c0      	addlt	r0, r0, r3
 800a528:	4770      	bx	lr

0800a52a <__sfputc_r>:
 800a52a:	6893      	ldr	r3, [r2, #8]
 800a52c:	3b01      	subs	r3, #1
 800a52e:	2b00      	cmp	r3, #0
 800a530:	b410      	push	{r4}
 800a532:	6093      	str	r3, [r2, #8]
 800a534:	da08      	bge.n	800a548 <__sfputc_r+0x1e>
 800a536:	6994      	ldr	r4, [r2, #24]
 800a538:	42a3      	cmp	r3, r4
 800a53a:	db01      	blt.n	800a540 <__sfputc_r+0x16>
 800a53c:	290a      	cmp	r1, #10
 800a53e:	d103      	bne.n	800a548 <__sfputc_r+0x1e>
 800a540:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a544:	f000 b934 	b.w	800a7b0 <__swbuf_r>
 800a548:	6813      	ldr	r3, [r2, #0]
 800a54a:	1c58      	adds	r0, r3, #1
 800a54c:	6010      	str	r0, [r2, #0]
 800a54e:	7019      	strb	r1, [r3, #0]
 800a550:	4608      	mov	r0, r1
 800a552:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <__sfputs_r>:
 800a558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55a:	4606      	mov	r6, r0
 800a55c:	460f      	mov	r7, r1
 800a55e:	4614      	mov	r4, r2
 800a560:	18d5      	adds	r5, r2, r3
 800a562:	42ac      	cmp	r4, r5
 800a564:	d101      	bne.n	800a56a <__sfputs_r+0x12>
 800a566:	2000      	movs	r0, #0
 800a568:	e007      	b.n	800a57a <__sfputs_r+0x22>
 800a56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a56e:	463a      	mov	r2, r7
 800a570:	4630      	mov	r0, r6
 800a572:	f7ff ffda 	bl	800a52a <__sfputc_r>
 800a576:	1c43      	adds	r3, r0, #1
 800a578:	d1f3      	bne.n	800a562 <__sfputs_r+0xa>
 800a57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a57c <_vfiprintf_r>:
 800a57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a580:	460d      	mov	r5, r1
 800a582:	b09d      	sub	sp, #116	; 0x74
 800a584:	4614      	mov	r4, r2
 800a586:	4698      	mov	r8, r3
 800a588:	4606      	mov	r6, r0
 800a58a:	b118      	cbz	r0, 800a594 <_vfiprintf_r+0x18>
 800a58c:	6a03      	ldr	r3, [r0, #32]
 800a58e:	b90b      	cbnz	r3, 800a594 <_vfiprintf_r+0x18>
 800a590:	f7fe f8d8 	bl	8008744 <__sinit>
 800a594:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a596:	07d9      	lsls	r1, r3, #31
 800a598:	d405      	bmi.n	800a5a6 <_vfiprintf_r+0x2a>
 800a59a:	89ab      	ldrh	r3, [r5, #12]
 800a59c:	059a      	lsls	r2, r3, #22
 800a59e:	d402      	bmi.n	800a5a6 <_vfiprintf_r+0x2a>
 800a5a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5a2:	f7fe f9e6 	bl	8008972 <__retarget_lock_acquire_recursive>
 800a5a6:	89ab      	ldrh	r3, [r5, #12]
 800a5a8:	071b      	lsls	r3, r3, #28
 800a5aa:	d501      	bpl.n	800a5b0 <_vfiprintf_r+0x34>
 800a5ac:	692b      	ldr	r3, [r5, #16]
 800a5ae:	b99b      	cbnz	r3, 800a5d8 <_vfiprintf_r+0x5c>
 800a5b0:	4629      	mov	r1, r5
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	f000 f93a 	bl	800a82c <__swsetup_r>
 800a5b8:	b170      	cbz	r0, 800a5d8 <_vfiprintf_r+0x5c>
 800a5ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5bc:	07dc      	lsls	r4, r3, #31
 800a5be:	d504      	bpl.n	800a5ca <_vfiprintf_r+0x4e>
 800a5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c4:	b01d      	add	sp, #116	; 0x74
 800a5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ca:	89ab      	ldrh	r3, [r5, #12]
 800a5cc:	0598      	lsls	r0, r3, #22
 800a5ce:	d4f7      	bmi.n	800a5c0 <_vfiprintf_r+0x44>
 800a5d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5d2:	f7fe f9cf 	bl	8008974 <__retarget_lock_release_recursive>
 800a5d6:	e7f3      	b.n	800a5c0 <_vfiprintf_r+0x44>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	9309      	str	r3, [sp, #36]	; 0x24
 800a5dc:	2320      	movs	r3, #32
 800a5de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5e6:	2330      	movs	r3, #48	; 0x30
 800a5e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a79c <_vfiprintf_r+0x220>
 800a5ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5f0:	f04f 0901 	mov.w	r9, #1
 800a5f4:	4623      	mov	r3, r4
 800a5f6:	469a      	mov	sl, r3
 800a5f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5fc:	b10a      	cbz	r2, 800a602 <_vfiprintf_r+0x86>
 800a5fe:	2a25      	cmp	r2, #37	; 0x25
 800a600:	d1f9      	bne.n	800a5f6 <_vfiprintf_r+0x7a>
 800a602:	ebba 0b04 	subs.w	fp, sl, r4
 800a606:	d00b      	beq.n	800a620 <_vfiprintf_r+0xa4>
 800a608:	465b      	mov	r3, fp
 800a60a:	4622      	mov	r2, r4
 800a60c:	4629      	mov	r1, r5
 800a60e:	4630      	mov	r0, r6
 800a610:	f7ff ffa2 	bl	800a558 <__sfputs_r>
 800a614:	3001      	adds	r0, #1
 800a616:	f000 80a9 	beq.w	800a76c <_vfiprintf_r+0x1f0>
 800a61a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a61c:	445a      	add	r2, fp
 800a61e:	9209      	str	r2, [sp, #36]	; 0x24
 800a620:	f89a 3000 	ldrb.w	r3, [sl]
 800a624:	2b00      	cmp	r3, #0
 800a626:	f000 80a1 	beq.w	800a76c <_vfiprintf_r+0x1f0>
 800a62a:	2300      	movs	r3, #0
 800a62c:	f04f 32ff 	mov.w	r2, #4294967295
 800a630:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a634:	f10a 0a01 	add.w	sl, sl, #1
 800a638:	9304      	str	r3, [sp, #16]
 800a63a:	9307      	str	r3, [sp, #28]
 800a63c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a640:	931a      	str	r3, [sp, #104]	; 0x68
 800a642:	4654      	mov	r4, sl
 800a644:	2205      	movs	r2, #5
 800a646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a64a:	4854      	ldr	r0, [pc, #336]	; (800a79c <_vfiprintf_r+0x220>)
 800a64c:	f7f5 fde8 	bl	8000220 <memchr>
 800a650:	9a04      	ldr	r2, [sp, #16]
 800a652:	b9d8      	cbnz	r0, 800a68c <_vfiprintf_r+0x110>
 800a654:	06d1      	lsls	r1, r2, #27
 800a656:	bf44      	itt	mi
 800a658:	2320      	movmi	r3, #32
 800a65a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a65e:	0713      	lsls	r3, r2, #28
 800a660:	bf44      	itt	mi
 800a662:	232b      	movmi	r3, #43	; 0x2b
 800a664:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a668:	f89a 3000 	ldrb.w	r3, [sl]
 800a66c:	2b2a      	cmp	r3, #42	; 0x2a
 800a66e:	d015      	beq.n	800a69c <_vfiprintf_r+0x120>
 800a670:	9a07      	ldr	r2, [sp, #28]
 800a672:	4654      	mov	r4, sl
 800a674:	2000      	movs	r0, #0
 800a676:	f04f 0c0a 	mov.w	ip, #10
 800a67a:	4621      	mov	r1, r4
 800a67c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a680:	3b30      	subs	r3, #48	; 0x30
 800a682:	2b09      	cmp	r3, #9
 800a684:	d94d      	bls.n	800a722 <_vfiprintf_r+0x1a6>
 800a686:	b1b0      	cbz	r0, 800a6b6 <_vfiprintf_r+0x13a>
 800a688:	9207      	str	r2, [sp, #28]
 800a68a:	e014      	b.n	800a6b6 <_vfiprintf_r+0x13a>
 800a68c:	eba0 0308 	sub.w	r3, r0, r8
 800a690:	fa09 f303 	lsl.w	r3, r9, r3
 800a694:	4313      	orrs	r3, r2
 800a696:	9304      	str	r3, [sp, #16]
 800a698:	46a2      	mov	sl, r4
 800a69a:	e7d2      	b.n	800a642 <_vfiprintf_r+0xc6>
 800a69c:	9b03      	ldr	r3, [sp, #12]
 800a69e:	1d19      	adds	r1, r3, #4
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	9103      	str	r1, [sp, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	bfbb      	ittet	lt
 800a6a8:	425b      	neglt	r3, r3
 800a6aa:	f042 0202 	orrlt.w	r2, r2, #2
 800a6ae:	9307      	strge	r3, [sp, #28]
 800a6b0:	9307      	strlt	r3, [sp, #28]
 800a6b2:	bfb8      	it	lt
 800a6b4:	9204      	strlt	r2, [sp, #16]
 800a6b6:	7823      	ldrb	r3, [r4, #0]
 800a6b8:	2b2e      	cmp	r3, #46	; 0x2e
 800a6ba:	d10c      	bne.n	800a6d6 <_vfiprintf_r+0x15a>
 800a6bc:	7863      	ldrb	r3, [r4, #1]
 800a6be:	2b2a      	cmp	r3, #42	; 0x2a
 800a6c0:	d134      	bne.n	800a72c <_vfiprintf_r+0x1b0>
 800a6c2:	9b03      	ldr	r3, [sp, #12]
 800a6c4:	1d1a      	adds	r2, r3, #4
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	9203      	str	r2, [sp, #12]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	bfb8      	it	lt
 800a6ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6d2:	3402      	adds	r4, #2
 800a6d4:	9305      	str	r3, [sp, #20]
 800a6d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a7ac <_vfiprintf_r+0x230>
 800a6da:	7821      	ldrb	r1, [r4, #0]
 800a6dc:	2203      	movs	r2, #3
 800a6de:	4650      	mov	r0, sl
 800a6e0:	f7f5 fd9e 	bl	8000220 <memchr>
 800a6e4:	b138      	cbz	r0, 800a6f6 <_vfiprintf_r+0x17a>
 800a6e6:	9b04      	ldr	r3, [sp, #16]
 800a6e8:	eba0 000a 	sub.w	r0, r0, sl
 800a6ec:	2240      	movs	r2, #64	; 0x40
 800a6ee:	4082      	lsls	r2, r0
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	3401      	adds	r4, #1
 800a6f4:	9304      	str	r3, [sp, #16]
 800a6f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6fa:	4829      	ldr	r0, [pc, #164]	; (800a7a0 <_vfiprintf_r+0x224>)
 800a6fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a700:	2206      	movs	r2, #6
 800a702:	f7f5 fd8d 	bl	8000220 <memchr>
 800a706:	2800      	cmp	r0, #0
 800a708:	d03f      	beq.n	800a78a <_vfiprintf_r+0x20e>
 800a70a:	4b26      	ldr	r3, [pc, #152]	; (800a7a4 <_vfiprintf_r+0x228>)
 800a70c:	bb1b      	cbnz	r3, 800a756 <_vfiprintf_r+0x1da>
 800a70e:	9b03      	ldr	r3, [sp, #12]
 800a710:	3307      	adds	r3, #7
 800a712:	f023 0307 	bic.w	r3, r3, #7
 800a716:	3308      	adds	r3, #8
 800a718:	9303      	str	r3, [sp, #12]
 800a71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a71c:	443b      	add	r3, r7
 800a71e:	9309      	str	r3, [sp, #36]	; 0x24
 800a720:	e768      	b.n	800a5f4 <_vfiprintf_r+0x78>
 800a722:	fb0c 3202 	mla	r2, ip, r2, r3
 800a726:	460c      	mov	r4, r1
 800a728:	2001      	movs	r0, #1
 800a72a:	e7a6      	b.n	800a67a <_vfiprintf_r+0xfe>
 800a72c:	2300      	movs	r3, #0
 800a72e:	3401      	adds	r4, #1
 800a730:	9305      	str	r3, [sp, #20]
 800a732:	4619      	mov	r1, r3
 800a734:	f04f 0c0a 	mov.w	ip, #10
 800a738:	4620      	mov	r0, r4
 800a73a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a73e:	3a30      	subs	r2, #48	; 0x30
 800a740:	2a09      	cmp	r2, #9
 800a742:	d903      	bls.n	800a74c <_vfiprintf_r+0x1d0>
 800a744:	2b00      	cmp	r3, #0
 800a746:	d0c6      	beq.n	800a6d6 <_vfiprintf_r+0x15a>
 800a748:	9105      	str	r1, [sp, #20]
 800a74a:	e7c4      	b.n	800a6d6 <_vfiprintf_r+0x15a>
 800a74c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a750:	4604      	mov	r4, r0
 800a752:	2301      	movs	r3, #1
 800a754:	e7f0      	b.n	800a738 <_vfiprintf_r+0x1bc>
 800a756:	ab03      	add	r3, sp, #12
 800a758:	9300      	str	r3, [sp, #0]
 800a75a:	462a      	mov	r2, r5
 800a75c:	4b12      	ldr	r3, [pc, #72]	; (800a7a8 <_vfiprintf_r+0x22c>)
 800a75e:	a904      	add	r1, sp, #16
 800a760:	4630      	mov	r0, r6
 800a762:	f7fd fb9d 	bl	8007ea0 <_printf_float>
 800a766:	4607      	mov	r7, r0
 800a768:	1c78      	adds	r0, r7, #1
 800a76a:	d1d6      	bne.n	800a71a <_vfiprintf_r+0x19e>
 800a76c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a76e:	07d9      	lsls	r1, r3, #31
 800a770:	d405      	bmi.n	800a77e <_vfiprintf_r+0x202>
 800a772:	89ab      	ldrh	r3, [r5, #12]
 800a774:	059a      	lsls	r2, r3, #22
 800a776:	d402      	bmi.n	800a77e <_vfiprintf_r+0x202>
 800a778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a77a:	f7fe f8fb 	bl	8008974 <__retarget_lock_release_recursive>
 800a77e:	89ab      	ldrh	r3, [r5, #12]
 800a780:	065b      	lsls	r3, r3, #25
 800a782:	f53f af1d 	bmi.w	800a5c0 <_vfiprintf_r+0x44>
 800a786:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a788:	e71c      	b.n	800a5c4 <_vfiprintf_r+0x48>
 800a78a:	ab03      	add	r3, sp, #12
 800a78c:	9300      	str	r3, [sp, #0]
 800a78e:	462a      	mov	r2, r5
 800a790:	4b05      	ldr	r3, [pc, #20]	; (800a7a8 <_vfiprintf_r+0x22c>)
 800a792:	a904      	add	r1, sp, #16
 800a794:	4630      	mov	r0, r6
 800a796:	f7fd fe27 	bl	80083e8 <_printf_i>
 800a79a:	e7e4      	b.n	800a766 <_vfiprintf_r+0x1ea>
 800a79c:	0800ade4 	.word	0x0800ade4
 800a7a0:	0800adee 	.word	0x0800adee
 800a7a4:	08007ea1 	.word	0x08007ea1
 800a7a8:	0800a559 	.word	0x0800a559
 800a7ac:	0800adea 	.word	0x0800adea

0800a7b0 <__swbuf_r>:
 800a7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b2:	460e      	mov	r6, r1
 800a7b4:	4614      	mov	r4, r2
 800a7b6:	4605      	mov	r5, r0
 800a7b8:	b118      	cbz	r0, 800a7c2 <__swbuf_r+0x12>
 800a7ba:	6a03      	ldr	r3, [r0, #32]
 800a7bc:	b90b      	cbnz	r3, 800a7c2 <__swbuf_r+0x12>
 800a7be:	f7fd ffc1 	bl	8008744 <__sinit>
 800a7c2:	69a3      	ldr	r3, [r4, #24]
 800a7c4:	60a3      	str	r3, [r4, #8]
 800a7c6:	89a3      	ldrh	r3, [r4, #12]
 800a7c8:	071a      	lsls	r2, r3, #28
 800a7ca:	d525      	bpl.n	800a818 <__swbuf_r+0x68>
 800a7cc:	6923      	ldr	r3, [r4, #16]
 800a7ce:	b31b      	cbz	r3, 800a818 <__swbuf_r+0x68>
 800a7d0:	6823      	ldr	r3, [r4, #0]
 800a7d2:	6922      	ldr	r2, [r4, #16]
 800a7d4:	1a98      	subs	r0, r3, r2
 800a7d6:	6963      	ldr	r3, [r4, #20]
 800a7d8:	b2f6      	uxtb	r6, r6
 800a7da:	4283      	cmp	r3, r0
 800a7dc:	4637      	mov	r7, r6
 800a7de:	dc04      	bgt.n	800a7ea <__swbuf_r+0x3a>
 800a7e0:	4621      	mov	r1, r4
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	f7ff fdac 	bl	800a340 <_fflush_r>
 800a7e8:	b9e0      	cbnz	r0, 800a824 <__swbuf_r+0x74>
 800a7ea:	68a3      	ldr	r3, [r4, #8]
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	60a3      	str	r3, [r4, #8]
 800a7f0:	6823      	ldr	r3, [r4, #0]
 800a7f2:	1c5a      	adds	r2, r3, #1
 800a7f4:	6022      	str	r2, [r4, #0]
 800a7f6:	701e      	strb	r6, [r3, #0]
 800a7f8:	6962      	ldr	r2, [r4, #20]
 800a7fa:	1c43      	adds	r3, r0, #1
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d004      	beq.n	800a80a <__swbuf_r+0x5a>
 800a800:	89a3      	ldrh	r3, [r4, #12]
 800a802:	07db      	lsls	r3, r3, #31
 800a804:	d506      	bpl.n	800a814 <__swbuf_r+0x64>
 800a806:	2e0a      	cmp	r6, #10
 800a808:	d104      	bne.n	800a814 <__swbuf_r+0x64>
 800a80a:	4621      	mov	r1, r4
 800a80c:	4628      	mov	r0, r5
 800a80e:	f7ff fd97 	bl	800a340 <_fflush_r>
 800a812:	b938      	cbnz	r0, 800a824 <__swbuf_r+0x74>
 800a814:	4638      	mov	r0, r7
 800a816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a818:	4621      	mov	r1, r4
 800a81a:	4628      	mov	r0, r5
 800a81c:	f000 f806 	bl	800a82c <__swsetup_r>
 800a820:	2800      	cmp	r0, #0
 800a822:	d0d5      	beq.n	800a7d0 <__swbuf_r+0x20>
 800a824:	f04f 37ff 	mov.w	r7, #4294967295
 800a828:	e7f4      	b.n	800a814 <__swbuf_r+0x64>
	...

0800a82c <__swsetup_r>:
 800a82c:	b538      	push	{r3, r4, r5, lr}
 800a82e:	4b2a      	ldr	r3, [pc, #168]	; (800a8d8 <__swsetup_r+0xac>)
 800a830:	4605      	mov	r5, r0
 800a832:	6818      	ldr	r0, [r3, #0]
 800a834:	460c      	mov	r4, r1
 800a836:	b118      	cbz	r0, 800a840 <__swsetup_r+0x14>
 800a838:	6a03      	ldr	r3, [r0, #32]
 800a83a:	b90b      	cbnz	r3, 800a840 <__swsetup_r+0x14>
 800a83c:	f7fd ff82 	bl	8008744 <__sinit>
 800a840:	89a3      	ldrh	r3, [r4, #12]
 800a842:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a846:	0718      	lsls	r0, r3, #28
 800a848:	d422      	bmi.n	800a890 <__swsetup_r+0x64>
 800a84a:	06d9      	lsls	r1, r3, #27
 800a84c:	d407      	bmi.n	800a85e <__swsetup_r+0x32>
 800a84e:	2309      	movs	r3, #9
 800a850:	602b      	str	r3, [r5, #0]
 800a852:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a856:	81a3      	strh	r3, [r4, #12]
 800a858:	f04f 30ff 	mov.w	r0, #4294967295
 800a85c:	e034      	b.n	800a8c8 <__swsetup_r+0x9c>
 800a85e:	0758      	lsls	r0, r3, #29
 800a860:	d512      	bpl.n	800a888 <__swsetup_r+0x5c>
 800a862:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a864:	b141      	cbz	r1, 800a878 <__swsetup_r+0x4c>
 800a866:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a86a:	4299      	cmp	r1, r3
 800a86c:	d002      	beq.n	800a874 <__swsetup_r+0x48>
 800a86e:	4628      	mov	r0, r5
 800a870:	f7fe ff0c 	bl	800968c <_free_r>
 800a874:	2300      	movs	r3, #0
 800a876:	6363      	str	r3, [r4, #52]	; 0x34
 800a878:	89a3      	ldrh	r3, [r4, #12]
 800a87a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a87e:	81a3      	strh	r3, [r4, #12]
 800a880:	2300      	movs	r3, #0
 800a882:	6063      	str	r3, [r4, #4]
 800a884:	6923      	ldr	r3, [r4, #16]
 800a886:	6023      	str	r3, [r4, #0]
 800a888:	89a3      	ldrh	r3, [r4, #12]
 800a88a:	f043 0308 	orr.w	r3, r3, #8
 800a88e:	81a3      	strh	r3, [r4, #12]
 800a890:	6923      	ldr	r3, [r4, #16]
 800a892:	b94b      	cbnz	r3, 800a8a8 <__swsetup_r+0x7c>
 800a894:	89a3      	ldrh	r3, [r4, #12]
 800a896:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a89a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a89e:	d003      	beq.n	800a8a8 <__swsetup_r+0x7c>
 800a8a0:	4621      	mov	r1, r4
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	f000 f884 	bl	800a9b0 <__smakebuf_r>
 800a8a8:	89a0      	ldrh	r0, [r4, #12]
 800a8aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8ae:	f010 0301 	ands.w	r3, r0, #1
 800a8b2:	d00a      	beq.n	800a8ca <__swsetup_r+0x9e>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	60a3      	str	r3, [r4, #8]
 800a8b8:	6963      	ldr	r3, [r4, #20]
 800a8ba:	425b      	negs	r3, r3
 800a8bc:	61a3      	str	r3, [r4, #24]
 800a8be:	6923      	ldr	r3, [r4, #16]
 800a8c0:	b943      	cbnz	r3, 800a8d4 <__swsetup_r+0xa8>
 800a8c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8c6:	d1c4      	bne.n	800a852 <__swsetup_r+0x26>
 800a8c8:	bd38      	pop	{r3, r4, r5, pc}
 800a8ca:	0781      	lsls	r1, r0, #30
 800a8cc:	bf58      	it	pl
 800a8ce:	6963      	ldrpl	r3, [r4, #20]
 800a8d0:	60a3      	str	r3, [r4, #8]
 800a8d2:	e7f4      	b.n	800a8be <__swsetup_r+0x92>
 800a8d4:	2000      	movs	r0, #0
 800a8d6:	e7f7      	b.n	800a8c8 <__swsetup_r+0x9c>
 800a8d8:	20000068 	.word	0x20000068

0800a8dc <_raise_r>:
 800a8dc:	291f      	cmp	r1, #31
 800a8de:	b538      	push	{r3, r4, r5, lr}
 800a8e0:	4604      	mov	r4, r0
 800a8e2:	460d      	mov	r5, r1
 800a8e4:	d904      	bls.n	800a8f0 <_raise_r+0x14>
 800a8e6:	2316      	movs	r3, #22
 800a8e8:	6003      	str	r3, [r0, #0]
 800a8ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ee:	bd38      	pop	{r3, r4, r5, pc}
 800a8f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a8f2:	b112      	cbz	r2, 800a8fa <_raise_r+0x1e>
 800a8f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8f8:	b94b      	cbnz	r3, 800a90e <_raise_r+0x32>
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f000 f830 	bl	800a960 <_getpid_r>
 800a900:	462a      	mov	r2, r5
 800a902:	4601      	mov	r1, r0
 800a904:	4620      	mov	r0, r4
 800a906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a90a:	f000 b817 	b.w	800a93c <_kill_r>
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d00a      	beq.n	800a928 <_raise_r+0x4c>
 800a912:	1c59      	adds	r1, r3, #1
 800a914:	d103      	bne.n	800a91e <_raise_r+0x42>
 800a916:	2316      	movs	r3, #22
 800a918:	6003      	str	r3, [r0, #0]
 800a91a:	2001      	movs	r0, #1
 800a91c:	e7e7      	b.n	800a8ee <_raise_r+0x12>
 800a91e:	2400      	movs	r4, #0
 800a920:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a924:	4628      	mov	r0, r5
 800a926:	4798      	blx	r3
 800a928:	2000      	movs	r0, #0
 800a92a:	e7e0      	b.n	800a8ee <_raise_r+0x12>

0800a92c <raise>:
 800a92c:	4b02      	ldr	r3, [pc, #8]	; (800a938 <raise+0xc>)
 800a92e:	4601      	mov	r1, r0
 800a930:	6818      	ldr	r0, [r3, #0]
 800a932:	f7ff bfd3 	b.w	800a8dc <_raise_r>
 800a936:	bf00      	nop
 800a938:	20000068 	.word	0x20000068

0800a93c <_kill_r>:
 800a93c:	b538      	push	{r3, r4, r5, lr}
 800a93e:	4d07      	ldr	r5, [pc, #28]	; (800a95c <_kill_r+0x20>)
 800a940:	2300      	movs	r3, #0
 800a942:	4604      	mov	r4, r0
 800a944:	4608      	mov	r0, r1
 800a946:	4611      	mov	r1, r2
 800a948:	602b      	str	r3, [r5, #0]
 800a94a:	f7f7 fdab 	bl	80024a4 <_kill>
 800a94e:	1c43      	adds	r3, r0, #1
 800a950:	d102      	bne.n	800a958 <_kill_r+0x1c>
 800a952:	682b      	ldr	r3, [r5, #0]
 800a954:	b103      	cbz	r3, 800a958 <_kill_r+0x1c>
 800a956:	6023      	str	r3, [r4, #0]
 800a958:	bd38      	pop	{r3, r4, r5, pc}
 800a95a:	bf00      	nop
 800a95c:	20000570 	.word	0x20000570

0800a960 <_getpid_r>:
 800a960:	f7f7 bd98 	b.w	8002494 <_getpid>

0800a964 <__swhatbuf_r>:
 800a964:	b570      	push	{r4, r5, r6, lr}
 800a966:	460c      	mov	r4, r1
 800a968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a96c:	2900      	cmp	r1, #0
 800a96e:	b096      	sub	sp, #88	; 0x58
 800a970:	4615      	mov	r5, r2
 800a972:	461e      	mov	r6, r3
 800a974:	da0d      	bge.n	800a992 <__swhatbuf_r+0x2e>
 800a976:	89a3      	ldrh	r3, [r4, #12]
 800a978:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a97c:	f04f 0100 	mov.w	r1, #0
 800a980:	bf0c      	ite	eq
 800a982:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a986:	2340      	movne	r3, #64	; 0x40
 800a988:	2000      	movs	r0, #0
 800a98a:	6031      	str	r1, [r6, #0]
 800a98c:	602b      	str	r3, [r5, #0]
 800a98e:	b016      	add	sp, #88	; 0x58
 800a990:	bd70      	pop	{r4, r5, r6, pc}
 800a992:	466a      	mov	r2, sp
 800a994:	f000 f848 	bl	800aa28 <_fstat_r>
 800a998:	2800      	cmp	r0, #0
 800a99a:	dbec      	blt.n	800a976 <__swhatbuf_r+0x12>
 800a99c:	9901      	ldr	r1, [sp, #4]
 800a99e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a9a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a9a6:	4259      	negs	r1, r3
 800a9a8:	4159      	adcs	r1, r3
 800a9aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9ae:	e7eb      	b.n	800a988 <__swhatbuf_r+0x24>

0800a9b0 <__smakebuf_r>:
 800a9b0:	898b      	ldrh	r3, [r1, #12]
 800a9b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9b4:	079d      	lsls	r5, r3, #30
 800a9b6:	4606      	mov	r6, r0
 800a9b8:	460c      	mov	r4, r1
 800a9ba:	d507      	bpl.n	800a9cc <__smakebuf_r+0x1c>
 800a9bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9c0:	6023      	str	r3, [r4, #0]
 800a9c2:	6123      	str	r3, [r4, #16]
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	6163      	str	r3, [r4, #20]
 800a9c8:	b002      	add	sp, #8
 800a9ca:	bd70      	pop	{r4, r5, r6, pc}
 800a9cc:	ab01      	add	r3, sp, #4
 800a9ce:	466a      	mov	r2, sp
 800a9d0:	f7ff ffc8 	bl	800a964 <__swhatbuf_r>
 800a9d4:	9900      	ldr	r1, [sp, #0]
 800a9d6:	4605      	mov	r5, r0
 800a9d8:	4630      	mov	r0, r6
 800a9da:	f7fe fecb 	bl	8009774 <_malloc_r>
 800a9de:	b948      	cbnz	r0, 800a9f4 <__smakebuf_r+0x44>
 800a9e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9e4:	059a      	lsls	r2, r3, #22
 800a9e6:	d4ef      	bmi.n	800a9c8 <__smakebuf_r+0x18>
 800a9e8:	f023 0303 	bic.w	r3, r3, #3
 800a9ec:	f043 0302 	orr.w	r3, r3, #2
 800a9f0:	81a3      	strh	r3, [r4, #12]
 800a9f2:	e7e3      	b.n	800a9bc <__smakebuf_r+0xc>
 800a9f4:	89a3      	ldrh	r3, [r4, #12]
 800a9f6:	6020      	str	r0, [r4, #0]
 800a9f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9fc:	81a3      	strh	r3, [r4, #12]
 800a9fe:	9b00      	ldr	r3, [sp, #0]
 800aa00:	6163      	str	r3, [r4, #20]
 800aa02:	9b01      	ldr	r3, [sp, #4]
 800aa04:	6120      	str	r0, [r4, #16]
 800aa06:	b15b      	cbz	r3, 800aa20 <__smakebuf_r+0x70>
 800aa08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	f000 f81d 	bl	800aa4c <_isatty_r>
 800aa12:	b128      	cbz	r0, 800aa20 <__smakebuf_r+0x70>
 800aa14:	89a3      	ldrh	r3, [r4, #12]
 800aa16:	f023 0303 	bic.w	r3, r3, #3
 800aa1a:	f043 0301 	orr.w	r3, r3, #1
 800aa1e:	81a3      	strh	r3, [r4, #12]
 800aa20:	89a3      	ldrh	r3, [r4, #12]
 800aa22:	431d      	orrs	r5, r3
 800aa24:	81a5      	strh	r5, [r4, #12]
 800aa26:	e7cf      	b.n	800a9c8 <__smakebuf_r+0x18>

0800aa28 <_fstat_r>:
 800aa28:	b538      	push	{r3, r4, r5, lr}
 800aa2a:	4d07      	ldr	r5, [pc, #28]	; (800aa48 <_fstat_r+0x20>)
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	4604      	mov	r4, r0
 800aa30:	4608      	mov	r0, r1
 800aa32:	4611      	mov	r1, r2
 800aa34:	602b      	str	r3, [r5, #0]
 800aa36:	f7f7 fd94 	bl	8002562 <_fstat>
 800aa3a:	1c43      	adds	r3, r0, #1
 800aa3c:	d102      	bne.n	800aa44 <_fstat_r+0x1c>
 800aa3e:	682b      	ldr	r3, [r5, #0]
 800aa40:	b103      	cbz	r3, 800aa44 <_fstat_r+0x1c>
 800aa42:	6023      	str	r3, [r4, #0]
 800aa44:	bd38      	pop	{r3, r4, r5, pc}
 800aa46:	bf00      	nop
 800aa48:	20000570 	.word	0x20000570

0800aa4c <_isatty_r>:
 800aa4c:	b538      	push	{r3, r4, r5, lr}
 800aa4e:	4d06      	ldr	r5, [pc, #24]	; (800aa68 <_isatty_r+0x1c>)
 800aa50:	2300      	movs	r3, #0
 800aa52:	4604      	mov	r4, r0
 800aa54:	4608      	mov	r0, r1
 800aa56:	602b      	str	r3, [r5, #0]
 800aa58:	f7f7 fd93 	bl	8002582 <_isatty>
 800aa5c:	1c43      	adds	r3, r0, #1
 800aa5e:	d102      	bne.n	800aa66 <_isatty_r+0x1a>
 800aa60:	682b      	ldr	r3, [r5, #0]
 800aa62:	b103      	cbz	r3, 800aa66 <_isatty_r+0x1a>
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	bd38      	pop	{r3, r4, r5, pc}
 800aa68:	20000570 	.word	0x20000570

0800aa6c <_init>:
 800aa6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6e:	bf00      	nop
 800aa70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa72:	bc08      	pop	{r3}
 800aa74:	469e      	mov	lr, r3
 800aa76:	4770      	bx	lr

0800aa78 <_fini>:
 800aa78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa7a:	bf00      	nop
 800aa7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa7e:	bc08      	pop	{r3}
 800aa80:	469e      	mov	lr, r3
 800aa82:	4770      	bx	lr
