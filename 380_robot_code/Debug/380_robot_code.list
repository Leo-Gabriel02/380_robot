
380_robot_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b570  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  0800b750  0800b750  0000c750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bce0  0800bce0  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bce0  0800bce0  0000cce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bce8  0800bce8  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bce8  0800bce8  0000cce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcec  0800bcec  0000ccec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800bcf0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  200001d4  0800bec4  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  0800bec4  0000d584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018265  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c07  00000000  00000000  00025469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  00028070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001182  00000000  00000000  000296b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024cf9  00000000  00000000  0002a83a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a58e  00000000  00000000  0004f533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f945c  00000000  00000000  00069ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00162f1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007328  00000000  00000000  00162f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0016a288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b738 	.word	0x0800b738

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800b738 	.word	0x0800b738

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96a 	b.w	8000f24 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	460c      	mov	r4, r1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d14e      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c74:	4694      	mov	ip, r2
 8000c76:	458c      	cmp	ip, r1
 8000c78:	4686      	mov	lr, r0
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	d962      	bls.n	8000d46 <__udivmoddi4+0xde>
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0320 	rsb	r3, r2, #32
 8000c86:	4091      	lsls	r1, r2
 8000c88:	fa20 f303 	lsr.w	r3, r0, r3
 8000c8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c90:	4319      	orrs	r1, r3
 8000c92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f f68c 	uxth.w	r6, ip
 8000c9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb07 1114 	mls	r1, r7, r4, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb04 f106 	mul.w	r1, r4, r6
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cbe:	f080 8112 	bcs.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 810f 	bls.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc8:	3c02      	subs	r4, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a59      	subs	r1, r3, r1
 8000cce:	fa1f f38e 	uxth.w	r3, lr
 8000cd2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f606 	mul.w	r6, r0, r6
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x94>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cee:	f080 80fc 	bcs.w	8000eea <__udivmoddi4+0x282>
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	f240 80f9 	bls.w	8000eea <__udivmoddi4+0x282>
 8000cf8:	4463      	add	r3, ip
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d02:	2100      	movs	r1, #0
 8000d04:	b11d      	cbz	r5, 8000d0e <__udivmoddi4+0xa6>
 8000d06:	40d3      	lsrs	r3, r2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d905      	bls.n	8000d22 <__udivmoddi4+0xba>
 8000d16:	b10d      	cbz	r5, 8000d1c <__udivmoddi4+0xb4>
 8000d18:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e7f5      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d22:	fab3 f183 	clz	r1, r3
 8000d26:	2900      	cmp	r1, #0
 8000d28:	d146      	bne.n	8000db8 <__udivmoddi4+0x150>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d302      	bcc.n	8000d34 <__udivmoddi4+0xcc>
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	f0c0 80f0 	bcc.w	8000f14 <__udivmoddi4+0x2ac>
 8000d34:	1a86      	subs	r6, r0, r2
 8000d36:	eb64 0303 	sbc.w	r3, r4, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	2d00      	cmp	r5, #0
 8000d3e:	d0e6      	beq.n	8000d0e <__udivmoddi4+0xa6>
 8000d40:	e9c5 6300 	strd	r6, r3, [r5]
 8000d44:	e7e3      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	f040 8090 	bne.w	8000e6c <__udivmoddi4+0x204>
 8000d4c:	eba1 040c 	sub.w	r4, r1, ip
 8000d50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb08 4416 	mls	r4, r8, r6, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb07 f006 	mul.w	r0, r7, r6
 8000d6e:	4298      	cmp	r0, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x11c>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x11a>
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	f200 80cd 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d82:	4626      	mov	r6, r4
 8000d84:	1a1c      	subs	r4, r3, r0
 8000d86:	fa1f f38e 	uxth.w	r3, lr
 8000d8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d96:	fb00 f707 	mul.w	r7, r0, r7
 8000d9a:	429f      	cmp	r7, r3
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x148>
 8000d9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000da2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x146>
 8000da8:	429f      	cmp	r7, r3
 8000daa:	f200 80b0 	bhi.w	8000f0e <__udivmoddi4+0x2a6>
 8000dae:	4620      	mov	r0, r4
 8000db0:	1bdb      	subs	r3, r3, r7
 8000db2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db6:	e7a5      	b.n	8000d04 <__udivmoddi4+0x9c>
 8000db8:	f1c1 0620 	rsb	r6, r1, #32
 8000dbc:	408b      	lsls	r3, r1
 8000dbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dc8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dcc:	ea43 030c 	orr.w	r3, r3, ip
 8000dd0:	40f4      	lsrs	r4, r6
 8000dd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dd6:	0c38      	lsrs	r0, r7, #16
 8000dd8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ddc:	fbb4 fef0 	udiv	lr, r4, r0
 8000de0:	fa1f fc87 	uxth.w	ip, r7
 8000de4:	fb00 441e 	mls	r4, r0, lr, r4
 8000de8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dec:	fb0e f90c 	mul.w	r9, lr, ip
 8000df0:	45a1      	cmp	r9, r4
 8000df2:	fa02 f201 	lsl.w	r2, r2, r1
 8000df6:	d90a      	bls.n	8000e0e <__udivmoddi4+0x1a6>
 8000df8:	193c      	adds	r4, r7, r4
 8000dfa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dfe:	f080 8084 	bcs.w	8000f0a <__udivmoddi4+0x2a2>
 8000e02:	45a1      	cmp	r9, r4
 8000e04:	f240 8081 	bls.w	8000f0a <__udivmoddi4+0x2a2>
 8000e08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	eba4 0409 	sub.w	r4, r4, r9
 8000e12:	fa1f f983 	uxth.w	r9, r3
 8000e16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e26:	45a4      	cmp	ip, r4
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x1d2>
 8000e2a:	193c      	adds	r4, r7, r4
 8000e2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e30:	d267      	bcs.n	8000f02 <__udivmoddi4+0x29a>
 8000e32:	45a4      	cmp	ip, r4
 8000e34:	d965      	bls.n	8000f02 <__udivmoddi4+0x29a>
 8000e36:	3b02      	subs	r3, #2
 8000e38:	443c      	add	r4, r7
 8000e3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e42:	eba4 040c 	sub.w	r4, r4, ip
 8000e46:	429c      	cmp	r4, r3
 8000e48:	46ce      	mov	lr, r9
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	d351      	bcc.n	8000ef2 <__udivmoddi4+0x28a>
 8000e4e:	d04e      	beq.n	8000eee <__udivmoddi4+0x286>
 8000e50:	b155      	cbz	r5, 8000e68 <__udivmoddi4+0x200>
 8000e52:	ebb8 030e 	subs.w	r3, r8, lr
 8000e56:	eb64 040c 	sbc.w	r4, r4, ip
 8000e5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	431e      	orrs	r6, r3
 8000e62:	40cc      	lsrs	r4, r1
 8000e64:	e9c5 6400 	strd	r6, r4, [r5]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	e750      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f103 	lsr.w	r1, r0, r3
 8000e74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e78:	fa24 f303 	lsr.w	r3, r4, r3
 8000e7c:	4094      	lsls	r4, r2
 8000e7e:	430c      	orrs	r4, r1
 8000e80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e88:	fa1f f78c 	uxth.w	r7, ip
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3110 	mls	r1, r8, r0, r3
 8000e94:	0c23      	lsrs	r3, r4, #16
 8000e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9a:	fb00 f107 	mul.w	r1, r0, r7
 8000e9e:	4299      	cmp	r1, r3
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x24c>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eaa:	d22c      	bcs.n	8000f06 <__udivmoddi4+0x29e>
 8000eac:	4299      	cmp	r1, r3
 8000eae:	d92a      	bls.n	8000f06 <__udivmoddi4+0x29e>
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	1a5b      	subs	r3, r3, r1
 8000eb6:	b2a4      	uxth	r4, r4
 8000eb8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ebc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ec0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ec4:	fb01 f307 	mul.w	r3, r1, r7
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x276>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ed4:	d213      	bcs.n	8000efe <__udivmoddi4+0x296>
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	d911      	bls.n	8000efe <__udivmoddi4+0x296>
 8000eda:	3902      	subs	r1, #2
 8000edc:	4464      	add	r4, ip
 8000ede:	1ae4      	subs	r4, r4, r3
 8000ee0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ee4:	e739      	b.n	8000d5a <__udivmoddi4+0xf2>
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	e6f0      	b.n	8000ccc <__udivmoddi4+0x64>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e706      	b.n	8000cfc <__udivmoddi4+0x94>
 8000eee:	45c8      	cmp	r8, r9
 8000ef0:	d2ae      	bcs.n	8000e50 <__udivmoddi4+0x1e8>
 8000ef2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ef6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000efa:	3801      	subs	r0, #1
 8000efc:	e7a8      	b.n	8000e50 <__udivmoddi4+0x1e8>
 8000efe:	4631      	mov	r1, r6
 8000f00:	e7ed      	b.n	8000ede <__udivmoddi4+0x276>
 8000f02:	4603      	mov	r3, r0
 8000f04:	e799      	b.n	8000e3a <__udivmoddi4+0x1d2>
 8000f06:	4630      	mov	r0, r6
 8000f08:	e7d4      	b.n	8000eb4 <__udivmoddi4+0x24c>
 8000f0a:	46d6      	mov	lr, sl
 8000f0c:	e77f      	b.n	8000e0e <__udivmoddi4+0x1a6>
 8000f0e:	4463      	add	r3, ip
 8000f10:	3802      	subs	r0, #2
 8000f12:	e74d      	b.n	8000db0 <__udivmoddi4+0x148>
 8000f14:	4606      	mov	r6, r0
 8000f16:	4623      	mov	r3, r4
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e70f      	b.n	8000d3c <__udivmoddi4+0xd4>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	e730      	b.n	8000d84 <__udivmoddi4+0x11c>
 8000f22:	bf00      	nop

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <runMotors>:
const uint8_t SENSORS[] = {2, 3, 4, 5}; // BL, FR, FL, BR
uint8_t NUM_SENSORS = sizeof(SENSORS)/sizeof(SENSORS[0]);

uint16_t rgb[] = {0, 0, 0};

void runMotors(uint8_t side, uint8_t dir, double duty) {
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b0a1      	sub	sp, #132	@ 0x84
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	460a      	mov	r2, r1
 8000f32:	ed87 0b00 	vstr	d0, [r7]
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	73bb      	strb	r3, [r7, #14]

    char b [100];

    if (duty < 0) {
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f48:	f7ff fdf0 	bl	8000b2c <__aeabi_dcmplt>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d023      	beq.n	8000f9a <runMotors+0x72>
        dir = !dir;
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	bf0c      	ite	eq
 8000f58:	2301      	moveq	r3, #1
 8000f5a:	2300      	movne	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	73bb      	strb	r3, [r7, #14]
        duty = abs(duty*1000)/1000.0;
 8000f60:	f04f 0200 	mov.w	r2, #0
 8000f64:	4b46      	ldr	r3, [pc, #280]	@ (8001080 <runMotors+0x158>)
 8000f66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f6a:	f7ff fb6d 	bl	8000648 <__aeabi_dmul>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	4610      	mov	r0, r2
 8000f74:	4619      	mov	r1, r3
 8000f76:	f7ff fe17 	bl	8000ba8 <__aeabi_d2iz>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	bfb8      	it	lt
 8000f80:	425b      	neglt	r3, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff faf6 	bl	8000574 <__aeabi_i2d>
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	4b3c      	ldr	r3, [pc, #240]	@ (8001080 <runMotors+0x158>)
 8000f8e:	f7ff fc85 	bl	800089c <__aeabi_ddiv>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	e9c7 2300 	strd	r2, r3, [r7]
    }

    duty = duty*0.8;
 8000f9a:	a337      	add	r3, pc, #220	@ (adr r3, 8001078 <runMotors+0x150>)
 8000f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fa4:	f7ff fb50 	bl	8000648 <__aeabi_dmul>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	e9c7 2300 	strd	r2, r3, [r7]
    if (duty > 0.8) duty = 0.8;
 8000fb0:	a331      	add	r3, pc, #196	@ (adr r3, 8001078 <runMotors+0x150>)
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fba:	f7ff fdd5 	bl	8000b68 <__aeabi_dcmpgt>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d004      	beq.n	8000fce <runMotors+0xa6>
 8000fc4:	a32c      	add	r3, pc, #176	@ (adr r3, 8001078 <runMotors+0x150>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	e9c7 2300 	strd	r2, r3, [r7]

    double duty_adj = dir == FWD ? (1-duty) : duty;
 8000fce:	7bbb      	ldrb	r3, [r7, #14]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d109      	bne.n	8000fe8 <runMotors+0xc0>
 8000fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fd8:	f04f 0000 	mov.w	r0, #0
 8000fdc:	4929      	ldr	r1, [pc, #164]	@ (8001084 <runMotors+0x15c>)
 8000fde:	f7ff f97b 	bl	80002d8 <__aeabi_dsub>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	e001      	b.n	8000fec <runMotors+0xc4>
 8000fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fec:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78

//    sprintf(b, "duty %f fwd? %d \r\n", duty_adj, dir == FWD);
//    HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

    if (side == LEFT) {
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d11e      	bne.n	8001034 <runMotors+0x10c>
        HAL_GPIO_WritePin(GPIOA, LS_DIR_Pin, dir == FWD ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ff6:	7bbb      	ldrb	r3, [r7, #14]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	bf0c      	ite	eq
 8000ffc:	2301      	moveq	r3, #1
 8000ffe:	2300      	movne	r3, #0
 8001000:	b2db      	uxtb	r3, r3
 8001002:	461a      	mov	r2, r3
 8001004:	2101      	movs	r1, #1
 8001006:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100a:	f003 f9b9 	bl	8004380 <HAL_GPIO_WritePin>
        TIM1->CCR1 = duty_adj*TIM1->ARR;
 800100e:	4b1e      	ldr	r3, [pc, #120]	@ (8001088 <runMotors+0x160>)
 8001010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fa9e 	bl	8000554 <__aeabi_ui2d>
 8001018:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800101c:	f7ff fb14 	bl	8000648 <__aeabi_dmul>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4c18      	ldr	r4, [pc, #96]	@ (8001088 <runMotors+0x160>)
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f7ff fde5 	bl	8000bf8 <__aeabi_d2uiz>
 800102e:	4603      	mov	r3, r0
 8001030:	6363      	str	r3, [r4, #52]	@ 0x34
    } else {
        HAL_GPIO_WritePin(GPIOA, RS_DIR_Pin, dir == FWD ? GPIO_PIN_SET : GPIO_PIN_RESET);
        TIM1->CCR4 = duty_adj*TIM1->ARR;
    }
}
 8001032:	e01d      	b.n	8001070 <runMotors+0x148>
        HAL_GPIO_WritePin(GPIOA, RS_DIR_Pin, dir == FWD ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	2b00      	cmp	r3, #0
 8001038:	bf0c      	ite	eq
 800103a:	2301      	moveq	r3, #1
 800103c:	2300      	movne	r3, #0
 800103e:	b2db      	uxtb	r3, r3
 8001040:	461a      	mov	r2, r3
 8001042:	2102      	movs	r1, #2
 8001044:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001048:	f003 f99a 	bl	8004380 <HAL_GPIO_WritePin>
        TIM1->CCR4 = duty_adj*TIM1->ARR;
 800104c:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <runMotors+0x160>)
 800104e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa7f 	bl	8000554 <__aeabi_ui2d>
 8001056:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800105a:	f7ff faf5 	bl	8000648 <__aeabi_dmul>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4c09      	ldr	r4, [pc, #36]	@ (8001088 <runMotors+0x160>)
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fdc6 	bl	8000bf8 <__aeabi_d2uiz>
 800106c:	4603      	mov	r3, r0
 800106e:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8001070:	bf00      	nop
 8001072:	3784      	adds	r7, #132	@ 0x84
 8001074:	46bd      	mov	sp, r7
 8001076:	bd90      	pop	{r4, r7, pc}
 8001078:	9999999a 	.word	0x9999999a
 800107c:	3fe99999 	.word	0x3fe99999
 8001080:	408f4000 	.word	0x408f4000
 8001084:	3ff00000 	.word	0x3ff00000
 8001088:	40012c00 	.word	0x40012c00

0800108c <selectMuxAddr>:
	} else {
		GPIOA->ODR &= ~bitMask;
	}
}

uint8_t selectMuxAddr(uint8_t sensor) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b0a0      	sub	sp, #128	@ 0x80
 8001090:	af02      	add	r7, sp, #8
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  char b [100];

  if (sensor > 7) {
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b07      	cmp	r3, #7
 800109a:	d914      	bls.n	80010c6 <selectMuxAddr+0x3a>
 		sprintf(b, "sensor index %d out of bounds\r\n", sensor);
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	4923      	ldr	r1, [pc, #140]	@ (8001130 <selectMuxAddr+0xa4>)
 80010a4:	4618      	mov	r0, r3
 80010a6:	f007 ffb1 	bl	800900c <siprintf>
 		HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 80010aa:	f107 0310 	add.w	r3, r7, #16
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f906 	bl	80002c0 <strlen>
 80010b4:	4603      	mov	r3, r0
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	f107 0110 	add.w	r1, r7, #16
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
 80010c0:	481c      	ldr	r0, [pc, #112]	@ (8001134 <selectMuxAddr+0xa8>)
 80010c2:	f006 fc0d 	bl	80078e0 <HAL_UART_Transmit>
  }

  uint8_t data[1] = {1 << sensor};
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2201      	movs	r2, #1
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	733b      	strb	r3, [r7, #12]

  ret = HAL_I2C_Master_Transmit(&hi2c1, MUX_ADDR, data, 1, HAL_MAX_DELAY);
 80010d2:	f107 020c 	add.w	r2, r7, #12
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2301      	movs	r3, #1
 80010de:	21e0      	movs	r1, #224	@ 0xe0
 80010e0:	4815      	ldr	r0, [pc, #84]	@ (8001138 <selectMuxAddr+0xac>)
 80010e2:	f003 fa01 	bl	80044e8 <HAL_I2C_Master_Transmit>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  if ( ret != HAL_OK ) {
 80010ec:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d017      	beq.n	8001124 <selectMuxAddr+0x98>
 		sprintf(b, "failed to connect to sensor %d - error code %d\r\n", sensor, ret);
 80010f4:	79fa      	ldrb	r2, [r7, #7]
 80010f6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80010fa:	f107 0010 	add.w	r0, r7, #16
 80010fe:	490f      	ldr	r1, [pc, #60]	@ (800113c <selectMuxAddr+0xb0>)
 8001100:	f007 ff84 	bl	800900c <siprintf>
 		HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f8d9 	bl	80002c0 <strlen>
 800110e:	4603      	mov	r3, r0
 8001110:	b29a      	uxth	r2, r3
 8001112:	f107 0110 	add.w	r1, r7, #16
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	4806      	ldr	r0, [pc, #24]	@ (8001134 <selectMuxAddr+0xa8>)
 800111c:	f006 fbe0 	bl	80078e0 <HAL_UART_Transmit>
 		return 0;
 8001120:	2300      	movs	r3, #0
 8001122:	e000      	b.n	8001126 <selectMuxAddr+0x9a>
 	} else {
// 		sprintf(b, "connected to sensor %d\r\n", sensor);
// 		HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 		return 1;
 8001124:	2301      	movs	r3, #1
 	}
}
 8001126:	4618      	mov	r0, r3
 8001128:	3778      	adds	r7, #120	@ 0x78
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	0800b750 	.word	0x0800b750
 8001134:	20000394 	.word	0x20000394
 8001138:	2000025c 	.word	0x2000025c
 800113c:	0800b770 	.word	0x0800b770

08001140 <readSensor>:

uint16_t readSensor(uint8_t sensor) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b0a2      	sub	sp, #136	@ 0x88
 8001144:	af04      	add	r7, sp, #16
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
	if (!selectMuxAddr(sensor)) {
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff9d 	bl	800108c <selectMuxAddr>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <readSensor+0x1c>
		return 0;
 8001158:	2300      	movs	r3, #0
 800115a:	e04d      	b.n	80011f8 <readSensor+0xb8>
  HAL_StatusTypeDef ret;
  uint8_t buf16[2];
  char out [100];
  uint16_t val;

	for (int i = 0; i < 3; i++) {
 800115c:	2300      	movs	r3, #0
 800115e:	677b      	str	r3, [r7, #116]	@ 0x74
 8001160:	e043      	b.n	80011ea <readSensor+0xaa>
    ret = HAL_I2C_Mem_Read(&hi2c1, TCS_ADDR, SENSOR_REGS[i], I2C_MEMADD_SIZE_8BIT, buf16, 2, HAL_MAX_DELAY);
 8001162:	4a27      	ldr	r2, [pc, #156]	@ (8001200 <readSensor+0xc0>)
 8001164:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001166:	4413      	add	r3, r2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
 8001170:	9302      	str	r3, [sp, #8]
 8001172:	2302      	movs	r3, #2
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	2301      	movs	r3, #1
 800117e:	2152      	movs	r1, #82	@ 0x52
 8001180:	4820      	ldr	r0, [pc, #128]	@ (8001204 <readSensor+0xc4>)
 8001182:	f003 fbdd 	bl	8004940 <HAL_I2C_Mem_Read>
 8001186:	4603      	mov	r3, r0
 8001188:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

    if ( ret != HAL_OK ) {
 800118c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001190:	2b00      	cmp	r3, #0
 8001192:	d016      	beq.n	80011c2 <readSensor+0x82>
   		sprintf(out, "sensor read %d failed with error code %d\r\n", sensor, ret);
 8001194:	79fa      	ldrb	r2, [r7, #7]
 8001196:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800119a:	f107 0008 	add.w	r0, r7, #8
 800119e:	491a      	ldr	r1, [pc, #104]	@ (8001208 <readSensor+0xc8>)
 80011a0:	f007 ff34 	bl	800900c <siprintf>
   		HAL_UART_Transmit(&huart2, (uint8_t*)out, strlen(out), HAL_MAX_DELAY);
 80011a4:	f107 0308 	add.w	r3, r7, #8
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f889 	bl	80002c0 <strlen>
 80011ae:	4603      	mov	r3, r0
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	f107 0108 	add.w	r1, r7, #8
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	4814      	ldr	r0, [pc, #80]	@ (800120c <readSensor+0xcc>)
 80011bc:	f006 fb90 	bl	80078e0 <HAL_UART_Transmit>
 80011c0:	e010      	b.n	80011e4 <readSensor+0xa4>
   	} else {
      val = buf16[1] << 8 | buf16[0];
 80011c2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70

//   		sprintf(b, "%d %d %d\r\n", buf16[1], buf16[0], val);
//   		HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

   		rgb[i] = val;
 80011d8:	490d      	ldr	r1, [pc, #52]	@ (8001210 <readSensor+0xd0>)
 80011da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011dc:	f8b7 2070 	ldrh.w	r2, [r7, #112]	@ 0x70
 80011e0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < 3; i++) {
 80011e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011e6:	3301      	adds	r3, #1
 80011e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80011ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	ddb8      	ble.n	8001162 <readSensor+0x22>
   	}
	}

	return getRGB(R);
 80011f0:	2000      	movs	r0, #0
 80011f2:	f000 f80f 	bl	8001214 <getRGB>
 80011f6:	4603      	mov	r3, r0

}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3778      	adds	r7, #120	@ 0x78
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	0800b8b4 	.word	0x0800b8b4
 8001204:	2000025c 	.word	0x2000025c
 8001208:	0800b7a4 	.word	0x0800b7a4
 800120c:	20000394 	.word	0x20000394
 8001210:	20000428 	.word	0x20000428

08001214 <getRGB>:

uint16_t getRGB(uint8_t colour) {
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
	uint16_t r = rgb[0];
 800121e:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <getRGB+0x54>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	81fb      	strh	r3, [r7, #14]
	uint16_t g = rgb[1];
 8001224:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <getRGB+0x54>)
 8001226:	885b      	ldrh	r3, [r3, #2]
 8001228:	81bb      	strh	r3, [r7, #12]
	uint16_t b = rgb[2];
 800122a:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <getRGB+0x54>)
 800122c:	889b      	ldrh	r3, [r3, #4]
 800122e:	817b      	strh	r3, [r7, #10]

	uint16_t val2 = rgb[colour]*1000 / (r + g + b) * 3;
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	4a0d      	ldr	r2, [pc, #52]	@ (8001268 <getRGB+0x54>)
 8001234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001238:	461a      	mov	r2, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123e:	fb03 f202 	mul.w	r2, r3, r2
 8001242:	89f9      	ldrh	r1, [r7, #14]
 8001244:	89bb      	ldrh	r3, [r7, #12]
 8001246:	4419      	add	r1, r3
 8001248:	897b      	ldrh	r3, [r7, #10]
 800124a:	440b      	add	r3, r1
 800124c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001250:	b29b      	uxth	r3, r3
 8001252:	461a      	mov	r2, r3
 8001254:	0052      	lsls	r2, r2, #1
 8001256:	4413      	add	r3, r2
 8001258:	813b      	strh	r3, [r7, #8]

//	sprintf(out, "sensor %d  r %d g %d b %d scaled %d\r\n", sensor, r, g, b, val2);
//	HAL_UART_Transmit(&huart2, (uint8_t*)out, strlen(out), HAL_MAX_DELAY);

	return val2;
 800125a:	893b      	ldrh	r3, [r7, #8]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	20000428 	.word	0x20000428

0800126c <initSensors>:

void initSensors() {
 800126c:	b580      	push	{r7, lr}
 800126e:	b0a0      	sub	sp, #128	@ 0x80
 8001270:	af04      	add	r7, sp, #16
  uint8_t int_time;
  uint8_t gain;
  uint8_t enable;
  char b [100];

  int_time = 0xFF;
 8001272:	23ff      	movs	r3, #255	@ 0xff
 8001274:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
  gain = 0x03;
 8001278:	2303      	movs	r3, #3
 800127a:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
  enable = 0x01;
 800127e:	2301      	movs	r3, #1
 8001280:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

	for (int i = 0; i < sizeof(SENSORS)/sizeof(SENSORS[0]); i++) {
 8001284:	2300      	movs	r3, #0
 8001286:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001288:	e0c4      	b.n	8001414 <initSensors+0x1a8>
		if (!selectMuxAddr(SENSORS[i])) {
 800128a:	4a66      	ldr	r2, [pc, #408]	@ (8001424 <initSensors+0x1b8>)
 800128c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800128e:	4413      	add	r3, r2
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fefa 	bl	800108c <selectMuxAddr>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 80b6 	beq.w	800140c <initSensors+0x1a0>
				continue;
		}

		// Write integration time
	  ret = HAL_I2C_Mem_Write(&hi2c1, TCS_ADDR, INT_REG, I2C_MEMADD_SIZE_8BIT, &int_time, 1, HAL_MAX_DELAY);
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
 80012a4:	9302      	str	r3, [sp, #8]
 80012a6:	2301      	movs	r3, #1
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	f107 036a 	add.w	r3, r7, #106	@ 0x6a
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2301      	movs	r3, #1
 80012b2:	2281      	movs	r2, #129	@ 0x81
 80012b4:	2152      	movs	r1, #82	@ 0x52
 80012b6:	485c      	ldr	r0, [pc, #368]	@ (8001428 <initSensors+0x1bc>)
 80012b8:	f003 fa2e 	bl	8004718 <HAL_I2C_Mem_Write>
 80012bc:	4603      	mov	r3, r0
 80012be:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

	  if ( ret != HAL_OK ) {
 80012c2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d013      	beq.n	80012f2 <initSensors+0x86>
			sprintf(b, "fail 1 %d\r\n", ret);
 80012ca:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4956      	ldr	r1, [pc, #344]	@ (800142c <initSensors+0x1c0>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f007 fe9a 	bl	800900c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	4618      	mov	r0, r3
 80012dc:	f7fe fff0 	bl	80002c0 <strlen>
 80012e0:	4603      	mov	r3, r0
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	1d39      	adds	r1, r7, #4
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	4851      	ldr	r0, [pc, #324]	@ (8001430 <initSensors+0x1c4>)
 80012ec:	f006 faf8 	bl	80078e0 <HAL_UART_Transmit>
			return;
 80012f0:	e094      	b.n	800141c <initSensors+0x1b0>
		}

	  ret = HAL_I2C_Mem_Write(&hi2c1, TCS_ADDR, GAIN_REG, I2C_MEMADD_SIZE_8BIT, &gain, 1, HAL_MAX_DELAY);
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	2301      	movs	r3, #1
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	f107 0369 	add.w	r3, r7, #105	@ 0x69
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2301      	movs	r3, #1
 8001304:	228f      	movs	r2, #143	@ 0x8f
 8001306:	2152      	movs	r1, #82	@ 0x52
 8001308:	4847      	ldr	r0, [pc, #284]	@ (8001428 <initSensors+0x1bc>)
 800130a:	f003 fa05 	bl	8004718 <HAL_I2C_Mem_Write>
 800130e:	4603      	mov	r3, r0
 8001310:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

	  if ( ret != HAL_OK ) {
 8001314:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001318:	2b00      	cmp	r3, #0
 800131a:	d013      	beq.n	8001344 <initSensors+0xd8>
			sprintf(b, "fail 2 %d\r\n", ret);
 800131c:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	4944      	ldr	r1, [pc, #272]	@ (8001434 <initSensors+0x1c8>)
 8001324:	4618      	mov	r0, r3
 8001326:	f007 fe71 	bl	800900c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	4618      	mov	r0, r3
 800132e:	f7fe ffc7 	bl	80002c0 <strlen>
 8001332:	4603      	mov	r3, r0
 8001334:	b29a      	uxth	r2, r3
 8001336:	1d39      	adds	r1, r7, #4
 8001338:	f04f 33ff 	mov.w	r3, #4294967295
 800133c:	483c      	ldr	r0, [pc, #240]	@ (8001430 <initSensors+0x1c4>)
 800133e:	f006 facf 	bl	80078e0 <HAL_UART_Transmit>
			return;
 8001342:	e06b      	b.n	800141c <initSensors+0x1b0>
		}

	  HAL_Delay(3);
 8001344:	2003      	movs	r0, #3
 8001346:	f001 fe49 	bl	8002fdc <HAL_Delay>

	  ret = HAL_I2C_Mem_Write(&hi2c1, TCS_ADDR, EN_REG, I2C_MEMADD_SIZE_8BIT, &enable, 1, HAL_MAX_DELAY);
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	9302      	str	r3, [sp, #8]
 8001350:	2301      	movs	r3, #1
 8001352:	9301      	str	r3, [sp, #4]
 8001354:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2301      	movs	r3, #1
 800135c:	2280      	movs	r2, #128	@ 0x80
 800135e:	2152      	movs	r1, #82	@ 0x52
 8001360:	4831      	ldr	r0, [pc, #196]	@ (8001428 <initSensors+0x1bc>)
 8001362:	f003 f9d9 	bl	8004718 <HAL_I2C_Mem_Write>
 8001366:	4603      	mov	r3, r0
 8001368:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

	  if ( ret != HAL_OK ) {
 800136c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001370:	2b00      	cmp	r3, #0
 8001372:	d013      	beq.n	800139c <initSensors+0x130>
			sprintf(b, "fail 1 %d\r\n", ret);
 8001374:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	492c      	ldr	r1, [pc, #176]	@ (800142c <initSensors+0x1c0>)
 800137c:	4618      	mov	r0, r3
 800137e:	f007 fe45 	bl	800900c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	4618      	mov	r0, r3
 8001386:	f7fe ff9b 	bl	80002c0 <strlen>
 800138a:	4603      	mov	r3, r0
 800138c:	b29a      	uxth	r2, r3
 800138e:	1d39      	adds	r1, r7, #4
 8001390:	f04f 33ff 	mov.w	r3, #4294967295
 8001394:	4826      	ldr	r0, [pc, #152]	@ (8001430 <initSensors+0x1c4>)
 8001396:	f006 faa3 	bl	80078e0 <HAL_UART_Transmit>
			return;
 800139a:	e03f      	b.n	800141c <initSensors+0x1b0>
		}

	  enable |= 0x02;
 800139c:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

	  HAL_Delay(3);
 80013aa:	2003      	movs	r0, #3
 80013ac:	f001 fe16 	bl	8002fdc <HAL_Delay>

	  ret = HAL_I2C_Mem_Write(&hi2c1, TCS_ADDR, EN_REG, I2C_MEMADD_SIZE_8BIT, &enable, 1, HAL_MAX_DELAY);
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
 80013b4:	9302      	str	r3, [sp, #8]
 80013b6:	2301      	movs	r3, #1
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2301      	movs	r3, #1
 80013c2:	2280      	movs	r2, #128	@ 0x80
 80013c4:	2152      	movs	r1, #82	@ 0x52
 80013c6:	4818      	ldr	r0, [pc, #96]	@ (8001428 <initSensors+0x1bc>)
 80013c8:	f003 f9a6 	bl	8004718 <HAL_I2C_Mem_Write>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

	  if ( ret != HAL_OK ) {
 80013d2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d013      	beq.n	8001402 <initSensors+0x196>
			sprintf(b, "fail 1 %d\r\n", ret);
 80013da:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	4912      	ldr	r1, [pc, #72]	@ (800142c <initSensors+0x1c0>)
 80013e2:	4618      	mov	r0, r3
 80013e4:	f007 fe12 	bl	800900c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7fe ff68 	bl	80002c0 <strlen>
 80013f0:	4603      	mov	r3, r0
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	1d39      	adds	r1, r7, #4
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	480d      	ldr	r0, [pc, #52]	@ (8001430 <initSensors+0x1c4>)
 80013fc:	f006 fa70 	bl	80078e0 <HAL_UART_Transmit>
			return;
 8001400:	e00c      	b.n	800141c <initSensors+0x1b0>
		}

	  HAL_Delay(300);
 8001402:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001406:	f001 fde9 	bl	8002fdc <HAL_Delay>
 800140a:	e000      	b.n	800140e <initSensors+0x1a2>
				continue;
 800140c:	bf00      	nop
	for (int i = 0; i < sizeof(SENSORS)/sizeof(SENSORS[0]); i++) {
 800140e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001410:	3301      	adds	r3, #1
 8001412:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001416:	2b03      	cmp	r3, #3
 8001418:	f67f af37 	bls.w	800128a <initSensors+0x1e>

	}
}
 800141c:	3770      	adds	r7, #112	@ 0x70
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	0800b8b8 	.word	0x0800b8b8
 8001428:	2000025c 	.word	0x2000025c
 800142c:	0800b7d0 	.word	0x0800b7d0
 8001430:	20000394 	.word	0x20000394
 8001434:	0800b7dc 	.word	0x0800b7dc

08001438 <initIMU>:

void initIMU() {
 8001438:	b580      	push	{r7, lr}
 800143a:	b09e      	sub	sp, #120	@ 0x78
 800143c:	af04      	add	r7, sp, #16
  HAL_Delay(500);
 800143e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001442:	f001 fdcb 	bl	8002fdc <HAL_Delay>

	HAL_StatusTypeDef ret;
	uint8_t buf8;
	char out [100];

	if (!selectMuxAddr(6)) return;
 8001446:	2006      	movs	r0, #6
 8001448:	f7ff fe20 	bl	800108c <selectMuxAddr>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 80c4 	beq.w	80015dc <initIMU+0x1a4>

	// write bypass
	buf8 = 1 << 1;
 8001454:	2302      	movs	r3, #2
 8001456:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  ret = HAL_I2C_Mem_Write(&hi2c1, ICM_ADDR, 0x0F, I2C_MEMADD_SIZE_8BIT, &buf8, 1, HAL_MAX_DELAY);
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	9302      	str	r3, [sp, #8]
 8001460:	2301      	movs	r3, #1
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	f107 0366 	add.w	r3, r7, #102	@ 0x66
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2301      	movs	r3, #1
 800146c:	220f      	movs	r2, #15
 800146e:	21d2      	movs	r1, #210	@ 0xd2
 8001470:	485c      	ldr	r0, [pc, #368]	@ (80015e4 <initIMU+0x1ac>)
 8001472:	f003 f951 	bl	8004718 <HAL_I2C_Mem_Write>
 8001476:	4603      	mov	r3, r0
 8001478:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  if ( ret != HAL_OK ) {
 800147c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001480:	2b00      	cmp	r3, #0
 8001482:	d013      	beq.n	80014ac <initIMU+0x74>
  	sprintf(out, "fail %d\r\n", ret);
 8001484:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001488:	463b      	mov	r3, r7
 800148a:	4957      	ldr	r1, [pc, #348]	@ (80015e8 <initIMU+0x1b0>)
 800148c:	4618      	mov	r0, r3
 800148e:	f007 fdbd 	bl	800900c <siprintf>
  	HAL_UART_Transmit(&huart2, (uint8_t*)out, strlen(out), HAL_MAX_DELAY);
 8001492:	463b      	mov	r3, r7
 8001494:	4618      	mov	r0, r3
 8001496:	f7fe ff13 	bl	80002c0 <strlen>
 800149a:	4603      	mov	r3, r0
 800149c:	b29a      	uxth	r2, r3
 800149e:	4639      	mov	r1, r7
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
 80014a4:	4851      	ldr	r0, [pc, #324]	@ (80015ec <initIMU+0x1b4>)
 80014a6:	f006 fa1b 	bl	80078e0 <HAL_UART_Transmit>
  	return;
 80014aa:	e098      	b.n	80015de <initIMU+0x1a6>
  } else {
  	sprintf(out, "success %d\r\n", buf8);
 80014ac:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80014b0:	461a      	mov	r2, r3
 80014b2:	463b      	mov	r3, r7
 80014b4:	494e      	ldr	r1, [pc, #312]	@ (80015f0 <initIMU+0x1b8>)
 80014b6:	4618      	mov	r0, r3
 80014b8:	f007 fda8 	bl	800900c <siprintf>
  	HAL_UART_Transmit(&huart2, (uint8_t*)out, strlen(out), HAL_MAX_DELAY);
 80014bc:	463b      	mov	r3, r7
 80014be:	4618      	mov	r0, r3
 80014c0:	f7fe fefe 	bl	80002c0 <strlen>
 80014c4:	4603      	mov	r3, r0
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4639      	mov	r1, r7
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
 80014ce:	4847      	ldr	r0, [pc, #284]	@ (80015ec <initIMU+0x1b4>)
 80014d0:	f006 fa06 	bl	80078e0 <HAL_UART_Transmit>
  }

	// write sleep
	buf8 = 0x01;
 80014d4:	2301      	movs	r3, #1
 80014d6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  ret = HAL_I2C_Mem_Write(&hi2c1, ICM_ADDR, 0x06, I2C_MEMADD_SIZE_8BIT, &buf8, 1, HAL_MAX_DELAY);
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	9302      	str	r3, [sp, #8]
 80014e0:	2301      	movs	r3, #1
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	f107 0366 	add.w	r3, r7, #102	@ 0x66
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	2301      	movs	r3, #1
 80014ec:	2206      	movs	r2, #6
 80014ee:	21d2      	movs	r1, #210	@ 0xd2
 80014f0:	483c      	ldr	r0, [pc, #240]	@ (80015e4 <initIMU+0x1ac>)
 80014f2:	f003 f911 	bl	8004718 <HAL_I2C_Mem_Write>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  if ( ret != HAL_OK ) {
 80014fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001500:	2b00      	cmp	r3, #0
 8001502:	d013      	beq.n	800152c <initIMU+0xf4>
  	sprintf(out, "fail %d\r\n", ret);
 8001504:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001508:	463b      	mov	r3, r7
 800150a:	4937      	ldr	r1, [pc, #220]	@ (80015e8 <initIMU+0x1b0>)
 800150c:	4618      	mov	r0, r3
 800150e:	f007 fd7d 	bl	800900c <siprintf>
  	HAL_UART_Transmit(&huart2, (uint8_t*)out, strlen(out), HAL_MAX_DELAY);
 8001512:	463b      	mov	r3, r7
 8001514:	4618      	mov	r0, r3
 8001516:	f7fe fed3 	bl	80002c0 <strlen>
 800151a:	4603      	mov	r3, r0
 800151c:	b29a      	uxth	r2, r3
 800151e:	4639      	mov	r1, r7
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
 8001524:	4831      	ldr	r0, [pc, #196]	@ (80015ec <initIMU+0x1b4>)
 8001526:	f006 f9db 	bl	80078e0 <HAL_UART_Transmit>
  	return;
 800152a:	e058      	b.n	80015de <initIMU+0x1a6>
  } else {
  	sprintf(out, "success %d\r\n", buf8);
 800152c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001530:	461a      	mov	r2, r3
 8001532:	463b      	mov	r3, r7
 8001534:	492e      	ldr	r1, [pc, #184]	@ (80015f0 <initIMU+0x1b8>)
 8001536:	4618      	mov	r0, r3
 8001538:	f007 fd68 	bl	800900c <siprintf>
  	HAL_UART_Transmit(&huart2, (uint8_t*)out, strlen(out), HAL_MAX_DELAY);
 800153c:	463b      	mov	r3, r7
 800153e:	4618      	mov	r0, r3
 8001540:	f7fe febe 	bl	80002c0 <strlen>
 8001544:	4603      	mov	r3, r0
 8001546:	b29a      	uxth	r2, r3
 8001548:	4639      	mov	r1, r7
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	4827      	ldr	r0, [pc, #156]	@ (80015ec <initIMU+0x1b4>)
 8001550:	f006 f9c6 	bl	80078e0 <HAL_UART_Transmit>
  }

  HAL_Delay(10);
 8001554:	200a      	movs	r0, #10
 8001556:	f001 fd41 	bl	8002fdc <HAL_Delay>

  // enable magnetometer at 100 Hz
  buf8 = 0b01000;
 800155a:	2308      	movs	r3, #8
 800155c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  ret = HAL_I2C_Mem_Write(&hi2c1, MAG_ADDR, 0x31, I2C_MEMADD_SIZE_8BIT, &buf8, 1, HAL_MAX_DELAY);
 8001560:	f04f 33ff 	mov.w	r3, #4294967295
 8001564:	9302      	str	r3, [sp, #8]
 8001566:	2301      	movs	r3, #1
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	f107 0366 	add.w	r3, r7, #102	@ 0x66
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2301      	movs	r3, #1
 8001572:	2231      	movs	r2, #49	@ 0x31
 8001574:	2118      	movs	r1, #24
 8001576:	481b      	ldr	r0, [pc, #108]	@ (80015e4 <initIMU+0x1ac>)
 8001578:	f003 f8ce 	bl	8004718 <HAL_I2C_Mem_Write>
 800157c:	4603      	mov	r3, r0
 800157e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  if ( ret != HAL_OK ) {
 8001582:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001586:	2b00      	cmp	r3, #0
 8001588:	d013      	beq.n	80015b2 <initIMU+0x17a>
  	sprintf(out, "fail %d\r\n", ret);
 800158a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800158e:	463b      	mov	r3, r7
 8001590:	4915      	ldr	r1, [pc, #84]	@ (80015e8 <initIMU+0x1b0>)
 8001592:	4618      	mov	r0, r3
 8001594:	f007 fd3a 	bl	800900c <siprintf>
  	HAL_UART_Transmit(&huart2, (uint8_t*)out, strlen(out), HAL_MAX_DELAY);
 8001598:	463b      	mov	r3, r7
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe fe90 	bl	80002c0 <strlen>
 80015a0:	4603      	mov	r3, r0
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	4639      	mov	r1, r7
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	4810      	ldr	r0, [pc, #64]	@ (80015ec <initIMU+0x1b4>)
 80015ac:	f006 f998 	bl	80078e0 <HAL_UART_Transmit>
  	return;
 80015b0:	e015      	b.n	80015de <initIMU+0x1a6>
  } else {
  	sprintf(out, "success %d\r\n", buf8);
 80015b2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80015b6:	461a      	mov	r2, r3
 80015b8:	463b      	mov	r3, r7
 80015ba:	490d      	ldr	r1, [pc, #52]	@ (80015f0 <initIMU+0x1b8>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f007 fd25 	bl	800900c <siprintf>
  	HAL_UART_Transmit(&huart2, (uint8_t*)out, strlen(out), HAL_MAX_DELAY);
 80015c2:	463b      	mov	r3, r7
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe fe7b 	bl	80002c0 <strlen>
 80015ca:	4603      	mov	r3, r0
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	4639      	mov	r1, r7
 80015d0:	f04f 33ff 	mov.w	r3, #4294967295
 80015d4:	4805      	ldr	r0, [pc, #20]	@ (80015ec <initIMU+0x1b4>)
 80015d6:	f006 f983 	bl	80078e0 <HAL_UART_Transmit>
 80015da:	e000      	b.n	80015de <initIMU+0x1a6>
	if (!selectMuxAddr(6)) return;
 80015dc:	bf00      	nop
  }

}
 80015de:	3768      	adds	r7, #104	@ 0x68
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	2000025c 	.word	0x2000025c
 80015e8:	0800b7e8 	.word	0x0800b7e8
 80015ec:	20000394 	.word	0x20000394
 80015f0:	0800b7f4 	.word	0x0800b7f4

080015f4 <readIMURaw>:

void readIMURaw(int16_t* x, int16_t* y, int16_t* z) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b0a4      	sub	sp, #144	@ 0x90
 80015f8:	af04      	add	r7, sp, #16
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
	if (!selectMuxAddr(6)) return;
 8001600:	2006      	movs	r0, #6
 8001602:	f7ff fd43 	bl	800108c <selectMuxAddr>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d078      	beq.n	80016fe <readIMURaw+0x10a>
	uint8_t data[6];
	char out [100];
	uint8_t buf8;

	// read magnetometer
  ret = HAL_I2C_Mem_Read(&hi2c1, MAG_ADDR, 0x11, I2C_MEMADD_SIZE_8BIT, data, 6, HAL_MAX_DELAY);
 800160c:	f04f 33ff 	mov.w	r3, #4294967295
 8001610:	9302      	str	r3, [sp, #8]
 8001612:	2306      	movs	r3, #6
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2301      	movs	r3, #1
 800161e:	2211      	movs	r2, #17
 8001620:	2118      	movs	r1, #24
 8001622:	4839      	ldr	r0, [pc, #228]	@ (8001708 <readIMURaw+0x114>)
 8001624:	f003 f98c 	bl	8004940 <HAL_I2C_Mem_Read>
 8001628:	4603      	mov	r3, r0
 800162a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

  if ( ret != HAL_OK ) {
 800162e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001632:	2b00      	cmp	r3, #0
 8001634:	d016      	beq.n	8001664 <readIMURaw+0x70>
  	sprintf(out, "IMU read failed fail %d\r\n", ret);
 8001636:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4933      	ldr	r1, [pc, #204]	@ (800170c <readIMURaw+0x118>)
 8001640:	4618      	mov	r0, r3
 8001642:	f007 fce3 	bl	800900c <siprintf>
  	HAL_UART_Transmit(&huart2, (uint8_t*)out, strlen(out), HAL_MAX_DELAY);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe fe38 	bl	80002c0 <strlen>
 8001650:	4603      	mov	r3, r0
 8001652:	b29a      	uxth	r2, r3
 8001654:	f107 0114 	add.w	r1, r7, #20
 8001658:	f04f 33ff 	mov.w	r3, #4294967295
 800165c:	482c      	ldr	r0, [pc, #176]	@ (8001710 <readIMURaw+0x11c>)
 800165e:	f006 f93f 	bl	80078e0 <HAL_UART_Transmit>
 8001662:	e020      	b.n	80016a6 <readIMURaw+0xb2>
  } else {
//    	sprintf(out, "x %d %d y %d %d z %d %d\r\n", data[1], data[0], data[3], data[2], data[5], data[4]);
//    	HAL_UART_Transmit(&huart2, (uint8_t*)out, strlen(out), HAL_MAX_DELAY);

  	*x = data[1] << 8 | data[0];
 8001664:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	b21a      	sxth	r2, r3
 800166c:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8001670:	b21b      	sxth	r3, r3
 8001672:	4313      	orrs	r3, r2
 8001674:	b21a      	sxth	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	801a      	strh	r2, [r3, #0]
  	*y = data[3] << 8 | data[2];
 800167a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800167e:	021b      	lsls	r3, r3, #8
 8001680:	b21a      	sxth	r2, r3
 8001682:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8001686:	b21b      	sxth	r3, r3
 8001688:	4313      	orrs	r3, r2
 800168a:	b21a      	sxth	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	801a      	strh	r2, [r3, #0]
  	*z = data[5] << 8 | data[4];
 8001690:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001694:	021b      	lsls	r3, r3, #8
 8001696:	b21a      	sxth	r2, r3
 8001698:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800169c:	b21b      	sxth	r3, r3
 800169e:	4313      	orrs	r3, r2
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	801a      	strh	r2, [r3, #0]
//  	HAL_UART_Transmit(&huart2, (uint8_t*)out, strlen(out), HAL_MAX_DELAY);
  }


  // have to read this register afterwards to clear data ready bit
  ret = HAL_I2C_Mem_Read(&hi2c1, MAG_ADDR, 0x18, I2C_MEMADD_SIZE_8BIT, &buf8, 1, HAL_MAX_DELAY);
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	9302      	str	r3, [sp, #8]
 80016ac:	2301      	movs	r3, #1
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	f107 0313 	add.w	r3, r7, #19
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	2301      	movs	r3, #1
 80016b8:	2218      	movs	r2, #24
 80016ba:	2118      	movs	r1, #24
 80016bc:	4812      	ldr	r0, [pc, #72]	@ (8001708 <readIMURaw+0x114>)
 80016be:	f003 f93f 	bl	8004940 <HAL_I2C_Mem_Read>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  if ( ret != HAL_OK ) {
 80016c8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d017      	beq.n	8001700 <readIMURaw+0x10c>
  	sprintf(out, "IMU read clear failed %d\r\n", ret);
 80016d0:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	490e      	ldr	r1, [pc, #56]	@ (8001714 <readIMURaw+0x120>)
 80016da:	4618      	mov	r0, r3
 80016dc:	f007 fc96 	bl	800900c <siprintf>
  	HAL_UART_Transmit(&huart2, (uint8_t*)out, strlen(out), HAL_MAX_DELAY);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fdeb 	bl	80002c0 <strlen>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	f107 0114 	add.w	r1, r7, #20
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	4806      	ldr	r0, [pc, #24]	@ (8001710 <readIMURaw+0x11c>)
 80016f8:	f006 f8f2 	bl	80078e0 <HAL_UART_Transmit>
 80016fc:	e000      	b.n	8001700 <readIMURaw+0x10c>
	if (!selectMuxAddr(6)) return;
 80016fe:	bf00      	nop
  } else {
//    	sprintf(out, "success %d %d\r\n", buf16[1], buf16[0]);
//    	HAL_UART_Transmit(&huart2, (uint8_t*)out, strlen(out), HAL_MAX_DELAY);
  }
}
 8001700:	3780      	adds	r7, #128	@ 0x80
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2000025c 	.word	0x2000025c
 800170c:	0800b804 	.word	0x0800b804
 8001710:	20000394 	.word	0x20000394
 8001714:	0800b820 	.word	0x0800b820

08001718 <getAngle>:

double getAngle(double theta0) {
 8001718:	b5b0      	push	{r4, r5, r7, lr}
 800171a:	b0a2      	sub	sp, #136	@ 0x88
 800171c:	af00      	add	r7, sp, #0
 800171e:	ed87 0b00 	vstr	d0, [r7]
	int16_t x;
	int16_t y;
	int16_t z;
	char out [100];

	readIMURaw(&x, &y, &z);
 8001722:	f107 0272 	add.w	r2, r7, #114	@ 0x72
 8001726:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 800172a:	f107 0376 	add.w	r3, r7, #118	@ 0x76
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff60 	bl	80015f4 <readIMURaw>

	double theta = atan2(z+295, y+33);
 8001734:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	@ 0x72
 8001738:	f203 1327 	addw	r3, r3, #295	@ 0x127
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe ff19 	bl	8000574 <__aeabi_i2d>
 8001742:	4604      	mov	r4, r0
 8001744:	460d      	mov	r5, r1
 8001746:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
 800174a:	3321      	adds	r3, #33	@ 0x21
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe ff11 	bl	8000574 <__aeabi_i2d>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	ec43 2b11 	vmov	d1, r2, r3
 800175a:	ec45 4b10 	vmov	d0, r4, r5
 800175e:	f009 fd81 	bl	800b264 <atan2>
 8001762:	ed87 0b20 	vstr	d0, [r7, #128]	@ 0x80
	theta = theta * 360 / (2 * M_PI);
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	4b37      	ldr	r3, [pc, #220]	@ (8001848 <getAngle+0x130>)
 800176c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001770:	f7fe ff6a 	bl	8000648 <__aeabi_dmul>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	a330      	add	r3, pc, #192	@ (adr r3, 8001840 <getAngle+0x128>)
 800177e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001782:	f7ff f88b 	bl	800089c <__aeabi_ddiv>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	if (theta < 0) {
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800179a:	f7ff f9c7 	bl	8000b2c <__aeabi_dcmplt>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00a      	beq.n	80017ba <getAngle+0xa2>
		theta += 360;
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	4b27      	ldr	r3, [pc, #156]	@ (8001848 <getAngle+0x130>)
 80017aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80017ae:	f7fe fd95 	bl	80002dc <__adddf3>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	}

	double output = theta - theta0;
 80017ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80017c2:	f7fe fd89 	bl	80002d8 <__aeabi_dsub>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78

	if (output < 0) {
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80017da:	f7ff f9a7 	bl	8000b2c <__aeabi_dcmplt>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00a      	beq.n	80017fa <getAngle+0xe2>
		output += 360;
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	4b17      	ldr	r3, [pc, #92]	@ (8001848 <getAngle+0x130>)
 80017ea:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80017ee:	f7fe fd75 	bl	80002dc <__adddf3>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	}

	sprintf(out, "angle %f\r\n", output);
 80017fa:	f107 000c 	add.w	r0, r7, #12
 80017fe:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001802:	4912      	ldr	r1, [pc, #72]	@ (800184c <getAngle+0x134>)
 8001804:	f007 fc02 	bl	800900c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)out, strlen(out), HAL_MAX_DELAY);
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fd57 	bl	80002c0 <strlen>
 8001812:	4603      	mov	r3, r0
 8001814:	b29a      	uxth	r2, r3
 8001816:	f107 010c 	add.w	r1, r7, #12
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
 800181e:	480c      	ldr	r0, [pc, #48]	@ (8001850 <getAngle+0x138>)
 8001820:	f006 f85e 	bl	80078e0 <HAL_UART_Transmit>

	return output;
 8001824:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001828:	ec43 2b17 	vmov	d7, r2, r3
}
 800182c:	eeb0 0a47 	vmov.f32	s0, s14
 8001830:	eef0 0a67 	vmov.f32	s1, s15
 8001834:	3788      	adds	r7, #136	@ 0x88
 8001836:	46bd      	mov	sp, r7
 8001838:	bdb0      	pop	{r4, r5, r7, pc}
 800183a:	bf00      	nop
 800183c:	f3af 8000 	nop.w
 8001840:	54442d18 	.word	0x54442d18
 8001844:	401921fb 	.word	0x401921fb
 8001848:	40768000 	.word	0x40768000
 800184c:	0800b83c 	.word	0x0800b83c
 8001850:	20000394 	.word	0x20000394
 8001854:	00000000 	.word	0x00000000

08001858 <midCalibrate>:

	sprintf(b, "wood %d tape %d\r\n", *wood_val, *tape_val);
	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
}

void midCalibrate(uint16_t* tape_val, uint16_t* wood_val) {
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b0a0      	sub	sp, #128	@ 0x80
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
	HAL_Delay(50);
 8001862:	2032      	movs	r0, #50	@ 0x32
 8001864:	f001 fbba 	bl	8002fdc <HAL_Delay>

		char b [100];

		uint16_t tape = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
		uint16_t wood = (readSensor(SENSORS[0]) + readSensor(SENSORS[3]))/2;
 800186e:	2302      	movs	r3, #2
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fc65 	bl	8001140 <readSensor>
 8001876:	4603      	mov	r3, r0
 8001878:	461c      	mov	r4, r3
 800187a:	2305      	movs	r3, #5
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fc5f 	bl	8001140 <readSensor>
 8001882:	4603      	mov	r3, r0
 8001884:	4423      	add	r3, r4
 8001886:	0fda      	lsrs	r2, r3, #31
 8001888:	4413      	add	r3, r2
 800188a:	105b      	asrs	r3, r3, #1
 800188c:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c

		uint32_t wood_sum = wood;
 8001890:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8001894:	67bb      	str	r3, [r7, #120]	@ 0x78
		uint16_t avg_reading = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

		uint8_t reads = 10;
 800189c:	230a      	movs	r3, #10
 800189e:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

		uint16_t count = 1;
 80018a2:	2301      	movs	r3, #1
 80018a4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		uint16_t tape_count = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74

		for (int i = 0; i < reads; i++) {
 80018ae:	2300      	movs	r3, #0
 80018b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80018b2:	e018      	b.n	80018e6 <midCalibrate+0x8e>
			tape += readSensor(SENSORS[1]);
 80018b4:	2303      	movs	r3, #3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fc42 	bl	8001140 <readSensor>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80018c4:	4413      	add	r3, r2
 80018c6:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
			tape += readSensor(SENSORS[2]);
 80018ca:	2304      	movs	r3, #4
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fc37 	bl	8001140 <readSensor>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80018da:	4413      	add	r3, r2
 80018dc:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
		for (int i = 0; i < reads; i++) {
 80018e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80018e2:	3301      	adds	r3, #1
 80018e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80018e6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80018ea:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbe1      	blt.n	80018b4 <midCalibrate+0x5c>
		}

		runMotors(LEFT, FWD, 0.4);
 80018f0:	ed9f 0b6b 	vldr	d0, [pc, #428]	@ 8001aa0 <midCalibrate+0x248>
 80018f4:	2100      	movs	r1, #0
 80018f6:	2000      	movs	r0, #0
 80018f8:	f7ff fb16 	bl	8000f28 <runMotors>
		runMotors(RIGHT, FWD, 0.4);
 80018fc:	ed9f 0b68 	vldr	d0, [pc, #416]	@ 8001aa0 <midCalibrate+0x248>
 8001900:	2100      	movs	r1, #0
 8001902:	2001      	movs	r0, #1
 8001904:	f7ff fb10 	bl	8000f28 <runMotors>


		while (1) {
				count++;
 8001908:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800190c:	3301      	adds	r3, #1
 800190e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
				avg_reading = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

				avg_reading += readSensor(SENSORS[0]);
 8001918:	2302      	movs	r3, #2
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fc10 	bl	8001140 <readSensor>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001928:	4413      	add	r3, r2
 800192a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
				avg_reading += readSensor(SENSORS[3]);
 800192e:	2305      	movs	r3, #5
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fc05 	bl	8001140 <readSensor>
 8001936:	4603      	mov	r3, r0
 8001938:	461a      	mov	r2, r3
 800193a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800193e:	4413      	add	r3, r2
 8001940:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
				avg_reading /= 2;
 8001944:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001948:	085b      	lsrs	r3, r3, #1
 800194a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

				if (abs(avg_reading - wood) <= wood*0.3) {
 800194e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001952:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	bfb8      	it	lt
 800195c:	425b      	neglt	r3, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fe08 	bl	8000574 <__aeabi_i2d>
 8001964:	4604      	mov	r4, r0
 8001966:	460d      	mov	r5, r1
 8001968:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fe01 	bl	8000574 <__aeabi_i2d>
 8001972:	a352      	add	r3, pc, #328	@ (adr r3, 8001abc <midCalibrate+0x264>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe fe66 	bl	8000648 <__aeabi_dmul>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4620      	mov	r0, r4
 8001982:	4629      	mov	r1, r5
 8001984:	f7ff f8dc 	bl	8000b40 <__aeabi_dcmple>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d029      	beq.n	80019e2 <midCalibrate+0x18a>

					wood_sum += avg_reading;
 800198e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001992:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001994:	4413      	add	r3, r2
 8001996:	67bb      	str	r3, [r7, #120]	@ 0x78
					wood = wood_sum / count;
 8001998:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800199c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800199e:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a2:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c

					sprintf(b, "wood %d\r\n", wood);
 80019a6:	f8b7 207c 	ldrh.w	r2, [r7, #124]	@ 0x7c
 80019aa:	f107 0308 	add.w	r3, r7, #8
 80019ae:	493e      	ldr	r1, [pc, #248]	@ (8001aa8 <midCalibrate+0x250>)
 80019b0:	4618      	mov	r0, r3
 80019b2:	f007 fb2b 	bl	800900c <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 80019b6:	f107 0308 	add.w	r3, r7, #8
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fc80 	bl	80002c0 <strlen>
 80019c0:	4603      	mov	r3, r0
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	f107 0108 	add.w	r1, r7, #8
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295
 80019cc:	4837      	ldr	r0, [pc, #220]	@ (8001aac <midCalibrate+0x254>)
 80019ce:	f005 ff87 	bl	80078e0 <HAL_UART_Transmit>

					if (tape_count > 0) {
 80019d2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d01e      	beq.n	8001a18 <midCalibrate+0x1c0>
						tape_count = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 80019e0:	e01a      	b.n	8001a18 <midCalibrate+0x1c0>
					}
				} else {
					sprintf(b, "tape? %d \r\n", avg_reading);
 80019e2:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	4931      	ldr	r1, [pc, #196]	@ (8001ab0 <midCalibrate+0x258>)
 80019ec:	4618      	mov	r0, r3
 80019ee:	f007 fb0d 	bl	800900c <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 80019f2:	f107 0308 	add.w	r3, r7, #8
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fc62 	bl	80002c0 <strlen>
 80019fc:	4603      	mov	r3, r0
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	f107 0108 	add.w	r1, r7, #8
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
 8001a08:	4828      	ldr	r0, [pc, #160]	@ (8001aac <midCalibrate+0x254>)
 8001a0a:	f005 ff69 	bl	80078e0 <HAL_UART_Transmit>

					tape_count++;
 8001a0e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8001a12:	3301      	adds	r3, #1
 8001a14:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
				}

				if (tape_count >= 5) {
 8001a18:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	f67f af73 	bls.w	8001908 <midCalibrate+0xb0>
					sprintf(b, "found tape!\r\n");
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	4923      	ldr	r1, [pc, #140]	@ (8001ab4 <midCalibrate+0x25c>)
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f007 faef 	bl	800900c <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001a2e:	f107 0308 	add.w	r3, r7, #8
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fc44 	bl	80002c0 <strlen>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	f107 0108 	add.w	r1, r7, #8
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295
 8001a44:	4819      	ldr	r0, [pc, #100]	@ (8001aac <midCalibrate+0x254>)
 8001a46:	f005 ff4b 	bl	80078e0 <HAL_UART_Transmit>
					break;
 8001a4a:	bf00      	nop
				}
			}

		*tape_val = tape / (2*reads);
 8001a4c:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 8001a50:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	801a      	strh	r2, [r3, #0]
		*wood_val = wood;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	f8b7 207c 	ldrh.w	r2, [r7, #124]	@ 0x7c
 8001a66:	801a      	strh	r2, [r3, #0]

		sprintf(b, "wood %d tape %d\r\n", *wood_val, *tape_val);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	f107 0008 	add.w	r0, r7, #8
 8001a76:	4910      	ldr	r1, [pc, #64]	@ (8001ab8 <midCalibrate+0x260>)
 8001a78:	f007 fac8 	bl	800900c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001a7c:	f107 0308 	add.w	r3, r7, #8
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fc1d 	bl	80002c0 <strlen>
 8001a86:	4603      	mov	r3, r0
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	f107 0108 	add.w	r1, r7, #8
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a92:	4806      	ldr	r0, [pc, #24]	@ (8001aac <midCalibrate+0x254>)
 8001a94:	f005 ff24 	bl	80078e0 <HAL_UART_Transmit>
}
 8001a98:	bf00      	nop
 8001a9a:	3780      	adds	r7, #128	@ 0x80
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa0:	9999999a 	.word	0x9999999a
 8001aa4:	3fd99999 	.word	0x3fd99999
 8001aa8:	0800b848 	.word	0x0800b848
 8001aac:	20000394 	.word	0x20000394
 8001ab0:	0800b888 	.word	0x0800b888
 8001ab4:	0800b894 	.word	0x0800b894
 8001ab8:	0800b874 	.word	0x0800b874
 8001abc:	33333333 	.word	0x33333333
 8001ac0:	3fd33333 	.word	0x3fd33333
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <rotate180>:

void rotate180(double theta0) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	ed87 0b00 	vstr	d0, [r7]

	runMotors(RIGHT, FWD, 0);
 8001ad2:	ed9f 0b2f 	vldr	d0, [pc, #188]	@ 8001b90 <rotate180+0xc8>
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff fa25 	bl	8000f28 <runMotors>
	runMotors(LEFT, FWD, 0);
 8001ade:	ed9f 0b2c 	vldr	d0, [pc, #176]	@ 8001b90 <rotate180+0xc8>
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f7ff fa1f 	bl	8000f28 <runMotors>
	HAL_Delay(500);
 8001aea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001aee:	f001 fa75 	bl	8002fdc <HAL_Delay>

	double angle = getAngle(theta0);
 8001af2:	ed97 0b00 	vldr	d0, [r7]
 8001af6:	f7ff fe0f 	bl	8001718 <getAngle>
 8001afa:	ed87 0b02 	vstr	d0, [r7, #8]
	runMotors(RIGHT, FWD, 0.8);
 8001afe:	ed9f 0b26 	vldr	d0, [pc, #152]	@ 8001b98 <rotate180+0xd0>
 8001b02:	2100      	movs	r1, #0
 8001b04:	2001      	movs	r0, #1
 8001b06:	f7ff fa0f 	bl	8000f28 <runMotors>
	runMotors(LEFT, BWD, 0.8);
 8001b0a:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 8001b98 <rotate180+0xd0>
 8001b0e:	2101      	movs	r1, #1
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7ff fa09 	bl	8000f28 <runMotors>

	while (angle < 75 || angle > 105) {
 8001b16:	e005      	b.n	8001b24 <rotate180+0x5c>
		angle = getAngle(theta0);
 8001b18:	ed97 0b00 	vldr	d0, [r7]
 8001b1c:	f7ff fdfc 	bl	8001718 <getAngle>
 8001b20:	ed87 0b02 	vstr	d0, [r7, #8]
	while (angle < 75 || angle > 105) {
 8001b24:	a321      	add	r3, pc, #132	@ (adr r3, 8001bac <rotate180+0xe4>)
 8001b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b2e:	f7fe fffd 	bl	8000b2c <__aeabi_dcmplt>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1ef      	bne.n	8001b18 <rotate180+0x50>
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba8 <rotate180+0xe0>)
 8001b3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b42:	f7ff f811 	bl	8000b68 <__aeabi_dcmpgt>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1e5      	bne.n	8001b18 <rotate180+0x50>
		//HAL_Delay(10);
	}

	runMotors(RIGHT, FWD, 0);
 8001b4c:	ed9f 0b10 	vldr	d0, [pc, #64]	@ 8001b90 <rotate180+0xc8>
 8001b50:	2100      	movs	r1, #0
 8001b52:	2001      	movs	r0, #1
 8001b54:	f7ff f9e8 	bl	8000f28 <runMotors>
	runMotors(LEFT, FWD, 0);
 8001b58:	ed9f 0b0d 	vldr	d0, [pc, #52]	@ 8001b90 <rotate180+0xc8>
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f7ff f9e2 	bl	8000f28 <runMotors>

	HAL_Delay(300);
 8001b64:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001b68:	f001 fa38 	bl	8002fdc <HAL_Delay>

	runMotors(RIGHT, FWD, 0.5);
 8001b6c:	ed9f 0b0c 	vldr	d0, [pc, #48]	@ 8001ba0 <rotate180+0xd8>
 8001b70:	2100      	movs	r1, #0
 8001b72:	2001      	movs	r0, #1
 8001b74:	f7ff f9d8 	bl	8000f28 <runMotors>
	runMotors(LEFT, FWD, 0.5);
 8001b78:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 8001ba0 <rotate180+0xd8>
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f7ff f9d2 	bl	8000f28 <runMotors>

}
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	f3af 8000 	nop.w
	...
 8001b98:	9999999a 	.word	0x9999999a
 8001b9c:	3fe99999 	.word	0x3fe99999
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	3fe00000 	.word	0x3fe00000
 8001ba8:	405a4000 	.word	0x405a4000
 8001bac:	00000000 	.word	0x00000000
 8001bb0:	4052c000 	.word	0x4052c000
 8001bb4:	00000000 	.word	0x00000000

08001bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bbc:	b0ac      	sub	sp, #176	@ 0xb0
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bc0:	f001 f99b 	bl	8002efa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bc4:	f000 faee 	bl	80021a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bc8:	f000 fde4 	bl	8002794 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001bcc:	f000 fd96 	bl	80026fc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001bd0:	f000 fbdc 	bl	800238c <MX_TIM1_Init>
  MX_ADC2_Init();
 8001bd4:	f000 fb34 	bl	8002240 <MX_ADC2_Init>
  MX_TIM3_Init();
 8001bd8:	f000 fd06 	bl	80025e8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001bdc:	f000 fcaa 	bl	8002534 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001be0:	f000 fb94 	bl	800230c <MX_I2C1_Init>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);


  HAL_Delay(700);
 8001be4:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001be8:	f001 f9f8 	bl	8002fdc <HAL_Delay>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001bec:	2100      	movs	r1, #0
 8001bee:	48d6      	ldr	r0, [pc, #856]	@ (8001f48 <main+0x390>)
 8001bf0:	f004 fba4 	bl	800633c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001bf4:	2104      	movs	r1, #4
 8001bf6:	48d4      	ldr	r0, [pc, #848]	@ (8001f48 <main+0x390>)
 8001bf8:	f004 fba0 	bl	800633c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001bfc:	2108      	movs	r1, #8
 8001bfe:	48d2      	ldr	r0, [pc, #840]	@ (8001f48 <main+0x390>)
 8001c00:	f004 fb9c 	bl	800633c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001c04:	210c      	movs	r1, #12
 8001c06:	48d0      	ldr	r0, [pc, #832]	@ (8001f48 <main+0x390>)
 8001c08:	f004 fb98 	bl	800633c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001c0c:	2108      	movs	r1, #8
 8001c0e:	48cf      	ldr	r0, [pc, #828]	@ (8001f4c <main+0x394>)
 8001c10:	f004 fb94 	bl	800633c <HAL_TIM_PWM_Start>

  // Make sure all motors are stopped
  TIM1->CCR1 = 0;
 8001c14:	4bce      	ldr	r3, [pc, #824]	@ (8001f50 <main+0x398>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = 0;
 8001c1a:	4bcd      	ldr	r3, [pc, #820]	@ (8001f50 <main+0x398>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR3 = 0;
 8001c20:	4bcb      	ldr	r3, [pc, #812]	@ (8001f50 <main+0x398>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM1->CCR4 = 0;
 8001c26:	4bca      	ldr	r3, [pc, #808]	@ (8001f50 <main+0x398>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	641a      	str	r2, [r3, #64]	@ 0x40

  TIM3->CCR3 = 0;
 8001c2c:	4bc9      	ldr	r3, [pc, #804]	@ (8001f54 <main+0x39c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	63da      	str	r2, [r3, #60]	@ 0x3c

  HAL_GPIO_WritePin(GPIOA, LS_DIR_Pin, GPIO_PIN_RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2101      	movs	r1, #1
 8001c36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c3a:	f002 fba1 	bl	8004380 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, RS_DIR_Pin, GPIO_PIN_RESET);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2102      	movs	r1, #2
 8001c42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c46:	f002 fb9b 	bl	8004380 <HAL_GPIO_WritePin>
//
//  while(1){}

  char b [100];

  sprintf(b, "hello world \r\n");
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	49c2      	ldr	r1, [pc, #776]	@ (8001f58 <main+0x3a0>)
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f007 f9dc 	bl	800900c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fb32 	bl	80002c0 <strlen>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	1d39      	adds	r1, r7, #4
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
 8001c66:	48bd      	ldr	r0, [pc, #756]	@ (8001f5c <main+0x3a4>)
 8001c68:	f005 fe3a 	bl	80078e0 <HAL_UART_Transmit>

  initSensors();
 8001c6c:	f7ff fafe 	bl	800126c <initSensors>
  initIMU();
 8001c70:	f7ff fbe2 	bl	8001438 <initIMU>


  uint16_t tape_val;
  uint16_t wood_val;

  HAL_Delay(100);
 8001c74:	2064      	movs	r0, #100	@ 0x64
 8001c76:	f001 f9b1 	bl	8002fdc <HAL_Delay>

  double theta0 = getAngle(0);
 8001c7a:	ed9f 0ba9 	vldr	d0, [pc, #676]	@ 8001f20 <main+0x368>
 8001c7e:	f7ff fd4b 	bl	8001718 <getAngle>
 8001c82:	ed87 0b22 	vstr	d0, [r7, #136]	@ 0x88
//  	runMotors(LEFT, BWD, 0.8);
//  	runMotors(RIGHT, FWD, 0.8);
//  	HAL_Delay(5000);
//  }

  midCalibrate(&tape_val, &wood_val);
 8001c86:	463a      	mov	r2, r7
 8001c88:	1cbb      	adds	r3, r7, #2
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fde3 	bl	8001858 <midCalibrate>

  uint16_t TARGET = (tape_val+wood_val)/2;
 8001c92:	887b      	ldrh	r3, [r7, #2]
 8001c94:	461a      	mov	r2, r3
 8001c96:	883b      	ldrh	r3, [r7, #0]
 8001c98:	4413      	add	r3, r2
 8001c9a:	0fda      	lsrs	r2, r3, #31
 8001c9c:	4413      	add	r3, r2
 8001c9e:	105b      	asrs	r3, r3, #1
 8001ca0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  uint16_t READING_RANGE = TARGET - wood_val;
 8001ca4:	883b      	ldrh	r3, [r7, #0]
 8001ca6:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84

  runMotors(LEFT, FWD, 0.5);
 8001cb0:	ed9f 0b9d 	vldr	d0, [pc, #628]	@ 8001f28 <main+0x370>
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f7ff f936 	bl	8000f28 <runMotors>
  runMotors(RIGHT, FWD, 0.5);
 8001cbc:	ed9f 0b9a 	vldr	d0, [pc, #616]	@ 8001f28 <main+0x370>
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f7ff f930 	bl	8000f28 <runMotors>

  HAL_Delay(300);
 8001cc8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001ccc:	f001 f986 	bl	8002fdc <HAL_Delay>

  uint16_t turn_count_l = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
  uint16_t turn_count_r = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac

  int16_t prev_r = TARGET;
 8001cdc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001ce0:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  int16_t prev_l = TARGET;
 8001ce4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001ce8:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8

  uint16_t state = FOLLOW1;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  	uint16_t right = readSensor(SENSORS[1]);
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fa23 	bl	8001140 <readSensor>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
  	uint16_t blue_r = getRGB(B);
 8001d00:	2002      	movs	r0, #2
 8001d02:	f7ff fa87 	bl	8001214 <getRGB>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80

  	uint16_t left = readSensor(SENSORS[2]);
 8001d0c:	2304      	movs	r3, #4
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fa16 	bl	8001140 <readSensor>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
  	uint16_t blue_l = getRGB(B);
 8001d1a:	2002      	movs	r0, #2
 8001d1c:	f7ff fa7a 	bl	8001214 <getRGB>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c

  	if (state == FOLLOW1 && blue_r > 1000 && blue_l > 1000) {
 8001d26:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d114      	bne.n	8001d58 <main+0x1a0>
 8001d2e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8001d32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d36:	d90f      	bls.n	8001d58 <main+0x1a0>
 8001d38:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8001d3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d40:	d90a      	bls.n	8001d58 <main+0x1a0>
  		state = INTERMISSION;
 8001d42:	2301      	movs	r3, #1
 8001d44:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
  		rotate180(theta0);
 8001d48:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 8001d4c:	f7ff febc 	bl	8001ac8 <rotate180>
  		state = FOLLOW2;
 8001d50:	2302      	movs	r3, #2
 8001d52:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
  		continue;
 8001d56:	e215      	b.n	8002184 <main+0x5cc>


//  	sprintf(b, "left sensor %d right sensor %d\r\n", right, left);
//  	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

  	int16_t error_r = right - TARGET;
 8001d58:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 8001d5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
  	int16_t error_l = left - TARGET;
 8001d68:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 8001d6c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
//  	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

  	double duty_r;//MIN_DUTY + ratio/(tape/wood)*(MAX_DUTY-MIN_DUTY);//
  	double duty_l;//MIN_DUTY + (1/ratio)/(tape/wood)*(MAX_DUTY-MIN_DUTY); //

  	if (left < wood_val*1.1 && right < wood_val*1.1) {
 8001d78:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fbf9 	bl	8000574 <__aeabi_i2d>
 8001d82:	4604      	mov	r4, r0
 8001d84:	460d      	mov	r5, r1
 8001d86:	883b      	ldrh	r3, [r7, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fbf3 	bl	8000574 <__aeabi_i2d>
 8001d8e:	a368      	add	r3, pc, #416	@ (adr r3, 8001f30 <main+0x378>)
 8001d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d94:	f7fe fc58 	bl	8000648 <__aeabi_dmul>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	4629      	mov	r1, r5
 8001da0:	f7fe fec4 	bl	8000b2c <__aeabi_dcmplt>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d021      	beq.n	8001dee <main+0x236>
 8001daa:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fbe0 	bl	8000574 <__aeabi_i2d>
 8001db4:	4604      	mov	r4, r0
 8001db6:	460d      	mov	r5, r1
 8001db8:	883b      	ldrh	r3, [r7, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fbda 	bl	8000574 <__aeabi_i2d>
 8001dc0:	a35b      	add	r3, pc, #364	@ (adr r3, 8001f30 <main+0x378>)
 8001dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc6:	f7fe fc3f 	bl	8000648 <__aeabi_dmul>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4620      	mov	r0, r4
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	f7fe feab 	bl	8000b2c <__aeabi_dcmplt>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d008      	beq.n	8001dee <main+0x236>
    	prev_r = error_r;
 8001ddc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8001de0:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    	prev_l = error_l;
 8001de4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8001de8:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
  		continue;
 8001dec:	e1ca      	b.n	8002184 <main+0x5cc>
  	}

  	if (left < wood_val*1.01 && right < 0.99*(tape_val-wood_val) + wood_val) {
 8001dee:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fbbe 	bl	8000574 <__aeabi_i2d>
 8001df8:	4604      	mov	r4, r0
 8001dfa:	460d      	mov	r5, r1
 8001dfc:	883b      	ldrh	r3, [r7, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fbb8 	bl	8000574 <__aeabi_i2d>
 8001e04:	a34c      	add	r3, pc, #304	@ (adr r3, 8001f38 <main+0x380>)
 8001e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0a:	f7fe fc1d 	bl	8000648 <__aeabi_dmul>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4620      	mov	r0, r4
 8001e14:	4629      	mov	r1, r5
 8001e16:	f7fe fe89 	bl	8000b2c <__aeabi_dcmplt>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d032      	beq.n	8001e86 <main+0x2ce>
 8001e20:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fba5 	bl	8000574 <__aeabi_i2d>
 8001e2a:	4604      	mov	r4, r0
 8001e2c:	460d      	mov	r5, r1
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	461a      	mov	r2, r3
 8001e32:	883b      	ldrh	r3, [r7, #0]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fb9c 	bl	8000574 <__aeabi_i2d>
 8001e3c:	a340      	add	r3, pc, #256	@ (adr r3, 8001f40 <main+0x388>)
 8001e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e42:	f7fe fc01 	bl	8000648 <__aeabi_dmul>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4690      	mov	r8, r2
 8001e4c:	4699      	mov	r9, r3
 8001e4e:	883b      	ldrh	r3, [r7, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb8f 	bl	8000574 <__aeabi_i2d>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4640      	mov	r0, r8
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	f7fe fa3d 	bl	80002dc <__adddf3>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4620      	mov	r0, r4
 8001e68:	4629      	mov	r1, r5
 8001e6a:	f7fe fe5f 	bl	8000b2c <__aeabi_dcmplt>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <main+0x2ce>
  		turn_count_r ++;
 8001e74:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8001e78:	3301      	adds	r3, #1
 8001e7a:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
  		turn_count_l = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8001e84:	e072      	b.n	8001f6c <main+0x3b4>
  	} else if (right < wood_val*1.01 && left < 0.99*(tape_val-wood_val) + wood_val) {
 8001e86:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fb72 	bl	8000574 <__aeabi_i2d>
 8001e90:	4604      	mov	r4, r0
 8001e92:	460d      	mov	r5, r1
 8001e94:	883b      	ldrh	r3, [r7, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fb6c 	bl	8000574 <__aeabi_i2d>
 8001e9c:	a326      	add	r3, pc, #152	@ (adr r3, 8001f38 <main+0x380>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	f7fe fbd1 	bl	8000648 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4620      	mov	r0, r4
 8001eac:	4629      	mov	r1, r5
 8001eae:	f7fe fe3d 	bl	8000b2c <__aeabi_dcmplt>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d053      	beq.n	8001f60 <main+0x3a8>
 8001eb8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fb59 	bl	8000574 <__aeabi_i2d>
 8001ec2:	4604      	mov	r4, r0
 8001ec4:	460d      	mov	r5, r1
 8001ec6:	887b      	ldrh	r3, [r7, #2]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	883b      	ldrh	r3, [r7, #0]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fb50 	bl	8000574 <__aeabi_i2d>
 8001ed4:	a31a      	add	r3, pc, #104	@ (adr r3, 8001f40 <main+0x388>)
 8001ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eda:	f7fe fbb5 	bl	8000648 <__aeabi_dmul>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4690      	mov	r8, r2
 8001ee4:	4699      	mov	r9, r3
 8001ee6:	883b      	ldrh	r3, [r7, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fb43 	bl	8000574 <__aeabi_i2d>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4640      	mov	r0, r8
 8001ef4:	4649      	mov	r1, r9
 8001ef6:	f7fe f9f1 	bl	80002dc <__adddf3>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4620      	mov	r0, r4
 8001f00:	4629      	mov	r1, r5
 8001f02:	f7fe fe13 	bl	8000b2c <__aeabi_dcmplt>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d029      	beq.n	8001f60 <main+0x3a8>
  		turn_count_r = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
  		turn_count_l ++;
 8001f12:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8001f16:	3301      	adds	r3, #1
 8001f18:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8001f1c:	e026      	b.n	8001f6c <main+0x3b4>
 8001f1e:	bf00      	nop
	...
 8001f2c:	3fe00000 	.word	0x3fe00000
 8001f30:	9999999a 	.word	0x9999999a
 8001f34:	3ff19999 	.word	0x3ff19999
 8001f38:	c28f5c29 	.word	0xc28f5c29
 8001f3c:	3ff028f5 	.word	0x3ff028f5
 8001f40:	7ae147ae 	.word	0x7ae147ae
 8001f44:	3fefae14 	.word	0x3fefae14
 8001f48:	200002b0 	.word	0x200002b0
 8001f4c:	20000348 	.word	0x20000348
 8001f50:	40012c00 	.word	0x40012c00
 8001f54:	40000400 	.word	0x40000400
 8001f58:	0800b8a4 	.word	0x0800b8a4
 8001f5c:	20000394 	.word	0x20000394
  	} else {
  		turn_count_l = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
  		turn_count_r = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
  	}

  	if (turn_count_r > 3) {
 8001f6c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d90f      	bls.n	8001f94 <main+0x3dc>
  		duty_r = -1*MAX_DUTY*1;
 8001f74:	a388      	add	r3, pc, #544	@ (adr r3, 8002198 <main+0x5e0>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8001f80:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001f84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  		duty_l = MAX_DUTY*1;
 8001f88:	a383      	add	r3, pc, #524	@ (adr r3, 8002198 <main+0x5e0>)
 8001f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8e:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 8001f92:	e0e3      	b.n	800215c <main+0x5a4>
  	} else if (turn_count_l > 3) {
 8001f94:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d90f      	bls.n	8001fbc <main+0x404>
  		duty_l = -1*MAX_DUTY*1;
 8001f9c:	a37e      	add	r3, pc, #504	@ (adr r3, 8002198 <main+0x5e0>)
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8001fa8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001fac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  		duty_r = MAX_DUTY*1;
 8001fb0:	a379      	add	r3, pc, #484	@ (adr r3, 8002198 <main+0x5e0>)
 8001fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb6:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 8001fba:	e0cf      	b.n	800215c <main+0x5a4>
  	} else {

  	  	double delta_r = (kp * error_r - kd * (error_r - prev_r)) / READING_RANGE * DUTY_RANGE;
 8001fbc:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	@ 0x7a
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fad7 	bl	8000574 <__aeabi_i2d>
 8001fc6:	a372      	add	r3, pc, #456	@ (adr r3, 8002190 <main+0x5d8>)
 8001fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fcc:	f7fe fb3c 	bl	8000648 <__aeabi_dmul>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4614      	mov	r4, r2
 8001fd6:	461d      	mov	r5, r3
 8001fd8:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	@ 0x7a
 8001fdc:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fac6 	bl	8000574 <__aeabi_i2d>
 8001fe8:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8001fec:	4b6c      	ldr	r3, [pc, #432]	@ (80021a0 <main+0x5e8>)
 8001fee:	f7fe fb2b 	bl	8000648 <__aeabi_dmul>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	4629      	mov	r1, r5
 8001ffa:	f7fe f96d 	bl	80002d8 <__aeabi_dsub>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4614      	mov	r4, r2
 8002004:	461d      	mov	r5, r3
 8002006:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fab2 	bl	8000574 <__aeabi_i2d>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4620      	mov	r0, r4
 8002016:	4629      	mov	r1, r5
 8002018:	f7fe fc40 	bl	800089c <__aeabi_ddiv>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4610      	mov	r0, r2
 8002022:	4619      	mov	r1, r3
 8002024:	a358      	add	r3, pc, #352	@ (adr r3, 8002188 <main+0x5d0>)
 8002026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202a:	f7fe fb0d 	bl	8000648 <__aeabi_dmul>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  	  	double delta_l = (kp * error_l - kd * (error_l - prev_l)) / READING_RANGE * DUTY_RANGE;
 8002036:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	@ 0x78
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fa9a 	bl	8000574 <__aeabi_i2d>
 8002040:	a353      	add	r3, pc, #332	@ (adr r3, 8002190 <main+0x5d8>)
 8002042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002046:	f7fe faff 	bl	8000648 <__aeabi_dmul>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4614      	mov	r4, r2
 8002050:	461d      	mov	r5, r3
 8002052:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	@ 0x78
 8002056:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fa89 	bl	8000574 <__aeabi_i2d>
 8002062:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002066:	4b4e      	ldr	r3, [pc, #312]	@ (80021a0 <main+0x5e8>)
 8002068:	f7fe faee 	bl	8000648 <__aeabi_dmul>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4620      	mov	r0, r4
 8002072:	4629      	mov	r1, r5
 8002074:	f7fe f930 	bl	80002d8 <__aeabi_dsub>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4614      	mov	r4, r2
 800207e:	461d      	mov	r5, r3
 8002080:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fa75 	bl	8000574 <__aeabi_i2d>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4620      	mov	r0, r4
 8002090:	4629      	mov	r1, r5
 8002092:	f7fe fc03 	bl	800089c <__aeabi_ddiv>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	a33a      	add	r3, pc, #232	@ (adr r3, 8002188 <main+0x5d0>)
 80020a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a4:	f7fe fad0 	bl	8000648 <__aeabi_dmul>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

  	  	duty_r = AVG_DUTY - delta_r;
 80020b0:	a135      	add	r1, pc, #212	@ (adr r1, 8002188 <main+0x5d0>)
 80020b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80020ba:	f7fe f90d 	bl	80002d8 <__aeabi_dsub>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
  	  	duty_l = AVG_DUTY - delta_l;
 80020c6:	a130      	add	r1, pc, #192	@ (adr r1, 8002188 <main+0x5d0>)
 80020c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020cc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80020d0:	f7fe f902 	bl	80002d8 <__aeabi_dsub>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

  	    if (duty_l < MIN_DUTY) duty_l = MIN_DUTY;
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80020e8:	f7fe fd20 	bl	8000b2c <__aeabi_dcmplt>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <main+0x546>
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
  	    if (duty_l > MAX_DUTY) duty_l = MAX_DUTY;
 80020fe:	a326      	add	r3, pc, #152	@ (adr r3, 8002198 <main+0x5e0>)
 8002100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002104:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002108:	f7fe fd2e 	bl	8000b68 <__aeabi_dcmpgt>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d004      	beq.n	800211c <main+0x564>
 8002112:	a321      	add	r3, pc, #132	@ (adr r3, 8002198 <main+0x5e0>)
 8002114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002118:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
  	    if (duty_r < MIN_DUTY) duty_r = MIN_DUTY;
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002128:	f7fe fd00 	bl	8000b2c <__aeabi_dcmplt>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <main+0x586>
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
  	    if (duty_r > MAX_DUTY) duty_r = MAX_DUTY;
 800213e:	a316      	add	r3, pc, #88	@ (adr r3, 8002198 <main+0x5e0>)
 8002140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002144:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002148:	f7fe fd0e 	bl	8000b68 <__aeabi_dcmpgt>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d004      	beq.n	800215c <main+0x5a4>
 8002152:	a311      	add	r3, pc, #68	@ (adr r3, 8002198 <main+0x5e0>)
 8002154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002158:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
  //	sprintf(b, "delta_r %f duty_r %f\r\n", delta_r, duty_r);
  //	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
//  	sprintf(b, "left duty %f right duty %f\r\n", duty_l*100, duty_r*100);
//  	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

  	prev_r = error_r;
 800215c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002160:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  	prev_l = error_l;
 8002164:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8002168:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8

  	runMotors(RIGHT, FWD, duty_r);
 800216c:	ed97 0b26 	vldr	d0, [r7, #152]	@ 0x98
 8002170:	2100      	movs	r1, #0
 8002172:	2001      	movs	r0, #1
 8002174:	f7fe fed8 	bl	8000f28 <runMotors>
  	runMotors(LEFT, FWD, duty_l);
 8002178:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 800217c:	2100      	movs	r1, #0
 800217e:	2000      	movs	r0, #0
 8002180:	f7fe fed2 	bl	8000f28 <runMotors>
  {
 8002184:	e5b5      	b.n	8001cf2 <main+0x13a>
 8002186:	bf00      	nop
 8002188:	9999999a 	.word	0x9999999a
 800218c:	3fd99999 	.word	0x3fd99999
 8002190:	9999999a 	.word	0x9999999a
 8002194:	3fe99999 	.word	0x3fe99999
 8002198:	33333333 	.word	0x33333333
 800219c:	3fe33333 	.word	0x3fe33333
 80021a0:	3ff33333 	.word	0x3ff33333

080021a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b094      	sub	sp, #80	@ 0x50
 80021a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021aa:	f107 0318 	add.w	r3, r7, #24
 80021ae:	2238      	movs	r2, #56	@ 0x38
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f006 ff8d 	bl	80090d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]
 80021c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80021ca:	f003 f82d 	bl	8005228 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021ce:	2302      	movs	r3, #2
 80021d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021d8:	2340      	movs	r3, #64	@ 0x40
 80021da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021dc:	2302      	movs	r3, #2
 80021de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021e0:	2302      	movs	r3, #2
 80021e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80021e4:	2301      	movs	r3, #1
 80021e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 9;
 80021e8:	2309      	movs	r3, #9
 80021ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021ec:	2302      	movs	r3, #2
 80021ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80021f0:	2302      	movs	r3, #2
 80021f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80021f4:	2302      	movs	r3, #2
 80021f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021f8:	f107 0318 	add.w	r3, r7, #24
 80021fc:	4618      	mov	r0, r3
 80021fe:	f003 f8c7 	bl	8005390 <HAL_RCC_OscConfig>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8002208:	f000 fb26 	bl	8002858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800220c:	230f      	movs	r3, #15
 800220e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002210:	2303      	movs	r3, #3
 8002212:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002218:	2300      	movs	r3, #0
 800221a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800221c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002220:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	2102      	movs	r1, #2
 8002226:	4618      	mov	r0, r3
 8002228:	f003 fbc4 	bl	80059b4 <HAL_RCC_ClockConfig>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002232:	f000 fb11 	bl	8002858 <Error_Handler>
  }
}
 8002236:	bf00      	nop
 8002238:	3750      	adds	r7, #80	@ 0x50
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002246:	463b      	mov	r3, r7
 8002248:	2220      	movs	r2, #32
 800224a:	2100      	movs	r1, #0
 800224c:	4618      	mov	r0, r3
 800224e:	f006 ff40 	bl	80090d2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002252:	4b2b      	ldr	r3, [pc, #172]	@ (8002300 <MX_ADC2_Init+0xc0>)
 8002254:	4a2b      	ldr	r2, [pc, #172]	@ (8002304 <MX_ADC2_Init+0xc4>)
 8002256:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002258:	4b29      	ldr	r3, [pc, #164]	@ (8002300 <MX_ADC2_Init+0xc0>)
 800225a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800225e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002260:	4b27      	ldr	r3, [pc, #156]	@ (8002300 <MX_ADC2_Init+0xc0>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002266:	4b26      	ldr	r3, [pc, #152]	@ (8002300 <MX_ADC2_Init+0xc0>)
 8002268:	2200      	movs	r2, #0
 800226a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800226c:	4b24      	ldr	r3, [pc, #144]	@ (8002300 <MX_ADC2_Init+0xc0>)
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002272:	4b23      	ldr	r3, [pc, #140]	@ (8002300 <MX_ADC2_Init+0xc0>)
 8002274:	2200      	movs	r2, #0
 8002276:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002278:	4b21      	ldr	r3, [pc, #132]	@ (8002300 <MX_ADC2_Init+0xc0>)
 800227a:	2204      	movs	r2, #4
 800227c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800227e:	4b20      	ldr	r3, [pc, #128]	@ (8002300 <MX_ADC2_Init+0xc0>)
 8002280:	2200      	movs	r2, #0
 8002282:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002284:	4b1e      	ldr	r3, [pc, #120]	@ (8002300 <MX_ADC2_Init+0xc0>)
 8002286:	2200      	movs	r2, #0
 8002288:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800228a:	4b1d      	ldr	r3, [pc, #116]	@ (8002300 <MX_ADC2_Init+0xc0>)
 800228c:	2201      	movs	r2, #1
 800228e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002290:	4b1b      	ldr	r3, [pc, #108]	@ (8002300 <MX_ADC2_Init+0xc0>)
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002298:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <MX_ADC2_Init+0xc0>)
 800229a:	2200      	movs	r2, #0
 800229c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800229e:	4b18      	ldr	r3, [pc, #96]	@ (8002300 <MX_ADC2_Init+0xc0>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80022a4:	4b16      	ldr	r3, [pc, #88]	@ (8002300 <MX_ADC2_Init+0xc0>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80022ac:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <MX_ADC2_Init+0xc0>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80022b2:	4b13      	ldr	r3, [pc, #76]	@ (8002300 <MX_ADC2_Init+0xc0>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80022ba:	4811      	ldr	r0, [pc, #68]	@ (8002300 <MX_ADC2_Init+0xc0>)
 80022bc:	f001 f886 	bl	80033cc <HAL_ADC_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80022c6:	f000 fac7 	bl	8002858 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80022ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002308 <MX_ADC2_Init+0xc8>)
 80022cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022ce:	2306      	movs	r3, #6
 80022d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80022d6:	237f      	movs	r3, #127	@ 0x7f
 80022d8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80022da:	2304      	movs	r3, #4
 80022dc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80022e2:	463b      	mov	r3, r7
 80022e4:	4619      	mov	r1, r3
 80022e6:	4806      	ldr	r0, [pc, #24]	@ (8002300 <MX_ADC2_Init+0xc0>)
 80022e8:	f001 f9f4 	bl	80036d4 <HAL_ADC_ConfigChannel>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80022f2:	f000 fab1 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80022f6:	bf00      	nop
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200001f0 	.word	0x200001f0
 8002304:	50000100 	.word	0x50000100
 8002308:	47520000 	.word	0x47520000

0800230c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002310:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <MX_I2C1_Init+0x74>)
 8002312:	4a1c      	ldr	r2, [pc, #112]	@ (8002384 <MX_I2C1_Init+0x78>)
 8002314:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 8002316:	4b1a      	ldr	r3, [pc, #104]	@ (8002380 <MX_I2C1_Init+0x74>)
 8002318:	4a1b      	ldr	r2, [pc, #108]	@ (8002388 <MX_I2C1_Init+0x7c>)
 800231a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800231c:	4b18      	ldr	r3, [pc, #96]	@ (8002380 <MX_I2C1_Init+0x74>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002322:	4b17      	ldr	r3, [pc, #92]	@ (8002380 <MX_I2C1_Init+0x74>)
 8002324:	2201      	movs	r2, #1
 8002326:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002328:	4b15      	ldr	r3, [pc, #84]	@ (8002380 <MX_I2C1_Init+0x74>)
 800232a:	2200      	movs	r2, #0
 800232c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800232e:	4b14      	ldr	r3, [pc, #80]	@ (8002380 <MX_I2C1_Init+0x74>)
 8002330:	2200      	movs	r2, #0
 8002332:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002334:	4b12      	ldr	r3, [pc, #72]	@ (8002380 <MX_I2C1_Init+0x74>)
 8002336:	2200      	movs	r2, #0
 8002338:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800233a:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <MX_I2C1_Init+0x74>)
 800233c:	2200      	movs	r2, #0
 800233e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002340:	4b0f      	ldr	r3, [pc, #60]	@ (8002380 <MX_I2C1_Init+0x74>)
 8002342:	2200      	movs	r2, #0
 8002344:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002346:	480e      	ldr	r0, [pc, #56]	@ (8002380 <MX_I2C1_Init+0x74>)
 8002348:	f002 f832 	bl	80043b0 <HAL_I2C_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002352:	f000 fa81 	bl	8002858 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002356:	2100      	movs	r1, #0
 8002358:	4809      	ldr	r0, [pc, #36]	@ (8002380 <MX_I2C1_Init+0x74>)
 800235a:	f002 fecd 	bl	80050f8 <HAL_I2CEx_ConfigAnalogFilter>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002364:	f000 fa78 	bl	8002858 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002368:	2100      	movs	r1, #0
 800236a:	4805      	ldr	r0, [pc, #20]	@ (8002380 <MX_I2C1_Init+0x74>)
 800236c:	f002 ff0f 	bl	800518e <HAL_I2CEx_ConfigDigitalFilter>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002376:	f000 fa6f 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2000025c 	.word	0x2000025c
 8002384:	40005400 	.word	0x40005400
 8002388:	10808dd3 	.word	0x10808dd3

0800238c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b09c      	sub	sp, #112	@ 0x70
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002392:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
 80023bc:	615a      	str	r2, [r3, #20]
 80023be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	2234      	movs	r2, #52	@ 0x34
 80023c4:	2100      	movs	r1, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f006 fe83 	bl	80090d2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023cc:	4b57      	ldr	r3, [pc, #348]	@ (800252c <MX_TIM1_Init+0x1a0>)
 80023ce:	4a58      	ldr	r2, [pc, #352]	@ (8002530 <MX_TIM1_Init+0x1a4>)
 80023d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80023d2:	4b56      	ldr	r3, [pc, #344]	@ (800252c <MX_TIM1_Init+0x1a0>)
 80023d4:	2247      	movs	r2, #71	@ 0x47
 80023d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d8:	4b54      	ldr	r3, [pc, #336]	@ (800252c <MX_TIM1_Init+0x1a0>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80023de:	4b53      	ldr	r3, [pc, #332]	@ (800252c <MX_TIM1_Init+0x1a0>)
 80023e0:	2263      	movs	r2, #99	@ 0x63
 80023e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e4:	4b51      	ldr	r3, [pc, #324]	@ (800252c <MX_TIM1_Init+0x1a0>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023ea:	4b50      	ldr	r3, [pc, #320]	@ (800252c <MX_TIM1_Init+0x1a0>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023f0:	4b4e      	ldr	r3, [pc, #312]	@ (800252c <MX_TIM1_Init+0x1a0>)
 80023f2:	2280      	movs	r2, #128	@ 0x80
 80023f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023f6:	484d      	ldr	r0, [pc, #308]	@ (800252c <MX_TIM1_Init+0x1a0>)
 80023f8:	f003 fee8 	bl	80061cc <HAL_TIM_Base_Init>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002402:	f000 fa29 	bl	8002858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002406:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800240a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800240c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002410:	4619      	mov	r1, r3
 8002412:	4846      	ldr	r0, [pc, #280]	@ (800252c <MX_TIM1_Init+0x1a0>)
 8002414:	f004 fa9a 	bl	800694c <HAL_TIM_ConfigClockSource>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800241e:	f000 fa1b 	bl	8002858 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002422:	4842      	ldr	r0, [pc, #264]	@ (800252c <MX_TIM1_Init+0x1a0>)
 8002424:	f003 ff29 	bl	800627a <HAL_TIM_PWM_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800242e:	f000 fa13 	bl	8002858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002432:	2300      	movs	r3, #0
 8002434:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800243a:	2300      	movs	r3, #0
 800243c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800243e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002442:	4619      	mov	r1, r3
 8002444:	4839      	ldr	r0, [pc, #228]	@ (800252c <MX_TIM1_Init+0x1a0>)
 8002446:	f005 f8ed 	bl	8007624 <HAL_TIMEx_MasterConfigSynchronization>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002450:	f000 fa02 	bl	8002858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002454:	2360      	movs	r3, #96	@ 0x60
 8002456:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800245c:	2300      	movs	r3, #0
 800245e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002460:	2300      	movs	r3, #0
 8002462:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002464:	2300      	movs	r3, #0
 8002466:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002468:	2300      	movs	r3, #0
 800246a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800246c:	2300      	movs	r3, #0
 800246e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002470:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002474:	2200      	movs	r2, #0
 8002476:	4619      	mov	r1, r3
 8002478:	482c      	ldr	r0, [pc, #176]	@ (800252c <MX_TIM1_Init+0x1a0>)
 800247a:	f004 f953 	bl	8006724 <HAL_TIM_PWM_ConfigChannel>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002484:	f000 f9e8 	bl	8002858 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002488:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800248c:	2204      	movs	r2, #4
 800248e:	4619      	mov	r1, r3
 8002490:	4826      	ldr	r0, [pc, #152]	@ (800252c <MX_TIM1_Init+0x1a0>)
 8002492:	f004 f947 	bl	8006724 <HAL_TIM_PWM_ConfigChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800249c:	f000 f9dc 	bl	8002858 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024a0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80024a4:	2208      	movs	r2, #8
 80024a6:	4619      	mov	r1, r3
 80024a8:	4820      	ldr	r0, [pc, #128]	@ (800252c <MX_TIM1_Init+0x1a0>)
 80024aa:	f004 f93b 	bl	8006724 <HAL_TIM_PWM_ConfigChannel>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80024b4:	f000 f9d0 	bl	8002858 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024b8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80024bc:	220c      	movs	r2, #12
 80024be:	4619      	mov	r1, r3
 80024c0:	481a      	ldr	r0, [pc, #104]	@ (800252c <MX_TIM1_Init+0x1a0>)
 80024c2:	f004 f92f 	bl	8006724 <HAL_TIM_PWM_ConfigChannel>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80024cc:	f000 f9c4 	bl	8002858 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024d0:	2300      	movs	r3, #0
 80024d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80024ee:	2300      	movs	r3, #0
 80024f0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80024f2:	2300      	movs	r3, #0
 80024f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002500:	2300      	movs	r3, #0
 8002502:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002504:	2300      	movs	r3, #0
 8002506:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	4619      	mov	r1, r3
 800250c:	4807      	ldr	r0, [pc, #28]	@ (800252c <MX_TIM1_Init+0x1a0>)
 800250e:	f005 f90b 	bl	8007728 <HAL_TIMEx_ConfigBreakDeadTime>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8002518:	f000 f99e 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800251c:	4803      	ldr	r0, [pc, #12]	@ (800252c <MX_TIM1_Init+0x1a0>)
 800251e:	f000 faf3 	bl	8002b08 <HAL_TIM_MspPostInit>

}
 8002522:	bf00      	nop
 8002524:	3770      	adds	r7, #112	@ 0x70
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200002b0 	.word	0x200002b0
 8002530:	40012c00 	.word	0x40012c00

08002534 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	@ 0x28
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800253a:	f107 031c 	add.w	r3, r7, #28
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002546:	463b      	mov	r3, r7
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
 8002554:	615a      	str	r2, [r3, #20]
 8002556:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002558:	4b22      	ldr	r3, [pc, #136]	@ (80025e4 <MX_TIM2_Init+0xb0>)
 800255a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800255e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002560:	4b20      	ldr	r3, [pc, #128]	@ (80025e4 <MX_TIM2_Init+0xb0>)
 8002562:	2200      	movs	r2, #0
 8002564:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002566:	4b1f      	ldr	r3, [pc, #124]	@ (80025e4 <MX_TIM2_Init+0xb0>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800256c:	4b1d      	ldr	r3, [pc, #116]	@ (80025e4 <MX_TIM2_Init+0xb0>)
 800256e:	f04f 32ff 	mov.w	r2, #4294967295
 8002572:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002574:	4b1b      	ldr	r3, [pc, #108]	@ (80025e4 <MX_TIM2_Init+0xb0>)
 8002576:	2200      	movs	r2, #0
 8002578:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800257a:	4b1a      	ldr	r3, [pc, #104]	@ (80025e4 <MX_TIM2_Init+0xb0>)
 800257c:	2200      	movs	r2, #0
 800257e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002580:	4818      	ldr	r0, [pc, #96]	@ (80025e4 <MX_TIM2_Init+0xb0>)
 8002582:	f003 fe7a 	bl	800627a <HAL_TIM_PWM_Init>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800258c:	f000 f964 	bl	8002858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002590:	2300      	movs	r3, #0
 8002592:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002598:	f107 031c 	add.w	r3, r7, #28
 800259c:	4619      	mov	r1, r3
 800259e:	4811      	ldr	r0, [pc, #68]	@ (80025e4 <MX_TIM2_Init+0xb0>)
 80025a0:	f005 f840 	bl	8007624 <HAL_TIMEx_MasterConfigSynchronization>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80025aa:	f000 f955 	bl	8002858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025ae:	2360      	movs	r3, #96	@ 0x60
 80025b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025be:	463b      	mov	r3, r7
 80025c0:	2200      	movs	r2, #0
 80025c2:	4619      	mov	r1, r3
 80025c4:	4807      	ldr	r0, [pc, #28]	@ (80025e4 <MX_TIM2_Init+0xb0>)
 80025c6:	f004 f8ad 	bl	8006724 <HAL_TIM_PWM_ConfigChannel>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80025d0:	f000 f942 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80025d4:	4803      	ldr	r0, [pc, #12]	@ (80025e4 <MX_TIM2_Init+0xb0>)
 80025d6:	f000 fa97 	bl	8002b08 <HAL_TIM_MspPostInit>

}
 80025da:	bf00      	nop
 80025dc:	3728      	adds	r7, #40	@ 0x28
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	200002fc 	.word	0x200002fc

080025e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08e      	sub	sp, #56	@ 0x38
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80025fa:	f107 031c 	add.w	r3, r7, #28
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	609a      	str	r2, [r3, #8]
 8002606:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002608:	463b      	mov	r3, r7
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	605a      	str	r2, [r3, #4]
 8002610:	609a      	str	r2, [r3, #8]
 8002612:	60da      	str	r2, [r3, #12]
 8002614:	611a      	str	r2, [r3, #16]
 8002616:	615a      	str	r2, [r3, #20]
 8002618:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800261a:	4b36      	ldr	r3, [pc, #216]	@ (80026f4 <MX_TIM3_Init+0x10c>)
 800261c:	4a36      	ldr	r2, [pc, #216]	@ (80026f8 <MX_TIM3_Init+0x110>)
 800261e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002620:	4b34      	ldr	r3, [pc, #208]	@ (80026f4 <MX_TIM3_Init+0x10c>)
 8002622:	2200      	movs	r2, #0
 8002624:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002626:	4b33      	ldr	r3, [pc, #204]	@ (80026f4 <MX_TIM3_Init+0x10c>)
 8002628:	2200      	movs	r2, #0
 800262a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800262c:	4b31      	ldr	r3, [pc, #196]	@ (80026f4 <MX_TIM3_Init+0x10c>)
 800262e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002632:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002634:	4b2f      	ldr	r3, [pc, #188]	@ (80026f4 <MX_TIM3_Init+0x10c>)
 8002636:	2200      	movs	r2, #0
 8002638:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800263a:	4b2e      	ldr	r3, [pc, #184]	@ (80026f4 <MX_TIM3_Init+0x10c>)
 800263c:	2200      	movs	r2, #0
 800263e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002640:	482c      	ldr	r0, [pc, #176]	@ (80026f4 <MX_TIM3_Init+0x10c>)
 8002642:	f003 ff7b 	bl	800653c <HAL_TIM_IC_Init>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800264c:	f000 f904 	bl	8002858 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002650:	4828      	ldr	r0, [pc, #160]	@ (80026f4 <MX_TIM3_Init+0x10c>)
 8002652:	f003 fe12 	bl	800627a <HAL_TIM_PWM_Init>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800265c:	f000 f8fc 	bl	8002858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002660:	2300      	movs	r3, #0
 8002662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002664:	2300      	movs	r3, #0
 8002666:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002668:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800266c:	4619      	mov	r1, r3
 800266e:	4821      	ldr	r0, [pc, #132]	@ (80026f4 <MX_TIM3_Init+0x10c>)
 8002670:	f004 ffd8 	bl	8007624 <HAL_TIMEx_MasterConfigSynchronization>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800267a:	f000 f8ed 	bl	8002858 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002682:	2301      	movs	r3, #1
 8002684:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002686:	2300      	movs	r3, #0
 8002688:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigIC.ICFilter = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800268e:	f107 031c 	add.w	r3, r7, #28
 8002692:	2200      	movs	r2, #0
 8002694:	4619      	mov	r1, r3
 8002696:	4817      	ldr	r0, [pc, #92]	@ (80026f4 <MX_TIM3_Init+0x10c>)
 8002698:	f003 ffa7 	bl	80065ea <HAL_TIM_IC_ConfigChannel>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 80026a2:	f000 f8d9 	bl	8002858 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80026a6:	f107 031c 	add.w	r3, r7, #28
 80026aa:	2204      	movs	r2, #4
 80026ac:	4619      	mov	r1, r3
 80026ae:	4811      	ldr	r0, [pc, #68]	@ (80026f4 <MX_TIM3_Init+0x10c>)
 80026b0:	f003 ff9b 	bl	80065ea <HAL_TIM_IC_ConfigChannel>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80026ba:	f000 f8cd 	bl	8002858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026be:	2360      	movs	r3, #96	@ 0x60
 80026c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026ce:	463b      	mov	r3, r7
 80026d0:	2208      	movs	r2, #8
 80026d2:	4619      	mov	r1, r3
 80026d4:	4807      	ldr	r0, [pc, #28]	@ (80026f4 <MX_TIM3_Init+0x10c>)
 80026d6:	f004 f825 	bl	8006724 <HAL_TIM_PWM_ConfigChannel>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 80026e0:	f000 f8ba 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80026e4:	4803      	ldr	r0, [pc, #12]	@ (80026f4 <MX_TIM3_Init+0x10c>)
 80026e6:	f000 fa0f 	bl	8002b08 <HAL_TIM_MspPostInit>

}
 80026ea:	bf00      	nop
 80026ec:	3738      	adds	r7, #56	@ 0x38
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000348 	.word	0x20000348
 80026f8:	40000400 	.word	0x40000400

080026fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002700:	4b22      	ldr	r3, [pc, #136]	@ (800278c <MX_USART2_UART_Init+0x90>)
 8002702:	4a23      	ldr	r2, [pc, #140]	@ (8002790 <MX_USART2_UART_Init+0x94>)
 8002704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002706:	4b21      	ldr	r3, [pc, #132]	@ (800278c <MX_USART2_UART_Init+0x90>)
 8002708:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800270c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800270e:	4b1f      	ldr	r3, [pc, #124]	@ (800278c <MX_USART2_UART_Init+0x90>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002714:	4b1d      	ldr	r3, [pc, #116]	@ (800278c <MX_USART2_UART_Init+0x90>)
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800271a:	4b1c      	ldr	r3, [pc, #112]	@ (800278c <MX_USART2_UART_Init+0x90>)
 800271c:	2200      	movs	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002720:	4b1a      	ldr	r3, [pc, #104]	@ (800278c <MX_USART2_UART_Init+0x90>)
 8002722:	220c      	movs	r2, #12
 8002724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002726:	4b19      	ldr	r3, [pc, #100]	@ (800278c <MX_USART2_UART_Init+0x90>)
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800272c:	4b17      	ldr	r3, [pc, #92]	@ (800278c <MX_USART2_UART_Init+0x90>)
 800272e:	2200      	movs	r2, #0
 8002730:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002732:	4b16      	ldr	r3, [pc, #88]	@ (800278c <MX_USART2_UART_Init+0x90>)
 8002734:	2200      	movs	r2, #0
 8002736:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002738:	4b14      	ldr	r3, [pc, #80]	@ (800278c <MX_USART2_UART_Init+0x90>)
 800273a:	2200      	movs	r2, #0
 800273c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800273e:	4b13      	ldr	r3, [pc, #76]	@ (800278c <MX_USART2_UART_Init+0x90>)
 8002740:	2200      	movs	r2, #0
 8002742:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002744:	4811      	ldr	r0, [pc, #68]	@ (800278c <MX_USART2_UART_Init+0x90>)
 8002746:	f005 f87b 	bl	8007840 <HAL_UART_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002750:	f000 f882 	bl	8002858 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002754:	2100      	movs	r1, #0
 8002756:	480d      	ldr	r0, [pc, #52]	@ (800278c <MX_USART2_UART_Init+0x90>)
 8002758:	f005 fe74 	bl	8008444 <HAL_UARTEx_SetTxFifoThreshold>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002762:	f000 f879 	bl	8002858 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002766:	2100      	movs	r1, #0
 8002768:	4808      	ldr	r0, [pc, #32]	@ (800278c <MX_USART2_UART_Init+0x90>)
 800276a:	f005 fea9 	bl	80084c0 <HAL_UARTEx_SetRxFifoThreshold>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002774:	f000 f870 	bl	8002858 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002778:	4804      	ldr	r0, [pc, #16]	@ (800278c <MX_USART2_UART_Init+0x90>)
 800277a:	f005 fe2a 	bl	80083d2 <HAL_UARTEx_DisableFifoMode>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002784:	f000 f868 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000394 	.word	0x20000394
 8002790:	40004400 	.word	0x40004400

08002794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279a:	f107 030c 	add.w	r3, r7, #12
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	60da      	str	r2, [r3, #12]
 80027a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027aa:	4b29      	ldr	r3, [pc, #164]	@ (8002850 <MX_GPIO_Init+0xbc>)
 80027ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ae:	4a28      	ldr	r2, [pc, #160]	@ (8002850 <MX_GPIO_Init+0xbc>)
 80027b0:	f043 0320 	orr.w	r3, r3, #32
 80027b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027b6:	4b26      	ldr	r3, [pc, #152]	@ (8002850 <MX_GPIO_Init+0xbc>)
 80027b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c2:	4b23      	ldr	r3, [pc, #140]	@ (8002850 <MX_GPIO_Init+0xbc>)
 80027c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c6:	4a22      	ldr	r2, [pc, #136]	@ (8002850 <MX_GPIO_Init+0xbc>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027ce:	4b20      	ldr	r3, [pc, #128]	@ (8002850 <MX_GPIO_Init+0xbc>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027da:	4b1d      	ldr	r3, [pc, #116]	@ (8002850 <MX_GPIO_Init+0xbc>)
 80027dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027de:	4a1c      	ldr	r2, [pc, #112]	@ (8002850 <MX_GPIO_Init+0xbc>)
 80027e0:	f043 0302 	orr.w	r3, r3, #2
 80027e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002850 <MX_GPIO_Init+0xbc>)
 80027e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LS_DIR_Pin|RS_DIR_Pin, GPIO_PIN_RESET);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2103      	movs	r1, #3
 80027f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027fa:	f001 fdc1 	bl	8004380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80027fe:	2200      	movs	r2, #0
 8002800:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002804:	4813      	ldr	r0, [pc, #76]	@ (8002854 <MX_GPIO_Init+0xc0>)
 8002806:	f001 fdbb 	bl	8004380 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LS_DIR_Pin RS_DIR_Pin */
  GPIO_InitStruct.Pin = LS_DIR_Pin|RS_DIR_Pin;
 800280a:	2303      	movs	r3, #3
 800280c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800280e:	2301      	movs	r3, #1
 8002810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281a:	f107 030c 	add.w	r3, r7, #12
 800281e:	4619      	mov	r1, r3
 8002820:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002824:	f001 fc2a 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002828:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800282c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800282e:	2301      	movs	r3, #1
 8002830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800283a:	f107 030c 	add.w	r3, r7, #12
 800283e:	4619      	mov	r1, r3
 8002840:	4804      	ldr	r0, [pc, #16]	@ (8002854 <MX_GPIO_Init+0xc0>)
 8002842:	f001 fc1b 	bl	800407c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002846:	bf00      	nop
 8002848:	3720      	adds	r7, #32
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000
 8002854:	48000400 	.word	0x48000400

08002858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800285c:	b672      	cpsid	i
}
 800285e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002860:	bf00      	nop
 8002862:	e7fd      	b.n	8002860 <Error_Handler+0x8>

08002864 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286a:	4b0f      	ldr	r3, [pc, #60]	@ (80028a8 <HAL_MspInit+0x44>)
 800286c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800286e:	4a0e      	ldr	r2, [pc, #56]	@ (80028a8 <HAL_MspInit+0x44>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	6613      	str	r3, [r2, #96]	@ 0x60
 8002876:	4b0c      	ldr	r3, [pc, #48]	@ (80028a8 <HAL_MspInit+0x44>)
 8002878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	607b      	str	r3, [r7, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <HAL_MspInit+0x44>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002886:	4a08      	ldr	r2, [pc, #32]	@ (80028a8 <HAL_MspInit+0x44>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800288c:	6593      	str	r3, [r2, #88]	@ 0x58
 800288e:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <HAL_MspInit+0x44>)
 8002890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800289a:	f002 fd69 	bl	8005370 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40021000 	.word	0x40021000

080028ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b09a      	sub	sp, #104	@ 0x68
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028c4:	f107 0310 	add.w	r3, r7, #16
 80028c8:	2244      	movs	r2, #68	@ 0x44
 80028ca:	2100      	movs	r1, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f006 fc00 	bl	80090d2 <memset>
  if(hadc->Instance==ADC2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002950 <HAL_ADC_MspInit+0xa4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d134      	bne.n	8002946 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80028dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028e0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80028e2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80028e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028e8:	f107 0310 	add.w	r3, r7, #16
 80028ec:	4618      	mov	r0, r3
 80028ee:	f003 fa7d 	bl	8005dec <HAL_RCCEx_PeriphCLKConfig>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80028f8:	f7ff ffae 	bl	8002858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80028fc:	4b15      	ldr	r3, [pc, #84]	@ (8002954 <HAL_ADC_MspInit+0xa8>)
 80028fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002900:	4a14      	ldr	r2, [pc, #80]	@ (8002954 <HAL_ADC_MspInit+0xa8>)
 8002902:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002906:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002908:	4b12      	ldr	r3, [pc, #72]	@ (8002954 <HAL_ADC_MspInit+0xa8>)
 800290a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002914:	4b0f      	ldr	r3, [pc, #60]	@ (8002954 <HAL_ADC_MspInit+0xa8>)
 8002916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002918:	4a0e      	ldr	r2, [pc, #56]	@ (8002954 <HAL_ADC_MspInit+0xa8>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002920:	4b0c      	ldr	r3, [pc, #48]	@ (8002954 <HAL_ADC_MspInit+0xa8>)
 8002922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN17
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800292c:	2310      	movs	r3, #16
 800292e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002930:	2303      	movs	r3, #3
 8002932:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002938:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800293c:	4619      	mov	r1, r3
 800293e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002942:	f001 fb9b 	bl	800407c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002946:	bf00      	nop
 8002948:	3768      	adds	r7, #104	@ 0x68
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	50000100 	.word	0x50000100
 8002954:	40021000 	.word	0x40021000

08002958 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b09c      	sub	sp, #112	@ 0x70
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002970:	f107 0318 	add.w	r3, r7, #24
 8002974:	2244      	movs	r2, #68	@ 0x44
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f006 fbaa 	bl	80090d2 <memset>
  if(hi2c->Instance==I2C1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a2d      	ldr	r2, [pc, #180]	@ (8002a38 <HAL_I2C_MspInit+0xe0>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d153      	bne.n	8002a30 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002988:	2340      	movs	r3, #64	@ 0x40
 800298a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800298c:	2300      	movs	r3, #0
 800298e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002990:	f107 0318 	add.w	r3, r7, #24
 8002994:	4618      	mov	r0, r3
 8002996:	f003 fa29 	bl	8005dec <HAL_RCCEx_PeriphCLKConfig>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80029a0:	f7ff ff5a 	bl	8002858 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a4:	4b25      	ldr	r3, [pc, #148]	@ (8002a3c <HAL_I2C_MspInit+0xe4>)
 80029a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a8:	4a24      	ldr	r2, [pc, #144]	@ (8002a3c <HAL_I2C_MspInit+0xe4>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029b0:	4b22      	ldr	r3, [pc, #136]	@ (8002a3c <HAL_I2C_MspInit+0xe4>)
 80029b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029bc:	4b1f      	ldr	r3, [pc, #124]	@ (8002a3c <HAL_I2C_MspInit+0xe4>)
 80029be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c0:	4a1e      	ldr	r2, [pc, #120]	@ (8002a3c <HAL_I2C_MspInit+0xe4>)
 80029c2:	f043 0302 	orr.w	r3, r3, #2
 80029c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029c8:	4b1c      	ldr	r3, [pc, #112]	@ (8002a3c <HAL_I2C_MspInit+0xe4>)
 80029ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80029d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029da:	2312      	movs	r3, #18
 80029dc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029de:	2301      	movs	r3, #1
 80029e0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e2:	2300      	movs	r3, #0
 80029e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029e6:	2304      	movs	r3, #4
 80029e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ea:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80029ee:	4619      	mov	r1, r3
 80029f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029f4:	f001 fb42 	bl	800407c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80029f8:	2380      	movs	r3, #128	@ 0x80
 80029fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029fc:	2312      	movs	r3, #18
 80029fe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a00:	2301      	movs	r3, #1
 8002a02:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a04:	2300      	movs	r3, #0
 8002a06:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a08:	2304      	movs	r3, #4
 8002a0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a0c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002a10:	4619      	mov	r1, r3
 8002a12:	480b      	ldr	r0, [pc, #44]	@ (8002a40 <HAL_I2C_MspInit+0xe8>)
 8002a14:	f001 fb32 	bl	800407c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a18:	4b08      	ldr	r3, [pc, #32]	@ (8002a3c <HAL_I2C_MspInit+0xe4>)
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a1c:	4a07      	ldr	r2, [pc, #28]	@ (8002a3c <HAL_I2C_MspInit+0xe4>)
 8002a1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a22:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a24:	4b05      	ldr	r3, [pc, #20]	@ (8002a3c <HAL_I2C_MspInit+0xe4>)
 8002a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a30:	bf00      	nop
 8002a32:	3770      	adds	r7, #112	@ 0x70
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40005400 	.word	0x40005400
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	48000400 	.word	0x48000400

08002a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0a      	ldr	r2, [pc, #40]	@ (8002a7c <HAL_TIM_Base_MspInit+0x38>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d10b      	bne.n	8002a6e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a56:	4b0a      	ldr	r3, [pc, #40]	@ (8002a80 <HAL_TIM_Base_MspInit+0x3c>)
 8002a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a5a:	4a09      	ldr	r2, [pc, #36]	@ (8002a80 <HAL_TIM_Base_MspInit+0x3c>)
 8002a5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a60:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a62:	4b07      	ldr	r3, [pc, #28]	@ (8002a80 <HAL_TIM_Base_MspInit+0x3c>)
 8002a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002a6e:	bf00      	nop
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40012c00 	.word	0x40012c00
 8002a80:	40021000 	.word	0x40021000

08002a84 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	@ 0x28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 0314 	add.w	r3, r7, #20
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a17      	ldr	r2, [pc, #92]	@ (8002b00 <HAL_TIM_IC_MspInit+0x7c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d128      	bne.n	8002af8 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002aa6:	4b17      	ldr	r3, [pc, #92]	@ (8002b04 <HAL_TIM_IC_MspInit+0x80>)
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aaa:	4a16      	ldr	r2, [pc, #88]	@ (8002b04 <HAL_TIM_IC_MspInit+0x80>)
 8002aac:	f043 0302 	orr.w	r3, r3, #2
 8002ab0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ab2:	4b14      	ldr	r3, [pc, #80]	@ (8002b04 <HAL_TIM_IC_MspInit+0x80>)
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002abe:	4b11      	ldr	r3, [pc, #68]	@ (8002b04 <HAL_TIM_IC_MspInit+0x80>)
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac2:	4a10      	ldr	r2, [pc, #64]	@ (8002b04 <HAL_TIM_IC_MspInit+0x80>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002aca:	4b0e      	ldr	r3, [pc, #56]	@ (8002b04 <HAL_TIM_IC_MspInit+0x80>)
 8002acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_R_Pin|ENC_L_Pin;
 8002ad6:	23c0      	movs	r3, #192	@ 0xc0
 8002ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2302      	movs	r3, #2
 8002adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aea:	f107 0314 	add.w	r3, r7, #20
 8002aee:	4619      	mov	r1, r3
 8002af0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002af4:	f001 fac2 	bl	800407c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002af8:	bf00      	nop
 8002afa:	3728      	adds	r7, #40	@ 0x28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40000400 	.word	0x40000400
 8002b04:	40021000 	.word	0x40021000

08002b08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	@ 0x28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b10:	f107 0314 	add.w	r3, r7, #20
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a2c      	ldr	r2, [pc, #176]	@ (8002bd8 <HAL_TIM_MspPostInit+0xd0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d130      	bne.n	8002b8c <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002bdc <HAL_TIM_MspPostInit+0xd4>)
 8002b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2e:	4a2b      	ldr	r2, [pc, #172]	@ (8002bdc <HAL_TIM_MspPostInit+0xd4>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b36:	4b29      	ldr	r3, [pc, #164]	@ (8002bdc <HAL_TIM_MspPostInit+0xd4>)
 8002b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = RS_M2_Pin|RS_M1_Pin|LS_M2_Pin;
 8002b42:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b50:	2300      	movs	r3, #0
 8002b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002b54:	2306      	movs	r3, #6
 8002b56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b62:	f001 fa8b 	bl	800407c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LS_M1_Pin;
 8002b66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b74:	2300      	movs	r3, #0
 8002b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8002b78:	230b      	movs	r3, #11
 8002b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LS_M1_GPIO_Port, &GPIO_InitStruct);
 8002b7c:	f107 0314 	add.w	r3, r7, #20
 8002b80:	4619      	mov	r1, r3
 8002b82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b86:	f001 fa79 	bl	800407c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b8a:	e020      	b.n	8002bce <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM3)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a13      	ldr	r2, [pc, #76]	@ (8002be0 <HAL_TIM_MspPostInit+0xd8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d11b      	bne.n	8002bce <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b96:	4b11      	ldr	r3, [pc, #68]	@ (8002bdc <HAL_TIM_MspPostInit+0xd4>)
 8002b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9a:	4a10      	ldr	r2, [pc, #64]	@ (8002bdc <HAL_TIM_MspPostInit+0xd4>)
 8002b9c:	f043 0302 	orr.w	r3, r3, #2
 8002ba0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bdc <HAL_TIM_MspPostInit+0xd4>)
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc2:	f107 0314 	add.w	r3, r7, #20
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4806      	ldr	r0, [pc, #24]	@ (8002be4 <HAL_TIM_MspPostInit+0xdc>)
 8002bca:	f001 fa57 	bl	800407c <HAL_GPIO_Init>
}
 8002bce:	bf00      	nop
 8002bd0:	3728      	adds	r7, #40	@ 0x28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40012c00 	.word	0x40012c00
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40000400 	.word	0x40000400
 8002be4:	48000400 	.word	0x48000400

08002be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b09a      	sub	sp, #104	@ 0x68
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c00:	f107 0310 	add.w	r3, r7, #16
 8002c04:	2244      	movs	r2, #68	@ 0x44
 8002c06:	2100      	movs	r1, #0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f006 fa62 	bl	80090d2 <memset>
  if(huart->Instance==USART2)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a1f      	ldr	r2, [pc, #124]	@ (8002c90 <HAL_UART_MspInit+0xa8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d136      	bne.n	8002c86 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c20:	f107 0310 	add.w	r3, r7, #16
 8002c24:	4618      	mov	r0, r3
 8002c26:	f003 f8e1 	bl	8005dec <HAL_RCCEx_PeriphCLKConfig>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c30:	f7ff fe12 	bl	8002858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c34:	4b17      	ldr	r3, [pc, #92]	@ (8002c94 <HAL_UART_MspInit+0xac>)
 8002c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c38:	4a16      	ldr	r2, [pc, #88]	@ (8002c94 <HAL_UART_MspInit+0xac>)
 8002c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c40:	4b14      	ldr	r3, [pc, #80]	@ (8002c94 <HAL_UART_MspInit+0xac>)
 8002c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4c:	4b11      	ldr	r3, [pc, #68]	@ (8002c94 <HAL_UART_MspInit+0xac>)
 8002c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c50:	4a10      	ldr	r2, [pc, #64]	@ (8002c94 <HAL_UART_MspInit+0xac>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c58:	4b0e      	ldr	r3, [pc, #56]	@ (8002c94 <HAL_UART_MspInit+0xac>)
 8002c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002c64:	230c      	movs	r3, #12
 8002c66:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c70:	2300      	movs	r3, #0
 8002c72:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c74:	2307      	movs	r3, #7
 8002c76:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c78:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c82:	f001 f9fb 	bl	800407c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c86:	bf00      	nop
 8002c88:	3768      	adds	r7, #104	@ 0x68
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40004400 	.word	0x40004400
 8002c94:	40021000 	.word	0x40021000

08002c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c9c:	bf00      	nop
 8002c9e:	e7fd      	b.n	8002c9c <NMI_Handler+0x4>

08002ca0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ca4:	bf00      	nop
 8002ca6:	e7fd      	b.n	8002ca4 <HardFault_Handler+0x4>

08002ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cac:	bf00      	nop
 8002cae:	e7fd      	b.n	8002cac <MemManage_Handler+0x4>

08002cb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cb4:	bf00      	nop
 8002cb6:	e7fd      	b.n	8002cb4 <BusFault_Handler+0x4>

08002cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cbc:	bf00      	nop
 8002cbe:	e7fd      	b.n	8002cbc <UsageFault_Handler+0x4>

08002cc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cee:	f000 f957 	bl	8002fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0
  return 1;
 8002cfa:	2301      	movs	r3, #1
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <_kill>:

int _kill(int pid, int sig)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d10:	f006 fa32 	bl	8009178 <__errno>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2216      	movs	r2, #22
 8002d18:	601a      	str	r2, [r3, #0]
  return -1;
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <_exit>:

void _exit (int status)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d2e:	f04f 31ff 	mov.w	r1, #4294967295
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff ffe7 	bl	8002d06 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d38:	bf00      	nop
 8002d3a:	e7fd      	b.n	8002d38 <_exit+0x12>

08002d3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	e00a      	b.n	8002d64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d4e:	f3af 8000 	nop.w
 8002d52:	4601      	mov	r1, r0
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	60ba      	str	r2, [r7, #8]
 8002d5a:	b2ca      	uxtb	r2, r1
 8002d5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	3301      	adds	r3, #1
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	dbf0      	blt.n	8002d4e <_read+0x12>
  }

  return len;
 8002d6c:	687b      	ldr	r3, [r7, #4]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b086      	sub	sp, #24
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	e009      	b.n	8002d9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	60ba      	str	r2, [r7, #8]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	dbf1      	blt.n	8002d88 <_write+0x12>
  }
  return len;
 8002da4:	687b      	ldr	r3, [r7, #4]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <_close>:

int _close(int file)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002db6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002dd6:	605a      	str	r2, [r3, #4]
  return 0;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <_isatty>:

int _isatty(int file)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dee:	2301      	movs	r3, #1
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e20:	4a14      	ldr	r2, [pc, #80]	@ (8002e74 <_sbrk+0x5c>)
 8002e22:	4b15      	ldr	r3, [pc, #84]	@ (8002e78 <_sbrk+0x60>)
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e2c:	4b13      	ldr	r3, [pc, #76]	@ (8002e7c <_sbrk+0x64>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d102      	bne.n	8002e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e34:	4b11      	ldr	r3, [pc, #68]	@ (8002e7c <_sbrk+0x64>)
 8002e36:	4a12      	ldr	r2, [pc, #72]	@ (8002e80 <_sbrk+0x68>)
 8002e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e3a:	4b10      	ldr	r3, [pc, #64]	@ (8002e7c <_sbrk+0x64>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d207      	bcs.n	8002e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e48:	f006 f996 	bl	8009178 <__errno>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	220c      	movs	r2, #12
 8002e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e52:	f04f 33ff 	mov.w	r3, #4294967295
 8002e56:	e009      	b.n	8002e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e58:	4b08      	ldr	r3, [pc, #32]	@ (8002e7c <_sbrk+0x64>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e5e:	4b07      	ldr	r3, [pc, #28]	@ (8002e7c <_sbrk+0x64>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	4a05      	ldr	r2, [pc, #20]	@ (8002e7c <_sbrk+0x64>)
 8002e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20008000 	.word	0x20008000
 8002e78:	00000400 	.word	0x00000400
 8002e7c:	20000430 	.word	0x20000430
 8002e80:	20000588 	.word	0x20000588

08002e84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e88:	4b06      	ldr	r3, [pc, #24]	@ (8002ea4 <SystemInit+0x20>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e8e:	4a05      	ldr	r2, [pc, #20]	@ (8002ea4 <SystemInit+0x20>)
 8002e90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ea8:	480d      	ldr	r0, [pc, #52]	@ (8002ee0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002eaa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002eac:	f7ff ffea 	bl	8002e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eb0:	480c      	ldr	r0, [pc, #48]	@ (8002ee4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002eb2:	490d      	ldr	r1, [pc, #52]	@ (8002ee8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002eec <LoopForever+0xe>)
  movs r3, #0
 8002eb6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002eb8:	e002      	b.n	8002ec0 <LoopCopyDataInit>

08002eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ebe:	3304      	adds	r3, #4

08002ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec4:	d3f9      	bcc.n	8002eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ec8:	4c0a      	ldr	r4, [pc, #40]	@ (8002ef4 <LoopForever+0x16>)
  movs r3, #0
 8002eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ecc:	e001      	b.n	8002ed2 <LoopFillZerobss>

08002ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed0:	3204      	adds	r2, #4

08002ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed4:	d3fb      	bcc.n	8002ece <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002ed6:	f006 f955 	bl	8009184 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002eda:	f7fe fe6d 	bl	8001bb8 <main>

08002ede <LoopForever>:

LoopForever:
    b LoopForever
 8002ede:	e7fe      	b.n	8002ede <LoopForever>
  ldr   r0, =_estack
 8002ee0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ee8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002eec:	0800bcf0 	.word	0x0800bcf0
  ldr r2, =_sbss
 8002ef0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002ef4:	20000584 	.word	0x20000584

08002ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ef8:	e7fe      	b.n	8002ef8 <ADC1_2_IRQHandler>

08002efa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f04:	2003      	movs	r0, #3
 8002f06:	f001 f887 	bl	8004018 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f000 f80e 	bl	8002f2c <HAL_InitTick>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	71fb      	strb	r3, [r7, #7]
 8002f1a:	e001      	b.n	8002f20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f1c:	f7ff fca2 	bl	8002864 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f20:	79fb      	ldrb	r3, [r7, #7]

}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002f38:	4b16      	ldr	r3, [pc, #88]	@ (8002f94 <HAL_InitTick+0x68>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d022      	beq.n	8002f86 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002f40:	4b15      	ldr	r3, [pc, #84]	@ (8002f98 <HAL_InitTick+0x6c>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b13      	ldr	r3, [pc, #76]	@ (8002f94 <HAL_InitTick+0x68>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002f4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f54:	4618      	mov	r0, r3
 8002f56:	f001 f884 	bl	8004062 <HAL_SYSTICK_Config>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10f      	bne.n	8002f80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b0f      	cmp	r3, #15
 8002f64:	d809      	bhi.n	8002f7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f66:	2200      	movs	r2, #0
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f6e:	f001 f85e 	bl	800402e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f72:	4a0a      	ldr	r2, [pc, #40]	@ (8002f9c <HAL_InitTick+0x70>)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	e007      	b.n	8002f8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	73fb      	strb	r3, [r7, #15]
 8002f7e:	e004      	b.n	8002f8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
 8002f84:	e001      	b.n	8002f8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20000008 	.word	0x20000008
 8002f98:	20000000 	.word	0x20000000
 8002f9c:	20000004 	.word	0x20000004

08002fa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fa4:	4b05      	ldr	r3, [pc, #20]	@ (8002fbc <HAL_IncTick+0x1c>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	4b05      	ldr	r3, [pc, #20]	@ (8002fc0 <HAL_IncTick+0x20>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4413      	add	r3, r2
 8002fae:	4a03      	ldr	r2, [pc, #12]	@ (8002fbc <HAL_IncTick+0x1c>)
 8002fb0:	6013      	str	r3, [r2, #0]
}
 8002fb2:	bf00      	nop
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	20000434 	.word	0x20000434
 8002fc0:	20000008 	.word	0x20000008

08002fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc8:	4b03      	ldr	r3, [pc, #12]	@ (8002fd8 <HAL_GetTick+0x14>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	20000434 	.word	0x20000434

08002fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe4:	f7ff ffee 	bl	8002fc4 <HAL_GetTick>
 8002fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff4:	d004      	beq.n	8003000 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ff6:	4b09      	ldr	r3, [pc, #36]	@ (800301c <HAL_Delay+0x40>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003000:	bf00      	nop
 8003002:	f7ff ffdf 	bl	8002fc4 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	429a      	cmp	r2, r3
 8003010:	d8f7      	bhi.n	8003002 <HAL_Delay+0x26>
  {
  }
}
 8003012:	bf00      	nop
 8003014:	bf00      	nop
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20000008 	.word	0x20000008

08003020 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	609a      	str	r2, [r3, #8]
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	609a      	str	r2, [r3, #8]
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800307c:	4618      	mov	r0, r3
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3360      	adds	r3, #96	@ 0x60
 800309a:	461a      	mov	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4b08      	ldr	r3, [pc, #32]	@ (80030cc <LL_ADC_SetOffset+0x44>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80030c0:	bf00      	nop
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	03fff000 	.word	0x03fff000

080030d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3360      	adds	r3, #96	@ 0x60
 80030de:	461a      	mov	r2, r3
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3360      	adds	r3, #96	@ 0x60
 800310c:	461a      	mov	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	431a      	orrs	r2, r3
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003126:	bf00      	nop
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003132:	b480      	push	{r7}
 8003134:	b087      	sub	sp, #28
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	3360      	adds	r3, #96	@ 0x60
 8003142:	461a      	mov	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	431a      	orrs	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800315c:	bf00      	nop
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	3360      	adds	r3, #96	@ 0x60
 8003178:	461a      	mov	r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	431a      	orrs	r2, r3
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003192:	bf00      	nop
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	615a      	str	r2, [r3, #20]
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	3330      	adds	r3, #48	@ 0x30
 80031d4:	461a      	mov	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	0a1b      	lsrs	r3, r3, #8
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	f003 030c 	and.w	r3, r3, #12
 80031e0:	4413      	add	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f003 031f 	and.w	r3, r3, #31
 80031ee:	211f      	movs	r1, #31
 80031f0:	fa01 f303 	lsl.w	r3, r1, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	401a      	ands	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	0e9b      	lsrs	r3, r3, #26
 80031fc:	f003 011f 	and.w	r1, r3, #31
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	fa01 f303 	lsl.w	r3, r1, r3
 800320a:	431a      	orrs	r2, r3
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003210:	bf00      	nop
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3314      	adds	r3, #20
 800322c:	461a      	mov	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	0e5b      	lsrs	r3, r3, #25
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	4413      	add	r3, r2
 800323a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	0d1b      	lsrs	r3, r3, #20
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	2107      	movs	r1, #7
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	401a      	ands	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	0d1b      	lsrs	r3, r3, #20
 8003256:	f003 031f 	and.w	r3, r3, #31
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	fa01 f303 	lsl.w	r3, r1, r3
 8003260:	431a      	orrs	r2, r3
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003266:	bf00      	nop
 8003268:	371c      	adds	r7, #28
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800328c:	43db      	mvns	r3, r3
 800328e:	401a      	ands	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f003 0318 	and.w	r3, r3, #24
 8003296:	4908      	ldr	r1, [pc, #32]	@ (80032b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003298:	40d9      	lsrs	r1, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	400b      	ands	r3, r1
 800329e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a2:	431a      	orrs	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80032aa:	bf00      	nop
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	0007ffff 	.word	0x0007ffff

080032bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80032cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6093      	str	r3, [r2, #8]
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032f4:	d101      	bne.n	80032fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003318:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800331c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003340:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003344:	d101      	bne.n	800334a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <LL_ADC_IsEnabled+0x18>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <LL_ADC_IsEnabled+0x1a>
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b04      	cmp	r3, #4
 8003390:	d101      	bne.n	8003396 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d101      	bne.n	80033bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033cc:	b590      	push	{r4, r7, lr}
 80033ce:	b089      	sub	sp, #36	@ 0x24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e167      	b.n	80036b6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d109      	bne.n	8003408 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff fa59 	bl	80028ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff ff67 	bl	80032e0 <LL_ADC_IsDeepPowerDownEnabled>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d004      	beq.n	8003422 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff ff4d 	bl	80032bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff ff82 	bl	8003330 <LL_ADC_IsInternalRegulatorEnabled>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d115      	bne.n	800345e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff ff66 	bl	8003308 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800343c:	4ba0      	ldr	r3, [pc, #640]	@ (80036c0 <HAL_ADC_Init+0x2f4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	099b      	lsrs	r3, r3, #6
 8003442:	4aa0      	ldr	r2, [pc, #640]	@ (80036c4 <HAL_ADC_Init+0x2f8>)
 8003444:	fba2 2303 	umull	r2, r3, r2, r3
 8003448:	099b      	lsrs	r3, r3, #6
 800344a:	3301      	adds	r3, #1
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003450:	e002      	b.n	8003458 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	3b01      	subs	r3, #1
 8003456:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f9      	bne.n	8003452 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff ff64 	bl	8003330 <LL_ADC_IsInternalRegulatorEnabled>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10d      	bne.n	800348a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003472:	f043 0210 	orr.w	r2, r3, #16
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800347e:	f043 0201 	orr.w	r2, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff ff75 	bl	800337e <LL_ADC_REG_IsConversionOngoing>
 8003494:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f040 8100 	bne.w	80036a4 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f040 80fc 	bne.w	80036a4 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80034b4:	f043 0202 	orr.w	r2, r3, #2
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff ff49 	bl	8003358 <LL_ADC_IsEnabled>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d111      	bne.n	80034f0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034cc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80034d0:	f7ff ff42 	bl	8003358 <LL_ADC_IsEnabled>
 80034d4:	4604      	mov	r4, r0
 80034d6:	487c      	ldr	r0, [pc, #496]	@ (80036c8 <HAL_ADC_Init+0x2fc>)
 80034d8:	f7ff ff3e 	bl	8003358 <LL_ADC_IsEnabled>
 80034dc:	4603      	mov	r3, r0
 80034de:	4323      	orrs	r3, r4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d105      	bne.n	80034f0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	4619      	mov	r1, r3
 80034ea:	4878      	ldr	r0, [pc, #480]	@ (80036cc <HAL_ADC_Init+0x300>)
 80034ec:	f7ff fd98 	bl	8003020 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	7f5b      	ldrb	r3, [r3, #29]
 80034f4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034fa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003500:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003506:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800350e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003510:	4313      	orrs	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800351a:	2b01      	cmp	r3, #1
 800351c:	d106      	bne.n	800352c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003522:	3b01      	subs	r3, #1
 8003524:	045b      	lsls	r3, r3, #17
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	4313      	orrs	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003530:	2b00      	cmp	r3, #0
 8003532:	d009      	beq.n	8003548 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003538:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003540:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4313      	orrs	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	4b60      	ldr	r3, [pc, #384]	@ (80036d0 <HAL_ADC_Init+0x304>)
 8003550:	4013      	ands	r3, r2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6812      	ldr	r2, [r2, #0]
 8003556:	69b9      	ldr	r1, [r7, #24]
 8003558:	430b      	orrs	r3, r1
 800355a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff ff14 	bl	80033a4 <LL_ADC_INJ_IsConversionOngoing>
 800357c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d16d      	bne.n	8003660 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d16a      	bne.n	8003660 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800358e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003596:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035a6:	f023 0302 	bic.w	r3, r3, #2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6812      	ldr	r2, [r2, #0]
 80035ae:	69b9      	ldr	r1, [r7, #24]
 80035b0:	430b      	orrs	r3, r1
 80035b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d017      	beq.n	80035ec <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691a      	ldr	r2, [r3, #16]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80035ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80035d4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80035d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6911      	ldr	r1, [r2, #16]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	430b      	orrs	r3, r1
 80035e6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80035ea:	e013      	b.n	8003614 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80035fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800360c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003610:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800361a:	2b01      	cmp	r3, #1
 800361c:	d118      	bne.n	8003650 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003628:	f023 0304 	bic.w	r3, r3, #4
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003634:	4311      	orrs	r1, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800363a:	4311      	orrs	r1, r2
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003640:	430a      	orrs	r2, r1
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0201 	orr.w	r2, r2, #1
 800364c:	611a      	str	r2, [r3, #16]
 800364e:	e007      	b.n	8003660 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691a      	ldr	r2, [r3, #16]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d10c      	bne.n	8003682 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366e:	f023 010f 	bic.w	r1, r3, #15
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	1e5a      	subs	r2, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003680:	e007      	b.n	8003692 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 020f 	bic.w	r2, r2, #15
 8003690:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003696:	f023 0303 	bic.w	r3, r3, #3
 800369a:	f043 0201 	orr.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036a2:	e007      	b.n	80036b4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a8:	f043 0210 	orr.w	r2, r3, #16
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80036b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3724      	adds	r7, #36	@ 0x24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd90      	pop	{r4, r7, pc}
 80036be:	bf00      	nop
 80036c0:	20000000 	.word	0x20000000
 80036c4:	053e2d63 	.word	0x053e2d63
 80036c8:	50000100 	.word	0x50000100
 80036cc:	50000300 	.word	0x50000300
 80036d0:	fff04007 	.word	0xfff04007

080036d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b0b6      	sub	sp, #216	@ 0xd8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d101      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x22>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e3c8      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x7b4>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fe3b 	bl	800337e <LL_ADC_REG_IsConversionOngoing>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	f040 83ad 	bne.w	8003e6a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	6859      	ldr	r1, [r3, #4]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	f7ff fd51 	bl	80031c4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff fe29 	bl	800337e <LL_ADC_REG_IsConversionOngoing>
 800372c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff fe35 	bl	80033a4 <LL_ADC_INJ_IsConversionOngoing>
 800373a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800373e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003742:	2b00      	cmp	r3, #0
 8003744:	f040 81d9 	bne.w	8003afa <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003748:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800374c:	2b00      	cmp	r3, #0
 800374e:	f040 81d4 	bne.w	8003afa <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800375a:	d10f      	bne.n	800377c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2200      	movs	r2, #0
 8003766:	4619      	mov	r1, r3
 8003768:	f7ff fd58 	bl	800321c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff fd12 	bl	800319e <LL_ADC_SetSamplingTimeCommonConfig>
 800377a:	e00e      	b.n	800379a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	6819      	ldr	r1, [r3, #0]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	461a      	mov	r2, r3
 800378a:	f7ff fd47 	bl	800321c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff fd02 	bl	800319e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	08db      	lsrs	r3, r3, #3
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d022      	beq.n	8003802 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	6919      	ldr	r1, [r3, #16]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80037cc:	f7ff fc5c 	bl	8003088 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	6919      	ldr	r1, [r3, #16]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	461a      	mov	r2, r3
 80037de:	f7ff fca8 	bl	8003132 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d102      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x124>
 80037f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037f6:	e000      	b.n	80037fa <HAL_ADC_ConfigChannel+0x126>
 80037f8:	2300      	movs	r3, #0
 80037fa:	461a      	mov	r2, r3
 80037fc:	f7ff fcb4 	bl	8003168 <LL_ADC_SetOffsetSaturation>
 8003800:	e17b      	b.n	8003afa <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff fc61 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 800380e:	4603      	mov	r3, r0
 8003810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10a      	bne.n	800382e <HAL_ADC_ConfigChannel+0x15a>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff fc56 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 8003824:	4603      	mov	r3, r0
 8003826:	0e9b      	lsrs	r3, r3, #26
 8003828:	f003 021f 	and.w	r2, r3, #31
 800382c:	e01e      	b.n	800386c <HAL_ADC_ConfigChannel+0x198>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2100      	movs	r1, #0
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff fc4b 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 800383a:	4603      	mov	r3, r0
 800383c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003840:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003844:	fa93 f3a3 	rbit	r3, r3
 8003848:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800384c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003850:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003854:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800385c:	2320      	movs	r3, #32
 800385e:	e004      	b.n	800386a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003860:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003864:	fab3 f383 	clz	r3, r3
 8003868:	b2db      	uxtb	r3, r3
 800386a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003874:	2b00      	cmp	r3, #0
 8003876:	d105      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x1b0>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	0e9b      	lsrs	r3, r3, #26
 800387e:	f003 031f 	and.w	r3, r3, #31
 8003882:	e018      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x1e2>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003890:	fa93 f3a3 	rbit	r3, r3
 8003894:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003898:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800389c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80038a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80038a8:	2320      	movs	r3, #32
 80038aa:	e004      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80038ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80038b0:	fab3 f383 	clz	r3, r3
 80038b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d106      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2200      	movs	r2, #0
 80038c0:	2100      	movs	r1, #0
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff fc1a 	bl	80030fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2101      	movs	r1, #1
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff fbfe 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10a      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x220>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2101      	movs	r1, #1
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff fbf3 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 80038ea:	4603      	mov	r3, r0
 80038ec:	0e9b      	lsrs	r3, r3, #26
 80038ee:	f003 021f 	and.w	r2, r3, #31
 80038f2:	e01e      	b.n	8003932 <HAL_ADC_ConfigChannel+0x25e>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2101      	movs	r1, #1
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff fbe8 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 8003900:	4603      	mov	r3, r0
 8003902:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003906:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800390a:	fa93 f3a3 	rbit	r3, r3
 800390e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003916:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800391a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003922:	2320      	movs	r3, #32
 8003924:	e004      	b.n	8003930 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003926:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800393a:	2b00      	cmp	r3, #0
 800393c:	d105      	bne.n	800394a <HAL_ADC_ConfigChannel+0x276>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	0e9b      	lsrs	r3, r3, #26
 8003944:	f003 031f 	and.w	r3, r3, #31
 8003948:	e018      	b.n	800397c <HAL_ADC_ConfigChannel+0x2a8>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003952:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003956:	fa93 f3a3 	rbit	r3, r3
 800395a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800395e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003962:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003966:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800396e:	2320      	movs	r3, #32
 8003970:	e004      	b.n	800397c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003972:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003976:	fab3 f383 	clz	r3, r3
 800397a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800397c:	429a      	cmp	r2, r3
 800397e:	d106      	bne.n	800398e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2200      	movs	r2, #0
 8003986:	2101      	movs	r1, #1
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff fbb7 	bl	80030fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2102      	movs	r1, #2
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff fb9b 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 800399a:	4603      	mov	r3, r0
 800399c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10a      	bne.n	80039ba <HAL_ADC_ConfigChannel+0x2e6>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2102      	movs	r1, #2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff fb90 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 80039b0:	4603      	mov	r3, r0
 80039b2:	0e9b      	lsrs	r3, r3, #26
 80039b4:	f003 021f 	and.w	r2, r3, #31
 80039b8:	e01e      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x324>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2102      	movs	r1, #2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff fb85 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 80039c6:	4603      	mov	r3, r0
 80039c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039d0:	fa93 f3a3 	rbit	r3, r3
 80039d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80039d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80039e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80039e8:	2320      	movs	r3, #32
 80039ea:	e004      	b.n	80039f6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80039ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039f0:	fab3 f383 	clz	r3, r3
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d105      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x33c>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	0e9b      	lsrs	r3, r3, #26
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	e016      	b.n	8003a3e <HAL_ADC_ConfigChannel+0x36a>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a1c:	fa93 f3a3 	rbit	r3, r3
 8003a20:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003a22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003a30:	2320      	movs	r3, #32
 8003a32:	e004      	b.n	8003a3e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a38:	fab3 f383 	clz	r3, r3
 8003a3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d106      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2200      	movs	r2, #0
 8003a48:	2102      	movs	r1, #2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff fb56 	bl	80030fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2103      	movs	r1, #3
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff fb3a 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10a      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x3a8>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2103      	movs	r1, #3
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff fb2f 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 8003a72:	4603      	mov	r3, r0
 8003a74:	0e9b      	lsrs	r3, r3, #26
 8003a76:	f003 021f 	and.w	r2, r3, #31
 8003a7a:	e017      	b.n	8003aac <HAL_ADC_ConfigChannel+0x3d8>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2103      	movs	r1, #3
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff fb24 	bl	80030d0 <LL_ADC_GetOffsetChannel>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a8e:	fa93 f3a3 	rbit	r3, r3
 8003a92:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003a94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a96:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003a98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003a9e:	2320      	movs	r3, #32
 8003aa0:	e003      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003aa2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003aa4:	fab3 f383 	clz	r3, r3
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d105      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x3f0>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	0e9b      	lsrs	r3, r3, #26
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	e011      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x414>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003acc:	fa93 f3a3 	rbit	r3, r3
 8003ad0:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003ad2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ad4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003ad6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003adc:	2320      	movs	r3, #32
 8003ade:	e003      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003ae0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ae2:	fab3 f383 	clz	r3, r3
 8003ae6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d106      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2200      	movs	r2, #0
 8003af2:	2103      	movs	r1, #3
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fb01 	bl	80030fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff fc2a 	bl	8003358 <LL_ADC_IsEnabled>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f040 8140 	bne.w	8003d8c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	6819      	ldr	r1, [r3, #0]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	f7ff fbab 	bl	8003274 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	4a8f      	ldr	r2, [pc, #572]	@ (8003d60 <HAL_ADC_ConfigChannel+0x68c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	f040 8131 	bne.w	8003d8c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10b      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x47e>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	0e9b      	lsrs	r3, r3, #26
 8003b40:	3301      	adds	r3, #1
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	2b09      	cmp	r3, #9
 8003b48:	bf94      	ite	ls
 8003b4a:	2301      	movls	r3, #1
 8003b4c:	2300      	movhi	r3, #0
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	e019      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x4b2>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b5a:	fa93 f3a3 	rbit	r3, r3
 8003b5e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003b60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b62:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003b64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003b6a:	2320      	movs	r3, #32
 8003b6c:	e003      	b.n	8003b76 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003b6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b70:	fab3 f383 	clz	r3, r3
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	3301      	adds	r3, #1
 8003b78:	f003 031f 	and.w	r3, r3, #31
 8003b7c:	2b09      	cmp	r3, #9
 8003b7e:	bf94      	ite	ls
 8003b80:	2301      	movls	r3, #1
 8003b82:	2300      	movhi	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d079      	beq.n	8003c7e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d107      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x4d2>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	0e9b      	lsrs	r3, r3, #26
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	069b      	lsls	r3, r3, #26
 8003ba0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ba4:	e015      	b.n	8003bd2 <HAL_ADC_ConfigChannel+0x4fe>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bae:	fa93 f3a3 	rbit	r3, r3
 8003bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003bb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bb6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003bbe:	2320      	movs	r3, #32
 8003bc0:	e003      	b.n	8003bca <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc4:	fab3 f383 	clz	r3, r3
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	069b      	lsls	r3, r3, #26
 8003bce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x51e>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	0e9b      	lsrs	r3, r3, #26
 8003be4:	3301      	adds	r3, #1
 8003be6:	f003 031f 	and.w	r3, r3, #31
 8003bea:	2101      	movs	r1, #1
 8003bec:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf0:	e017      	b.n	8003c22 <HAL_ADC_ConfigChannel+0x54e>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bfa:	fa93 f3a3 	rbit	r3, r3
 8003bfe:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c02:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003c04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003c0a:	2320      	movs	r3, #32
 8003c0c:	e003      	b.n	8003c16 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003c0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c10:	fab3 f383 	clz	r3, r3
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	3301      	adds	r3, #1
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c22:	ea42 0103 	orr.w	r1, r2, r3
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10a      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x574>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	0e9b      	lsrs	r3, r3, #26
 8003c38:	3301      	adds	r3, #1
 8003c3a:	f003 021f 	and.w	r2, r3, #31
 8003c3e:	4613      	mov	r3, r2
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	4413      	add	r3, r2
 8003c44:	051b      	lsls	r3, r3, #20
 8003c46:	e018      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x5a6>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c50:	fa93 f3a3 	rbit	r3, r3
 8003c54:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003c60:	2320      	movs	r3, #32
 8003c62:	e003      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c66:	fab3 f383 	clz	r3, r3
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	f003 021f 	and.w	r2, r3, #31
 8003c72:	4613      	mov	r3, r2
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	4413      	add	r3, r2
 8003c78:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c7a:	430b      	orrs	r3, r1
 8003c7c:	e081      	b.n	8003d82 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d107      	bne.n	8003c9a <HAL_ADC_ConfigChannel+0x5c6>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	0e9b      	lsrs	r3, r3, #26
 8003c90:	3301      	adds	r3, #1
 8003c92:	069b      	lsls	r3, r3, #26
 8003c94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c98:	e015      	b.n	8003cc6 <HAL_ADC_ConfigChannel+0x5f2>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca2:	fa93 f3a3 	rbit	r3, r3
 8003ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003caa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003cb2:	2320      	movs	r3, #32
 8003cb4:	e003      	b.n	8003cbe <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb8:	fab3 f383 	clz	r3, r3
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	069b      	lsls	r3, r3, #26
 8003cc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d109      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x612>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	0e9b      	lsrs	r3, r3, #26
 8003cd8:	3301      	adds	r3, #1
 8003cda:	f003 031f 	and.w	r3, r3, #31
 8003cde:	2101      	movs	r1, #1
 8003ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce4:	e017      	b.n	8003d16 <HAL_ADC_ConfigChannel+0x642>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	fa93 f3a3 	rbit	r3, r3
 8003cf2:	61fb      	str	r3, [r7, #28]
  return result;
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003cfe:	2320      	movs	r3, #32
 8003d00:	e003      	b.n	8003d0a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d04:	fab3 f383 	clz	r3, r3
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	2101      	movs	r1, #1
 8003d12:	fa01 f303 	lsl.w	r3, r1, r3
 8003d16:	ea42 0103 	orr.w	r1, r2, r3
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10d      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x66e>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	0e9b      	lsrs	r3, r3, #26
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	f003 021f 	and.w	r2, r3, #31
 8003d32:	4613      	mov	r3, r2
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	4413      	add	r3, r2
 8003d38:	3b1e      	subs	r3, #30
 8003d3a:	051b      	lsls	r3, r3, #20
 8003d3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d40:	e01e      	b.n	8003d80 <HAL_ADC_ConfigChannel+0x6ac>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	fa93 f3a3 	rbit	r3, r3
 8003d4e:	613b      	str	r3, [r7, #16]
  return result;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d104      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003d5a:	2320      	movs	r3, #32
 8003d5c:	e006      	b.n	8003d6c <HAL_ADC_ConfigChannel+0x698>
 8003d5e:	bf00      	nop
 8003d60:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	fab3 f383 	clz	r3, r3
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	f003 021f 	and.w	r2, r3, #31
 8003d72:	4613      	mov	r3, r2
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	4413      	add	r3, r2
 8003d78:	3b1e      	subs	r3, #30
 8003d7a:	051b      	lsls	r3, r3, #20
 8003d7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d80:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d86:	4619      	mov	r1, r3
 8003d88:	f7ff fa48 	bl	800321c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	4b3f      	ldr	r3, [pc, #252]	@ (8003e90 <HAL_ADC_ConfigChannel+0x7bc>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d071      	beq.n	8003e7c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d98:	483e      	ldr	r0, [pc, #248]	@ (8003e94 <HAL_ADC_ConfigChannel+0x7c0>)
 8003d9a:	f7ff f967 	bl	800306c <LL_ADC_GetCommonPathInternalCh>
 8003d9e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a3c      	ldr	r2, [pc, #240]	@ (8003e98 <HAL_ADC_ConfigChannel+0x7c4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d004      	beq.n	8003db6 <HAL_ADC_ConfigChannel+0x6e2>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a3a      	ldr	r2, [pc, #232]	@ (8003e9c <HAL_ADC_ConfigChannel+0x7c8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d127      	bne.n	8003e06 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003db6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003dba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d121      	bne.n	8003e06 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dca:	d157      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003dd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	482f      	ldr	r0, [pc, #188]	@ (8003e94 <HAL_ADC_ConfigChannel+0x7c0>)
 8003dd8:	f7ff f935 	bl	8003046 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ddc:	4b30      	ldr	r3, [pc, #192]	@ (8003ea0 <HAL_ADC_ConfigChannel+0x7cc>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	099b      	lsrs	r3, r3, #6
 8003de2:	4a30      	ldr	r2, [pc, #192]	@ (8003ea4 <HAL_ADC_ConfigChannel+0x7d0>)
 8003de4:	fba2 2303 	umull	r2, r3, r2, r3
 8003de8:	099b      	lsrs	r3, r3, #6
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	4613      	mov	r3, r2
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	4413      	add	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003df6:	e002      	b.n	8003dfe <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f9      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e04:	e03a      	b.n	8003e7c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a27      	ldr	r2, [pc, #156]	@ (8003ea8 <HAL_ADC_ConfigChannel+0x7d4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d113      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10d      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a22      	ldr	r2, [pc, #136]	@ (8003eac <HAL_ADC_ConfigChannel+0x7d8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d02a      	beq.n	8003e7c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4818      	ldr	r0, [pc, #96]	@ (8003e94 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e32:	f7ff f908 	bl	8003046 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e36:	e021      	b.n	8003e7c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a1c      	ldr	r2, [pc, #112]	@ (8003eb0 <HAL_ADC_ConfigChannel+0x7dc>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d11c      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d116      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a16      	ldr	r2, [pc, #88]	@ (8003eac <HAL_ADC_ConfigChannel+0x7d8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d011      	beq.n	8003e7c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003e60:	4619      	mov	r1, r3
 8003e62:	480c      	ldr	r0, [pc, #48]	@ (8003e94 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e64:	f7ff f8ef 	bl	8003046 <LL_ADC_SetCommonPathInternalCh>
 8003e68:	e008      	b.n	8003e7c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e6e:	f043 0220 	orr.w	r2, r3, #32
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e84:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	37d8      	adds	r7, #216	@ 0xd8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	80080000 	.word	0x80080000
 8003e94:	50000300 	.word	0x50000300
 8003e98:	c3210000 	.word	0xc3210000
 8003e9c:	90c00010 	.word	0x90c00010
 8003ea0:	20000000 	.word	0x20000000
 8003ea4:	053e2d63 	.word	0x053e2d63
 8003ea8:	c7520000 	.word	0xc7520000
 8003eac:	50000100 	.word	0x50000100
 8003eb0:	cb840000 	.word	0xcb840000

08003eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003edc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ee6:	4a04      	ldr	r2, [pc, #16]	@ (8003ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	60d3      	str	r3, [r2, #12]
}
 8003eec:	bf00      	nop
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	e000ed00 	.word	0xe000ed00

08003efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f00:	4b04      	ldr	r3, [pc, #16]	@ (8003f14 <__NVIC_GetPriorityGrouping+0x18>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	0a1b      	lsrs	r3, r3, #8
 8003f06:	f003 0307 	and.w	r3, r3, #7
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	e000ed00 	.word	0xe000ed00

08003f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	6039      	str	r1, [r7, #0]
 8003f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	db0a      	blt.n	8003f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	490c      	ldr	r1, [pc, #48]	@ (8003f64 <__NVIC_SetPriority+0x4c>)
 8003f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f36:	0112      	lsls	r2, r2, #4
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f40:	e00a      	b.n	8003f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	4908      	ldr	r1, [pc, #32]	@ (8003f68 <__NVIC_SetPriority+0x50>)
 8003f48:	79fb      	ldrb	r3, [r7, #7]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	3b04      	subs	r3, #4
 8003f50:	0112      	lsls	r2, r2, #4
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	440b      	add	r3, r1
 8003f56:	761a      	strb	r2, [r3, #24]
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	e000e100 	.word	0xe000e100
 8003f68:	e000ed00 	.word	0xe000ed00

08003f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b089      	sub	sp, #36	@ 0x24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f1c3 0307 	rsb	r3, r3, #7
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	bf28      	it	cs
 8003f8a:	2304      	movcs	r3, #4
 8003f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	3304      	adds	r3, #4
 8003f92:	2b06      	cmp	r3, #6
 8003f94:	d902      	bls.n	8003f9c <NVIC_EncodePriority+0x30>
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3b03      	subs	r3, #3
 8003f9a:	e000      	b.n	8003f9e <NVIC_EncodePriority+0x32>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	43da      	mvns	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	401a      	ands	r2, r3
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbe:	43d9      	mvns	r1, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc4:	4313      	orrs	r3, r2
         );
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3724      	adds	r7, #36	@ 0x24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
	...

08003fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fe4:	d301      	bcc.n	8003fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e00f      	b.n	800400a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fea:	4a0a      	ldr	r2, [pc, #40]	@ (8004014 <SysTick_Config+0x40>)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ff2:	210f      	movs	r1, #15
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff8:	f7ff ff8e 	bl	8003f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ffc:	4b05      	ldr	r3, [pc, #20]	@ (8004014 <SysTick_Config+0x40>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004002:	4b04      	ldr	r3, [pc, #16]	@ (8004014 <SysTick_Config+0x40>)
 8004004:	2207      	movs	r2, #7
 8004006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	e000e010 	.word	0xe000e010

08004018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ff47 	bl	8003eb4 <__NVIC_SetPriorityGrouping>
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b086      	sub	sp, #24
 8004032:	af00      	add	r7, sp, #0
 8004034:	4603      	mov	r3, r0
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800403c:	f7ff ff5e 	bl	8003efc <__NVIC_GetPriorityGrouping>
 8004040:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	6978      	ldr	r0, [r7, #20]
 8004048:	f7ff ff90 	bl	8003f6c <NVIC_EncodePriority>
 800404c:	4602      	mov	r2, r0
 800404e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004052:	4611      	mov	r1, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff ff5f 	bl	8003f18 <__NVIC_SetPriority>
}
 800405a:	bf00      	nop
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff ffb2 	bl	8003fd4 <SysTick_Config>
 8004070:	4603      	mov	r3, r0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800408a:	e15a      	b.n	8004342 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	2101      	movs	r1, #1
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	fa01 f303 	lsl.w	r3, r1, r3
 8004098:	4013      	ands	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 814c 	beq.w	800433c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f003 0303 	and.w	r3, r3, #3
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d005      	beq.n	80040bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d130      	bne.n	800411e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	2203      	movs	r2, #3
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43db      	mvns	r3, r3
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4013      	ands	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040f2:	2201      	movs	r2, #1
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43db      	mvns	r3, r3
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4013      	ands	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	091b      	lsrs	r3, r3, #4
 8004108:	f003 0201 	and.w	r2, r3, #1
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	2b03      	cmp	r3, #3
 8004128:	d017      	beq.n	800415a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	2203      	movs	r2, #3
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43db      	mvns	r3, r3
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4013      	ands	r3, r2
 8004140:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d123      	bne.n	80041ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	08da      	lsrs	r2, r3, #3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3208      	adds	r2, #8
 800416e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004172:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	220f      	movs	r2, #15
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43db      	mvns	r3, r3
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4013      	ands	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	08da      	lsrs	r2, r3, #3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3208      	adds	r2, #8
 80041a8:	6939      	ldr	r1, [r7, #16]
 80041aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	2203      	movs	r2, #3
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43db      	mvns	r3, r3
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4013      	ands	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f003 0203 	and.w	r2, r3, #3
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 80a6 	beq.w	800433c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041f0:	4b5b      	ldr	r3, [pc, #364]	@ (8004360 <HAL_GPIO_Init+0x2e4>)
 80041f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f4:	4a5a      	ldr	r2, [pc, #360]	@ (8004360 <HAL_GPIO_Init+0x2e4>)
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80041fc:	4b58      	ldr	r3, [pc, #352]	@ (8004360 <HAL_GPIO_Init+0x2e4>)
 80041fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004208:	4a56      	ldr	r2, [pc, #344]	@ (8004364 <HAL_GPIO_Init+0x2e8>)
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	089b      	lsrs	r3, r3, #2
 800420e:	3302      	adds	r3, #2
 8004210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004214:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f003 0303 	and.w	r3, r3, #3
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	220f      	movs	r2, #15
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	43db      	mvns	r3, r3
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4013      	ands	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004232:	d01f      	beq.n	8004274 <HAL_GPIO_Init+0x1f8>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a4c      	ldr	r2, [pc, #304]	@ (8004368 <HAL_GPIO_Init+0x2ec>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d019      	beq.n	8004270 <HAL_GPIO_Init+0x1f4>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a4b      	ldr	r2, [pc, #300]	@ (800436c <HAL_GPIO_Init+0x2f0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d013      	beq.n	800426c <HAL_GPIO_Init+0x1f0>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a4a      	ldr	r2, [pc, #296]	@ (8004370 <HAL_GPIO_Init+0x2f4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00d      	beq.n	8004268 <HAL_GPIO_Init+0x1ec>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a49      	ldr	r2, [pc, #292]	@ (8004374 <HAL_GPIO_Init+0x2f8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d007      	beq.n	8004264 <HAL_GPIO_Init+0x1e8>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a48      	ldr	r2, [pc, #288]	@ (8004378 <HAL_GPIO_Init+0x2fc>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d101      	bne.n	8004260 <HAL_GPIO_Init+0x1e4>
 800425c:	2305      	movs	r3, #5
 800425e:	e00a      	b.n	8004276 <HAL_GPIO_Init+0x1fa>
 8004260:	2306      	movs	r3, #6
 8004262:	e008      	b.n	8004276 <HAL_GPIO_Init+0x1fa>
 8004264:	2304      	movs	r3, #4
 8004266:	e006      	b.n	8004276 <HAL_GPIO_Init+0x1fa>
 8004268:	2303      	movs	r3, #3
 800426a:	e004      	b.n	8004276 <HAL_GPIO_Init+0x1fa>
 800426c:	2302      	movs	r3, #2
 800426e:	e002      	b.n	8004276 <HAL_GPIO_Init+0x1fa>
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <HAL_GPIO_Init+0x1fa>
 8004274:	2300      	movs	r3, #0
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	f002 0203 	and.w	r2, r2, #3
 800427c:	0092      	lsls	r2, r2, #2
 800427e:	4093      	lsls	r3, r2
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004286:	4937      	ldr	r1, [pc, #220]	@ (8004364 <HAL_GPIO_Init+0x2e8>)
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	089b      	lsrs	r3, r3, #2
 800428c:	3302      	adds	r3, #2
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004294:	4b39      	ldr	r3, [pc, #228]	@ (800437c <HAL_GPIO_Init+0x300>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	43db      	mvns	r3, r3
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4013      	ands	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042b8:	4a30      	ldr	r2, [pc, #192]	@ (800437c <HAL_GPIO_Init+0x300>)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042be:	4b2f      	ldr	r3, [pc, #188]	@ (800437c <HAL_GPIO_Init+0x300>)
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	43db      	mvns	r3, r3
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4013      	ands	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042e2:	4a26      	ldr	r2, [pc, #152]	@ (800437c <HAL_GPIO_Init+0x300>)
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80042e8:	4b24      	ldr	r3, [pc, #144]	@ (800437c <HAL_GPIO_Init+0x300>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	43db      	mvns	r3, r3
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4013      	ands	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4313      	orrs	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800430c:	4a1b      	ldr	r2, [pc, #108]	@ (800437c <HAL_GPIO_Init+0x300>)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004312:	4b1a      	ldr	r3, [pc, #104]	@ (800437c <HAL_GPIO_Init+0x300>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	43db      	mvns	r3, r3
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4013      	ands	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004336:	4a11      	ldr	r2, [pc, #68]	@ (800437c <HAL_GPIO_Init+0x300>)
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	3301      	adds	r3, #1
 8004340:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	f47f ae9d 	bne.w	800408c <HAL_GPIO_Init+0x10>
  }
}
 8004352:	bf00      	nop
 8004354:	bf00      	nop
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	40021000 	.word	0x40021000
 8004364:	40010000 	.word	0x40010000
 8004368:	48000400 	.word	0x48000400
 800436c:	48000800 	.word	0x48000800
 8004370:	48000c00 	.word	0x48000c00
 8004374:	48001000 	.word	0x48001000
 8004378:	48001400 	.word	0x48001400
 800437c:	40010400 	.word	0x40010400

08004380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	807b      	strh	r3, [r7, #2]
 800438c:	4613      	mov	r3, r2
 800438e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004390:	787b      	ldrb	r3, [r7, #1]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004396:	887a      	ldrh	r2, [r7, #2]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800439c:	e002      	b.n	80043a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800439e:	887a      	ldrh	r2, [r7, #2]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e08d      	b.n	80044de <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d106      	bne.n	80043dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7fe fabe 	bl	8002958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2224      	movs	r2, #36	@ 0x24
 80043e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0201 	bic.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004400:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004410:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d107      	bne.n	800442a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004426:	609a      	str	r2, [r3, #8]
 8004428:	e006      	b.n	8004438 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004436:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d108      	bne.n	8004452 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800444e:	605a      	str	r2, [r3, #4]
 8004450:	e007      	b.n	8004462 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004460:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004470:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004474:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004484:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	69d9      	ldr	r1, [r3, #28]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1a      	ldr	r2, [r3, #32]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af02      	add	r7, sp, #8
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	607a      	str	r2, [r7, #4]
 80044f2:	461a      	mov	r2, r3
 80044f4:	460b      	mov	r3, r1
 80044f6:	817b      	strh	r3, [r7, #10]
 80044f8:	4613      	mov	r3, r2
 80044fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b20      	cmp	r3, #32
 8004506:	f040 80fd 	bne.w	8004704 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_I2C_Master_Transmit+0x30>
 8004514:	2302      	movs	r3, #2
 8004516:	e0f6      	b.n	8004706 <HAL_I2C_Master_Transmit+0x21e>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004520:	f7fe fd50 	bl	8002fc4 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	2319      	movs	r3, #25
 800452c:	2201      	movs	r2, #1
 800452e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 fbea 	bl	8004d0c <I2C_WaitOnFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e0e1      	b.n	8004706 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2221      	movs	r2, #33	@ 0x21
 8004546:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2210      	movs	r2, #16
 800454e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	893a      	ldrh	r2, [r7, #8]
 8004562:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456e:	b29b      	uxth	r3, r3
 8004570:	2bff      	cmp	r3, #255	@ 0xff
 8004572:	d906      	bls.n	8004582 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	22ff      	movs	r2, #255	@ 0xff
 8004578:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800457a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	e007      	b.n	8004592 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800458c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004590:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004596:	2b00      	cmp	r3, #0
 8004598:	d024      	beq.n	80045e4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459e:	781a      	ldrb	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	3301      	adds	r3, #1
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	8979      	ldrh	r1, [r7, #10]
 80045d6:	4b4e      	ldr	r3, [pc, #312]	@ (8004710 <HAL_I2C_Master_Transmit+0x228>)
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 fd59 	bl	8005094 <I2C_TransferConfig>
 80045e2:	e066      	b.n	80046b2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	8979      	ldrh	r1, [r7, #10]
 80045ec:	4b48      	ldr	r3, [pc, #288]	@ (8004710 <HAL_I2C_Master_Transmit+0x228>)
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 fd4e 	bl	8005094 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80045f8:	e05b      	b.n	80046b2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	6a39      	ldr	r1, [r7, #32]
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fbdd 	bl	8004dbe <I2C_WaitOnTXISFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e07b      	b.n	8004706 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004612:	781a      	ldrb	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004642:	b29b      	uxth	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d034      	beq.n	80046b2 <HAL_I2C_Master_Transmit+0x1ca>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464c:	2b00      	cmp	r3, #0
 800464e:	d130      	bne.n	80046b2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	2200      	movs	r2, #0
 8004658:	2180      	movs	r1, #128	@ 0x80
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 fb56 	bl	8004d0c <I2C_WaitOnFlagUntilTimeout>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e04d      	b.n	8004706 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800466e:	b29b      	uxth	r3, r3
 8004670:	2bff      	cmp	r3, #255	@ 0xff
 8004672:	d90e      	bls.n	8004692 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	22ff      	movs	r2, #255	@ 0xff
 8004678:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800467e:	b2da      	uxtb	r2, r3
 8004680:	8979      	ldrh	r1, [r7, #10]
 8004682:	2300      	movs	r3, #0
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 fd02 	bl	8005094 <I2C_TransferConfig>
 8004690:	e00f      	b.n	80046b2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	8979      	ldrh	r1, [r7, #10]
 80046a4:	2300      	movs	r3, #0
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 fcf1 	bl	8005094 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d19e      	bne.n	80045fa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	6a39      	ldr	r1, [r7, #32]
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 fbc3 	bl	8004e4c <I2C_WaitOnSTOPFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e01a      	b.n	8004706 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2220      	movs	r2, #32
 80046d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6859      	ldr	r1, [r3, #4]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004714 <HAL_I2C_Master_Transmit+0x22c>)
 80046e4:	400b      	ands	r3, r1
 80046e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	e000      	b.n	8004706 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004704:	2302      	movs	r3, #2
  }
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	80002000 	.word	0x80002000
 8004714:	fe00e800 	.word	0xfe00e800

08004718 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b088      	sub	sp, #32
 800471c:	af02      	add	r7, sp, #8
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	4608      	mov	r0, r1
 8004722:	4611      	mov	r1, r2
 8004724:	461a      	mov	r2, r3
 8004726:	4603      	mov	r3, r0
 8004728:	817b      	strh	r3, [r7, #10]
 800472a:	460b      	mov	r3, r1
 800472c:	813b      	strh	r3, [r7, #8]
 800472e:	4613      	mov	r3, r2
 8004730:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b20      	cmp	r3, #32
 800473c:	f040 80f9 	bne.w	8004932 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_I2C_Mem_Write+0x34>
 8004746:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004748:	2b00      	cmp	r3, #0
 800474a:	d105      	bne.n	8004758 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004752:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e0ed      	b.n	8004934 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800475e:	2b01      	cmp	r3, #1
 8004760:	d101      	bne.n	8004766 <HAL_I2C_Mem_Write+0x4e>
 8004762:	2302      	movs	r3, #2
 8004764:	e0e6      	b.n	8004934 <HAL_I2C_Mem_Write+0x21c>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800476e:	f7fe fc29 	bl	8002fc4 <HAL_GetTick>
 8004772:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	2319      	movs	r3, #25
 800477a:	2201      	movs	r2, #1
 800477c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 fac3 	bl	8004d0c <I2C_WaitOnFlagUntilTimeout>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0d1      	b.n	8004934 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2221      	movs	r2, #33	@ 0x21
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2240      	movs	r2, #64	@ 0x40
 800479c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a3a      	ldr	r2, [r7, #32]
 80047aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80047b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047b8:	88f8      	ldrh	r0, [r7, #6]
 80047ba:	893a      	ldrh	r2, [r7, #8]
 80047bc:	8979      	ldrh	r1, [r7, #10]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	9301      	str	r3, [sp, #4]
 80047c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	4603      	mov	r3, r0
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 f9d3 	bl	8004b74 <I2C_RequestMemoryWrite>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e0a9      	b.n	8004934 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2bff      	cmp	r3, #255	@ 0xff
 80047e8:	d90e      	bls.n	8004808 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	22ff      	movs	r2, #255	@ 0xff
 80047ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	8979      	ldrh	r1, [r7, #10]
 80047f8:	2300      	movs	r3, #0
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 fc47 	bl	8005094 <I2C_TransferConfig>
 8004806:	e00f      	b.n	8004828 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004816:	b2da      	uxtb	r2, r3
 8004818:	8979      	ldrh	r1, [r7, #10]
 800481a:	2300      	movs	r3, #0
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 fc36 	bl	8005094 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 fac6 	bl	8004dbe <I2C_WaitOnTXISFlagUntilTimeout>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e07b      	b.n	8004934 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004840:	781a      	ldrb	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004856:	b29b      	uxth	r3, r3
 8004858:	3b01      	subs	r3, #1
 800485a:	b29a      	uxth	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d034      	beq.n	80048e0 <HAL_I2C_Mem_Write+0x1c8>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800487a:	2b00      	cmp	r3, #0
 800487c:	d130      	bne.n	80048e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004884:	2200      	movs	r2, #0
 8004886:	2180      	movs	r1, #128	@ 0x80
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 fa3f 	bl	8004d0c <I2C_WaitOnFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e04d      	b.n	8004934 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800489c:	b29b      	uxth	r3, r3
 800489e:	2bff      	cmp	r3, #255	@ 0xff
 80048a0:	d90e      	bls.n	80048c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	22ff      	movs	r2, #255	@ 0xff
 80048a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	8979      	ldrh	r1, [r7, #10]
 80048b0:	2300      	movs	r3, #0
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 fbeb 	bl	8005094 <I2C_TransferConfig>
 80048be:	e00f      	b.n	80048e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	8979      	ldrh	r1, [r7, #10]
 80048d2:	2300      	movs	r3, #0
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 fbda 	bl	8005094 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d19e      	bne.n	8004828 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 faac 	bl	8004e4c <I2C_WaitOnSTOPFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e01a      	b.n	8004934 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2220      	movs	r2, #32
 8004904:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6859      	ldr	r1, [r3, #4]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	4b0a      	ldr	r3, [pc, #40]	@ (800493c <HAL_I2C_Mem_Write+0x224>)
 8004912:	400b      	ands	r3, r1
 8004914:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	e000      	b.n	8004934 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004932:	2302      	movs	r3, #2
  }
}
 8004934:	4618      	mov	r0, r3
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	fe00e800 	.word	0xfe00e800

08004940 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af02      	add	r7, sp, #8
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	4608      	mov	r0, r1
 800494a:	4611      	mov	r1, r2
 800494c:	461a      	mov	r2, r3
 800494e:	4603      	mov	r3, r0
 8004950:	817b      	strh	r3, [r7, #10]
 8004952:	460b      	mov	r3, r1
 8004954:	813b      	strh	r3, [r7, #8]
 8004956:	4613      	mov	r3, r2
 8004958:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b20      	cmp	r3, #32
 8004964:	f040 80fd 	bne.w	8004b62 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <HAL_I2C_Mem_Read+0x34>
 800496e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004970:	2b00      	cmp	r3, #0
 8004972:	d105      	bne.n	8004980 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800497a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e0f1      	b.n	8004b64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_I2C_Mem_Read+0x4e>
 800498a:	2302      	movs	r3, #2
 800498c:	e0ea      	b.n	8004b64 <HAL_I2C_Mem_Read+0x224>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004996:	f7fe fb15 	bl	8002fc4 <HAL_GetTick>
 800499a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	2319      	movs	r3, #25
 80049a2:	2201      	movs	r2, #1
 80049a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 f9af 	bl	8004d0c <I2C_WaitOnFlagUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0d5      	b.n	8004b64 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2222      	movs	r2, #34	@ 0x22
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2240      	movs	r2, #64	@ 0x40
 80049c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a3a      	ldr	r2, [r7, #32]
 80049d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80049d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049e0:	88f8      	ldrh	r0, [r7, #6]
 80049e2:	893a      	ldrh	r2, [r7, #8]
 80049e4:	8979      	ldrh	r1, [r7, #10]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	9301      	str	r3, [sp, #4]
 80049ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	4603      	mov	r3, r0
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 f913 	bl	8004c1c <I2C_RequestMemoryRead>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d005      	beq.n	8004a08 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0ad      	b.n	8004b64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2bff      	cmp	r3, #255	@ 0xff
 8004a10:	d90e      	bls.n	8004a30 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	22ff      	movs	r2, #255	@ 0xff
 8004a16:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	8979      	ldrh	r1, [r7, #10]
 8004a20:	4b52      	ldr	r3, [pc, #328]	@ (8004b6c <HAL_I2C_Mem_Read+0x22c>)
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 fb33 	bl	8005094 <I2C_TransferConfig>
 8004a2e:	e00f      	b.n	8004a50 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	8979      	ldrh	r1, [r7, #10]
 8004a42:	4b4a      	ldr	r3, [pc, #296]	@ (8004b6c <HAL_I2C_Mem_Read+0x22c>)
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 fb22 	bl	8005094 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a56:	2200      	movs	r2, #0
 8004a58:	2104      	movs	r1, #4
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 f956 	bl	8004d0c <I2C_WaitOnFlagUntilTimeout>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e07c      	b.n	8004b64 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d034      	beq.n	8004b10 <HAL_I2C_Mem_Read+0x1d0>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d130      	bne.n	8004b10 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	2180      	movs	r1, #128	@ 0x80
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f927 	bl	8004d0c <I2C_WaitOnFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e04d      	b.n	8004b64 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2bff      	cmp	r3, #255	@ 0xff
 8004ad0:	d90e      	bls.n	8004af0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	22ff      	movs	r2, #255	@ 0xff
 8004ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	8979      	ldrh	r1, [r7, #10]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 fad3 	bl	8005094 <I2C_TransferConfig>
 8004aee:	e00f      	b.n	8004b10 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	8979      	ldrh	r1, [r7, #10]
 8004b02:	2300      	movs	r3, #0
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 fac2 	bl	8005094 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d19a      	bne.n	8004a50 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 f994 	bl	8004e4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e01a      	b.n	8004b64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2220      	movs	r2, #32
 8004b34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6859      	ldr	r1, [r3, #4]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	4b0b      	ldr	r3, [pc, #44]	@ (8004b70 <HAL_I2C_Mem_Read+0x230>)
 8004b42:	400b      	ands	r3, r1
 8004b44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e000      	b.n	8004b64 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004b62:	2302      	movs	r3, #2
  }
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	80002400 	.word	0x80002400
 8004b70:	fe00e800 	.word	0xfe00e800

08004b74 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	4608      	mov	r0, r1
 8004b7e:	4611      	mov	r1, r2
 8004b80:	461a      	mov	r2, r3
 8004b82:	4603      	mov	r3, r0
 8004b84:	817b      	strh	r3, [r7, #10]
 8004b86:	460b      	mov	r3, r1
 8004b88:	813b      	strh	r3, [r7, #8]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004b8e:	88fb      	ldrh	r3, [r7, #6]
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	8979      	ldrh	r1, [r7, #10]
 8004b94:	4b20      	ldr	r3, [pc, #128]	@ (8004c18 <I2C_RequestMemoryWrite+0xa4>)
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 fa79 	bl	8005094 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	69b9      	ldr	r1, [r7, #24]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f909 	bl	8004dbe <I2C_WaitOnTXISFlagUntilTimeout>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e02c      	b.n	8004c10 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bb6:	88fb      	ldrh	r3, [r7, #6]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d105      	bne.n	8004bc8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bbc:	893b      	ldrh	r3, [r7, #8]
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bc6:	e015      	b.n	8004bf4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004bc8:	893b      	ldrh	r3, [r7, #8]
 8004bca:	0a1b      	lsrs	r3, r3, #8
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	69b9      	ldr	r1, [r7, #24]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 f8ef 	bl	8004dbe <I2C_WaitOnTXISFlagUntilTimeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e012      	b.n	8004c10 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bea:	893b      	ldrh	r3, [r7, #8]
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2180      	movs	r1, #128	@ 0x80
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 f884 	bl	8004d0c <I2C_WaitOnFlagUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	80002000 	.word	0x80002000

08004c1c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af02      	add	r7, sp, #8
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	4608      	mov	r0, r1
 8004c26:	4611      	mov	r1, r2
 8004c28:	461a      	mov	r2, r3
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	817b      	strh	r3, [r7, #10]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	813b      	strh	r3, [r7, #8]
 8004c32:	4613      	mov	r3, r2
 8004c34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004c36:	88fb      	ldrh	r3, [r7, #6]
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	8979      	ldrh	r1, [r7, #10]
 8004c3c:	4b20      	ldr	r3, [pc, #128]	@ (8004cc0 <I2C_RequestMemoryRead+0xa4>)
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	2300      	movs	r3, #0
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 fa26 	bl	8005094 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c48:	69fa      	ldr	r2, [r7, #28]
 8004c4a:	69b9      	ldr	r1, [r7, #24]
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f8b6 	bl	8004dbe <I2C_WaitOnTXISFlagUntilTimeout>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e02c      	b.n	8004cb6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c5c:	88fb      	ldrh	r3, [r7, #6]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d105      	bne.n	8004c6e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c62:	893b      	ldrh	r3, [r7, #8]
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c6c:	e015      	b.n	8004c9a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c6e:	893b      	ldrh	r3, [r7, #8]
 8004c70:	0a1b      	lsrs	r3, r3, #8
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	69b9      	ldr	r1, [r7, #24]
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f89c 	bl	8004dbe <I2C_WaitOnTXISFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e012      	b.n	8004cb6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c90:	893b      	ldrh	r3, [r7, #8]
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2140      	movs	r1, #64	@ 0x40
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 f831 	bl	8004d0c <I2C_WaitOnFlagUntilTimeout>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	80002000 	.word	0x80002000

08004cc4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d103      	bne.n	8004ce2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d007      	beq.n	8004d00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699a      	ldr	r2, [r3, #24]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	619a      	str	r2, [r3, #24]
  }
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d1c:	e03b      	b.n	8004d96 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	6839      	ldr	r1, [r7, #0]
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 f8d6 	bl	8004ed4 <I2C_IsErrorOccurred>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e041      	b.n	8004db6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d02d      	beq.n	8004d96 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d3a:	f7fe f943 	bl	8002fc4 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d302      	bcc.n	8004d50 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d122      	bne.n	8004d96 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699a      	ldr	r2, [r3, #24]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	bf0c      	ite	eq
 8004d60:	2301      	moveq	r3, #1
 8004d62:	2300      	movne	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	461a      	mov	r2, r3
 8004d68:	79fb      	ldrb	r3, [r7, #7]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d113      	bne.n	8004d96 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d72:	f043 0220 	orr.w	r2, r3, #32
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e00f      	b.n	8004db6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699a      	ldr	r2, [r3, #24]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	bf0c      	ite	eq
 8004da6:	2301      	moveq	r3, #1
 8004da8:	2300      	movne	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	461a      	mov	r2, r3
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d0b4      	beq.n	8004d1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	60f8      	str	r0, [r7, #12]
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004dca:	e033      	b.n	8004e34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	68b9      	ldr	r1, [r7, #8]
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 f87f 	bl	8004ed4 <I2C_IsErrorOccurred>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e031      	b.n	8004e44 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de6:	d025      	beq.n	8004e34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de8:	f7fe f8ec 	bl	8002fc4 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d302      	bcc.n	8004dfe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d11a      	bne.n	8004e34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d013      	beq.n	8004e34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e10:	f043 0220 	orr.w	r2, r3, #32
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e007      	b.n	8004e44 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d1c4      	bne.n	8004dcc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e58:	e02f      	b.n	8004eba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	68b9      	ldr	r1, [r7, #8]
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 f838 	bl	8004ed4 <I2C_IsErrorOccurred>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e02d      	b.n	8004eca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e6e:	f7fe f8a9 	bl	8002fc4 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d302      	bcc.n	8004e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d11a      	bne.n	8004eba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	d013      	beq.n	8004eba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e96:	f043 0220 	orr.w	r2, r3, #32
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e007      	b.n	8004eca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	f003 0320 	and.w	r3, r3, #32
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	d1c8      	bne.n	8004e5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b08a      	sub	sp, #40	@ 0x28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	f003 0310 	and.w	r3, r3, #16
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d068      	beq.n	8004fd2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2210      	movs	r2, #16
 8004f06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f08:	e049      	b.n	8004f9e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f10:	d045      	beq.n	8004f9e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f12:	f7fe f857 	bl	8002fc4 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d302      	bcc.n	8004f28 <I2C_IsErrorOccurred+0x54>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d13a      	bne.n	8004f9e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f4a:	d121      	bne.n	8004f90 <I2C_IsErrorOccurred+0xbc>
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f52:	d01d      	beq.n	8004f90 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004f54:	7cfb      	ldrb	r3, [r7, #19]
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	d01a      	beq.n	8004f90 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f68:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f6a:	f7fe f82b 	bl	8002fc4 <HAL_GetTick>
 8004f6e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f70:	e00e      	b.n	8004f90 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f72:	f7fe f827 	bl	8002fc4 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b19      	cmp	r3, #25
 8004f7e:	d907      	bls.n	8004f90 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	f043 0320 	orr.w	r3, r3, #32
 8004f86:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004f8e:	e006      	b.n	8004f9e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d1e9      	bne.n	8004f72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	f003 0320 	and.w	r3, r3, #32
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	d003      	beq.n	8004fb4 <I2C_IsErrorOccurred+0xe0>
 8004fac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0aa      	beq.n	8004f0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d103      	bne.n	8004fc4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	f043 0304 	orr.w	r3, r3, #4
 8004fca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00b      	beq.n	8004ffc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	f043 0301 	orr.w	r3, r3, #1
 8004fea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ff4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00b      	beq.n	800501e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	f043 0308 	orr.w	r3, r3, #8
 800500c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005016:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00b      	beq.n	8005040 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	f043 0302 	orr.w	r3, r3, #2
 800502e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005038:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005040:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01c      	beq.n	8005082 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f7ff fe3b 	bl	8004cc4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6859      	ldr	r1, [r3, #4]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	4b0d      	ldr	r3, [pc, #52]	@ (8005090 <I2C_IsErrorOccurred+0x1bc>)
 800505a:	400b      	ands	r3, r1
 800505c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	431a      	orrs	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005082:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005086:	4618      	mov	r0, r3
 8005088:	3728      	adds	r7, #40	@ 0x28
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	fe00e800 	.word	0xfe00e800

08005094 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	607b      	str	r3, [r7, #4]
 800509e:	460b      	mov	r3, r1
 80050a0:	817b      	strh	r3, [r7, #10]
 80050a2:	4613      	mov	r3, r2
 80050a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050a6:	897b      	ldrh	r3, [r7, #10]
 80050a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80050ac:	7a7b      	ldrb	r3, [r7, #9]
 80050ae:	041b      	lsls	r3, r3, #16
 80050b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	4313      	orrs	r3, r2
 80050be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80050c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	0d5b      	lsrs	r3, r3, #21
 80050ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80050d2:	4b08      	ldr	r3, [pc, #32]	@ (80050f4 <I2C_TransferConfig+0x60>)
 80050d4:	430b      	orrs	r3, r1
 80050d6:	43db      	mvns	r3, r3
 80050d8:	ea02 0103 	and.w	r1, r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	03ff63ff 	.word	0x03ff63ff

080050f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b20      	cmp	r3, #32
 800510c:	d138      	bne.n	8005180 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005118:	2302      	movs	r3, #2
 800511a:	e032      	b.n	8005182 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2224      	movs	r2, #36	@ 0x24
 8005128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0201 	bic.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800514a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6819      	ldr	r1, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800517c:	2300      	movs	r3, #0
 800517e:	e000      	b.n	8005182 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005180:	2302      	movs	r3, #2
  }
}
 8005182:	4618      	mov	r0, r3
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800518e:	b480      	push	{r7}
 8005190:	b085      	sub	sp, #20
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	d139      	bne.n	8005218 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e033      	b.n	800521a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2224      	movs	r2, #36	@ 0x24
 80051be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0201 	bic.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80051e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	021b      	lsls	r3, r3, #8
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0201 	orr.w	r2, r2, #1
 8005202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	e000      	b.n	800521a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005218:	2302      	movs	r3, #2
  }
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
	...

08005228 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d141      	bne.n	80052ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005236:	4b4b      	ldr	r3, [pc, #300]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800523e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005242:	d131      	bne.n	80052a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005244:	4b47      	ldr	r3, [pc, #284]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800524a:	4a46      	ldr	r2, [pc, #280]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800524c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005250:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005254:	4b43      	ldr	r3, [pc, #268]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800525c:	4a41      	ldr	r2, [pc, #260]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800525e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005262:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005264:	4b40      	ldr	r3, [pc, #256]	@ (8005368 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2232      	movs	r2, #50	@ 0x32
 800526a:	fb02 f303 	mul.w	r3, r2, r3
 800526e:	4a3f      	ldr	r2, [pc, #252]	@ (800536c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005270:	fba2 2303 	umull	r2, r3, r2, r3
 8005274:	0c9b      	lsrs	r3, r3, #18
 8005276:	3301      	adds	r3, #1
 8005278:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800527a:	e002      	b.n	8005282 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3b01      	subs	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005282:	4b38      	ldr	r3, [pc, #224]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800528a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800528e:	d102      	bne.n	8005296 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f2      	bne.n	800527c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005296:	4b33      	ldr	r3, [pc, #204]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800529e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052a2:	d158      	bne.n	8005356 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e057      	b.n	8005358 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052a8:	4b2e      	ldr	r3, [pc, #184]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052ae:	4a2d      	ldr	r2, [pc, #180]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80052b8:	e04d      	b.n	8005356 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052c0:	d141      	bne.n	8005346 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052c2:	4b28      	ldr	r3, [pc, #160]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80052ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ce:	d131      	bne.n	8005334 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052d0:	4b24      	ldr	r3, [pc, #144]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052d6:	4a23      	ldr	r2, [pc, #140]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052e0:	4b20      	ldr	r3, [pc, #128]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80052e8:	4a1e      	ldr	r2, [pc, #120]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80052ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005368 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2232      	movs	r2, #50	@ 0x32
 80052f6:	fb02 f303 	mul.w	r3, r2, r3
 80052fa:	4a1c      	ldr	r2, [pc, #112]	@ (800536c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005300:	0c9b      	lsrs	r3, r3, #18
 8005302:	3301      	adds	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005306:	e002      	b.n	800530e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3b01      	subs	r3, #1
 800530c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800530e:	4b15      	ldr	r3, [pc, #84]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800531a:	d102      	bne.n	8005322 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1f2      	bne.n	8005308 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005322:	4b10      	ldr	r3, [pc, #64]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800532a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800532e:	d112      	bne.n	8005356 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e011      	b.n	8005358 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005334:	4b0b      	ldr	r3, [pc, #44]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005336:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800533a:	4a0a      	ldr	r2, [pc, #40]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800533c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005340:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005344:	e007      	b.n	8005356 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005346:	4b07      	ldr	r3, [pc, #28]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800534e:	4a05      	ldr	r2, [pc, #20]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005350:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005354:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	40007000 	.word	0x40007000
 8005368:	20000000 	.word	0x20000000
 800536c:	431bde83 	.word	0x431bde83

08005370 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005374:	4b05      	ldr	r3, [pc, #20]	@ (800538c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	4a04      	ldr	r2, [pc, #16]	@ (800538c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800537a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800537e:	6093      	str	r3, [r2, #8]
}
 8005380:	bf00      	nop
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40007000 	.word	0x40007000

08005390 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e2fe      	b.n	80059a0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d075      	beq.n	800549a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053ae:	4b97      	ldr	r3, [pc, #604]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 030c 	and.w	r3, r3, #12
 80053b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053b8:	4b94      	ldr	r3, [pc, #592]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f003 0303 	and.w	r3, r3, #3
 80053c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	2b0c      	cmp	r3, #12
 80053c6:	d102      	bne.n	80053ce <HAL_RCC_OscConfig+0x3e>
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2b03      	cmp	r3, #3
 80053cc:	d002      	beq.n	80053d4 <HAL_RCC_OscConfig+0x44>
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d10b      	bne.n	80053ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d4:	4b8d      	ldr	r3, [pc, #564]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d05b      	beq.n	8005498 <HAL_RCC_OscConfig+0x108>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d157      	bne.n	8005498 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e2d9      	b.n	80059a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053f4:	d106      	bne.n	8005404 <HAL_RCC_OscConfig+0x74>
 80053f6:	4b85      	ldr	r3, [pc, #532]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a84      	ldr	r2, [pc, #528]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 80053fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	e01d      	b.n	8005440 <HAL_RCC_OscConfig+0xb0>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800540c:	d10c      	bne.n	8005428 <HAL_RCC_OscConfig+0x98>
 800540e:	4b7f      	ldr	r3, [pc, #508]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a7e      	ldr	r2, [pc, #504]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 8005414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	4b7c      	ldr	r3, [pc, #496]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a7b      	ldr	r2, [pc, #492]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 8005420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	e00b      	b.n	8005440 <HAL_RCC_OscConfig+0xb0>
 8005428:	4b78      	ldr	r3, [pc, #480]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a77      	ldr	r2, [pc, #476]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 800542e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	4b75      	ldr	r3, [pc, #468]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a74      	ldr	r2, [pc, #464]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 800543a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800543e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d013      	beq.n	8005470 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005448:	f7fd fdbc 	bl	8002fc4 <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005450:	f7fd fdb8 	bl	8002fc4 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b64      	cmp	r3, #100	@ 0x64
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e29e      	b.n	80059a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005462:	4b6a      	ldr	r3, [pc, #424]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0f0      	beq.n	8005450 <HAL_RCC_OscConfig+0xc0>
 800546e:	e014      	b.n	800549a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005470:	f7fd fda8 	bl	8002fc4 <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005478:	f7fd fda4 	bl	8002fc4 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b64      	cmp	r3, #100	@ 0x64
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e28a      	b.n	80059a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800548a:	4b60      	ldr	r3, [pc, #384]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1f0      	bne.n	8005478 <HAL_RCC_OscConfig+0xe8>
 8005496:	e000      	b.n	800549a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d075      	beq.n	8005592 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054a6:	4b59      	ldr	r3, [pc, #356]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 030c 	and.w	r3, r3, #12
 80054ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054b0:	4b56      	ldr	r3, [pc, #344]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0303 	and.w	r3, r3, #3
 80054b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	2b0c      	cmp	r3, #12
 80054be:	d102      	bne.n	80054c6 <HAL_RCC_OscConfig+0x136>
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d002      	beq.n	80054cc <HAL_RCC_OscConfig+0x13c>
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d11f      	bne.n	800550c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054cc:	4b4f      	ldr	r3, [pc, #316]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <HAL_RCC_OscConfig+0x154>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e25d      	b.n	80059a0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e4:	4b49      	ldr	r3, [pc, #292]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	061b      	lsls	r3, r3, #24
 80054f2:	4946      	ldr	r1, [pc, #280]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80054f8:	4b45      	ldr	r3, [pc, #276]	@ (8005610 <HAL_RCC_OscConfig+0x280>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7fd fd15 	bl	8002f2c <HAL_InitTick>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d043      	beq.n	8005590 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e249      	b.n	80059a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d023      	beq.n	800555c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005514:	4b3d      	ldr	r3, [pc, #244]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a3c      	ldr	r2, [pc, #240]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 800551a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800551e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005520:	f7fd fd50 	bl	8002fc4 <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005528:	f7fd fd4c 	bl	8002fc4 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e232      	b.n	80059a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800553a:	4b34      	ldr	r3, [pc, #208]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0f0      	beq.n	8005528 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005546:	4b31      	ldr	r3, [pc, #196]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	061b      	lsls	r3, r3, #24
 8005554:	492d      	ldr	r1, [pc, #180]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 8005556:	4313      	orrs	r3, r2
 8005558:	604b      	str	r3, [r1, #4]
 800555a:	e01a      	b.n	8005592 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800555c:	4b2b      	ldr	r3, [pc, #172]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a2a      	ldr	r2, [pc, #168]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 8005562:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005568:	f7fd fd2c 	bl	8002fc4 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005570:	f7fd fd28 	bl	8002fc4 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e20e      	b.n	80059a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005582:	4b22      	ldr	r3, [pc, #136]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1f0      	bne.n	8005570 <HAL_RCC_OscConfig+0x1e0>
 800558e:	e000      	b.n	8005592 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005590:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b00      	cmp	r3, #0
 800559c:	d041      	beq.n	8005622 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d01c      	beq.n	80055e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055a6:	4b19      	ldr	r3, [pc, #100]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 80055a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055ac:	4a17      	ldr	r2, [pc, #92]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 80055ae:	f043 0301 	orr.w	r3, r3, #1
 80055b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b6:	f7fd fd05 	bl	8002fc4 <HAL_GetTick>
 80055ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055bc:	e008      	b.n	80055d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055be:	f7fd fd01 	bl	8002fc4 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e1e7      	b.n	80059a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055d0:	4b0e      	ldr	r3, [pc, #56]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 80055d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0ef      	beq.n	80055be <HAL_RCC_OscConfig+0x22e>
 80055de:	e020      	b.n	8005622 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055e0:	4b0a      	ldr	r3, [pc, #40]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 80055e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055e6:	4a09      	ldr	r2, [pc, #36]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 80055e8:	f023 0301 	bic.w	r3, r3, #1
 80055ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f0:	f7fd fce8 	bl	8002fc4 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055f6:	e00d      	b.n	8005614 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055f8:	f7fd fce4 	bl	8002fc4 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d906      	bls.n	8005614 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e1ca      	b.n	80059a0 <HAL_RCC_OscConfig+0x610>
 800560a:	bf00      	nop
 800560c:	40021000 	.word	0x40021000
 8005610:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005614:	4b8c      	ldr	r3, [pc, #560]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 8005616:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1ea      	bne.n	80055f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0304 	and.w	r3, r3, #4
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 80a6 	beq.w	800577c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005630:	2300      	movs	r3, #0
 8005632:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005634:	4b84      	ldr	r3, [pc, #528]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 8005636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <HAL_RCC_OscConfig+0x2b4>
 8005640:	2301      	movs	r3, #1
 8005642:	e000      	b.n	8005646 <HAL_RCC_OscConfig+0x2b6>
 8005644:	2300      	movs	r3, #0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00d      	beq.n	8005666 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800564a:	4b7f      	ldr	r3, [pc, #508]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 800564c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800564e:	4a7e      	ldr	r2, [pc, #504]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 8005650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005654:	6593      	str	r3, [r2, #88]	@ 0x58
 8005656:	4b7c      	ldr	r3, [pc, #496]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 8005658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800565a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005662:	2301      	movs	r3, #1
 8005664:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005666:	4b79      	ldr	r3, [pc, #484]	@ (800584c <HAL_RCC_OscConfig+0x4bc>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800566e:	2b00      	cmp	r3, #0
 8005670:	d118      	bne.n	80056a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005672:	4b76      	ldr	r3, [pc, #472]	@ (800584c <HAL_RCC_OscConfig+0x4bc>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a75      	ldr	r2, [pc, #468]	@ (800584c <HAL_RCC_OscConfig+0x4bc>)
 8005678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800567c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800567e:	f7fd fca1 	bl	8002fc4 <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005686:	f7fd fc9d 	bl	8002fc4 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e183      	b.n	80059a0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005698:	4b6c      	ldr	r3, [pc, #432]	@ (800584c <HAL_RCC_OscConfig+0x4bc>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0f0      	beq.n	8005686 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d108      	bne.n	80056be <HAL_RCC_OscConfig+0x32e>
 80056ac:	4b66      	ldr	r3, [pc, #408]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 80056ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056b2:	4a65      	ldr	r2, [pc, #404]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 80056b4:	f043 0301 	orr.w	r3, r3, #1
 80056b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056bc:	e024      	b.n	8005708 <HAL_RCC_OscConfig+0x378>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	2b05      	cmp	r3, #5
 80056c4:	d110      	bne.n	80056e8 <HAL_RCC_OscConfig+0x358>
 80056c6:	4b60      	ldr	r3, [pc, #384]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 80056c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056cc:	4a5e      	ldr	r2, [pc, #376]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 80056ce:	f043 0304 	orr.w	r3, r3, #4
 80056d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056d6:	4b5c      	ldr	r3, [pc, #368]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 80056d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056dc:	4a5a      	ldr	r2, [pc, #360]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 80056de:	f043 0301 	orr.w	r3, r3, #1
 80056e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056e6:	e00f      	b.n	8005708 <HAL_RCC_OscConfig+0x378>
 80056e8:	4b57      	ldr	r3, [pc, #348]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 80056ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ee:	4a56      	ldr	r2, [pc, #344]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 80056f0:	f023 0301 	bic.w	r3, r3, #1
 80056f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056f8:	4b53      	ldr	r3, [pc, #332]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 80056fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056fe:	4a52      	ldr	r2, [pc, #328]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 8005700:	f023 0304 	bic.w	r3, r3, #4
 8005704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d016      	beq.n	800573e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005710:	f7fd fc58 	bl	8002fc4 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005716:	e00a      	b.n	800572e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005718:	f7fd fc54 	bl	8002fc4 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005726:	4293      	cmp	r3, r2
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e138      	b.n	80059a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800572e:	4b46      	ldr	r3, [pc, #280]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 8005730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0ed      	beq.n	8005718 <HAL_RCC_OscConfig+0x388>
 800573c:	e015      	b.n	800576a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573e:	f7fd fc41 	bl	8002fc4 <HAL_GetTick>
 8005742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005744:	e00a      	b.n	800575c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005746:	f7fd fc3d 	bl	8002fc4 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005754:	4293      	cmp	r3, r2
 8005756:	d901      	bls.n	800575c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e121      	b.n	80059a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800575c:	4b3a      	ldr	r3, [pc, #232]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 800575e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1ed      	bne.n	8005746 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800576a:	7ffb      	ldrb	r3, [r7, #31]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d105      	bne.n	800577c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005770:	4b35      	ldr	r3, [pc, #212]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 8005772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005774:	4a34      	ldr	r2, [pc, #208]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 8005776:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800577a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0320 	and.w	r3, r3, #32
 8005784:	2b00      	cmp	r3, #0
 8005786:	d03c      	beq.n	8005802 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01c      	beq.n	80057ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005790:	4b2d      	ldr	r3, [pc, #180]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 8005792:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005796:	4a2c      	ldr	r2, [pc, #176]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 8005798:	f043 0301 	orr.w	r3, r3, #1
 800579c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a0:	f7fd fc10 	bl	8002fc4 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057a8:	f7fd fc0c 	bl	8002fc4 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e0f2      	b.n	80059a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057ba:	4b23      	ldr	r3, [pc, #140]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 80057bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0ef      	beq.n	80057a8 <HAL_RCC_OscConfig+0x418>
 80057c8:	e01b      	b.n	8005802 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 80057cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 80057d2:	f023 0301 	bic.w	r3, r3, #1
 80057d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057da:	f7fd fbf3 	bl	8002fc4 <HAL_GetTick>
 80057de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057e2:	f7fd fbef 	bl	8002fc4 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e0d5      	b.n	80059a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057f4:	4b14      	ldr	r3, [pc, #80]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 80057f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1ef      	bne.n	80057e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 80c9 	beq.w	800599e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800580c:	4b0e      	ldr	r3, [pc, #56]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f003 030c 	and.w	r3, r3, #12
 8005814:	2b0c      	cmp	r3, #12
 8005816:	f000 8083 	beq.w	8005920 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	2b02      	cmp	r3, #2
 8005820:	d15e      	bne.n	80058e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005822:	4b09      	ldr	r3, [pc, #36]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a08      	ldr	r2, [pc, #32]	@ (8005848 <HAL_RCC_OscConfig+0x4b8>)
 8005828:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800582c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582e:	f7fd fbc9 	bl	8002fc4 <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005834:	e00c      	b.n	8005850 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005836:	f7fd fbc5 	bl	8002fc4 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d905      	bls.n	8005850 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e0ab      	b.n	80059a0 <HAL_RCC_OscConfig+0x610>
 8005848:	40021000 	.word	0x40021000
 800584c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005850:	4b55      	ldr	r3, [pc, #340]	@ (80059a8 <HAL_RCC_OscConfig+0x618>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1ec      	bne.n	8005836 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800585c:	4b52      	ldr	r3, [pc, #328]	@ (80059a8 <HAL_RCC_OscConfig+0x618>)
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	4b52      	ldr	r3, [pc, #328]	@ (80059ac <HAL_RCC_OscConfig+0x61c>)
 8005862:	4013      	ands	r3, r2
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6a11      	ldr	r1, [r2, #32]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800586c:	3a01      	subs	r2, #1
 800586e:	0112      	lsls	r2, r2, #4
 8005870:	4311      	orrs	r1, r2
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005876:	0212      	lsls	r2, r2, #8
 8005878:	4311      	orrs	r1, r2
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800587e:	0852      	lsrs	r2, r2, #1
 8005880:	3a01      	subs	r2, #1
 8005882:	0552      	lsls	r2, r2, #21
 8005884:	4311      	orrs	r1, r2
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800588a:	0852      	lsrs	r2, r2, #1
 800588c:	3a01      	subs	r2, #1
 800588e:	0652      	lsls	r2, r2, #25
 8005890:	4311      	orrs	r1, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005896:	06d2      	lsls	r2, r2, #27
 8005898:	430a      	orrs	r2, r1
 800589a:	4943      	ldr	r1, [pc, #268]	@ (80059a8 <HAL_RCC_OscConfig+0x618>)
 800589c:	4313      	orrs	r3, r2
 800589e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058a0:	4b41      	ldr	r3, [pc, #260]	@ (80059a8 <HAL_RCC_OscConfig+0x618>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a40      	ldr	r2, [pc, #256]	@ (80059a8 <HAL_RCC_OscConfig+0x618>)
 80058a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058ac:	4b3e      	ldr	r3, [pc, #248]	@ (80059a8 <HAL_RCC_OscConfig+0x618>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	4a3d      	ldr	r2, [pc, #244]	@ (80059a8 <HAL_RCC_OscConfig+0x618>)
 80058b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b8:	f7fd fb84 	bl	8002fc4 <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058c0:	f7fd fb80 	bl	8002fc4 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e066      	b.n	80059a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058d2:	4b35      	ldr	r3, [pc, #212]	@ (80059a8 <HAL_RCC_OscConfig+0x618>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0f0      	beq.n	80058c0 <HAL_RCC_OscConfig+0x530>
 80058de:	e05e      	b.n	800599e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e0:	4b31      	ldr	r3, [pc, #196]	@ (80059a8 <HAL_RCC_OscConfig+0x618>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a30      	ldr	r2, [pc, #192]	@ (80059a8 <HAL_RCC_OscConfig+0x618>)
 80058e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ec:	f7fd fb6a 	bl	8002fc4 <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f4:	f7fd fb66 	bl	8002fc4 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e04c      	b.n	80059a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005906:	4b28      	ldr	r3, [pc, #160]	@ (80059a8 <HAL_RCC_OscConfig+0x618>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1f0      	bne.n	80058f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005912:	4b25      	ldr	r3, [pc, #148]	@ (80059a8 <HAL_RCC_OscConfig+0x618>)
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	4924      	ldr	r1, [pc, #144]	@ (80059a8 <HAL_RCC_OscConfig+0x618>)
 8005918:	4b25      	ldr	r3, [pc, #148]	@ (80059b0 <HAL_RCC_OscConfig+0x620>)
 800591a:	4013      	ands	r3, r2
 800591c:	60cb      	str	r3, [r1, #12]
 800591e:	e03e      	b.n	800599e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d101      	bne.n	800592c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e039      	b.n	80059a0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800592c:	4b1e      	ldr	r3, [pc, #120]	@ (80059a8 <HAL_RCC_OscConfig+0x618>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f003 0203 	and.w	r2, r3, #3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	429a      	cmp	r2, r3
 800593e:	d12c      	bne.n	800599a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594a:	3b01      	subs	r3, #1
 800594c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800594e:	429a      	cmp	r2, r3
 8005950:	d123      	bne.n	800599a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800595c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800595e:	429a      	cmp	r2, r3
 8005960:	d11b      	bne.n	800599a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800596e:	429a      	cmp	r2, r3
 8005970:	d113      	bne.n	800599a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597c:	085b      	lsrs	r3, r3, #1
 800597e:	3b01      	subs	r3, #1
 8005980:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005982:	429a      	cmp	r2, r3
 8005984:	d109      	bne.n	800599a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005990:	085b      	lsrs	r3, r3, #1
 8005992:	3b01      	subs	r3, #1
 8005994:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005996:	429a      	cmp	r2, r3
 8005998:	d001      	beq.n	800599e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3720      	adds	r7, #32
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40021000 	.word	0x40021000
 80059ac:	019f800c 	.word	0x019f800c
 80059b0:	feeefffc 	.word	0xfeeefffc

080059b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80059be:	2300      	movs	r3, #0
 80059c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e11e      	b.n	8005c0a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059cc:	4b91      	ldr	r3, [pc, #580]	@ (8005c14 <HAL_RCC_ClockConfig+0x260>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 030f 	and.w	r3, r3, #15
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d910      	bls.n	80059fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059da:	4b8e      	ldr	r3, [pc, #568]	@ (8005c14 <HAL_RCC_ClockConfig+0x260>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f023 020f 	bic.w	r2, r3, #15
 80059e2:	498c      	ldr	r1, [pc, #560]	@ (8005c14 <HAL_RCC_ClockConfig+0x260>)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ea:	4b8a      	ldr	r3, [pc, #552]	@ (8005c14 <HAL_RCC_ClockConfig+0x260>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d001      	beq.n	80059fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e106      	b.n	8005c0a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d073      	beq.n	8005af0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	2b03      	cmp	r3, #3
 8005a0e:	d129      	bne.n	8005a64 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a10:	4b81      	ldr	r3, [pc, #516]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e0f4      	b.n	8005c0a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005a20:	f000 f99e 	bl	8005d60 <RCC_GetSysClockFreqFromPLLSource>
 8005a24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	4a7c      	ldr	r2, [pc, #496]	@ (8005c1c <HAL_RCC_ClockConfig+0x268>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d93f      	bls.n	8005aae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a2e:	4b7a      	ldr	r3, [pc, #488]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d009      	beq.n	8005a4e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d033      	beq.n	8005aae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d12f      	bne.n	8005aae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a4e:	4b72      	ldr	r3, [pc, #456]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a56:	4a70      	ldr	r2, [pc, #448]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a5c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a5e:	2380      	movs	r3, #128	@ 0x80
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	e024      	b.n	8005aae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d107      	bne.n	8005a7c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a6c:	4b6a      	ldr	r3, [pc, #424]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d109      	bne.n	8005a8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e0c6      	b.n	8005c0a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a7c:	4b66      	ldr	r3, [pc, #408]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d101      	bne.n	8005a8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e0be      	b.n	8005c0a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005a8c:	f000 f8ce 	bl	8005c2c <HAL_RCC_GetSysClockFreq>
 8005a90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	4a61      	ldr	r2, [pc, #388]	@ (8005c1c <HAL_RCC_ClockConfig+0x268>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d909      	bls.n	8005aae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a9a:	4b5f      	ldr	r3, [pc, #380]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005aa2:	4a5d      	ldr	r2, [pc, #372]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aa8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005aaa:	2380      	movs	r3, #128	@ 0x80
 8005aac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005aae:	4b5a      	ldr	r3, [pc, #360]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f023 0203 	bic.w	r2, r3, #3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	4957      	ldr	r1, [pc, #348]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ac0:	f7fd fa80 	bl	8002fc4 <HAL_GetTick>
 8005ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac6:	e00a      	b.n	8005ade <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ac8:	f7fd fa7c 	bl	8002fc4 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e095      	b.n	8005c0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ade:	4b4e      	ldr	r3, [pc, #312]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f003 020c 	and.w	r2, r3, #12
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d1eb      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d023      	beq.n	8005b44 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d005      	beq.n	8005b14 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b08:	4b43      	ldr	r3, [pc, #268]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	4a42      	ldr	r2, [pc, #264]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005b0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b12:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0308 	and.w	r3, r3, #8
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d007      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005b20:	4b3d      	ldr	r3, [pc, #244]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005b28:	4a3b      	ldr	r2, [pc, #236]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005b2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b30:	4b39      	ldr	r3, [pc, #228]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	4936      	ldr	r1, [pc, #216]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	608b      	str	r3, [r1, #8]
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2b80      	cmp	r3, #128	@ 0x80
 8005b48:	d105      	bne.n	8005b56 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b4a:	4b33      	ldr	r3, [pc, #204]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	4a32      	ldr	r2, [pc, #200]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005b50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b54:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b56:	4b2f      	ldr	r3, [pc, #188]	@ (8005c14 <HAL_RCC_ClockConfig+0x260>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d21d      	bcs.n	8005ba0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b64:	4b2b      	ldr	r3, [pc, #172]	@ (8005c14 <HAL_RCC_ClockConfig+0x260>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f023 020f 	bic.w	r2, r3, #15
 8005b6c:	4929      	ldr	r1, [pc, #164]	@ (8005c14 <HAL_RCC_ClockConfig+0x260>)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b74:	f7fd fa26 	bl	8002fc4 <HAL_GetTick>
 8005b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7a:	e00a      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b7c:	f7fd fa22 	bl	8002fc4 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e03b      	b.n	8005c0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b92:	4b20      	ldr	r3, [pc, #128]	@ (8005c14 <HAL_RCC_ClockConfig+0x260>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 030f 	and.w	r3, r3, #15
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d1ed      	bne.n	8005b7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d008      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bac:	4b1a      	ldr	r3, [pc, #104]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	4917      	ldr	r1, [pc, #92]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d009      	beq.n	8005bde <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bca:	4b13      	ldr	r3, [pc, #76]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	490f      	ldr	r1, [pc, #60]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bde:	f000 f825 	bl	8005c2c <HAL_RCC_GetSysClockFreq>
 8005be2:	4602      	mov	r2, r0
 8005be4:	4b0c      	ldr	r3, [pc, #48]	@ (8005c18 <HAL_RCC_ClockConfig+0x264>)
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	091b      	lsrs	r3, r3, #4
 8005bea:	f003 030f 	and.w	r3, r3, #15
 8005bee:	490c      	ldr	r1, [pc, #48]	@ (8005c20 <HAL_RCC_ClockConfig+0x26c>)
 8005bf0:	5ccb      	ldrb	r3, [r1, r3]
 8005bf2:	f003 031f 	and.w	r3, r3, #31
 8005bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8005c24 <HAL_RCC_ClockConfig+0x270>)
 8005bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8005c28 <HAL_RCC_ClockConfig+0x274>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fd f992 	bl	8002f2c <HAL_InitTick>
 8005c08:	4603      	mov	r3, r0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	40022000 	.word	0x40022000
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	04c4b400 	.word	0x04c4b400
 8005c20:	0800b8bc 	.word	0x0800b8bc
 8005c24:	20000000 	.word	0x20000000
 8005c28:	20000004 	.word	0x20000004

08005c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c32:	4b2c      	ldr	r3, [pc, #176]	@ (8005ce4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 030c 	and.w	r3, r3, #12
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d102      	bne.n	8005c44 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8005ce8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c40:	613b      	str	r3, [r7, #16]
 8005c42:	e047      	b.n	8005cd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c44:	4b27      	ldr	r3, [pc, #156]	@ (8005ce4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f003 030c 	and.w	r3, r3, #12
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d102      	bne.n	8005c56 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c50:	4b26      	ldr	r3, [pc, #152]	@ (8005cec <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	e03e      	b.n	8005cd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005c56:	4b23      	ldr	r3, [pc, #140]	@ (8005ce4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 030c 	and.w	r3, r3, #12
 8005c5e:	2b0c      	cmp	r3, #12
 8005c60:	d136      	bne.n	8005cd0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c62:	4b20      	ldr	r3, [pc, #128]	@ (8005ce4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	091b      	lsrs	r3, r3, #4
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	3301      	adds	r3, #1
 8005c78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d10c      	bne.n	8005c9a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c80:	4a1a      	ldr	r2, [pc, #104]	@ (8005cec <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c88:	4a16      	ldr	r2, [pc, #88]	@ (8005ce4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c8a:	68d2      	ldr	r2, [r2, #12]
 8005c8c:	0a12      	lsrs	r2, r2, #8
 8005c8e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c92:	fb02 f303 	mul.w	r3, r2, r3
 8005c96:	617b      	str	r3, [r7, #20]
      break;
 8005c98:	e00c      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c9a:	4a13      	ldr	r2, [pc, #76]	@ (8005ce8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca2:	4a10      	ldr	r2, [pc, #64]	@ (8005ce4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ca4:	68d2      	ldr	r2, [r2, #12]
 8005ca6:	0a12      	lsrs	r2, r2, #8
 8005ca8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005cac:	fb02 f303 	mul.w	r3, r2, r3
 8005cb0:	617b      	str	r3, [r7, #20]
      break;
 8005cb2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	0e5b      	lsrs	r3, r3, #25
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ccc:	613b      	str	r3, [r7, #16]
 8005cce:	e001      	b.n	8005cd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005cd4:	693b      	ldr	r3, [r7, #16]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	40021000 	.word	0x40021000
 8005ce8:	00f42400 	.word	0x00f42400
 8005cec:	007a1200 	.word	0x007a1200

08005cf0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cf4:	4b03      	ldr	r3, [pc, #12]	@ (8005d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	20000000 	.word	0x20000000

08005d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d0c:	f7ff fff0 	bl	8005cf0 <HAL_RCC_GetHCLKFreq>
 8005d10:	4602      	mov	r2, r0
 8005d12:	4b06      	ldr	r3, [pc, #24]	@ (8005d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	0a1b      	lsrs	r3, r3, #8
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	4904      	ldr	r1, [pc, #16]	@ (8005d30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d1e:	5ccb      	ldrb	r3, [r1, r3]
 8005d20:	f003 031f 	and.w	r3, r3, #31
 8005d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	40021000 	.word	0x40021000
 8005d30:	0800b8cc 	.word	0x0800b8cc

08005d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d38:	f7ff ffda 	bl	8005cf0 <HAL_RCC_GetHCLKFreq>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	4b06      	ldr	r3, [pc, #24]	@ (8005d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	0adb      	lsrs	r3, r3, #11
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	4904      	ldr	r1, [pc, #16]	@ (8005d5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d4a:	5ccb      	ldrb	r3, [r1, r3]
 8005d4c:	f003 031f 	and.w	r3, r3, #31
 8005d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	40021000 	.word	0x40021000
 8005d5c:	0800b8cc 	.word	0x0800b8cc

08005d60 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d66:	4b1e      	ldr	r3, [pc, #120]	@ (8005de0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d70:	4b1b      	ldr	r3, [pc, #108]	@ (8005de0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	091b      	lsrs	r3, r3, #4
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d10c      	bne.n	8005d9e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d84:	4a17      	ldr	r2, [pc, #92]	@ (8005de4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8c:	4a14      	ldr	r2, [pc, #80]	@ (8005de0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d8e:	68d2      	ldr	r2, [r2, #12]
 8005d90:	0a12      	lsrs	r2, r2, #8
 8005d92:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d96:	fb02 f303 	mul.w	r3, r2, r3
 8005d9a:	617b      	str	r3, [r7, #20]
    break;
 8005d9c:	e00c      	b.n	8005db8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d9e:	4a12      	ldr	r2, [pc, #72]	@ (8005de8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da6:	4a0e      	ldr	r2, [pc, #56]	@ (8005de0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005da8:	68d2      	ldr	r2, [r2, #12]
 8005daa:	0a12      	lsrs	r2, r2, #8
 8005dac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005db0:	fb02 f303 	mul.w	r3, r2, r3
 8005db4:	617b      	str	r3, [r7, #20]
    break;
 8005db6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005db8:	4b09      	ldr	r3, [pc, #36]	@ (8005de0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	0e5b      	lsrs	r3, r3, #25
 8005dbe:	f003 0303 	and.w	r3, r3, #3
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005dd2:	687b      	ldr	r3, [r7, #4]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	371c      	adds	r7, #28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	40021000 	.word	0x40021000
 8005de4:	007a1200 	.word	0x007a1200
 8005de8:	00f42400 	.word	0x00f42400

08005dec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005df4:	2300      	movs	r3, #0
 8005df6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005df8:	2300      	movs	r3, #0
 8005dfa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 8098 	beq.w	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e0e:	4b43      	ldr	r3, [pc, #268]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10d      	bne.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e1a:	4b40      	ldr	r3, [pc, #256]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e1e:	4a3f      	ldr	r2, [pc, #252]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e24:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e26:	4b3d      	ldr	r3, [pc, #244]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e2e:	60bb      	str	r3, [r7, #8]
 8005e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e32:	2301      	movs	r3, #1
 8005e34:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e36:	4b3a      	ldr	r3, [pc, #232]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a39      	ldr	r2, [pc, #228]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e42:	f7fd f8bf 	bl	8002fc4 <HAL_GetTick>
 8005e46:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e48:	e009      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e4a:	f7fd f8bb 	bl	8002fc4 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d902      	bls.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	74fb      	strb	r3, [r7, #19]
        break;
 8005e5c:	e005      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e5e:	4b30      	ldr	r3, [pc, #192]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0ef      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005e6a:	7cfb      	ldrb	r3, [r7, #19]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d159      	bne.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e70:	4b2a      	ldr	r3, [pc, #168]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e7a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d01e      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d019      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e8c:	4b23      	ldr	r3, [pc, #140]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e98:	4b20      	ldr	r3, [pc, #128]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eae:	4a1b      	ldr	r2, [pc, #108]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005eb8:	4a18      	ldr	r2, [pc, #96]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d016      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eca:	f7fd f87b 	bl	8002fc4 <HAL_GetTick>
 8005ece:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ed0:	e00b      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ed2:	f7fd f877 	bl	8002fc4 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d902      	bls.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	74fb      	strb	r3, [r7, #19]
            break;
 8005ee8:	e006      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eea:	4b0c      	ldr	r3, [pc, #48]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0ec      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005ef8:	7cfb      	ldrb	r3, [r7, #19]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10b      	bne.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005efe:	4b07      	ldr	r3, [pc, #28]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0c:	4903      	ldr	r1, [pc, #12]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005f14:	e008      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f16:	7cfb      	ldrb	r3, [r7, #19]
 8005f18:	74bb      	strb	r3, [r7, #18]
 8005f1a:	e005      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f24:	7cfb      	ldrb	r3, [r7, #19]
 8005f26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f28:	7c7b      	ldrb	r3, [r7, #17]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d105      	bne.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f2e:	4ba6      	ldr	r3, [pc, #664]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f32:	4aa5      	ldr	r2, [pc, #660]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f38:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f46:	4ba0      	ldr	r3, [pc, #640]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f4c:	f023 0203 	bic.w	r2, r3, #3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	499c      	ldr	r1, [pc, #624]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f68:	4b97      	ldr	r3, [pc, #604]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f6e:	f023 020c 	bic.w	r2, r3, #12
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	4994      	ldr	r1, [pc, #592]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f8a:	4b8f      	ldr	r3, [pc, #572]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f90:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	498b      	ldr	r1, [pc, #556]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0308 	and.w	r3, r3, #8
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005fac:	4b86      	ldr	r3, [pc, #536]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	4983      	ldr	r1, [pc, #524]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fce:	4b7e      	ldr	r3, [pc, #504]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	497a      	ldr	r1, [pc, #488]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ff0:	4b75      	ldr	r3, [pc, #468]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	4972      	ldr	r1, [pc, #456]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006000:	4313      	orrs	r3, r2
 8006002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006012:	4b6d      	ldr	r3, [pc, #436]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006018:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	4969      	ldr	r1, [pc, #420]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006022:	4313      	orrs	r3, r2
 8006024:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00a      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006034:	4b64      	ldr	r3, [pc, #400]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800603a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	4961      	ldr	r1, [pc, #388]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006044:	4313      	orrs	r3, r2
 8006046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00a      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006056:	4b5c      	ldr	r3, [pc, #368]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800605c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006064:	4958      	ldr	r1, [pc, #352]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006066:	4313      	orrs	r3, r2
 8006068:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006074:	2b00      	cmp	r3, #0
 8006076:	d015      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006078:	4b53      	ldr	r3, [pc, #332]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800607a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800607e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006086:	4950      	ldr	r1, [pc, #320]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006088:	4313      	orrs	r3, r2
 800608a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006092:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006096:	d105      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006098:	4b4b      	ldr	r3, [pc, #300]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	4a4a      	ldr	r2, [pc, #296]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800609e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d015      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060b0:	4b45      	ldr	r3, [pc, #276]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060be:	4942      	ldr	r1, [pc, #264]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060ce:	d105      	bne.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060d0:	4b3d      	ldr	r3, [pc, #244]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	4a3c      	ldr	r2, [pc, #240]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060da:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d015      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060e8:	4b37      	ldr	r3, [pc, #220]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f6:	4934      	ldr	r1, [pc, #208]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006102:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006106:	d105      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006108:	4b2f      	ldr	r3, [pc, #188]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	4a2e      	ldr	r2, [pc, #184]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800610e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006112:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d015      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006120:	4b29      	ldr	r3, [pc, #164]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006126:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800612e:	4926      	ldr	r1, [pc, #152]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006130:	4313      	orrs	r3, r2
 8006132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800613a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800613e:	d105      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006140:	4b21      	ldr	r3, [pc, #132]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	4a20      	ldr	r2, [pc, #128]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800614a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d015      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006158:	4b1b      	ldr	r3, [pc, #108]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800615a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800615e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006166:	4918      	ldr	r1, [pc, #96]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006168:	4313      	orrs	r3, r2
 800616a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006172:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006176:	d105      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006178:	4b13      	ldr	r3, [pc, #76]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	4a12      	ldr	r2, [pc, #72]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800617e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006182:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d015      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006190:	4b0d      	ldr	r3, [pc, #52]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006196:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800619e:	490a      	ldr	r1, [pc, #40]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061ae:	d105      	bne.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80061b0:	4b05      	ldr	r3, [pc, #20]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	4a04      	ldr	r2, [pc, #16]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80061bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3718      	adds	r7, #24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	40021000 	.word	0x40021000

080061cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e049      	b.n	8006272 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d106      	bne.n	80061f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7fc fc26 	bl	8002a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3304      	adds	r3, #4
 8006208:	4619      	mov	r1, r3
 800620a:	4610      	mov	r0, r2
 800620c:	f000 fc98 	bl	8006b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b082      	sub	sp, #8
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e049      	b.n	8006320 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d106      	bne.n	80062a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f841 	bl	8006328 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2202      	movs	r2, #2
 80062aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	3304      	adds	r3, #4
 80062b6:	4619      	mov	r1, r3
 80062b8:	4610      	mov	r0, r2
 80062ba:	f000 fc41 	bl	8006b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d109      	bne.n	8006360 <HAL_TIM_PWM_Start+0x24>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b01      	cmp	r3, #1
 8006356:	bf14      	ite	ne
 8006358:	2301      	movne	r3, #1
 800635a:	2300      	moveq	r3, #0
 800635c:	b2db      	uxtb	r3, r3
 800635e:	e03c      	b.n	80063da <HAL_TIM_PWM_Start+0x9e>
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b04      	cmp	r3, #4
 8006364:	d109      	bne.n	800637a <HAL_TIM_PWM_Start+0x3e>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b01      	cmp	r3, #1
 8006370:	bf14      	ite	ne
 8006372:	2301      	movne	r3, #1
 8006374:	2300      	moveq	r3, #0
 8006376:	b2db      	uxtb	r3, r3
 8006378:	e02f      	b.n	80063da <HAL_TIM_PWM_Start+0x9e>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b08      	cmp	r3, #8
 800637e:	d109      	bne.n	8006394 <HAL_TIM_PWM_Start+0x58>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b01      	cmp	r3, #1
 800638a:	bf14      	ite	ne
 800638c:	2301      	movne	r3, #1
 800638e:	2300      	moveq	r3, #0
 8006390:	b2db      	uxtb	r3, r3
 8006392:	e022      	b.n	80063da <HAL_TIM_PWM_Start+0x9e>
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	2b0c      	cmp	r3, #12
 8006398:	d109      	bne.n	80063ae <HAL_TIM_PWM_Start+0x72>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	bf14      	ite	ne
 80063a6:	2301      	movne	r3, #1
 80063a8:	2300      	moveq	r3, #0
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	e015      	b.n	80063da <HAL_TIM_PWM_Start+0x9e>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b10      	cmp	r3, #16
 80063b2:	d109      	bne.n	80063c8 <HAL_TIM_PWM_Start+0x8c>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b01      	cmp	r3, #1
 80063be:	bf14      	ite	ne
 80063c0:	2301      	movne	r3, #1
 80063c2:	2300      	moveq	r3, #0
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	e008      	b.n	80063da <HAL_TIM_PWM_Start+0x9e>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	bf14      	ite	ne
 80063d4:	2301      	movne	r3, #1
 80063d6:	2300      	moveq	r3, #0
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e097      	b.n	8006512 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d104      	bne.n	80063f2 <HAL_TIM_PWM_Start+0xb6>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063f0:	e023      	b.n	800643a <HAL_TIM_PWM_Start+0xfe>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b04      	cmp	r3, #4
 80063f6:	d104      	bne.n	8006402 <HAL_TIM_PWM_Start+0xc6>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006400:	e01b      	b.n	800643a <HAL_TIM_PWM_Start+0xfe>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b08      	cmp	r3, #8
 8006406:	d104      	bne.n	8006412 <HAL_TIM_PWM_Start+0xd6>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006410:	e013      	b.n	800643a <HAL_TIM_PWM_Start+0xfe>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b0c      	cmp	r3, #12
 8006416:	d104      	bne.n	8006422 <HAL_TIM_PWM_Start+0xe6>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006420:	e00b      	b.n	800643a <HAL_TIM_PWM_Start+0xfe>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b10      	cmp	r3, #16
 8006426:	d104      	bne.n	8006432 <HAL_TIM_PWM_Start+0xf6>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006430:	e003      	b.n	800643a <HAL_TIM_PWM_Start+0xfe>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2202      	movs	r2, #2
 8006436:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2201      	movs	r2, #1
 8006440:	6839      	ldr	r1, [r7, #0]
 8006442:	4618      	mov	r0, r3
 8006444:	f001 f8c8 	bl	80075d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a33      	ldr	r2, [pc, #204]	@ (800651c <HAL_TIM_PWM_Start+0x1e0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d013      	beq.n	800647a <HAL_TIM_PWM_Start+0x13e>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a32      	ldr	r2, [pc, #200]	@ (8006520 <HAL_TIM_PWM_Start+0x1e4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d00e      	beq.n	800647a <HAL_TIM_PWM_Start+0x13e>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a30      	ldr	r2, [pc, #192]	@ (8006524 <HAL_TIM_PWM_Start+0x1e8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d009      	beq.n	800647a <HAL_TIM_PWM_Start+0x13e>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a2f      	ldr	r2, [pc, #188]	@ (8006528 <HAL_TIM_PWM_Start+0x1ec>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d004      	beq.n	800647a <HAL_TIM_PWM_Start+0x13e>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a2d      	ldr	r2, [pc, #180]	@ (800652c <HAL_TIM_PWM_Start+0x1f0>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d101      	bne.n	800647e <HAL_TIM_PWM_Start+0x142>
 800647a:	2301      	movs	r3, #1
 800647c:	e000      	b.n	8006480 <HAL_TIM_PWM_Start+0x144>
 800647e:	2300      	movs	r3, #0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d007      	beq.n	8006494 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006492:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a20      	ldr	r2, [pc, #128]	@ (800651c <HAL_TIM_PWM_Start+0x1e0>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d018      	beq.n	80064d0 <HAL_TIM_PWM_Start+0x194>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064a6:	d013      	beq.n	80064d0 <HAL_TIM_PWM_Start+0x194>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a20      	ldr	r2, [pc, #128]	@ (8006530 <HAL_TIM_PWM_Start+0x1f4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d00e      	beq.n	80064d0 <HAL_TIM_PWM_Start+0x194>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006534 <HAL_TIM_PWM_Start+0x1f8>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d009      	beq.n	80064d0 <HAL_TIM_PWM_Start+0x194>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a17      	ldr	r2, [pc, #92]	@ (8006520 <HAL_TIM_PWM_Start+0x1e4>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d004      	beq.n	80064d0 <HAL_TIM_PWM_Start+0x194>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a16      	ldr	r2, [pc, #88]	@ (8006524 <HAL_TIM_PWM_Start+0x1e8>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d115      	bne.n	80064fc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	4b18      	ldr	r3, [pc, #96]	@ (8006538 <HAL_TIM_PWM_Start+0x1fc>)
 80064d8:	4013      	ands	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b06      	cmp	r3, #6
 80064e0:	d015      	beq.n	800650e <HAL_TIM_PWM_Start+0x1d2>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064e8:	d011      	beq.n	800650e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f042 0201 	orr.w	r2, r2, #1
 80064f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064fa:	e008      	b.n	800650e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f042 0201 	orr.w	r2, r2, #1
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	e000      	b.n	8006510 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	40012c00 	.word	0x40012c00
 8006520:	40013400 	.word	0x40013400
 8006524:	40014000 	.word	0x40014000
 8006528:	40014400 	.word	0x40014400
 800652c:	40014800 	.word	0x40014800
 8006530:	40000400 	.word	0x40000400
 8006534:	40000800 	.word	0x40000800
 8006538:	00010007 	.word	0x00010007

0800653c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e049      	b.n	80065e2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fc fa8e 	bl	8002a84 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3304      	adds	r3, #4
 8006578:	4619      	mov	r1, r3
 800657a:	4610      	mov	r0, r2
 800657c:	f000 fae0 	bl	8006b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b086      	sub	sp, #24
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006600:	2b01      	cmp	r3, #1
 8006602:	d101      	bne.n	8006608 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006604:	2302      	movs	r3, #2
 8006606:	e088      	b.n	800671a <HAL_TIM_IC_ConfigChannel+0x130>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d11b      	bne.n	800664e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006626:	f000 fe1d 	bl	8007264 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	699a      	ldr	r2, [r3, #24]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 020c 	bic.w	r2, r2, #12
 8006638:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6999      	ldr	r1, [r3, #24]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	619a      	str	r2, [r3, #24]
 800664c:	e060      	b.n	8006710 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b04      	cmp	r3, #4
 8006652:	d11c      	bne.n	800668e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006664:	f000 fe95 	bl	8007392 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	699a      	ldr	r2, [r3, #24]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006676:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6999      	ldr	r1, [r3, #24]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	021a      	lsls	r2, r3, #8
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	619a      	str	r2, [r3, #24]
 800668c:	e040      	b.n	8006710 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b08      	cmp	r3, #8
 8006692:	d11b      	bne.n	80066cc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80066a4:	f000 fee2 	bl	800746c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	69da      	ldr	r2, [r3, #28]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 020c 	bic.w	r2, r2, #12
 80066b6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	69d9      	ldr	r1, [r3, #28]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	689a      	ldr	r2, [r3, #8]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	61da      	str	r2, [r3, #28]
 80066ca:	e021      	b.n	8006710 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b0c      	cmp	r3, #12
 80066d0:	d11c      	bne.n	800670c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80066e2:	f000 feff 	bl	80074e4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69da      	ldr	r2, [r3, #28]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80066f4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	69d9      	ldr	r1, [r3, #28]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	021a      	lsls	r2, r3, #8
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	61da      	str	r2, [r3, #28]
 800670a:	e001      	b.n	8006710 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006718:	7dfb      	ldrb	r3, [r7, #23]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
	...

08006724 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006730:	2300      	movs	r3, #0
 8006732:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800673a:	2b01      	cmp	r3, #1
 800673c:	d101      	bne.n	8006742 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800673e:	2302      	movs	r3, #2
 8006740:	e0ff      	b.n	8006942 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b14      	cmp	r3, #20
 800674e:	f200 80f0 	bhi.w	8006932 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006752:	a201      	add	r2, pc, #4	@ (adr r2, 8006758 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006758:	080067ad 	.word	0x080067ad
 800675c:	08006933 	.word	0x08006933
 8006760:	08006933 	.word	0x08006933
 8006764:	08006933 	.word	0x08006933
 8006768:	080067ed 	.word	0x080067ed
 800676c:	08006933 	.word	0x08006933
 8006770:	08006933 	.word	0x08006933
 8006774:	08006933 	.word	0x08006933
 8006778:	0800682f 	.word	0x0800682f
 800677c:	08006933 	.word	0x08006933
 8006780:	08006933 	.word	0x08006933
 8006784:	08006933 	.word	0x08006933
 8006788:	0800686f 	.word	0x0800686f
 800678c:	08006933 	.word	0x08006933
 8006790:	08006933 	.word	0x08006933
 8006794:	08006933 	.word	0x08006933
 8006798:	080068b1 	.word	0x080068b1
 800679c:	08006933 	.word	0x08006933
 80067a0:	08006933 	.word	0x08006933
 80067a4:	08006933 	.word	0x08006933
 80067a8:	080068f1 	.word	0x080068f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68b9      	ldr	r1, [r7, #8]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fa60 	bl	8006c78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699a      	ldr	r2, [r3, #24]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f042 0208 	orr.w	r2, r2, #8
 80067c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699a      	ldr	r2, [r3, #24]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0204 	bic.w	r2, r2, #4
 80067d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6999      	ldr	r1, [r3, #24]
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	691a      	ldr	r2, [r3, #16]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	619a      	str	r2, [r3, #24]
      break;
 80067ea:	e0a5      	b.n	8006938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68b9      	ldr	r1, [r7, #8]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fad0 	bl	8006d98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699a      	ldr	r2, [r3, #24]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	699a      	ldr	r2, [r3, #24]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6999      	ldr	r1, [r3, #24]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	021a      	lsls	r2, r3, #8
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	619a      	str	r2, [r3, #24]
      break;
 800682c:	e084      	b.n	8006938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68b9      	ldr	r1, [r7, #8]
 8006834:	4618      	mov	r0, r3
 8006836:	f000 fb39 	bl	8006eac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69da      	ldr	r2, [r3, #28]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f042 0208 	orr.w	r2, r2, #8
 8006848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69da      	ldr	r2, [r3, #28]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 0204 	bic.w	r2, r2, #4
 8006858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69d9      	ldr	r1, [r3, #28]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	691a      	ldr	r2, [r3, #16]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	61da      	str	r2, [r3, #28]
      break;
 800686c:	e064      	b.n	8006938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68b9      	ldr	r1, [r7, #8]
 8006874:	4618      	mov	r0, r3
 8006876:	f000 fba1 	bl	8006fbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69da      	ldr	r2, [r3, #28]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	69da      	ldr	r2, [r3, #28]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	69d9      	ldr	r1, [r3, #28]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	021a      	lsls	r2, r3, #8
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	61da      	str	r2, [r3, #28]
      break;
 80068ae:	e043      	b.n	8006938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68b9      	ldr	r1, [r7, #8]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fc0a 	bl	80070d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0208 	orr.w	r2, r2, #8
 80068ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 0204 	bic.w	r2, r2, #4
 80068da:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	691a      	ldr	r2, [r3, #16]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80068ee:	e023      	b.n	8006938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68b9      	ldr	r1, [r7, #8]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 fc4e 	bl	8007198 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800690a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800691a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	021a      	lsls	r2, r3, #8
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006930:	e002      	b.n	8006938 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	75fb      	strb	r3, [r7, #23]
      break;
 8006936:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006940:	7dfb      	ldrb	r3, [r7, #23]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop

0800694c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006960:	2b01      	cmp	r3, #1
 8006962:	d101      	bne.n	8006968 <HAL_TIM_ConfigClockSource+0x1c>
 8006964:	2302      	movs	r3, #2
 8006966:	e0de      	b.n	8006b26 <HAL_TIM_ConfigClockSource+0x1da>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2202      	movs	r2, #2
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006986:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800698a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006992:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a63      	ldr	r2, [pc, #396]	@ (8006b30 <HAL_TIM_ConfigClockSource+0x1e4>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	f000 80a9 	beq.w	8006afa <HAL_TIM_ConfigClockSource+0x1ae>
 80069a8:	4a61      	ldr	r2, [pc, #388]	@ (8006b30 <HAL_TIM_ConfigClockSource+0x1e4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	f200 80ae 	bhi.w	8006b0c <HAL_TIM_ConfigClockSource+0x1c0>
 80069b0:	4a60      	ldr	r2, [pc, #384]	@ (8006b34 <HAL_TIM_ConfigClockSource+0x1e8>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	f000 80a1 	beq.w	8006afa <HAL_TIM_ConfigClockSource+0x1ae>
 80069b8:	4a5e      	ldr	r2, [pc, #376]	@ (8006b34 <HAL_TIM_ConfigClockSource+0x1e8>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	f200 80a6 	bhi.w	8006b0c <HAL_TIM_ConfigClockSource+0x1c0>
 80069c0:	4a5d      	ldr	r2, [pc, #372]	@ (8006b38 <HAL_TIM_ConfigClockSource+0x1ec>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	f000 8099 	beq.w	8006afa <HAL_TIM_ConfigClockSource+0x1ae>
 80069c8:	4a5b      	ldr	r2, [pc, #364]	@ (8006b38 <HAL_TIM_ConfigClockSource+0x1ec>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	f200 809e 	bhi.w	8006b0c <HAL_TIM_ConfigClockSource+0x1c0>
 80069d0:	4a5a      	ldr	r2, [pc, #360]	@ (8006b3c <HAL_TIM_ConfigClockSource+0x1f0>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	f000 8091 	beq.w	8006afa <HAL_TIM_ConfigClockSource+0x1ae>
 80069d8:	4a58      	ldr	r2, [pc, #352]	@ (8006b3c <HAL_TIM_ConfigClockSource+0x1f0>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	f200 8096 	bhi.w	8006b0c <HAL_TIM_ConfigClockSource+0x1c0>
 80069e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80069e4:	f000 8089 	beq.w	8006afa <HAL_TIM_ConfigClockSource+0x1ae>
 80069e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80069ec:	f200 808e 	bhi.w	8006b0c <HAL_TIM_ConfigClockSource+0x1c0>
 80069f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069f4:	d03e      	beq.n	8006a74 <HAL_TIM_ConfigClockSource+0x128>
 80069f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069fa:	f200 8087 	bhi.w	8006b0c <HAL_TIM_ConfigClockSource+0x1c0>
 80069fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a02:	f000 8086 	beq.w	8006b12 <HAL_TIM_ConfigClockSource+0x1c6>
 8006a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a0a:	d87f      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x1c0>
 8006a0c:	2b70      	cmp	r3, #112	@ 0x70
 8006a0e:	d01a      	beq.n	8006a46 <HAL_TIM_ConfigClockSource+0xfa>
 8006a10:	2b70      	cmp	r3, #112	@ 0x70
 8006a12:	d87b      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x1c0>
 8006a14:	2b60      	cmp	r3, #96	@ 0x60
 8006a16:	d050      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0x16e>
 8006a18:	2b60      	cmp	r3, #96	@ 0x60
 8006a1a:	d877      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x1c0>
 8006a1c:	2b50      	cmp	r3, #80	@ 0x50
 8006a1e:	d03c      	beq.n	8006a9a <HAL_TIM_ConfigClockSource+0x14e>
 8006a20:	2b50      	cmp	r3, #80	@ 0x50
 8006a22:	d873      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x1c0>
 8006a24:	2b40      	cmp	r3, #64	@ 0x40
 8006a26:	d058      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0x18e>
 8006a28:	2b40      	cmp	r3, #64	@ 0x40
 8006a2a:	d86f      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x1c0>
 8006a2c:	2b30      	cmp	r3, #48	@ 0x30
 8006a2e:	d064      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x1ae>
 8006a30:	2b30      	cmp	r3, #48	@ 0x30
 8006a32:	d86b      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x1c0>
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	d060      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x1ae>
 8006a38:	2b20      	cmp	r3, #32
 8006a3a:	d867      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x1c0>
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d05c      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x1ae>
 8006a40:	2b10      	cmp	r3, #16
 8006a42:	d05a      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x1ae>
 8006a44:	e062      	b.n	8006b0c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a56:	f000 fd9f 	bl	8007598 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006a68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	609a      	str	r2, [r3, #8]
      break;
 8006a72:	e04f      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a84:	f000 fd88 	bl	8007598 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689a      	ldr	r2, [r3, #8]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a96:	609a      	str	r2, [r3, #8]
      break;
 8006a98:	e03c      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f000 fc44 	bl	8007334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2150      	movs	r1, #80	@ 0x50
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fd53 	bl	800755e <TIM_ITRx_SetConfig>
      break;
 8006ab8:	e02c      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f000 fca0 	bl	800740c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2160      	movs	r1, #96	@ 0x60
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 fd43 	bl	800755e <TIM_ITRx_SetConfig>
      break;
 8006ad8:	e01c      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	f000 fc24 	bl	8007334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2140      	movs	r1, #64	@ 0x40
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fd33 	bl	800755e <TIM_ITRx_SetConfig>
      break;
 8006af8:	e00c      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4619      	mov	r1, r3
 8006b04:	4610      	mov	r0, r2
 8006b06:	f000 fd2a 	bl	800755e <TIM_ITRx_SetConfig>
      break;
 8006b0a:	e003      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b10:	e000      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006b12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	00100070 	.word	0x00100070
 8006b34:	00100040 	.word	0x00100040
 8006b38:	00100030 	.word	0x00100030
 8006b3c:	00100020 	.word	0x00100020

08006b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a42      	ldr	r2, [pc, #264]	@ (8006c5c <TIM_Base_SetConfig+0x11c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00f      	beq.n	8006b78 <TIM_Base_SetConfig+0x38>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b5e:	d00b      	beq.n	8006b78 <TIM_Base_SetConfig+0x38>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a3f      	ldr	r2, [pc, #252]	@ (8006c60 <TIM_Base_SetConfig+0x120>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d007      	beq.n	8006b78 <TIM_Base_SetConfig+0x38>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a3e      	ldr	r2, [pc, #248]	@ (8006c64 <TIM_Base_SetConfig+0x124>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d003      	beq.n	8006b78 <TIM_Base_SetConfig+0x38>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a3d      	ldr	r2, [pc, #244]	@ (8006c68 <TIM_Base_SetConfig+0x128>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d108      	bne.n	8006b8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a33      	ldr	r2, [pc, #204]	@ (8006c5c <TIM_Base_SetConfig+0x11c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d01b      	beq.n	8006bca <TIM_Base_SetConfig+0x8a>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b98:	d017      	beq.n	8006bca <TIM_Base_SetConfig+0x8a>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a30      	ldr	r2, [pc, #192]	@ (8006c60 <TIM_Base_SetConfig+0x120>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d013      	beq.n	8006bca <TIM_Base_SetConfig+0x8a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a2f      	ldr	r2, [pc, #188]	@ (8006c64 <TIM_Base_SetConfig+0x124>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d00f      	beq.n	8006bca <TIM_Base_SetConfig+0x8a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a2e      	ldr	r2, [pc, #184]	@ (8006c68 <TIM_Base_SetConfig+0x128>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d00b      	beq.n	8006bca <TIM_Base_SetConfig+0x8a>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a2d      	ldr	r2, [pc, #180]	@ (8006c6c <TIM_Base_SetConfig+0x12c>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d007      	beq.n	8006bca <TIM_Base_SetConfig+0x8a>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a2c      	ldr	r2, [pc, #176]	@ (8006c70 <TIM_Base_SetConfig+0x130>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d003      	beq.n	8006bca <TIM_Base_SetConfig+0x8a>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a2b      	ldr	r2, [pc, #172]	@ (8006c74 <TIM_Base_SetConfig+0x134>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d108      	bne.n	8006bdc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	689a      	ldr	r2, [r3, #8]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a16      	ldr	r2, [pc, #88]	@ (8006c5c <TIM_Base_SetConfig+0x11c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00f      	beq.n	8006c28 <TIM_Base_SetConfig+0xe8>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a17      	ldr	r2, [pc, #92]	@ (8006c68 <TIM_Base_SetConfig+0x128>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d00b      	beq.n	8006c28 <TIM_Base_SetConfig+0xe8>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a16      	ldr	r2, [pc, #88]	@ (8006c6c <TIM_Base_SetConfig+0x12c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d007      	beq.n	8006c28 <TIM_Base_SetConfig+0xe8>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a15      	ldr	r2, [pc, #84]	@ (8006c70 <TIM_Base_SetConfig+0x130>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d003      	beq.n	8006c28 <TIM_Base_SetConfig+0xe8>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a14      	ldr	r2, [pc, #80]	@ (8006c74 <TIM_Base_SetConfig+0x134>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d103      	bne.n	8006c30 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	691a      	ldr	r2, [r3, #16]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d105      	bne.n	8006c4e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	f023 0201 	bic.w	r2, r3, #1
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	611a      	str	r2, [r3, #16]
  }
}
 8006c4e:	bf00      	nop
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	40012c00 	.word	0x40012c00
 8006c60:	40000400 	.word	0x40000400
 8006c64:	40000800 	.word	0x40000800
 8006c68:	40013400 	.word	0x40013400
 8006c6c:	40014000 	.word	0x40014000
 8006c70:	40014400 	.word	0x40014400
 8006c74:	40014800 	.word	0x40014800

08006c78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	f023 0201 	bic.w	r2, r3, #1
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f023 0303 	bic.w	r3, r3, #3
 8006cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f023 0302 	bic.w	r3, r3, #2
 8006cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a2c      	ldr	r2, [pc, #176]	@ (8006d84 <TIM_OC1_SetConfig+0x10c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d00f      	beq.n	8006cf8 <TIM_OC1_SetConfig+0x80>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a2b      	ldr	r2, [pc, #172]	@ (8006d88 <TIM_OC1_SetConfig+0x110>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00b      	beq.n	8006cf8 <TIM_OC1_SetConfig+0x80>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a2a      	ldr	r2, [pc, #168]	@ (8006d8c <TIM_OC1_SetConfig+0x114>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d007      	beq.n	8006cf8 <TIM_OC1_SetConfig+0x80>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a29      	ldr	r2, [pc, #164]	@ (8006d90 <TIM_OC1_SetConfig+0x118>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d003      	beq.n	8006cf8 <TIM_OC1_SetConfig+0x80>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a28      	ldr	r2, [pc, #160]	@ (8006d94 <TIM_OC1_SetConfig+0x11c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d10c      	bne.n	8006d12 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f023 0308 	bic.w	r3, r3, #8
 8006cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f023 0304 	bic.w	r3, r3, #4
 8006d10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a1b      	ldr	r2, [pc, #108]	@ (8006d84 <TIM_OC1_SetConfig+0x10c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00f      	beq.n	8006d3a <TIM_OC1_SetConfig+0xc2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a1a      	ldr	r2, [pc, #104]	@ (8006d88 <TIM_OC1_SetConfig+0x110>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00b      	beq.n	8006d3a <TIM_OC1_SetConfig+0xc2>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a19      	ldr	r2, [pc, #100]	@ (8006d8c <TIM_OC1_SetConfig+0x114>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d007      	beq.n	8006d3a <TIM_OC1_SetConfig+0xc2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a18      	ldr	r2, [pc, #96]	@ (8006d90 <TIM_OC1_SetConfig+0x118>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d003      	beq.n	8006d3a <TIM_OC1_SetConfig+0xc2>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a17      	ldr	r2, [pc, #92]	@ (8006d94 <TIM_OC1_SetConfig+0x11c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d111      	bne.n	8006d5e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	621a      	str	r2, [r3, #32]
}
 8006d78:	bf00      	nop
 8006d7a:	371c      	adds	r7, #28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	40012c00 	.word	0x40012c00
 8006d88:	40013400 	.word	0x40013400
 8006d8c:	40014000 	.word	0x40014000
 8006d90:	40014400 	.word	0x40014400
 8006d94:	40014800 	.word	0x40014800

08006d98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	f023 0210 	bic.w	r2, r3, #16
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006dc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	021b      	lsls	r3, r3, #8
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f023 0320 	bic.w	r3, r3, #32
 8006de6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	011b      	lsls	r3, r3, #4
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a28      	ldr	r2, [pc, #160]	@ (8006e98 <TIM_OC2_SetConfig+0x100>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_OC2_SetConfig+0x6c>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a27      	ldr	r2, [pc, #156]	@ (8006e9c <TIM_OC2_SetConfig+0x104>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d10d      	bne.n	8006e20 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	011b      	lsls	r3, r3, #4
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a1d      	ldr	r2, [pc, #116]	@ (8006e98 <TIM_OC2_SetConfig+0x100>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d00f      	beq.n	8006e48 <TIM_OC2_SetConfig+0xb0>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a1c      	ldr	r2, [pc, #112]	@ (8006e9c <TIM_OC2_SetConfig+0x104>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d00b      	beq.n	8006e48 <TIM_OC2_SetConfig+0xb0>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a1b      	ldr	r2, [pc, #108]	@ (8006ea0 <TIM_OC2_SetConfig+0x108>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d007      	beq.n	8006e48 <TIM_OC2_SetConfig+0xb0>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a1a      	ldr	r2, [pc, #104]	@ (8006ea4 <TIM_OC2_SetConfig+0x10c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d003      	beq.n	8006e48 <TIM_OC2_SetConfig+0xb0>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a19      	ldr	r2, [pc, #100]	@ (8006ea8 <TIM_OC2_SetConfig+0x110>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d113      	bne.n	8006e70 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	621a      	str	r2, [r3, #32]
}
 8006e8a:	bf00      	nop
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	40012c00 	.word	0x40012c00
 8006e9c:	40013400 	.word	0x40013400
 8006ea0:	40014000 	.word	0x40014000
 8006ea4:	40014400 	.word	0x40014400
 8006ea8:	40014800 	.word	0x40014800

08006eac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 0303 	bic.w	r3, r3, #3
 8006ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	021b      	lsls	r3, r3, #8
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a27      	ldr	r2, [pc, #156]	@ (8006fa8 <TIM_OC3_SetConfig+0xfc>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d003      	beq.n	8006f16 <TIM_OC3_SetConfig+0x6a>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a26      	ldr	r2, [pc, #152]	@ (8006fac <TIM_OC3_SetConfig+0x100>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d10d      	bne.n	8006f32 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	021b      	lsls	r3, r3, #8
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a1c      	ldr	r2, [pc, #112]	@ (8006fa8 <TIM_OC3_SetConfig+0xfc>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d00f      	beq.n	8006f5a <TIM_OC3_SetConfig+0xae>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8006fac <TIM_OC3_SetConfig+0x100>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d00b      	beq.n	8006f5a <TIM_OC3_SetConfig+0xae>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a1a      	ldr	r2, [pc, #104]	@ (8006fb0 <TIM_OC3_SetConfig+0x104>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d007      	beq.n	8006f5a <TIM_OC3_SetConfig+0xae>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a19      	ldr	r2, [pc, #100]	@ (8006fb4 <TIM_OC3_SetConfig+0x108>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d003      	beq.n	8006f5a <TIM_OC3_SetConfig+0xae>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a18      	ldr	r2, [pc, #96]	@ (8006fb8 <TIM_OC3_SetConfig+0x10c>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d113      	bne.n	8006f82 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	011b      	lsls	r3, r3, #4
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	011b      	lsls	r3, r3, #4
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	621a      	str	r2, [r3, #32]
}
 8006f9c:	bf00      	nop
 8006f9e:	371c      	adds	r7, #28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	40012c00 	.word	0x40012c00
 8006fac:	40013400 	.word	0x40013400
 8006fb0:	40014000 	.word	0x40014000
 8006fb4:	40014400 	.word	0x40014400
 8006fb8:	40014800 	.word	0x40014800

08006fbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a1b      	ldr	r3, [r3, #32]
 8006fd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	021b      	lsls	r3, r3, #8
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	4313      	orrs	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800700a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	031b      	lsls	r3, r3, #12
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	4313      	orrs	r3, r2
 8007016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a28      	ldr	r2, [pc, #160]	@ (80070bc <TIM_OC4_SetConfig+0x100>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d003      	beq.n	8007028 <TIM_OC4_SetConfig+0x6c>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a27      	ldr	r2, [pc, #156]	@ (80070c0 <TIM_OC4_SetConfig+0x104>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d10d      	bne.n	8007044 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800702e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	031b      	lsls	r3, r3, #12
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4313      	orrs	r3, r2
 800703a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007042:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a1d      	ldr	r2, [pc, #116]	@ (80070bc <TIM_OC4_SetConfig+0x100>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d00f      	beq.n	800706c <TIM_OC4_SetConfig+0xb0>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a1c      	ldr	r2, [pc, #112]	@ (80070c0 <TIM_OC4_SetConfig+0x104>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d00b      	beq.n	800706c <TIM_OC4_SetConfig+0xb0>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a1b      	ldr	r2, [pc, #108]	@ (80070c4 <TIM_OC4_SetConfig+0x108>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d007      	beq.n	800706c <TIM_OC4_SetConfig+0xb0>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a1a      	ldr	r2, [pc, #104]	@ (80070c8 <TIM_OC4_SetConfig+0x10c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d003      	beq.n	800706c <TIM_OC4_SetConfig+0xb0>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a19      	ldr	r2, [pc, #100]	@ (80070cc <TIM_OC4_SetConfig+0x110>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d113      	bne.n	8007094 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007072:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800707a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	019b      	lsls	r3, r3, #6
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	4313      	orrs	r3, r2
 8007086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	019b      	lsls	r3, r3, #6
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	4313      	orrs	r3, r2
 8007092:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	621a      	str	r2, [r3, #32]
}
 80070ae:	bf00      	nop
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	40012c00 	.word	0x40012c00
 80070c0:	40013400 	.word	0x40013400
 80070c4:	40014000 	.word	0x40014000
 80070c8:	40014400 	.word	0x40014400
 80070cc:	40014800 	.word	0x40014800

080070d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b087      	sub	sp, #28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	4313      	orrs	r3, r2
 800710c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007114:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	041b      	lsls	r3, r3, #16
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	4313      	orrs	r3, r2
 8007120:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a17      	ldr	r2, [pc, #92]	@ (8007184 <TIM_OC5_SetConfig+0xb4>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d00f      	beq.n	800714a <TIM_OC5_SetConfig+0x7a>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a16      	ldr	r2, [pc, #88]	@ (8007188 <TIM_OC5_SetConfig+0xb8>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d00b      	beq.n	800714a <TIM_OC5_SetConfig+0x7a>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a15      	ldr	r2, [pc, #84]	@ (800718c <TIM_OC5_SetConfig+0xbc>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d007      	beq.n	800714a <TIM_OC5_SetConfig+0x7a>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a14      	ldr	r2, [pc, #80]	@ (8007190 <TIM_OC5_SetConfig+0xc0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d003      	beq.n	800714a <TIM_OC5_SetConfig+0x7a>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a13      	ldr	r2, [pc, #76]	@ (8007194 <TIM_OC5_SetConfig+0xc4>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d109      	bne.n	800715e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007150:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	021b      	lsls	r3, r3, #8
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	4313      	orrs	r3, r2
 800715c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	621a      	str	r2, [r3, #32]
}
 8007178:	bf00      	nop
 800717a:	371c      	adds	r7, #28
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	40012c00 	.word	0x40012c00
 8007188:	40013400 	.word	0x40013400
 800718c:	40014000 	.word	0x40014000
 8007190:	40014400 	.word	0x40014400
 8007194:	40014800 	.word	0x40014800

08007198 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80071c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	021b      	lsls	r3, r3, #8
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80071de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	051b      	lsls	r3, r3, #20
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a18      	ldr	r2, [pc, #96]	@ (8007250 <TIM_OC6_SetConfig+0xb8>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d00f      	beq.n	8007214 <TIM_OC6_SetConfig+0x7c>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a17      	ldr	r2, [pc, #92]	@ (8007254 <TIM_OC6_SetConfig+0xbc>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d00b      	beq.n	8007214 <TIM_OC6_SetConfig+0x7c>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a16      	ldr	r2, [pc, #88]	@ (8007258 <TIM_OC6_SetConfig+0xc0>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d007      	beq.n	8007214 <TIM_OC6_SetConfig+0x7c>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a15      	ldr	r2, [pc, #84]	@ (800725c <TIM_OC6_SetConfig+0xc4>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d003      	beq.n	8007214 <TIM_OC6_SetConfig+0x7c>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a14      	ldr	r2, [pc, #80]	@ (8007260 <TIM_OC6_SetConfig+0xc8>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d109      	bne.n	8007228 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800721a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	029b      	lsls	r3, r3, #10
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	4313      	orrs	r3, r2
 8007226:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	621a      	str	r2, [r3, #32]
}
 8007242:	bf00      	nop
 8007244:	371c      	adds	r7, #28
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	40012c00 	.word	0x40012c00
 8007254:	40013400 	.word	0x40013400
 8007258:	40014000 	.word	0x40014000
 800725c:	40014400 	.word	0x40014400
 8007260:	40014800 	.word	0x40014800

08007264 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007264:	b480      	push	{r7}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
 8007270:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	f023 0201 	bic.w	r2, r3, #1
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4a24      	ldr	r2, [pc, #144]	@ (8007320 <TIM_TI1_SetConfig+0xbc>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d013      	beq.n	80072ba <TIM_TI1_SetConfig+0x56>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007298:	d00f      	beq.n	80072ba <TIM_TI1_SetConfig+0x56>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	4a21      	ldr	r2, [pc, #132]	@ (8007324 <TIM_TI1_SetConfig+0xc0>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d00b      	beq.n	80072ba <TIM_TI1_SetConfig+0x56>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	4a20      	ldr	r2, [pc, #128]	@ (8007328 <TIM_TI1_SetConfig+0xc4>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d007      	beq.n	80072ba <TIM_TI1_SetConfig+0x56>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	4a1f      	ldr	r2, [pc, #124]	@ (800732c <TIM_TI1_SetConfig+0xc8>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d003      	beq.n	80072ba <TIM_TI1_SetConfig+0x56>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	4a1e      	ldr	r2, [pc, #120]	@ (8007330 <TIM_TI1_SetConfig+0xcc>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d101      	bne.n	80072be <TIM_TI1_SetConfig+0x5a>
 80072ba:	2301      	movs	r3, #1
 80072bc:	e000      	b.n	80072c0 <TIM_TI1_SetConfig+0x5c>
 80072be:	2300      	movs	r3, #0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d008      	beq.n	80072d6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f023 0303 	bic.w	r3, r3, #3
 80072ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	e003      	b.n	80072de <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f043 0301 	orr.w	r3, r3, #1
 80072dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	011b      	lsls	r3, r3, #4
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f023 030a 	bic.w	r3, r3, #10
 80072f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	f003 030a 	and.w	r3, r3, #10
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	4313      	orrs	r3, r2
 8007304:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	621a      	str	r2, [r3, #32]
}
 8007312:	bf00      	nop
 8007314:	371c      	adds	r7, #28
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	40012c00 	.word	0x40012c00
 8007324:	40000400 	.word	0x40000400
 8007328:	40000800 	.word	0x40000800
 800732c:	40013400 	.word	0x40013400
 8007330:	40014000 	.word	0x40014000

08007334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007334:	b480      	push	{r7}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	f023 0201 	bic.w	r2, r3, #1
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800735e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	011b      	lsls	r3, r3, #4
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	4313      	orrs	r3, r2
 8007368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	f023 030a 	bic.w	r3, r3, #10
 8007370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	4313      	orrs	r3, r2
 8007378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	621a      	str	r2, [r3, #32]
}
 8007386:	bf00      	nop
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007392:	b480      	push	{r7}
 8007394:	b087      	sub	sp, #28
 8007396:	af00      	add	r7, sp, #0
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	607a      	str	r2, [r7, #4]
 800739e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	f023 0210 	bic.w	r2, r3, #16
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	021b      	lsls	r3, r3, #8
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80073d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	031b      	lsls	r3, r3, #12
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	4313      	orrs	r3, r2
 80073dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80073e4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	011b      	lsls	r3, r3, #4
 80073ea:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	621a      	str	r2, [r3, #32]
}
 8007400:	bf00      	nop
 8007402:	371c      	adds	r7, #28
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800740c:	b480      	push	{r7}
 800740e:	b087      	sub	sp, #28
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	f023 0210 	bic.w	r2, r3, #16
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	031b      	lsls	r3, r3, #12
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	4313      	orrs	r3, r2
 8007440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007448:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	011b      	lsls	r3, r3, #4
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	4313      	orrs	r3, r2
 8007452:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	621a      	str	r2, [r3, #32]
}
 8007460:	bf00      	nop
 8007462:	371c      	adds	r7, #28
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
 8007478:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6a1b      	ldr	r3, [r3, #32]
 8007484:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	69db      	ldr	r3, [r3, #28]
 8007490:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	f023 0303 	bic.w	r3, r3, #3
 8007498:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4313      	orrs	r3, r2
 80074a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074a8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80074bc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	021b      	lsls	r3, r3, #8
 80074c2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	621a      	str	r2, [r3, #32]
}
 80074d8:	bf00      	nop
 80074da:	371c      	adds	r7, #28
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b087      	sub	sp, #28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
 80074f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6a1b      	ldr	r3, [r3, #32]
 80074fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	69db      	ldr	r3, [r3, #28]
 8007508:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007510:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	021b      	lsls	r3, r3, #8
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	4313      	orrs	r3, r2
 800751a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007522:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	031b      	lsls	r3, r3, #12
 8007528:	b29b      	uxth	r3, r3
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	4313      	orrs	r3, r2
 800752e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8007536:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	031b      	lsls	r3, r3, #12
 800753c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	4313      	orrs	r3, r2
 8007544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	621a      	str	r2, [r3, #32]
}
 8007552:	bf00      	nop
 8007554:	371c      	adds	r7, #28
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800755e:	b480      	push	{r7}
 8007560:	b085      	sub	sp, #20
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007574:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007578:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4313      	orrs	r3, r2
 8007580:	f043 0307 	orr.w	r3, r3, #7
 8007584:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	609a      	str	r2, [r3, #8]
}
 800758c:	bf00      	nop
 800758e:	3714      	adds	r7, #20
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
 80075a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	021a      	lsls	r2, r3, #8
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	431a      	orrs	r2, r3
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	4313      	orrs	r3, r2
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	609a      	str	r2, [r3, #8]
}
 80075cc:	bf00      	nop
 80075ce:	371c      	adds	r7, #28
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f003 031f 	and.w	r3, r3, #31
 80075ea:	2201      	movs	r2, #1
 80075ec:	fa02 f303 	lsl.w	r3, r2, r3
 80075f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a1a      	ldr	r2, [r3, #32]
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	43db      	mvns	r3, r3
 80075fa:	401a      	ands	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6a1a      	ldr	r2, [r3, #32]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f003 031f 	and.w	r3, r3, #31
 800760a:	6879      	ldr	r1, [r7, #4]
 800760c:	fa01 f303 	lsl.w	r3, r1, r3
 8007610:	431a      	orrs	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	621a      	str	r2, [r3, #32]
}
 8007616:	bf00      	nop
 8007618:	371c      	adds	r7, #28
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
	...

08007624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007634:	2b01      	cmp	r3, #1
 8007636:	d101      	bne.n	800763c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007638:	2302      	movs	r3, #2
 800763a:	e065      	b.n	8007708 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a2c      	ldr	r2, [pc, #176]	@ (8007714 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d004      	beq.n	8007670 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a2b      	ldr	r2, [pc, #172]	@ (8007718 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d108      	bne.n	8007682 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007676:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	4313      	orrs	r3, r2
 8007680:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007688:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800768c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	4313      	orrs	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007714 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d018      	beq.n	80076dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076b2:	d013      	beq.n	80076dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a18      	ldr	r2, [pc, #96]	@ (800771c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d00e      	beq.n	80076dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a17      	ldr	r2, [pc, #92]	@ (8007720 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d009      	beq.n	80076dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a12      	ldr	r2, [pc, #72]	@ (8007718 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d004      	beq.n	80076dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a13      	ldr	r2, [pc, #76]	@ (8007724 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d10c      	bne.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	40012c00 	.word	0x40012c00
 8007718:	40013400 	.word	0x40013400
 800771c:	40000400 	.word	0x40000400
 8007720:	40000800 	.word	0x40000800
 8007724:	40014000 	.word	0x40014000

08007728 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800773c:	2b01      	cmp	r3, #1
 800773e:	d101      	bne.n	8007744 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007740:	2302      	movs	r3, #2
 8007742:	e073      	b.n	800782c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	4313      	orrs	r3, r2
 8007758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	4313      	orrs	r3, r2
 8007766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	4313      	orrs	r3, r2
 8007774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4313      	orrs	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	4313      	orrs	r3, r2
 8007790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	4313      	orrs	r3, r2
 800779e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077aa:	4313      	orrs	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	041b      	lsls	r3, r3, #16
 80077ba:	4313      	orrs	r3, r2
 80077bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	69db      	ldr	r3, [r3, #28]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a19      	ldr	r2, [pc, #100]	@ (8007838 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d004      	beq.n	80077e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a18      	ldr	r2, [pc, #96]	@ (800783c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d11c      	bne.n	800781a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ea:	051b      	lsls	r3, r3, #20
 80077ec:	4313      	orrs	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007808:	4313      	orrs	r3, r2
 800780a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007816:	4313      	orrs	r3, r2
 8007818:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	40012c00 	.word	0x40012c00
 800783c:	40013400 	.word	0x40013400

08007840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e042      	b.n	80078d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007858:	2b00      	cmp	r3, #0
 800785a:	d106      	bne.n	800786a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f7fb f9bf 	bl	8002be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2224      	movs	r2, #36	@ 0x24
 800786e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0201 	bic.w	r2, r2, #1
 8007880:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007886:	2b00      	cmp	r3, #0
 8007888:	d002      	beq.n	8007890 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fb82 	bl	8007f94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f8b3 	bl	80079fc <UART_SetConfig>
 8007896:	4603      	mov	r3, r0
 8007898:	2b01      	cmp	r3, #1
 800789a:	d101      	bne.n	80078a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e01b      	b.n	80078d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80078ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689a      	ldr	r2, [r3, #8]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80078be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0201 	orr.w	r2, r2, #1
 80078ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fc01 	bl	80080d8 <UART_CheckIdleState>
 80078d6:	4603      	mov	r3, r0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08a      	sub	sp, #40	@ 0x28
 80078e4:	af02      	add	r7, sp, #8
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	4613      	mov	r3, r2
 80078ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078f6:	2b20      	cmp	r3, #32
 80078f8:	d17b      	bne.n	80079f2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <HAL_UART_Transmit+0x26>
 8007900:	88fb      	ldrh	r3, [r7, #6]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e074      	b.n	80079f4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2221      	movs	r2, #33	@ 0x21
 8007916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800791a:	f7fb fb53 	bl	8002fc4 <HAL_GetTick>
 800791e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	88fa      	ldrh	r2, [r7, #6]
 8007924:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	88fa      	ldrh	r2, [r7, #6]
 800792c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007938:	d108      	bne.n	800794c <HAL_UART_Transmit+0x6c>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d104      	bne.n	800794c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007942:	2300      	movs	r3, #0
 8007944:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	61bb      	str	r3, [r7, #24]
 800794a:	e003      	b.n	8007954 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007950:	2300      	movs	r3, #0
 8007952:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007954:	e030      	b.n	80079b8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	2200      	movs	r2, #0
 800795e:	2180      	movs	r1, #128	@ 0x80
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 fc63 	bl	800822c <UART_WaitOnFlagUntilTimeout>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d005      	beq.n	8007978 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2220      	movs	r2, #32
 8007970:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e03d      	b.n	80079f4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10b      	bne.n	8007996 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	461a      	mov	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800798c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	3302      	adds	r3, #2
 8007992:	61bb      	str	r3, [r7, #24]
 8007994:	e007      	b.n	80079a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	781a      	ldrb	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	3301      	adds	r3, #1
 80079a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	3b01      	subs	r3, #1
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80079be:	b29b      	uxth	r3, r3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1c8      	bne.n	8007956 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	2200      	movs	r2, #0
 80079cc:	2140      	movs	r1, #64	@ 0x40
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f000 fc2c 	bl	800822c <UART_WaitOnFlagUntilTimeout>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d005      	beq.n	80079e6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2220      	movs	r2, #32
 80079de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e006      	b.n	80079f4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	e000      	b.n	80079f4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80079f2:	2302      	movs	r3, #2
  }
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3720      	adds	r7, #32
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a00:	b08c      	sub	sp, #48	@ 0x30
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	689a      	ldr	r2, [r3, #8]
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	431a      	orrs	r2, r3
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	431a      	orrs	r2, r3
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	69db      	ldr	r3, [r3, #28]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	4bab      	ldr	r3, [pc, #684]	@ (8007cd8 <UART_SetConfig+0x2dc>)
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	6812      	ldr	r2, [r2, #0]
 8007a32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a34:	430b      	orrs	r3, r1
 8007a36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	68da      	ldr	r2, [r3, #12]
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4aa0      	ldr	r2, [pc, #640]	@ (8007cdc <UART_SetConfig+0x2e0>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d004      	beq.n	8007a68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a64:	4313      	orrs	r3, r2
 8007a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007a72:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	6812      	ldr	r2, [r2, #0]
 8007a7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a7c:	430b      	orrs	r3, r1
 8007a7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a86:	f023 010f 	bic.w	r1, r3, #15
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a91      	ldr	r2, [pc, #580]	@ (8007ce0 <UART_SetConfig+0x2e4>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d125      	bne.n	8007aec <UART_SetConfig+0xf0>
 8007aa0:	4b90      	ldr	r3, [pc, #576]	@ (8007ce4 <UART_SetConfig+0x2e8>)
 8007aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aa6:	f003 0303 	and.w	r3, r3, #3
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d81a      	bhi.n	8007ae4 <UART_SetConfig+0xe8>
 8007aae:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab4 <UART_SetConfig+0xb8>)
 8007ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab4:	08007ac5 	.word	0x08007ac5
 8007ab8:	08007ad5 	.word	0x08007ad5
 8007abc:	08007acd 	.word	0x08007acd
 8007ac0:	08007add 	.word	0x08007add
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aca:	e0d6      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007acc:	2302      	movs	r3, #2
 8007ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ad2:	e0d2      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007ad4:	2304      	movs	r3, #4
 8007ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ada:	e0ce      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007adc:	2308      	movs	r3, #8
 8007ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ae2:	e0ca      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007ae4:	2310      	movs	r3, #16
 8007ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aea:	e0c6      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a7d      	ldr	r2, [pc, #500]	@ (8007ce8 <UART_SetConfig+0x2ec>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d138      	bne.n	8007b68 <UART_SetConfig+0x16c>
 8007af6:	4b7b      	ldr	r3, [pc, #492]	@ (8007ce4 <UART_SetConfig+0x2e8>)
 8007af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007afc:	f003 030c 	and.w	r3, r3, #12
 8007b00:	2b0c      	cmp	r3, #12
 8007b02:	d82d      	bhi.n	8007b60 <UART_SetConfig+0x164>
 8007b04:	a201      	add	r2, pc, #4	@ (adr r2, 8007b0c <UART_SetConfig+0x110>)
 8007b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0a:	bf00      	nop
 8007b0c:	08007b41 	.word	0x08007b41
 8007b10:	08007b61 	.word	0x08007b61
 8007b14:	08007b61 	.word	0x08007b61
 8007b18:	08007b61 	.word	0x08007b61
 8007b1c:	08007b51 	.word	0x08007b51
 8007b20:	08007b61 	.word	0x08007b61
 8007b24:	08007b61 	.word	0x08007b61
 8007b28:	08007b61 	.word	0x08007b61
 8007b2c:	08007b49 	.word	0x08007b49
 8007b30:	08007b61 	.word	0x08007b61
 8007b34:	08007b61 	.word	0x08007b61
 8007b38:	08007b61 	.word	0x08007b61
 8007b3c:	08007b59 	.word	0x08007b59
 8007b40:	2300      	movs	r3, #0
 8007b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b46:	e098      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007b48:	2302      	movs	r3, #2
 8007b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b4e:	e094      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007b50:	2304      	movs	r3, #4
 8007b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b56:	e090      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007b58:	2308      	movs	r3, #8
 8007b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b5e:	e08c      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007b60:	2310      	movs	r3, #16
 8007b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b66:	e088      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a5f      	ldr	r2, [pc, #380]	@ (8007cec <UART_SetConfig+0x2f0>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d125      	bne.n	8007bbe <UART_SetConfig+0x1c2>
 8007b72:	4b5c      	ldr	r3, [pc, #368]	@ (8007ce4 <UART_SetConfig+0x2e8>)
 8007b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007b7c:	2b30      	cmp	r3, #48	@ 0x30
 8007b7e:	d016      	beq.n	8007bae <UART_SetConfig+0x1b2>
 8007b80:	2b30      	cmp	r3, #48	@ 0x30
 8007b82:	d818      	bhi.n	8007bb6 <UART_SetConfig+0x1ba>
 8007b84:	2b20      	cmp	r3, #32
 8007b86:	d00a      	beq.n	8007b9e <UART_SetConfig+0x1a2>
 8007b88:	2b20      	cmp	r3, #32
 8007b8a:	d814      	bhi.n	8007bb6 <UART_SetConfig+0x1ba>
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d002      	beq.n	8007b96 <UART_SetConfig+0x19a>
 8007b90:	2b10      	cmp	r3, #16
 8007b92:	d008      	beq.n	8007ba6 <UART_SetConfig+0x1aa>
 8007b94:	e00f      	b.n	8007bb6 <UART_SetConfig+0x1ba>
 8007b96:	2300      	movs	r3, #0
 8007b98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b9c:	e06d      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ba4:	e069      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007ba6:	2304      	movs	r3, #4
 8007ba8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bac:	e065      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007bae:	2308      	movs	r3, #8
 8007bb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bb4:	e061      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007bb6:	2310      	movs	r3, #16
 8007bb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bbc:	e05d      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a4b      	ldr	r2, [pc, #300]	@ (8007cf0 <UART_SetConfig+0x2f4>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d125      	bne.n	8007c14 <UART_SetConfig+0x218>
 8007bc8:	4b46      	ldr	r3, [pc, #280]	@ (8007ce4 <UART_SetConfig+0x2e8>)
 8007bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007bd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007bd4:	d016      	beq.n	8007c04 <UART_SetConfig+0x208>
 8007bd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007bd8:	d818      	bhi.n	8007c0c <UART_SetConfig+0x210>
 8007bda:	2b80      	cmp	r3, #128	@ 0x80
 8007bdc:	d00a      	beq.n	8007bf4 <UART_SetConfig+0x1f8>
 8007bde:	2b80      	cmp	r3, #128	@ 0x80
 8007be0:	d814      	bhi.n	8007c0c <UART_SetConfig+0x210>
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d002      	beq.n	8007bec <UART_SetConfig+0x1f0>
 8007be6:	2b40      	cmp	r3, #64	@ 0x40
 8007be8:	d008      	beq.n	8007bfc <UART_SetConfig+0x200>
 8007bea:	e00f      	b.n	8007c0c <UART_SetConfig+0x210>
 8007bec:	2300      	movs	r3, #0
 8007bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bf2:	e042      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bfa:	e03e      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007bfc:	2304      	movs	r3, #4
 8007bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c02:	e03a      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007c04:	2308      	movs	r3, #8
 8007c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c0a:	e036      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007c0c:	2310      	movs	r3, #16
 8007c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c12:	e032      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a30      	ldr	r2, [pc, #192]	@ (8007cdc <UART_SetConfig+0x2e0>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d12a      	bne.n	8007c74 <UART_SetConfig+0x278>
 8007c1e:	4b31      	ldr	r3, [pc, #196]	@ (8007ce4 <UART_SetConfig+0x2e8>)
 8007c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007c28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c2c:	d01a      	beq.n	8007c64 <UART_SetConfig+0x268>
 8007c2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c32:	d81b      	bhi.n	8007c6c <UART_SetConfig+0x270>
 8007c34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c38:	d00c      	beq.n	8007c54 <UART_SetConfig+0x258>
 8007c3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c3e:	d815      	bhi.n	8007c6c <UART_SetConfig+0x270>
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d003      	beq.n	8007c4c <UART_SetConfig+0x250>
 8007c44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c48:	d008      	beq.n	8007c5c <UART_SetConfig+0x260>
 8007c4a:	e00f      	b.n	8007c6c <UART_SetConfig+0x270>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c52:	e012      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007c54:	2302      	movs	r3, #2
 8007c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c5a:	e00e      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007c5c:	2304      	movs	r3, #4
 8007c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c62:	e00a      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007c64:	2308      	movs	r3, #8
 8007c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c6a:	e006      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007c6c:	2310      	movs	r3, #16
 8007c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c72:	e002      	b.n	8007c7a <UART_SetConfig+0x27e>
 8007c74:	2310      	movs	r3, #16
 8007c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a17      	ldr	r2, [pc, #92]	@ (8007cdc <UART_SetConfig+0x2e0>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	f040 80a8 	bne.w	8007dd6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c8a:	2b08      	cmp	r3, #8
 8007c8c:	d834      	bhi.n	8007cf8 <UART_SetConfig+0x2fc>
 8007c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c94 <UART_SetConfig+0x298>)
 8007c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c94:	08007cb9 	.word	0x08007cb9
 8007c98:	08007cf9 	.word	0x08007cf9
 8007c9c:	08007cc1 	.word	0x08007cc1
 8007ca0:	08007cf9 	.word	0x08007cf9
 8007ca4:	08007cc7 	.word	0x08007cc7
 8007ca8:	08007cf9 	.word	0x08007cf9
 8007cac:	08007cf9 	.word	0x08007cf9
 8007cb0:	08007cf9 	.word	0x08007cf9
 8007cb4:	08007ccf 	.word	0x08007ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cb8:	f7fe f826 	bl	8005d08 <HAL_RCC_GetPCLK1Freq>
 8007cbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007cbe:	e021      	b.n	8007d04 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8007cf4 <UART_SetConfig+0x2f8>)
 8007cc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007cc4:	e01e      	b.n	8007d04 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cc6:	f7fd ffb1 	bl	8005c2c <HAL_RCC_GetSysClockFreq>
 8007cca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ccc:	e01a      	b.n	8007d04 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007cd4:	e016      	b.n	8007d04 <UART_SetConfig+0x308>
 8007cd6:	bf00      	nop
 8007cd8:	cfff69f3 	.word	0xcfff69f3
 8007cdc:	40008000 	.word	0x40008000
 8007ce0:	40013800 	.word	0x40013800
 8007ce4:	40021000 	.word	0x40021000
 8007ce8:	40004400 	.word	0x40004400
 8007cec:	40004800 	.word	0x40004800
 8007cf0:	40004c00 	.word	0x40004c00
 8007cf4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007d02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f000 812a 	beq.w	8007f60 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d10:	4a9e      	ldr	r2, [pc, #632]	@ (8007f8c <UART_SetConfig+0x590>)
 8007d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d16:	461a      	mov	r2, r3
 8007d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d1e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	4613      	mov	r3, r2
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	4413      	add	r3, r2
 8007d2a:	69ba      	ldr	r2, [r7, #24]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d305      	bcc.n	8007d3c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d36:	69ba      	ldr	r2, [r7, #24]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d903      	bls.n	8007d44 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d42:	e10d      	b.n	8007f60 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d46:	2200      	movs	r2, #0
 8007d48:	60bb      	str	r3, [r7, #8]
 8007d4a:	60fa      	str	r2, [r7, #12]
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d50:	4a8e      	ldr	r2, [pc, #568]	@ (8007f8c <UART_SetConfig+0x590>)
 8007d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	2200      	movs	r2, #0
 8007d5a:	603b      	str	r3, [r7, #0]
 8007d5c:	607a      	str	r2, [r7, #4]
 8007d5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d66:	f7f8 ff67 	bl	8000c38 <__aeabi_uldivmod>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	4610      	mov	r0, r2
 8007d70:	4619      	mov	r1, r3
 8007d72:	f04f 0200 	mov.w	r2, #0
 8007d76:	f04f 0300 	mov.w	r3, #0
 8007d7a:	020b      	lsls	r3, r1, #8
 8007d7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d80:	0202      	lsls	r2, r0, #8
 8007d82:	6979      	ldr	r1, [r7, #20]
 8007d84:	6849      	ldr	r1, [r1, #4]
 8007d86:	0849      	lsrs	r1, r1, #1
 8007d88:	2000      	movs	r0, #0
 8007d8a:	460c      	mov	r4, r1
 8007d8c:	4605      	mov	r5, r0
 8007d8e:	eb12 0804 	adds.w	r8, r2, r4
 8007d92:	eb43 0905 	adc.w	r9, r3, r5
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	469a      	mov	sl, r3
 8007d9e:	4693      	mov	fp, r2
 8007da0:	4652      	mov	r2, sl
 8007da2:	465b      	mov	r3, fp
 8007da4:	4640      	mov	r0, r8
 8007da6:	4649      	mov	r1, r9
 8007da8:	f7f8 ff46 	bl	8000c38 <__aeabi_uldivmod>
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	4613      	mov	r3, r2
 8007db2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dba:	d308      	bcc.n	8007dce <UART_SetConfig+0x3d2>
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dc2:	d204      	bcs.n	8007dce <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6a3a      	ldr	r2, [r7, #32]
 8007dca:	60da      	str	r2, [r3, #12]
 8007dcc:	e0c8      	b.n	8007f60 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007dd4:	e0c4      	b.n	8007f60 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dde:	d167      	bne.n	8007eb0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007de0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007de4:	2b08      	cmp	r3, #8
 8007de6:	d828      	bhi.n	8007e3a <UART_SetConfig+0x43e>
 8007de8:	a201      	add	r2, pc, #4	@ (adr r2, 8007df0 <UART_SetConfig+0x3f4>)
 8007dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dee:	bf00      	nop
 8007df0:	08007e15 	.word	0x08007e15
 8007df4:	08007e1d 	.word	0x08007e1d
 8007df8:	08007e25 	.word	0x08007e25
 8007dfc:	08007e3b 	.word	0x08007e3b
 8007e00:	08007e2b 	.word	0x08007e2b
 8007e04:	08007e3b 	.word	0x08007e3b
 8007e08:	08007e3b 	.word	0x08007e3b
 8007e0c:	08007e3b 	.word	0x08007e3b
 8007e10:	08007e33 	.word	0x08007e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e14:	f7fd ff78 	bl	8005d08 <HAL_RCC_GetPCLK1Freq>
 8007e18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e1a:	e014      	b.n	8007e46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e1c:	f7fd ff8a 	bl	8005d34 <HAL_RCC_GetPCLK2Freq>
 8007e20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e22:	e010      	b.n	8007e46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e24:	4b5a      	ldr	r3, [pc, #360]	@ (8007f90 <UART_SetConfig+0x594>)
 8007e26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e28:	e00d      	b.n	8007e46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e2a:	f7fd feff 	bl	8005c2c <HAL_RCC_GetSysClockFreq>
 8007e2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e30:	e009      	b.n	8007e46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e38:	e005      	b.n	8007e46 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007e44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 8089 	beq.w	8007f60 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e52:	4a4e      	ldr	r2, [pc, #312]	@ (8007f8c <UART_SetConfig+0x590>)
 8007e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e60:	005a      	lsls	r2, r3, #1
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	085b      	lsrs	r3, r3, #1
 8007e68:	441a      	add	r2, r3
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e74:	6a3b      	ldr	r3, [r7, #32]
 8007e76:	2b0f      	cmp	r3, #15
 8007e78:	d916      	bls.n	8007ea8 <UART_SetConfig+0x4ac>
 8007e7a:	6a3b      	ldr	r3, [r7, #32]
 8007e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e80:	d212      	bcs.n	8007ea8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	f023 030f 	bic.w	r3, r3, #15
 8007e8a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	085b      	lsrs	r3, r3, #1
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	f003 0307 	and.w	r3, r3, #7
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	8bfb      	ldrh	r3, [r7, #30]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	8bfa      	ldrh	r2, [r7, #30]
 8007ea4:	60da      	str	r2, [r3, #12]
 8007ea6:	e05b      	b.n	8007f60 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007eae:	e057      	b.n	8007f60 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007eb0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	d828      	bhi.n	8007f0a <UART_SetConfig+0x50e>
 8007eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ec0 <UART_SetConfig+0x4c4>)
 8007eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ebe:	bf00      	nop
 8007ec0:	08007ee5 	.word	0x08007ee5
 8007ec4:	08007eed 	.word	0x08007eed
 8007ec8:	08007ef5 	.word	0x08007ef5
 8007ecc:	08007f0b 	.word	0x08007f0b
 8007ed0:	08007efb 	.word	0x08007efb
 8007ed4:	08007f0b 	.word	0x08007f0b
 8007ed8:	08007f0b 	.word	0x08007f0b
 8007edc:	08007f0b 	.word	0x08007f0b
 8007ee0:	08007f03 	.word	0x08007f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ee4:	f7fd ff10 	bl	8005d08 <HAL_RCC_GetPCLK1Freq>
 8007ee8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007eea:	e014      	b.n	8007f16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007eec:	f7fd ff22 	bl	8005d34 <HAL_RCC_GetPCLK2Freq>
 8007ef0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ef2:	e010      	b.n	8007f16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ef4:	4b26      	ldr	r3, [pc, #152]	@ (8007f90 <UART_SetConfig+0x594>)
 8007ef6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ef8:	e00d      	b.n	8007f16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007efa:	f7fd fe97 	bl	8005c2c <HAL_RCC_GetSysClockFreq>
 8007efe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f00:	e009      	b.n	8007f16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f08:	e005      	b.n	8007f16 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007f14:	bf00      	nop
    }

    if (pclk != 0U)
 8007f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d021      	beq.n	8007f60 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f20:	4a1a      	ldr	r2, [pc, #104]	@ (8007f8c <UART_SetConfig+0x590>)
 8007f22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f26:	461a      	mov	r2, r3
 8007f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	085b      	lsrs	r3, r3, #1
 8007f34:	441a      	add	r2, r3
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	2b0f      	cmp	r3, #15
 8007f44:	d909      	bls.n	8007f5a <UART_SetConfig+0x55e>
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f4c:	d205      	bcs.n	8007f5a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	60da      	str	r2, [r3, #12]
 8007f58:	e002      	b.n	8007f60 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	2200      	movs	r2, #0
 8007f74:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007f7c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3730      	adds	r7, #48	@ 0x30
 8007f84:	46bd      	mov	sp, r7
 8007f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f8a:	bf00      	nop
 8007f8c:	0800b8d4 	.word	0x0800b8d4
 8007f90:	00f42400 	.word	0x00f42400

08007f94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa0:	f003 0308 	and.w	r3, r3, #8
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00a      	beq.n	8007fbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe4:	f003 0302 	and.w	r3, r3, #2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00a      	beq.n	8008002 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	430a      	orrs	r2, r1
 8008000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008006:	f003 0304 	and.w	r3, r3, #4
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00a      	beq.n	8008024 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	430a      	orrs	r2, r1
 8008022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008028:	f003 0310 	and.w	r3, r3, #16
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00a      	beq.n	8008046 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	430a      	orrs	r2, r1
 8008044:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800804a:	f003 0320 	and.w	r3, r3, #32
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00a      	beq.n	8008068 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	430a      	orrs	r2, r1
 8008066:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800806c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008070:	2b00      	cmp	r3, #0
 8008072:	d01a      	beq.n	80080aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	430a      	orrs	r2, r1
 8008088:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800808e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008092:	d10a      	bne.n	80080aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	430a      	orrs	r2, r1
 80080a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00a      	beq.n	80080cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	430a      	orrs	r2, r1
 80080ca:	605a      	str	r2, [r3, #4]
  }
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b098      	sub	sp, #96	@ 0x60
 80080dc:	af02      	add	r7, sp, #8
 80080de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080e8:	f7fa ff6c 	bl	8002fc4 <HAL_GetTick>
 80080ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0308 	and.w	r3, r3, #8
 80080f8:	2b08      	cmp	r3, #8
 80080fa:	d12f      	bne.n	800815c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008104:	2200      	movs	r2, #0
 8008106:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f88e 	bl	800822c <UART_WaitOnFlagUntilTimeout>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d022      	beq.n	800815c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811e:	e853 3f00 	ldrex	r3, [r3]
 8008122:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800812a:	653b      	str	r3, [r7, #80]	@ 0x50
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	461a      	mov	r2, r3
 8008132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008134:	647b      	str	r3, [r7, #68]	@ 0x44
 8008136:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008138:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800813a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800813c:	e841 2300 	strex	r3, r2, [r1]
 8008140:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1e6      	bne.n	8008116 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2220      	movs	r2, #32
 800814c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e063      	b.n	8008224 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0304 	and.w	r3, r3, #4
 8008166:	2b04      	cmp	r3, #4
 8008168:	d149      	bne.n	80081fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800816a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008172:	2200      	movs	r2, #0
 8008174:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f857 	bl	800822c <UART_WaitOnFlagUntilTimeout>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d03c      	beq.n	80081fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818c:	e853 3f00 	ldrex	r3, [r3]
 8008190:	623b      	str	r3, [r7, #32]
   return(result);
 8008192:	6a3b      	ldr	r3, [r7, #32]
 8008194:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008198:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	461a      	mov	r2, r3
 80081a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80081a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081aa:	e841 2300 	strex	r3, r2, [r1]
 80081ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80081b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1e6      	bne.n	8008184 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3308      	adds	r3, #8
 80081bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	e853 3f00 	ldrex	r3, [r3]
 80081c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f023 0301 	bic.w	r3, r3, #1
 80081cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	3308      	adds	r3, #8
 80081d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081d6:	61fa      	str	r2, [r7, #28]
 80081d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081da:	69b9      	ldr	r1, [r7, #24]
 80081dc:	69fa      	ldr	r2, [r7, #28]
 80081de:	e841 2300 	strex	r3, r2, [r1]
 80081e2:	617b      	str	r3, [r7, #20]
   return(result);
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1e5      	bne.n	80081b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2220      	movs	r2, #32
 80081ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e012      	b.n	8008224 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2220      	movs	r2, #32
 8008202:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2220      	movs	r2, #32
 800820a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3758      	adds	r7, #88	@ 0x58
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	603b      	str	r3, [r7, #0]
 8008238:	4613      	mov	r3, r2
 800823a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800823c:	e04f      	b.n	80082de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008244:	d04b      	beq.n	80082de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008246:	f7fa febd 	bl	8002fc4 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	69ba      	ldr	r2, [r7, #24]
 8008252:	429a      	cmp	r2, r3
 8008254:	d302      	bcc.n	800825c <UART_WaitOnFlagUntilTimeout+0x30>
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d101      	bne.n	8008260 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e04e      	b.n	80082fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0304 	and.w	r3, r3, #4
 800826a:	2b00      	cmp	r3, #0
 800826c:	d037      	beq.n	80082de <UART_WaitOnFlagUntilTimeout+0xb2>
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	2b80      	cmp	r3, #128	@ 0x80
 8008272:	d034      	beq.n	80082de <UART_WaitOnFlagUntilTimeout+0xb2>
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2b40      	cmp	r3, #64	@ 0x40
 8008278:	d031      	beq.n	80082de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	69db      	ldr	r3, [r3, #28]
 8008280:	f003 0308 	and.w	r3, r3, #8
 8008284:	2b08      	cmp	r3, #8
 8008286:	d110      	bne.n	80082aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2208      	movs	r2, #8
 800828e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f000 f838 	bl	8008306 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2208      	movs	r2, #8
 800829a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e029      	b.n	80082fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	69db      	ldr	r3, [r3, #28]
 80082b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082b8:	d111      	bne.n	80082de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80082c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f000 f81e 	bl	8008306 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2220      	movs	r2, #32
 80082ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80082da:	2303      	movs	r3, #3
 80082dc:	e00f      	b.n	80082fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	69da      	ldr	r2, [r3, #28]
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	4013      	ands	r3, r2
 80082e8:	68ba      	ldr	r2, [r7, #8]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	bf0c      	ite	eq
 80082ee:	2301      	moveq	r3, #1
 80082f0:	2300      	movne	r3, #0
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	461a      	mov	r2, r3
 80082f6:	79fb      	ldrb	r3, [r7, #7]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d0a0      	beq.n	800823e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008306:	b480      	push	{r7}
 8008308:	b095      	sub	sp, #84	@ 0x54
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008316:	e853 3f00 	ldrex	r3, [r3]
 800831a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800831c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008322:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	461a      	mov	r2, r3
 800832a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800832c:	643b      	str	r3, [r7, #64]	@ 0x40
 800832e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008330:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008332:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008334:	e841 2300 	strex	r3, r2, [r1]
 8008338:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800833a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1e6      	bne.n	800830e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3308      	adds	r3, #8
 8008346:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008348:	6a3b      	ldr	r3, [r7, #32]
 800834a:	e853 3f00 	ldrex	r3, [r3]
 800834e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008356:	f023 0301 	bic.w	r3, r3, #1
 800835a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	3308      	adds	r3, #8
 8008362:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008364:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008366:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008368:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800836a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800836c:	e841 2300 	strex	r3, r2, [r1]
 8008370:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1e3      	bne.n	8008340 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800837c:	2b01      	cmp	r3, #1
 800837e:	d118      	bne.n	80083b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	e853 3f00 	ldrex	r3, [r3]
 800838c:	60bb      	str	r3, [r7, #8]
   return(result);
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	f023 0310 	bic.w	r3, r3, #16
 8008394:	647b      	str	r3, [r7, #68]	@ 0x44
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800839e:	61bb      	str	r3, [r7, #24]
 80083a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a2:	6979      	ldr	r1, [r7, #20]
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	e841 2300 	strex	r3, r2, [r1]
 80083aa:	613b      	str	r3, [r7, #16]
   return(result);
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1e6      	bne.n	8008380 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2220      	movs	r2, #32
 80083b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80083c6:	bf00      	nop
 80083c8:	3754      	adds	r7, #84	@ 0x54
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b085      	sub	sp, #20
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d101      	bne.n	80083e8 <HAL_UARTEx_DisableFifoMode+0x16>
 80083e4:	2302      	movs	r3, #2
 80083e6:	e027      	b.n	8008438 <HAL_UARTEx_DisableFifoMode+0x66>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2224      	movs	r2, #36	@ 0x24
 80083f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f022 0201 	bic.w	r2, r2, #1
 800840e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008416:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2220      	movs	r2, #32
 800842a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008454:	2b01      	cmp	r3, #1
 8008456:	d101      	bne.n	800845c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008458:	2302      	movs	r3, #2
 800845a:	e02d      	b.n	80084b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2224      	movs	r2, #36	@ 0x24
 8008468:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f022 0201 	bic.w	r2, r2, #1
 8008482:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	430a      	orrs	r2, r1
 8008496:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 f84f 	bl	800853c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2220      	movs	r2, #32
 80084aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d101      	bne.n	80084d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80084d4:	2302      	movs	r3, #2
 80084d6:	e02d      	b.n	8008534 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2224      	movs	r2, #36	@ 0x24
 80084e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f022 0201 	bic.w	r2, r2, #1
 80084fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	430a      	orrs	r2, r1
 8008512:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f811 	bl	800853c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2220      	movs	r2, #32
 8008526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008548:	2b00      	cmp	r3, #0
 800854a:	d108      	bne.n	800855e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800855c:	e031      	b.n	80085c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800855e:	2308      	movs	r3, #8
 8008560:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008562:	2308      	movs	r3, #8
 8008564:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	0e5b      	lsrs	r3, r3, #25
 800856e:	b2db      	uxtb	r3, r3
 8008570:	f003 0307 	and.w	r3, r3, #7
 8008574:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	0f5b      	lsrs	r3, r3, #29
 800857e:	b2db      	uxtb	r3, r3
 8008580:	f003 0307 	and.w	r3, r3, #7
 8008584:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008586:	7bbb      	ldrb	r3, [r7, #14]
 8008588:	7b3a      	ldrb	r2, [r7, #12]
 800858a:	4911      	ldr	r1, [pc, #68]	@ (80085d0 <UARTEx_SetNbDataToProcess+0x94>)
 800858c:	5c8a      	ldrb	r2, [r1, r2]
 800858e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008592:	7b3a      	ldrb	r2, [r7, #12]
 8008594:	490f      	ldr	r1, [pc, #60]	@ (80085d4 <UARTEx_SetNbDataToProcess+0x98>)
 8008596:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008598:	fb93 f3f2 	sdiv	r3, r3, r2
 800859c:	b29a      	uxth	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
 80085a6:	7b7a      	ldrb	r2, [r7, #13]
 80085a8:	4909      	ldr	r1, [pc, #36]	@ (80085d0 <UARTEx_SetNbDataToProcess+0x94>)
 80085aa:	5c8a      	ldrb	r2, [r1, r2]
 80085ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80085b0:	7b7a      	ldrb	r2, [r7, #13]
 80085b2:	4908      	ldr	r1, [pc, #32]	@ (80085d4 <UARTEx_SetNbDataToProcess+0x98>)
 80085b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80085c2:	bf00      	nop
 80085c4:	3714      	adds	r7, #20
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	0800b8ec 	.word	0x0800b8ec
 80085d4:	0800b8f4 	.word	0x0800b8f4

080085d8 <__cvt>:
 80085d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085dc:	ec57 6b10 	vmov	r6, r7, d0
 80085e0:	2f00      	cmp	r7, #0
 80085e2:	460c      	mov	r4, r1
 80085e4:	4619      	mov	r1, r3
 80085e6:	463b      	mov	r3, r7
 80085e8:	bfbb      	ittet	lt
 80085ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80085ee:	461f      	movlt	r7, r3
 80085f0:	2300      	movge	r3, #0
 80085f2:	232d      	movlt	r3, #45	@ 0x2d
 80085f4:	700b      	strb	r3, [r1, #0]
 80085f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80085fc:	4691      	mov	r9, r2
 80085fe:	f023 0820 	bic.w	r8, r3, #32
 8008602:	bfbc      	itt	lt
 8008604:	4632      	movlt	r2, r6
 8008606:	4616      	movlt	r6, r2
 8008608:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800860c:	d005      	beq.n	800861a <__cvt+0x42>
 800860e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008612:	d100      	bne.n	8008616 <__cvt+0x3e>
 8008614:	3401      	adds	r4, #1
 8008616:	2102      	movs	r1, #2
 8008618:	e000      	b.n	800861c <__cvt+0x44>
 800861a:	2103      	movs	r1, #3
 800861c:	ab03      	add	r3, sp, #12
 800861e:	9301      	str	r3, [sp, #4]
 8008620:	ab02      	add	r3, sp, #8
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	ec47 6b10 	vmov	d0, r6, r7
 8008628:	4653      	mov	r3, sl
 800862a:	4622      	mov	r2, r4
 800862c:	f000 fe68 	bl	8009300 <_dtoa_r>
 8008630:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008634:	4605      	mov	r5, r0
 8008636:	d119      	bne.n	800866c <__cvt+0x94>
 8008638:	f019 0f01 	tst.w	r9, #1
 800863c:	d00e      	beq.n	800865c <__cvt+0x84>
 800863e:	eb00 0904 	add.w	r9, r0, r4
 8008642:	2200      	movs	r2, #0
 8008644:	2300      	movs	r3, #0
 8008646:	4630      	mov	r0, r6
 8008648:	4639      	mov	r1, r7
 800864a:	f7f8 fa65 	bl	8000b18 <__aeabi_dcmpeq>
 800864e:	b108      	cbz	r0, 8008654 <__cvt+0x7c>
 8008650:	f8cd 900c 	str.w	r9, [sp, #12]
 8008654:	2230      	movs	r2, #48	@ 0x30
 8008656:	9b03      	ldr	r3, [sp, #12]
 8008658:	454b      	cmp	r3, r9
 800865a:	d31e      	bcc.n	800869a <__cvt+0xc2>
 800865c:	9b03      	ldr	r3, [sp, #12]
 800865e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008660:	1b5b      	subs	r3, r3, r5
 8008662:	4628      	mov	r0, r5
 8008664:	6013      	str	r3, [r2, #0]
 8008666:	b004      	add	sp, #16
 8008668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800866c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008670:	eb00 0904 	add.w	r9, r0, r4
 8008674:	d1e5      	bne.n	8008642 <__cvt+0x6a>
 8008676:	7803      	ldrb	r3, [r0, #0]
 8008678:	2b30      	cmp	r3, #48	@ 0x30
 800867a:	d10a      	bne.n	8008692 <__cvt+0xba>
 800867c:	2200      	movs	r2, #0
 800867e:	2300      	movs	r3, #0
 8008680:	4630      	mov	r0, r6
 8008682:	4639      	mov	r1, r7
 8008684:	f7f8 fa48 	bl	8000b18 <__aeabi_dcmpeq>
 8008688:	b918      	cbnz	r0, 8008692 <__cvt+0xba>
 800868a:	f1c4 0401 	rsb	r4, r4, #1
 800868e:	f8ca 4000 	str.w	r4, [sl]
 8008692:	f8da 3000 	ldr.w	r3, [sl]
 8008696:	4499      	add	r9, r3
 8008698:	e7d3      	b.n	8008642 <__cvt+0x6a>
 800869a:	1c59      	adds	r1, r3, #1
 800869c:	9103      	str	r1, [sp, #12]
 800869e:	701a      	strb	r2, [r3, #0]
 80086a0:	e7d9      	b.n	8008656 <__cvt+0x7e>

080086a2 <__exponent>:
 80086a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086a4:	2900      	cmp	r1, #0
 80086a6:	bfba      	itte	lt
 80086a8:	4249      	neglt	r1, r1
 80086aa:	232d      	movlt	r3, #45	@ 0x2d
 80086ac:	232b      	movge	r3, #43	@ 0x2b
 80086ae:	2909      	cmp	r1, #9
 80086b0:	7002      	strb	r2, [r0, #0]
 80086b2:	7043      	strb	r3, [r0, #1]
 80086b4:	dd29      	ble.n	800870a <__exponent+0x68>
 80086b6:	f10d 0307 	add.w	r3, sp, #7
 80086ba:	461d      	mov	r5, r3
 80086bc:	270a      	movs	r7, #10
 80086be:	461a      	mov	r2, r3
 80086c0:	fbb1 f6f7 	udiv	r6, r1, r7
 80086c4:	fb07 1416 	mls	r4, r7, r6, r1
 80086c8:	3430      	adds	r4, #48	@ 0x30
 80086ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 80086ce:	460c      	mov	r4, r1
 80086d0:	2c63      	cmp	r4, #99	@ 0x63
 80086d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80086d6:	4631      	mov	r1, r6
 80086d8:	dcf1      	bgt.n	80086be <__exponent+0x1c>
 80086da:	3130      	adds	r1, #48	@ 0x30
 80086dc:	1e94      	subs	r4, r2, #2
 80086de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80086e2:	1c41      	adds	r1, r0, #1
 80086e4:	4623      	mov	r3, r4
 80086e6:	42ab      	cmp	r3, r5
 80086e8:	d30a      	bcc.n	8008700 <__exponent+0x5e>
 80086ea:	f10d 0309 	add.w	r3, sp, #9
 80086ee:	1a9b      	subs	r3, r3, r2
 80086f0:	42ac      	cmp	r4, r5
 80086f2:	bf88      	it	hi
 80086f4:	2300      	movhi	r3, #0
 80086f6:	3302      	adds	r3, #2
 80086f8:	4403      	add	r3, r0
 80086fa:	1a18      	subs	r0, r3, r0
 80086fc:	b003      	add	sp, #12
 80086fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008700:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008704:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008708:	e7ed      	b.n	80086e6 <__exponent+0x44>
 800870a:	2330      	movs	r3, #48	@ 0x30
 800870c:	3130      	adds	r1, #48	@ 0x30
 800870e:	7083      	strb	r3, [r0, #2]
 8008710:	70c1      	strb	r1, [r0, #3]
 8008712:	1d03      	adds	r3, r0, #4
 8008714:	e7f1      	b.n	80086fa <__exponent+0x58>
	...

08008718 <_printf_float>:
 8008718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871c:	b08d      	sub	sp, #52	@ 0x34
 800871e:	460c      	mov	r4, r1
 8008720:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008724:	4616      	mov	r6, r2
 8008726:	461f      	mov	r7, r3
 8008728:	4605      	mov	r5, r0
 800872a:	f000 fcdb 	bl	80090e4 <_localeconv_r>
 800872e:	6803      	ldr	r3, [r0, #0]
 8008730:	9304      	str	r3, [sp, #16]
 8008732:	4618      	mov	r0, r3
 8008734:	f7f7 fdc4 	bl	80002c0 <strlen>
 8008738:	2300      	movs	r3, #0
 800873a:	930a      	str	r3, [sp, #40]	@ 0x28
 800873c:	f8d8 3000 	ldr.w	r3, [r8]
 8008740:	9005      	str	r0, [sp, #20]
 8008742:	3307      	adds	r3, #7
 8008744:	f023 0307 	bic.w	r3, r3, #7
 8008748:	f103 0208 	add.w	r2, r3, #8
 800874c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008750:	f8d4 b000 	ldr.w	fp, [r4]
 8008754:	f8c8 2000 	str.w	r2, [r8]
 8008758:	e9d3 8900 	ldrd	r8, r9, [r3]
 800875c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008760:	9307      	str	r3, [sp, #28]
 8008762:	f8cd 8018 	str.w	r8, [sp, #24]
 8008766:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800876a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800876e:	4b9c      	ldr	r3, [pc, #624]	@ (80089e0 <_printf_float+0x2c8>)
 8008770:	f04f 32ff 	mov.w	r2, #4294967295
 8008774:	f7f8 fa02 	bl	8000b7c <__aeabi_dcmpun>
 8008778:	bb70      	cbnz	r0, 80087d8 <_printf_float+0xc0>
 800877a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800877e:	4b98      	ldr	r3, [pc, #608]	@ (80089e0 <_printf_float+0x2c8>)
 8008780:	f04f 32ff 	mov.w	r2, #4294967295
 8008784:	f7f8 f9dc 	bl	8000b40 <__aeabi_dcmple>
 8008788:	bb30      	cbnz	r0, 80087d8 <_printf_float+0xc0>
 800878a:	2200      	movs	r2, #0
 800878c:	2300      	movs	r3, #0
 800878e:	4640      	mov	r0, r8
 8008790:	4649      	mov	r1, r9
 8008792:	f7f8 f9cb 	bl	8000b2c <__aeabi_dcmplt>
 8008796:	b110      	cbz	r0, 800879e <_printf_float+0x86>
 8008798:	232d      	movs	r3, #45	@ 0x2d
 800879a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800879e:	4a91      	ldr	r2, [pc, #580]	@ (80089e4 <_printf_float+0x2cc>)
 80087a0:	4b91      	ldr	r3, [pc, #580]	@ (80089e8 <_printf_float+0x2d0>)
 80087a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80087a6:	bf94      	ite	ls
 80087a8:	4690      	movls	r8, r2
 80087aa:	4698      	movhi	r8, r3
 80087ac:	2303      	movs	r3, #3
 80087ae:	6123      	str	r3, [r4, #16]
 80087b0:	f02b 0304 	bic.w	r3, fp, #4
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	f04f 0900 	mov.w	r9, #0
 80087ba:	9700      	str	r7, [sp, #0]
 80087bc:	4633      	mov	r3, r6
 80087be:	aa0b      	add	r2, sp, #44	@ 0x2c
 80087c0:	4621      	mov	r1, r4
 80087c2:	4628      	mov	r0, r5
 80087c4:	f000 f9d2 	bl	8008b6c <_printf_common>
 80087c8:	3001      	adds	r0, #1
 80087ca:	f040 808d 	bne.w	80088e8 <_printf_float+0x1d0>
 80087ce:	f04f 30ff 	mov.w	r0, #4294967295
 80087d2:	b00d      	add	sp, #52	@ 0x34
 80087d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d8:	4642      	mov	r2, r8
 80087da:	464b      	mov	r3, r9
 80087dc:	4640      	mov	r0, r8
 80087de:	4649      	mov	r1, r9
 80087e0:	f7f8 f9cc 	bl	8000b7c <__aeabi_dcmpun>
 80087e4:	b140      	cbz	r0, 80087f8 <_printf_float+0xe0>
 80087e6:	464b      	mov	r3, r9
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	bfbc      	itt	lt
 80087ec:	232d      	movlt	r3, #45	@ 0x2d
 80087ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80087f2:	4a7e      	ldr	r2, [pc, #504]	@ (80089ec <_printf_float+0x2d4>)
 80087f4:	4b7e      	ldr	r3, [pc, #504]	@ (80089f0 <_printf_float+0x2d8>)
 80087f6:	e7d4      	b.n	80087a2 <_printf_float+0x8a>
 80087f8:	6863      	ldr	r3, [r4, #4]
 80087fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80087fe:	9206      	str	r2, [sp, #24]
 8008800:	1c5a      	adds	r2, r3, #1
 8008802:	d13b      	bne.n	800887c <_printf_float+0x164>
 8008804:	2306      	movs	r3, #6
 8008806:	6063      	str	r3, [r4, #4]
 8008808:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800880c:	2300      	movs	r3, #0
 800880e:	6022      	str	r2, [r4, #0]
 8008810:	9303      	str	r3, [sp, #12]
 8008812:	ab0a      	add	r3, sp, #40	@ 0x28
 8008814:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008818:	ab09      	add	r3, sp, #36	@ 0x24
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	6861      	ldr	r1, [r4, #4]
 800881e:	ec49 8b10 	vmov	d0, r8, r9
 8008822:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008826:	4628      	mov	r0, r5
 8008828:	f7ff fed6 	bl	80085d8 <__cvt>
 800882c:	9b06      	ldr	r3, [sp, #24]
 800882e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008830:	2b47      	cmp	r3, #71	@ 0x47
 8008832:	4680      	mov	r8, r0
 8008834:	d129      	bne.n	800888a <_printf_float+0x172>
 8008836:	1cc8      	adds	r0, r1, #3
 8008838:	db02      	blt.n	8008840 <_printf_float+0x128>
 800883a:	6863      	ldr	r3, [r4, #4]
 800883c:	4299      	cmp	r1, r3
 800883e:	dd41      	ble.n	80088c4 <_printf_float+0x1ac>
 8008840:	f1aa 0a02 	sub.w	sl, sl, #2
 8008844:	fa5f fa8a 	uxtb.w	sl, sl
 8008848:	3901      	subs	r1, #1
 800884a:	4652      	mov	r2, sl
 800884c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008850:	9109      	str	r1, [sp, #36]	@ 0x24
 8008852:	f7ff ff26 	bl	80086a2 <__exponent>
 8008856:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008858:	1813      	adds	r3, r2, r0
 800885a:	2a01      	cmp	r2, #1
 800885c:	4681      	mov	r9, r0
 800885e:	6123      	str	r3, [r4, #16]
 8008860:	dc02      	bgt.n	8008868 <_printf_float+0x150>
 8008862:	6822      	ldr	r2, [r4, #0]
 8008864:	07d2      	lsls	r2, r2, #31
 8008866:	d501      	bpl.n	800886c <_printf_float+0x154>
 8008868:	3301      	adds	r3, #1
 800886a:	6123      	str	r3, [r4, #16]
 800886c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008870:	2b00      	cmp	r3, #0
 8008872:	d0a2      	beq.n	80087ba <_printf_float+0xa2>
 8008874:	232d      	movs	r3, #45	@ 0x2d
 8008876:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800887a:	e79e      	b.n	80087ba <_printf_float+0xa2>
 800887c:	9a06      	ldr	r2, [sp, #24]
 800887e:	2a47      	cmp	r2, #71	@ 0x47
 8008880:	d1c2      	bne.n	8008808 <_printf_float+0xf0>
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1c0      	bne.n	8008808 <_printf_float+0xf0>
 8008886:	2301      	movs	r3, #1
 8008888:	e7bd      	b.n	8008806 <_printf_float+0xee>
 800888a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800888e:	d9db      	bls.n	8008848 <_printf_float+0x130>
 8008890:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008894:	d118      	bne.n	80088c8 <_printf_float+0x1b0>
 8008896:	2900      	cmp	r1, #0
 8008898:	6863      	ldr	r3, [r4, #4]
 800889a:	dd0b      	ble.n	80088b4 <_printf_float+0x19c>
 800889c:	6121      	str	r1, [r4, #16]
 800889e:	b913      	cbnz	r3, 80088a6 <_printf_float+0x18e>
 80088a0:	6822      	ldr	r2, [r4, #0]
 80088a2:	07d0      	lsls	r0, r2, #31
 80088a4:	d502      	bpl.n	80088ac <_printf_float+0x194>
 80088a6:	3301      	adds	r3, #1
 80088a8:	440b      	add	r3, r1
 80088aa:	6123      	str	r3, [r4, #16]
 80088ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 80088ae:	f04f 0900 	mov.w	r9, #0
 80088b2:	e7db      	b.n	800886c <_printf_float+0x154>
 80088b4:	b913      	cbnz	r3, 80088bc <_printf_float+0x1a4>
 80088b6:	6822      	ldr	r2, [r4, #0]
 80088b8:	07d2      	lsls	r2, r2, #31
 80088ba:	d501      	bpl.n	80088c0 <_printf_float+0x1a8>
 80088bc:	3302      	adds	r3, #2
 80088be:	e7f4      	b.n	80088aa <_printf_float+0x192>
 80088c0:	2301      	movs	r3, #1
 80088c2:	e7f2      	b.n	80088aa <_printf_float+0x192>
 80088c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80088c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088ca:	4299      	cmp	r1, r3
 80088cc:	db05      	blt.n	80088da <_printf_float+0x1c2>
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	6121      	str	r1, [r4, #16]
 80088d2:	07d8      	lsls	r0, r3, #31
 80088d4:	d5ea      	bpl.n	80088ac <_printf_float+0x194>
 80088d6:	1c4b      	adds	r3, r1, #1
 80088d8:	e7e7      	b.n	80088aa <_printf_float+0x192>
 80088da:	2900      	cmp	r1, #0
 80088dc:	bfd4      	ite	le
 80088de:	f1c1 0202 	rsble	r2, r1, #2
 80088e2:	2201      	movgt	r2, #1
 80088e4:	4413      	add	r3, r2
 80088e6:	e7e0      	b.n	80088aa <_printf_float+0x192>
 80088e8:	6823      	ldr	r3, [r4, #0]
 80088ea:	055a      	lsls	r2, r3, #21
 80088ec:	d407      	bmi.n	80088fe <_printf_float+0x1e6>
 80088ee:	6923      	ldr	r3, [r4, #16]
 80088f0:	4642      	mov	r2, r8
 80088f2:	4631      	mov	r1, r6
 80088f4:	4628      	mov	r0, r5
 80088f6:	47b8      	blx	r7
 80088f8:	3001      	adds	r0, #1
 80088fa:	d12b      	bne.n	8008954 <_printf_float+0x23c>
 80088fc:	e767      	b.n	80087ce <_printf_float+0xb6>
 80088fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008902:	f240 80dd 	bls.w	8008ac0 <_printf_float+0x3a8>
 8008906:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800890a:	2200      	movs	r2, #0
 800890c:	2300      	movs	r3, #0
 800890e:	f7f8 f903 	bl	8000b18 <__aeabi_dcmpeq>
 8008912:	2800      	cmp	r0, #0
 8008914:	d033      	beq.n	800897e <_printf_float+0x266>
 8008916:	4a37      	ldr	r2, [pc, #220]	@ (80089f4 <_printf_float+0x2dc>)
 8008918:	2301      	movs	r3, #1
 800891a:	4631      	mov	r1, r6
 800891c:	4628      	mov	r0, r5
 800891e:	47b8      	blx	r7
 8008920:	3001      	adds	r0, #1
 8008922:	f43f af54 	beq.w	80087ce <_printf_float+0xb6>
 8008926:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800892a:	4543      	cmp	r3, r8
 800892c:	db02      	blt.n	8008934 <_printf_float+0x21c>
 800892e:	6823      	ldr	r3, [r4, #0]
 8008930:	07d8      	lsls	r0, r3, #31
 8008932:	d50f      	bpl.n	8008954 <_printf_float+0x23c>
 8008934:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008938:	4631      	mov	r1, r6
 800893a:	4628      	mov	r0, r5
 800893c:	47b8      	blx	r7
 800893e:	3001      	adds	r0, #1
 8008940:	f43f af45 	beq.w	80087ce <_printf_float+0xb6>
 8008944:	f04f 0900 	mov.w	r9, #0
 8008948:	f108 38ff 	add.w	r8, r8, #4294967295
 800894c:	f104 0a1a 	add.w	sl, r4, #26
 8008950:	45c8      	cmp	r8, r9
 8008952:	dc09      	bgt.n	8008968 <_printf_float+0x250>
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	079b      	lsls	r3, r3, #30
 8008958:	f100 8103 	bmi.w	8008b62 <_printf_float+0x44a>
 800895c:	68e0      	ldr	r0, [r4, #12]
 800895e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008960:	4298      	cmp	r0, r3
 8008962:	bfb8      	it	lt
 8008964:	4618      	movlt	r0, r3
 8008966:	e734      	b.n	80087d2 <_printf_float+0xba>
 8008968:	2301      	movs	r3, #1
 800896a:	4652      	mov	r2, sl
 800896c:	4631      	mov	r1, r6
 800896e:	4628      	mov	r0, r5
 8008970:	47b8      	blx	r7
 8008972:	3001      	adds	r0, #1
 8008974:	f43f af2b 	beq.w	80087ce <_printf_float+0xb6>
 8008978:	f109 0901 	add.w	r9, r9, #1
 800897c:	e7e8      	b.n	8008950 <_printf_float+0x238>
 800897e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008980:	2b00      	cmp	r3, #0
 8008982:	dc39      	bgt.n	80089f8 <_printf_float+0x2e0>
 8008984:	4a1b      	ldr	r2, [pc, #108]	@ (80089f4 <_printf_float+0x2dc>)
 8008986:	2301      	movs	r3, #1
 8008988:	4631      	mov	r1, r6
 800898a:	4628      	mov	r0, r5
 800898c:	47b8      	blx	r7
 800898e:	3001      	adds	r0, #1
 8008990:	f43f af1d 	beq.w	80087ce <_printf_float+0xb6>
 8008994:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008998:	ea59 0303 	orrs.w	r3, r9, r3
 800899c:	d102      	bne.n	80089a4 <_printf_float+0x28c>
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	07d9      	lsls	r1, r3, #31
 80089a2:	d5d7      	bpl.n	8008954 <_printf_float+0x23c>
 80089a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089a8:	4631      	mov	r1, r6
 80089aa:	4628      	mov	r0, r5
 80089ac:	47b8      	blx	r7
 80089ae:	3001      	adds	r0, #1
 80089b0:	f43f af0d 	beq.w	80087ce <_printf_float+0xb6>
 80089b4:	f04f 0a00 	mov.w	sl, #0
 80089b8:	f104 0b1a 	add.w	fp, r4, #26
 80089bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089be:	425b      	negs	r3, r3
 80089c0:	4553      	cmp	r3, sl
 80089c2:	dc01      	bgt.n	80089c8 <_printf_float+0x2b0>
 80089c4:	464b      	mov	r3, r9
 80089c6:	e793      	b.n	80088f0 <_printf_float+0x1d8>
 80089c8:	2301      	movs	r3, #1
 80089ca:	465a      	mov	r2, fp
 80089cc:	4631      	mov	r1, r6
 80089ce:	4628      	mov	r0, r5
 80089d0:	47b8      	blx	r7
 80089d2:	3001      	adds	r0, #1
 80089d4:	f43f aefb 	beq.w	80087ce <_printf_float+0xb6>
 80089d8:	f10a 0a01 	add.w	sl, sl, #1
 80089dc:	e7ee      	b.n	80089bc <_printf_float+0x2a4>
 80089de:	bf00      	nop
 80089e0:	7fefffff 	.word	0x7fefffff
 80089e4:	0800b8fc 	.word	0x0800b8fc
 80089e8:	0800b900 	.word	0x0800b900
 80089ec:	0800b904 	.word	0x0800b904
 80089f0:	0800b908 	.word	0x0800b908
 80089f4:	0800b90c 	.word	0x0800b90c
 80089f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80089fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80089fe:	4553      	cmp	r3, sl
 8008a00:	bfa8      	it	ge
 8008a02:	4653      	movge	r3, sl
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	4699      	mov	r9, r3
 8008a08:	dc36      	bgt.n	8008a78 <_printf_float+0x360>
 8008a0a:	f04f 0b00 	mov.w	fp, #0
 8008a0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a12:	f104 021a 	add.w	r2, r4, #26
 8008a16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008a18:	9306      	str	r3, [sp, #24]
 8008a1a:	eba3 0309 	sub.w	r3, r3, r9
 8008a1e:	455b      	cmp	r3, fp
 8008a20:	dc31      	bgt.n	8008a86 <_printf_float+0x36e>
 8008a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a24:	459a      	cmp	sl, r3
 8008a26:	dc3a      	bgt.n	8008a9e <_printf_float+0x386>
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	07da      	lsls	r2, r3, #31
 8008a2c:	d437      	bmi.n	8008a9e <_printf_float+0x386>
 8008a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a30:	ebaa 0903 	sub.w	r9, sl, r3
 8008a34:	9b06      	ldr	r3, [sp, #24]
 8008a36:	ebaa 0303 	sub.w	r3, sl, r3
 8008a3a:	4599      	cmp	r9, r3
 8008a3c:	bfa8      	it	ge
 8008a3e:	4699      	movge	r9, r3
 8008a40:	f1b9 0f00 	cmp.w	r9, #0
 8008a44:	dc33      	bgt.n	8008aae <_printf_float+0x396>
 8008a46:	f04f 0800 	mov.w	r8, #0
 8008a4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a4e:	f104 0b1a 	add.w	fp, r4, #26
 8008a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a54:	ebaa 0303 	sub.w	r3, sl, r3
 8008a58:	eba3 0309 	sub.w	r3, r3, r9
 8008a5c:	4543      	cmp	r3, r8
 8008a5e:	f77f af79 	ble.w	8008954 <_printf_float+0x23c>
 8008a62:	2301      	movs	r3, #1
 8008a64:	465a      	mov	r2, fp
 8008a66:	4631      	mov	r1, r6
 8008a68:	4628      	mov	r0, r5
 8008a6a:	47b8      	blx	r7
 8008a6c:	3001      	adds	r0, #1
 8008a6e:	f43f aeae 	beq.w	80087ce <_printf_float+0xb6>
 8008a72:	f108 0801 	add.w	r8, r8, #1
 8008a76:	e7ec      	b.n	8008a52 <_printf_float+0x33a>
 8008a78:	4642      	mov	r2, r8
 8008a7a:	4631      	mov	r1, r6
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	47b8      	blx	r7
 8008a80:	3001      	adds	r0, #1
 8008a82:	d1c2      	bne.n	8008a0a <_printf_float+0x2f2>
 8008a84:	e6a3      	b.n	80087ce <_printf_float+0xb6>
 8008a86:	2301      	movs	r3, #1
 8008a88:	4631      	mov	r1, r6
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	9206      	str	r2, [sp, #24]
 8008a8e:	47b8      	blx	r7
 8008a90:	3001      	adds	r0, #1
 8008a92:	f43f ae9c 	beq.w	80087ce <_printf_float+0xb6>
 8008a96:	9a06      	ldr	r2, [sp, #24]
 8008a98:	f10b 0b01 	add.w	fp, fp, #1
 8008a9c:	e7bb      	b.n	8008a16 <_printf_float+0x2fe>
 8008a9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008aa2:	4631      	mov	r1, r6
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	47b8      	blx	r7
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	d1c0      	bne.n	8008a2e <_printf_float+0x316>
 8008aac:	e68f      	b.n	80087ce <_printf_float+0xb6>
 8008aae:	9a06      	ldr	r2, [sp, #24]
 8008ab0:	464b      	mov	r3, r9
 8008ab2:	4442      	add	r2, r8
 8008ab4:	4631      	mov	r1, r6
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	47b8      	blx	r7
 8008aba:	3001      	adds	r0, #1
 8008abc:	d1c3      	bne.n	8008a46 <_printf_float+0x32e>
 8008abe:	e686      	b.n	80087ce <_printf_float+0xb6>
 8008ac0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008ac4:	f1ba 0f01 	cmp.w	sl, #1
 8008ac8:	dc01      	bgt.n	8008ace <_printf_float+0x3b6>
 8008aca:	07db      	lsls	r3, r3, #31
 8008acc:	d536      	bpl.n	8008b3c <_printf_float+0x424>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	4642      	mov	r2, r8
 8008ad2:	4631      	mov	r1, r6
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	47b8      	blx	r7
 8008ad8:	3001      	adds	r0, #1
 8008ada:	f43f ae78 	beq.w	80087ce <_printf_float+0xb6>
 8008ade:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	47b8      	blx	r7
 8008ae8:	3001      	adds	r0, #1
 8008aea:	f43f ae70 	beq.w	80087ce <_printf_float+0xb6>
 8008aee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008af2:	2200      	movs	r2, #0
 8008af4:	2300      	movs	r3, #0
 8008af6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008afa:	f7f8 f80d 	bl	8000b18 <__aeabi_dcmpeq>
 8008afe:	b9c0      	cbnz	r0, 8008b32 <_printf_float+0x41a>
 8008b00:	4653      	mov	r3, sl
 8008b02:	f108 0201 	add.w	r2, r8, #1
 8008b06:	4631      	mov	r1, r6
 8008b08:	4628      	mov	r0, r5
 8008b0a:	47b8      	blx	r7
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	d10c      	bne.n	8008b2a <_printf_float+0x412>
 8008b10:	e65d      	b.n	80087ce <_printf_float+0xb6>
 8008b12:	2301      	movs	r3, #1
 8008b14:	465a      	mov	r2, fp
 8008b16:	4631      	mov	r1, r6
 8008b18:	4628      	mov	r0, r5
 8008b1a:	47b8      	blx	r7
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	f43f ae56 	beq.w	80087ce <_printf_float+0xb6>
 8008b22:	f108 0801 	add.w	r8, r8, #1
 8008b26:	45d0      	cmp	r8, sl
 8008b28:	dbf3      	blt.n	8008b12 <_printf_float+0x3fa>
 8008b2a:	464b      	mov	r3, r9
 8008b2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008b30:	e6df      	b.n	80088f2 <_printf_float+0x1da>
 8008b32:	f04f 0800 	mov.w	r8, #0
 8008b36:	f104 0b1a 	add.w	fp, r4, #26
 8008b3a:	e7f4      	b.n	8008b26 <_printf_float+0x40e>
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	4642      	mov	r2, r8
 8008b40:	e7e1      	b.n	8008b06 <_printf_float+0x3ee>
 8008b42:	2301      	movs	r3, #1
 8008b44:	464a      	mov	r2, r9
 8008b46:	4631      	mov	r1, r6
 8008b48:	4628      	mov	r0, r5
 8008b4a:	47b8      	blx	r7
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	f43f ae3e 	beq.w	80087ce <_printf_float+0xb6>
 8008b52:	f108 0801 	add.w	r8, r8, #1
 8008b56:	68e3      	ldr	r3, [r4, #12]
 8008b58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b5a:	1a5b      	subs	r3, r3, r1
 8008b5c:	4543      	cmp	r3, r8
 8008b5e:	dcf0      	bgt.n	8008b42 <_printf_float+0x42a>
 8008b60:	e6fc      	b.n	800895c <_printf_float+0x244>
 8008b62:	f04f 0800 	mov.w	r8, #0
 8008b66:	f104 0919 	add.w	r9, r4, #25
 8008b6a:	e7f4      	b.n	8008b56 <_printf_float+0x43e>

08008b6c <_printf_common>:
 8008b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b70:	4616      	mov	r6, r2
 8008b72:	4698      	mov	r8, r3
 8008b74:	688a      	ldr	r2, [r1, #8]
 8008b76:	690b      	ldr	r3, [r1, #16]
 8008b78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	bfb8      	it	lt
 8008b80:	4613      	movlt	r3, r2
 8008b82:	6033      	str	r3, [r6, #0]
 8008b84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b88:	4607      	mov	r7, r0
 8008b8a:	460c      	mov	r4, r1
 8008b8c:	b10a      	cbz	r2, 8008b92 <_printf_common+0x26>
 8008b8e:	3301      	adds	r3, #1
 8008b90:	6033      	str	r3, [r6, #0]
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	0699      	lsls	r1, r3, #26
 8008b96:	bf42      	ittt	mi
 8008b98:	6833      	ldrmi	r3, [r6, #0]
 8008b9a:	3302      	addmi	r3, #2
 8008b9c:	6033      	strmi	r3, [r6, #0]
 8008b9e:	6825      	ldr	r5, [r4, #0]
 8008ba0:	f015 0506 	ands.w	r5, r5, #6
 8008ba4:	d106      	bne.n	8008bb4 <_printf_common+0x48>
 8008ba6:	f104 0a19 	add.w	sl, r4, #25
 8008baa:	68e3      	ldr	r3, [r4, #12]
 8008bac:	6832      	ldr	r2, [r6, #0]
 8008bae:	1a9b      	subs	r3, r3, r2
 8008bb0:	42ab      	cmp	r3, r5
 8008bb2:	dc26      	bgt.n	8008c02 <_printf_common+0x96>
 8008bb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008bb8:	6822      	ldr	r2, [r4, #0]
 8008bba:	3b00      	subs	r3, #0
 8008bbc:	bf18      	it	ne
 8008bbe:	2301      	movne	r3, #1
 8008bc0:	0692      	lsls	r2, r2, #26
 8008bc2:	d42b      	bmi.n	8008c1c <_printf_common+0xb0>
 8008bc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008bc8:	4641      	mov	r1, r8
 8008bca:	4638      	mov	r0, r7
 8008bcc:	47c8      	blx	r9
 8008bce:	3001      	adds	r0, #1
 8008bd0:	d01e      	beq.n	8008c10 <_printf_common+0xa4>
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	6922      	ldr	r2, [r4, #16]
 8008bd6:	f003 0306 	and.w	r3, r3, #6
 8008bda:	2b04      	cmp	r3, #4
 8008bdc:	bf02      	ittt	eq
 8008bde:	68e5      	ldreq	r5, [r4, #12]
 8008be0:	6833      	ldreq	r3, [r6, #0]
 8008be2:	1aed      	subeq	r5, r5, r3
 8008be4:	68a3      	ldr	r3, [r4, #8]
 8008be6:	bf0c      	ite	eq
 8008be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bec:	2500      	movne	r5, #0
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	bfc4      	itt	gt
 8008bf2:	1a9b      	subgt	r3, r3, r2
 8008bf4:	18ed      	addgt	r5, r5, r3
 8008bf6:	2600      	movs	r6, #0
 8008bf8:	341a      	adds	r4, #26
 8008bfa:	42b5      	cmp	r5, r6
 8008bfc:	d11a      	bne.n	8008c34 <_printf_common+0xc8>
 8008bfe:	2000      	movs	r0, #0
 8008c00:	e008      	b.n	8008c14 <_printf_common+0xa8>
 8008c02:	2301      	movs	r3, #1
 8008c04:	4652      	mov	r2, sl
 8008c06:	4641      	mov	r1, r8
 8008c08:	4638      	mov	r0, r7
 8008c0a:	47c8      	blx	r9
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	d103      	bne.n	8008c18 <_printf_common+0xac>
 8008c10:	f04f 30ff 	mov.w	r0, #4294967295
 8008c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c18:	3501      	adds	r5, #1
 8008c1a:	e7c6      	b.n	8008baa <_printf_common+0x3e>
 8008c1c:	18e1      	adds	r1, r4, r3
 8008c1e:	1c5a      	adds	r2, r3, #1
 8008c20:	2030      	movs	r0, #48	@ 0x30
 8008c22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c26:	4422      	add	r2, r4
 8008c28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c30:	3302      	adds	r3, #2
 8008c32:	e7c7      	b.n	8008bc4 <_printf_common+0x58>
 8008c34:	2301      	movs	r3, #1
 8008c36:	4622      	mov	r2, r4
 8008c38:	4641      	mov	r1, r8
 8008c3a:	4638      	mov	r0, r7
 8008c3c:	47c8      	blx	r9
 8008c3e:	3001      	adds	r0, #1
 8008c40:	d0e6      	beq.n	8008c10 <_printf_common+0xa4>
 8008c42:	3601      	adds	r6, #1
 8008c44:	e7d9      	b.n	8008bfa <_printf_common+0x8e>
	...

08008c48 <_printf_i>:
 8008c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c4c:	7e0f      	ldrb	r7, [r1, #24]
 8008c4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c50:	2f78      	cmp	r7, #120	@ 0x78
 8008c52:	4691      	mov	r9, r2
 8008c54:	4680      	mov	r8, r0
 8008c56:	460c      	mov	r4, r1
 8008c58:	469a      	mov	sl, r3
 8008c5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c5e:	d807      	bhi.n	8008c70 <_printf_i+0x28>
 8008c60:	2f62      	cmp	r7, #98	@ 0x62
 8008c62:	d80a      	bhi.n	8008c7a <_printf_i+0x32>
 8008c64:	2f00      	cmp	r7, #0
 8008c66:	f000 80d2 	beq.w	8008e0e <_printf_i+0x1c6>
 8008c6a:	2f58      	cmp	r7, #88	@ 0x58
 8008c6c:	f000 80b9 	beq.w	8008de2 <_printf_i+0x19a>
 8008c70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c78:	e03a      	b.n	8008cf0 <_printf_i+0xa8>
 8008c7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c7e:	2b15      	cmp	r3, #21
 8008c80:	d8f6      	bhi.n	8008c70 <_printf_i+0x28>
 8008c82:	a101      	add	r1, pc, #4	@ (adr r1, 8008c88 <_printf_i+0x40>)
 8008c84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c88:	08008ce1 	.word	0x08008ce1
 8008c8c:	08008cf5 	.word	0x08008cf5
 8008c90:	08008c71 	.word	0x08008c71
 8008c94:	08008c71 	.word	0x08008c71
 8008c98:	08008c71 	.word	0x08008c71
 8008c9c:	08008c71 	.word	0x08008c71
 8008ca0:	08008cf5 	.word	0x08008cf5
 8008ca4:	08008c71 	.word	0x08008c71
 8008ca8:	08008c71 	.word	0x08008c71
 8008cac:	08008c71 	.word	0x08008c71
 8008cb0:	08008c71 	.word	0x08008c71
 8008cb4:	08008df5 	.word	0x08008df5
 8008cb8:	08008d1f 	.word	0x08008d1f
 8008cbc:	08008daf 	.word	0x08008daf
 8008cc0:	08008c71 	.word	0x08008c71
 8008cc4:	08008c71 	.word	0x08008c71
 8008cc8:	08008e17 	.word	0x08008e17
 8008ccc:	08008c71 	.word	0x08008c71
 8008cd0:	08008d1f 	.word	0x08008d1f
 8008cd4:	08008c71 	.word	0x08008c71
 8008cd8:	08008c71 	.word	0x08008c71
 8008cdc:	08008db7 	.word	0x08008db7
 8008ce0:	6833      	ldr	r3, [r6, #0]
 8008ce2:	1d1a      	adds	r2, r3, #4
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	6032      	str	r2, [r6, #0]
 8008ce8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e09d      	b.n	8008e30 <_printf_i+0x1e8>
 8008cf4:	6833      	ldr	r3, [r6, #0]
 8008cf6:	6820      	ldr	r0, [r4, #0]
 8008cf8:	1d19      	adds	r1, r3, #4
 8008cfa:	6031      	str	r1, [r6, #0]
 8008cfc:	0606      	lsls	r6, r0, #24
 8008cfe:	d501      	bpl.n	8008d04 <_printf_i+0xbc>
 8008d00:	681d      	ldr	r5, [r3, #0]
 8008d02:	e003      	b.n	8008d0c <_printf_i+0xc4>
 8008d04:	0645      	lsls	r5, r0, #25
 8008d06:	d5fb      	bpl.n	8008d00 <_printf_i+0xb8>
 8008d08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d0c:	2d00      	cmp	r5, #0
 8008d0e:	da03      	bge.n	8008d18 <_printf_i+0xd0>
 8008d10:	232d      	movs	r3, #45	@ 0x2d
 8008d12:	426d      	negs	r5, r5
 8008d14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d18:	4859      	ldr	r0, [pc, #356]	@ (8008e80 <_printf_i+0x238>)
 8008d1a:	230a      	movs	r3, #10
 8008d1c:	e011      	b.n	8008d42 <_printf_i+0xfa>
 8008d1e:	6821      	ldr	r1, [r4, #0]
 8008d20:	6833      	ldr	r3, [r6, #0]
 8008d22:	0608      	lsls	r0, r1, #24
 8008d24:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d28:	d402      	bmi.n	8008d30 <_printf_i+0xe8>
 8008d2a:	0649      	lsls	r1, r1, #25
 8008d2c:	bf48      	it	mi
 8008d2e:	b2ad      	uxthmi	r5, r5
 8008d30:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d32:	4853      	ldr	r0, [pc, #332]	@ (8008e80 <_printf_i+0x238>)
 8008d34:	6033      	str	r3, [r6, #0]
 8008d36:	bf14      	ite	ne
 8008d38:	230a      	movne	r3, #10
 8008d3a:	2308      	moveq	r3, #8
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d42:	6866      	ldr	r6, [r4, #4]
 8008d44:	60a6      	str	r6, [r4, #8]
 8008d46:	2e00      	cmp	r6, #0
 8008d48:	bfa2      	ittt	ge
 8008d4a:	6821      	ldrge	r1, [r4, #0]
 8008d4c:	f021 0104 	bicge.w	r1, r1, #4
 8008d50:	6021      	strge	r1, [r4, #0]
 8008d52:	b90d      	cbnz	r5, 8008d58 <_printf_i+0x110>
 8008d54:	2e00      	cmp	r6, #0
 8008d56:	d04b      	beq.n	8008df0 <_printf_i+0x1a8>
 8008d58:	4616      	mov	r6, r2
 8008d5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d5e:	fb03 5711 	mls	r7, r3, r1, r5
 8008d62:	5dc7      	ldrb	r7, [r0, r7]
 8008d64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d68:	462f      	mov	r7, r5
 8008d6a:	42bb      	cmp	r3, r7
 8008d6c:	460d      	mov	r5, r1
 8008d6e:	d9f4      	bls.n	8008d5a <_printf_i+0x112>
 8008d70:	2b08      	cmp	r3, #8
 8008d72:	d10b      	bne.n	8008d8c <_printf_i+0x144>
 8008d74:	6823      	ldr	r3, [r4, #0]
 8008d76:	07df      	lsls	r7, r3, #31
 8008d78:	d508      	bpl.n	8008d8c <_printf_i+0x144>
 8008d7a:	6923      	ldr	r3, [r4, #16]
 8008d7c:	6861      	ldr	r1, [r4, #4]
 8008d7e:	4299      	cmp	r1, r3
 8008d80:	bfde      	ittt	le
 8008d82:	2330      	movle	r3, #48	@ 0x30
 8008d84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d8c:	1b92      	subs	r2, r2, r6
 8008d8e:	6122      	str	r2, [r4, #16]
 8008d90:	f8cd a000 	str.w	sl, [sp]
 8008d94:	464b      	mov	r3, r9
 8008d96:	aa03      	add	r2, sp, #12
 8008d98:	4621      	mov	r1, r4
 8008d9a:	4640      	mov	r0, r8
 8008d9c:	f7ff fee6 	bl	8008b6c <_printf_common>
 8008da0:	3001      	adds	r0, #1
 8008da2:	d14a      	bne.n	8008e3a <_printf_i+0x1f2>
 8008da4:	f04f 30ff 	mov.w	r0, #4294967295
 8008da8:	b004      	add	sp, #16
 8008daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	f043 0320 	orr.w	r3, r3, #32
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	4833      	ldr	r0, [pc, #204]	@ (8008e84 <_printf_i+0x23c>)
 8008db8:	2778      	movs	r7, #120	@ 0x78
 8008dba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	6831      	ldr	r1, [r6, #0]
 8008dc2:	061f      	lsls	r7, r3, #24
 8008dc4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008dc8:	d402      	bmi.n	8008dd0 <_printf_i+0x188>
 8008dca:	065f      	lsls	r7, r3, #25
 8008dcc:	bf48      	it	mi
 8008dce:	b2ad      	uxthmi	r5, r5
 8008dd0:	6031      	str	r1, [r6, #0]
 8008dd2:	07d9      	lsls	r1, r3, #31
 8008dd4:	bf44      	itt	mi
 8008dd6:	f043 0320 	orrmi.w	r3, r3, #32
 8008dda:	6023      	strmi	r3, [r4, #0]
 8008ddc:	b11d      	cbz	r5, 8008de6 <_printf_i+0x19e>
 8008dde:	2310      	movs	r3, #16
 8008de0:	e7ac      	b.n	8008d3c <_printf_i+0xf4>
 8008de2:	4827      	ldr	r0, [pc, #156]	@ (8008e80 <_printf_i+0x238>)
 8008de4:	e7e9      	b.n	8008dba <_printf_i+0x172>
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	f023 0320 	bic.w	r3, r3, #32
 8008dec:	6023      	str	r3, [r4, #0]
 8008dee:	e7f6      	b.n	8008dde <_printf_i+0x196>
 8008df0:	4616      	mov	r6, r2
 8008df2:	e7bd      	b.n	8008d70 <_printf_i+0x128>
 8008df4:	6833      	ldr	r3, [r6, #0]
 8008df6:	6825      	ldr	r5, [r4, #0]
 8008df8:	6961      	ldr	r1, [r4, #20]
 8008dfa:	1d18      	adds	r0, r3, #4
 8008dfc:	6030      	str	r0, [r6, #0]
 8008dfe:	062e      	lsls	r6, r5, #24
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	d501      	bpl.n	8008e08 <_printf_i+0x1c0>
 8008e04:	6019      	str	r1, [r3, #0]
 8008e06:	e002      	b.n	8008e0e <_printf_i+0x1c6>
 8008e08:	0668      	lsls	r0, r5, #25
 8008e0a:	d5fb      	bpl.n	8008e04 <_printf_i+0x1bc>
 8008e0c:	8019      	strh	r1, [r3, #0]
 8008e0e:	2300      	movs	r3, #0
 8008e10:	6123      	str	r3, [r4, #16]
 8008e12:	4616      	mov	r6, r2
 8008e14:	e7bc      	b.n	8008d90 <_printf_i+0x148>
 8008e16:	6833      	ldr	r3, [r6, #0]
 8008e18:	1d1a      	adds	r2, r3, #4
 8008e1a:	6032      	str	r2, [r6, #0]
 8008e1c:	681e      	ldr	r6, [r3, #0]
 8008e1e:	6862      	ldr	r2, [r4, #4]
 8008e20:	2100      	movs	r1, #0
 8008e22:	4630      	mov	r0, r6
 8008e24:	f7f7 f9fc 	bl	8000220 <memchr>
 8008e28:	b108      	cbz	r0, 8008e2e <_printf_i+0x1e6>
 8008e2a:	1b80      	subs	r0, r0, r6
 8008e2c:	6060      	str	r0, [r4, #4]
 8008e2e:	6863      	ldr	r3, [r4, #4]
 8008e30:	6123      	str	r3, [r4, #16]
 8008e32:	2300      	movs	r3, #0
 8008e34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e38:	e7aa      	b.n	8008d90 <_printf_i+0x148>
 8008e3a:	6923      	ldr	r3, [r4, #16]
 8008e3c:	4632      	mov	r2, r6
 8008e3e:	4649      	mov	r1, r9
 8008e40:	4640      	mov	r0, r8
 8008e42:	47d0      	blx	sl
 8008e44:	3001      	adds	r0, #1
 8008e46:	d0ad      	beq.n	8008da4 <_printf_i+0x15c>
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	079b      	lsls	r3, r3, #30
 8008e4c:	d413      	bmi.n	8008e76 <_printf_i+0x22e>
 8008e4e:	68e0      	ldr	r0, [r4, #12]
 8008e50:	9b03      	ldr	r3, [sp, #12]
 8008e52:	4298      	cmp	r0, r3
 8008e54:	bfb8      	it	lt
 8008e56:	4618      	movlt	r0, r3
 8008e58:	e7a6      	b.n	8008da8 <_printf_i+0x160>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	4632      	mov	r2, r6
 8008e5e:	4649      	mov	r1, r9
 8008e60:	4640      	mov	r0, r8
 8008e62:	47d0      	blx	sl
 8008e64:	3001      	adds	r0, #1
 8008e66:	d09d      	beq.n	8008da4 <_printf_i+0x15c>
 8008e68:	3501      	adds	r5, #1
 8008e6a:	68e3      	ldr	r3, [r4, #12]
 8008e6c:	9903      	ldr	r1, [sp, #12]
 8008e6e:	1a5b      	subs	r3, r3, r1
 8008e70:	42ab      	cmp	r3, r5
 8008e72:	dcf2      	bgt.n	8008e5a <_printf_i+0x212>
 8008e74:	e7eb      	b.n	8008e4e <_printf_i+0x206>
 8008e76:	2500      	movs	r5, #0
 8008e78:	f104 0619 	add.w	r6, r4, #25
 8008e7c:	e7f5      	b.n	8008e6a <_printf_i+0x222>
 8008e7e:	bf00      	nop
 8008e80:	0800b90e 	.word	0x0800b90e
 8008e84:	0800b91f 	.word	0x0800b91f

08008e88 <std>:
 8008e88:	2300      	movs	r3, #0
 8008e8a:	b510      	push	{r4, lr}
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8008e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e96:	6083      	str	r3, [r0, #8]
 8008e98:	8181      	strh	r1, [r0, #12]
 8008e9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008e9c:	81c2      	strh	r2, [r0, #14]
 8008e9e:	6183      	str	r3, [r0, #24]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	2208      	movs	r2, #8
 8008ea4:	305c      	adds	r0, #92	@ 0x5c
 8008ea6:	f000 f914 	bl	80090d2 <memset>
 8008eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8008ee0 <std+0x58>)
 8008eac:	6263      	str	r3, [r4, #36]	@ 0x24
 8008eae:	4b0d      	ldr	r3, [pc, #52]	@ (8008ee4 <std+0x5c>)
 8008eb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ee8 <std+0x60>)
 8008eb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8008eec <std+0x64>)
 8008eb8:	6323      	str	r3, [r4, #48]	@ 0x30
 8008eba:	4b0d      	ldr	r3, [pc, #52]	@ (8008ef0 <std+0x68>)
 8008ebc:	6224      	str	r4, [r4, #32]
 8008ebe:	429c      	cmp	r4, r3
 8008ec0:	d006      	beq.n	8008ed0 <std+0x48>
 8008ec2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ec6:	4294      	cmp	r4, r2
 8008ec8:	d002      	beq.n	8008ed0 <std+0x48>
 8008eca:	33d0      	adds	r3, #208	@ 0xd0
 8008ecc:	429c      	cmp	r4, r3
 8008ece:	d105      	bne.n	8008edc <std+0x54>
 8008ed0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ed8:	f000 b978 	b.w	80091cc <__retarget_lock_init_recursive>
 8008edc:	bd10      	pop	{r4, pc}
 8008ede:	bf00      	nop
 8008ee0:	0800904d 	.word	0x0800904d
 8008ee4:	0800906f 	.word	0x0800906f
 8008ee8:	080090a7 	.word	0x080090a7
 8008eec:	080090cb 	.word	0x080090cb
 8008ef0:	20000438 	.word	0x20000438

08008ef4 <stdio_exit_handler>:
 8008ef4:	4a02      	ldr	r2, [pc, #8]	@ (8008f00 <stdio_exit_handler+0xc>)
 8008ef6:	4903      	ldr	r1, [pc, #12]	@ (8008f04 <stdio_exit_handler+0x10>)
 8008ef8:	4803      	ldr	r0, [pc, #12]	@ (8008f08 <stdio_exit_handler+0x14>)
 8008efa:	f000 b869 	b.w	8008fd0 <_fwalk_sglue>
 8008efe:	bf00      	nop
 8008f00:	2000000c 	.word	0x2000000c
 8008f04:	0800ab45 	.word	0x0800ab45
 8008f08:	2000001c 	.word	0x2000001c

08008f0c <cleanup_stdio>:
 8008f0c:	6841      	ldr	r1, [r0, #4]
 8008f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8008f40 <cleanup_stdio+0x34>)
 8008f10:	4299      	cmp	r1, r3
 8008f12:	b510      	push	{r4, lr}
 8008f14:	4604      	mov	r4, r0
 8008f16:	d001      	beq.n	8008f1c <cleanup_stdio+0x10>
 8008f18:	f001 fe14 	bl	800ab44 <_fflush_r>
 8008f1c:	68a1      	ldr	r1, [r4, #8]
 8008f1e:	4b09      	ldr	r3, [pc, #36]	@ (8008f44 <cleanup_stdio+0x38>)
 8008f20:	4299      	cmp	r1, r3
 8008f22:	d002      	beq.n	8008f2a <cleanup_stdio+0x1e>
 8008f24:	4620      	mov	r0, r4
 8008f26:	f001 fe0d 	bl	800ab44 <_fflush_r>
 8008f2a:	68e1      	ldr	r1, [r4, #12]
 8008f2c:	4b06      	ldr	r3, [pc, #24]	@ (8008f48 <cleanup_stdio+0x3c>)
 8008f2e:	4299      	cmp	r1, r3
 8008f30:	d004      	beq.n	8008f3c <cleanup_stdio+0x30>
 8008f32:	4620      	mov	r0, r4
 8008f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f38:	f001 be04 	b.w	800ab44 <_fflush_r>
 8008f3c:	bd10      	pop	{r4, pc}
 8008f3e:	bf00      	nop
 8008f40:	20000438 	.word	0x20000438
 8008f44:	200004a0 	.word	0x200004a0
 8008f48:	20000508 	.word	0x20000508

08008f4c <global_stdio_init.part.0>:
 8008f4c:	b510      	push	{r4, lr}
 8008f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8008f7c <global_stdio_init.part.0+0x30>)
 8008f50:	4c0b      	ldr	r4, [pc, #44]	@ (8008f80 <global_stdio_init.part.0+0x34>)
 8008f52:	4a0c      	ldr	r2, [pc, #48]	@ (8008f84 <global_stdio_init.part.0+0x38>)
 8008f54:	601a      	str	r2, [r3, #0]
 8008f56:	4620      	mov	r0, r4
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2104      	movs	r1, #4
 8008f5c:	f7ff ff94 	bl	8008e88 <std>
 8008f60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008f64:	2201      	movs	r2, #1
 8008f66:	2109      	movs	r1, #9
 8008f68:	f7ff ff8e 	bl	8008e88 <std>
 8008f6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008f70:	2202      	movs	r2, #2
 8008f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f76:	2112      	movs	r1, #18
 8008f78:	f7ff bf86 	b.w	8008e88 <std>
 8008f7c:	20000570 	.word	0x20000570
 8008f80:	20000438 	.word	0x20000438
 8008f84:	08008ef5 	.word	0x08008ef5

08008f88 <__sfp_lock_acquire>:
 8008f88:	4801      	ldr	r0, [pc, #4]	@ (8008f90 <__sfp_lock_acquire+0x8>)
 8008f8a:	f000 b920 	b.w	80091ce <__retarget_lock_acquire_recursive>
 8008f8e:	bf00      	nop
 8008f90:	20000579 	.word	0x20000579

08008f94 <__sfp_lock_release>:
 8008f94:	4801      	ldr	r0, [pc, #4]	@ (8008f9c <__sfp_lock_release+0x8>)
 8008f96:	f000 b91b 	b.w	80091d0 <__retarget_lock_release_recursive>
 8008f9a:	bf00      	nop
 8008f9c:	20000579 	.word	0x20000579

08008fa0 <__sinit>:
 8008fa0:	b510      	push	{r4, lr}
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	f7ff fff0 	bl	8008f88 <__sfp_lock_acquire>
 8008fa8:	6a23      	ldr	r3, [r4, #32]
 8008faa:	b11b      	cbz	r3, 8008fb4 <__sinit+0x14>
 8008fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fb0:	f7ff bff0 	b.w	8008f94 <__sfp_lock_release>
 8008fb4:	4b04      	ldr	r3, [pc, #16]	@ (8008fc8 <__sinit+0x28>)
 8008fb6:	6223      	str	r3, [r4, #32]
 8008fb8:	4b04      	ldr	r3, [pc, #16]	@ (8008fcc <__sinit+0x2c>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1f5      	bne.n	8008fac <__sinit+0xc>
 8008fc0:	f7ff ffc4 	bl	8008f4c <global_stdio_init.part.0>
 8008fc4:	e7f2      	b.n	8008fac <__sinit+0xc>
 8008fc6:	bf00      	nop
 8008fc8:	08008f0d 	.word	0x08008f0d
 8008fcc:	20000570 	.word	0x20000570

08008fd0 <_fwalk_sglue>:
 8008fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fd4:	4607      	mov	r7, r0
 8008fd6:	4688      	mov	r8, r1
 8008fd8:	4614      	mov	r4, r2
 8008fda:	2600      	movs	r6, #0
 8008fdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fe0:	f1b9 0901 	subs.w	r9, r9, #1
 8008fe4:	d505      	bpl.n	8008ff2 <_fwalk_sglue+0x22>
 8008fe6:	6824      	ldr	r4, [r4, #0]
 8008fe8:	2c00      	cmp	r4, #0
 8008fea:	d1f7      	bne.n	8008fdc <_fwalk_sglue+0xc>
 8008fec:	4630      	mov	r0, r6
 8008fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ff2:	89ab      	ldrh	r3, [r5, #12]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d907      	bls.n	8009008 <_fwalk_sglue+0x38>
 8008ff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	d003      	beq.n	8009008 <_fwalk_sglue+0x38>
 8009000:	4629      	mov	r1, r5
 8009002:	4638      	mov	r0, r7
 8009004:	47c0      	blx	r8
 8009006:	4306      	orrs	r6, r0
 8009008:	3568      	adds	r5, #104	@ 0x68
 800900a:	e7e9      	b.n	8008fe0 <_fwalk_sglue+0x10>

0800900c <siprintf>:
 800900c:	b40e      	push	{r1, r2, r3}
 800900e:	b500      	push	{lr}
 8009010:	b09c      	sub	sp, #112	@ 0x70
 8009012:	ab1d      	add	r3, sp, #116	@ 0x74
 8009014:	9002      	str	r0, [sp, #8]
 8009016:	9006      	str	r0, [sp, #24]
 8009018:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800901c:	4809      	ldr	r0, [pc, #36]	@ (8009044 <siprintf+0x38>)
 800901e:	9107      	str	r1, [sp, #28]
 8009020:	9104      	str	r1, [sp, #16]
 8009022:	4909      	ldr	r1, [pc, #36]	@ (8009048 <siprintf+0x3c>)
 8009024:	f853 2b04 	ldr.w	r2, [r3], #4
 8009028:	9105      	str	r1, [sp, #20]
 800902a:	6800      	ldr	r0, [r0, #0]
 800902c:	9301      	str	r3, [sp, #4]
 800902e:	a902      	add	r1, sp, #8
 8009030:	f001 fc08 	bl	800a844 <_svfiprintf_r>
 8009034:	9b02      	ldr	r3, [sp, #8]
 8009036:	2200      	movs	r2, #0
 8009038:	701a      	strb	r2, [r3, #0]
 800903a:	b01c      	add	sp, #112	@ 0x70
 800903c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009040:	b003      	add	sp, #12
 8009042:	4770      	bx	lr
 8009044:	20000018 	.word	0x20000018
 8009048:	ffff0208 	.word	0xffff0208

0800904c <__sread>:
 800904c:	b510      	push	{r4, lr}
 800904e:	460c      	mov	r4, r1
 8009050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009054:	f000 f86c 	bl	8009130 <_read_r>
 8009058:	2800      	cmp	r0, #0
 800905a:	bfab      	itete	ge
 800905c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800905e:	89a3      	ldrhlt	r3, [r4, #12]
 8009060:	181b      	addge	r3, r3, r0
 8009062:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009066:	bfac      	ite	ge
 8009068:	6563      	strge	r3, [r4, #84]	@ 0x54
 800906a:	81a3      	strhlt	r3, [r4, #12]
 800906c:	bd10      	pop	{r4, pc}

0800906e <__swrite>:
 800906e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009072:	461f      	mov	r7, r3
 8009074:	898b      	ldrh	r3, [r1, #12]
 8009076:	05db      	lsls	r3, r3, #23
 8009078:	4605      	mov	r5, r0
 800907a:	460c      	mov	r4, r1
 800907c:	4616      	mov	r6, r2
 800907e:	d505      	bpl.n	800908c <__swrite+0x1e>
 8009080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009084:	2302      	movs	r3, #2
 8009086:	2200      	movs	r2, #0
 8009088:	f000 f840 	bl	800910c <_lseek_r>
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009092:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009096:	81a3      	strh	r3, [r4, #12]
 8009098:	4632      	mov	r2, r6
 800909a:	463b      	mov	r3, r7
 800909c:	4628      	mov	r0, r5
 800909e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090a2:	f000 b857 	b.w	8009154 <_write_r>

080090a6 <__sseek>:
 80090a6:	b510      	push	{r4, lr}
 80090a8:	460c      	mov	r4, r1
 80090aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ae:	f000 f82d 	bl	800910c <_lseek_r>
 80090b2:	1c43      	adds	r3, r0, #1
 80090b4:	89a3      	ldrh	r3, [r4, #12]
 80090b6:	bf15      	itete	ne
 80090b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090c2:	81a3      	strheq	r3, [r4, #12]
 80090c4:	bf18      	it	ne
 80090c6:	81a3      	strhne	r3, [r4, #12]
 80090c8:	bd10      	pop	{r4, pc}

080090ca <__sclose>:
 80090ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ce:	f000 b80d 	b.w	80090ec <_close_r>

080090d2 <memset>:
 80090d2:	4402      	add	r2, r0
 80090d4:	4603      	mov	r3, r0
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d100      	bne.n	80090dc <memset+0xa>
 80090da:	4770      	bx	lr
 80090dc:	f803 1b01 	strb.w	r1, [r3], #1
 80090e0:	e7f9      	b.n	80090d6 <memset+0x4>
	...

080090e4 <_localeconv_r>:
 80090e4:	4800      	ldr	r0, [pc, #0]	@ (80090e8 <_localeconv_r+0x4>)
 80090e6:	4770      	bx	lr
 80090e8:	20000158 	.word	0x20000158

080090ec <_close_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	4d06      	ldr	r5, [pc, #24]	@ (8009108 <_close_r+0x1c>)
 80090f0:	2300      	movs	r3, #0
 80090f2:	4604      	mov	r4, r0
 80090f4:	4608      	mov	r0, r1
 80090f6:	602b      	str	r3, [r5, #0]
 80090f8:	f7f9 fe59 	bl	8002dae <_close>
 80090fc:	1c43      	adds	r3, r0, #1
 80090fe:	d102      	bne.n	8009106 <_close_r+0x1a>
 8009100:	682b      	ldr	r3, [r5, #0]
 8009102:	b103      	cbz	r3, 8009106 <_close_r+0x1a>
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	bd38      	pop	{r3, r4, r5, pc}
 8009108:	20000574 	.word	0x20000574

0800910c <_lseek_r>:
 800910c:	b538      	push	{r3, r4, r5, lr}
 800910e:	4d07      	ldr	r5, [pc, #28]	@ (800912c <_lseek_r+0x20>)
 8009110:	4604      	mov	r4, r0
 8009112:	4608      	mov	r0, r1
 8009114:	4611      	mov	r1, r2
 8009116:	2200      	movs	r2, #0
 8009118:	602a      	str	r2, [r5, #0]
 800911a:	461a      	mov	r2, r3
 800911c:	f7f9 fe6e 	bl	8002dfc <_lseek>
 8009120:	1c43      	adds	r3, r0, #1
 8009122:	d102      	bne.n	800912a <_lseek_r+0x1e>
 8009124:	682b      	ldr	r3, [r5, #0]
 8009126:	b103      	cbz	r3, 800912a <_lseek_r+0x1e>
 8009128:	6023      	str	r3, [r4, #0]
 800912a:	bd38      	pop	{r3, r4, r5, pc}
 800912c:	20000574 	.word	0x20000574

08009130 <_read_r>:
 8009130:	b538      	push	{r3, r4, r5, lr}
 8009132:	4d07      	ldr	r5, [pc, #28]	@ (8009150 <_read_r+0x20>)
 8009134:	4604      	mov	r4, r0
 8009136:	4608      	mov	r0, r1
 8009138:	4611      	mov	r1, r2
 800913a:	2200      	movs	r2, #0
 800913c:	602a      	str	r2, [r5, #0]
 800913e:	461a      	mov	r2, r3
 8009140:	f7f9 fdfc 	bl	8002d3c <_read>
 8009144:	1c43      	adds	r3, r0, #1
 8009146:	d102      	bne.n	800914e <_read_r+0x1e>
 8009148:	682b      	ldr	r3, [r5, #0]
 800914a:	b103      	cbz	r3, 800914e <_read_r+0x1e>
 800914c:	6023      	str	r3, [r4, #0]
 800914e:	bd38      	pop	{r3, r4, r5, pc}
 8009150:	20000574 	.word	0x20000574

08009154 <_write_r>:
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	4d07      	ldr	r5, [pc, #28]	@ (8009174 <_write_r+0x20>)
 8009158:	4604      	mov	r4, r0
 800915a:	4608      	mov	r0, r1
 800915c:	4611      	mov	r1, r2
 800915e:	2200      	movs	r2, #0
 8009160:	602a      	str	r2, [r5, #0]
 8009162:	461a      	mov	r2, r3
 8009164:	f7f9 fe07 	bl	8002d76 <_write>
 8009168:	1c43      	adds	r3, r0, #1
 800916a:	d102      	bne.n	8009172 <_write_r+0x1e>
 800916c:	682b      	ldr	r3, [r5, #0]
 800916e:	b103      	cbz	r3, 8009172 <_write_r+0x1e>
 8009170:	6023      	str	r3, [r4, #0]
 8009172:	bd38      	pop	{r3, r4, r5, pc}
 8009174:	20000574 	.word	0x20000574

08009178 <__errno>:
 8009178:	4b01      	ldr	r3, [pc, #4]	@ (8009180 <__errno+0x8>)
 800917a:	6818      	ldr	r0, [r3, #0]
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	20000018 	.word	0x20000018

08009184 <__libc_init_array>:
 8009184:	b570      	push	{r4, r5, r6, lr}
 8009186:	4d0d      	ldr	r5, [pc, #52]	@ (80091bc <__libc_init_array+0x38>)
 8009188:	4c0d      	ldr	r4, [pc, #52]	@ (80091c0 <__libc_init_array+0x3c>)
 800918a:	1b64      	subs	r4, r4, r5
 800918c:	10a4      	asrs	r4, r4, #2
 800918e:	2600      	movs	r6, #0
 8009190:	42a6      	cmp	r6, r4
 8009192:	d109      	bne.n	80091a8 <__libc_init_array+0x24>
 8009194:	4d0b      	ldr	r5, [pc, #44]	@ (80091c4 <__libc_init_array+0x40>)
 8009196:	4c0c      	ldr	r4, [pc, #48]	@ (80091c8 <__libc_init_array+0x44>)
 8009198:	f002 face 	bl	800b738 <_init>
 800919c:	1b64      	subs	r4, r4, r5
 800919e:	10a4      	asrs	r4, r4, #2
 80091a0:	2600      	movs	r6, #0
 80091a2:	42a6      	cmp	r6, r4
 80091a4:	d105      	bne.n	80091b2 <__libc_init_array+0x2e>
 80091a6:	bd70      	pop	{r4, r5, r6, pc}
 80091a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ac:	4798      	blx	r3
 80091ae:	3601      	adds	r6, #1
 80091b0:	e7ee      	b.n	8009190 <__libc_init_array+0xc>
 80091b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80091b6:	4798      	blx	r3
 80091b8:	3601      	adds	r6, #1
 80091ba:	e7f2      	b.n	80091a2 <__libc_init_array+0x1e>
 80091bc:	0800bce8 	.word	0x0800bce8
 80091c0:	0800bce8 	.word	0x0800bce8
 80091c4:	0800bce8 	.word	0x0800bce8
 80091c8:	0800bcec 	.word	0x0800bcec

080091cc <__retarget_lock_init_recursive>:
 80091cc:	4770      	bx	lr

080091ce <__retarget_lock_acquire_recursive>:
 80091ce:	4770      	bx	lr

080091d0 <__retarget_lock_release_recursive>:
 80091d0:	4770      	bx	lr

080091d2 <memcpy>:
 80091d2:	440a      	add	r2, r1
 80091d4:	4291      	cmp	r1, r2
 80091d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80091da:	d100      	bne.n	80091de <memcpy+0xc>
 80091dc:	4770      	bx	lr
 80091de:	b510      	push	{r4, lr}
 80091e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091e8:	4291      	cmp	r1, r2
 80091ea:	d1f9      	bne.n	80091e0 <memcpy+0xe>
 80091ec:	bd10      	pop	{r4, pc}

080091ee <quorem>:
 80091ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f2:	6903      	ldr	r3, [r0, #16]
 80091f4:	690c      	ldr	r4, [r1, #16]
 80091f6:	42a3      	cmp	r3, r4
 80091f8:	4607      	mov	r7, r0
 80091fa:	db7e      	blt.n	80092fa <quorem+0x10c>
 80091fc:	3c01      	subs	r4, #1
 80091fe:	f101 0814 	add.w	r8, r1, #20
 8009202:	00a3      	lsls	r3, r4, #2
 8009204:	f100 0514 	add.w	r5, r0, #20
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800920e:	9301      	str	r3, [sp, #4]
 8009210:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009214:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009218:	3301      	adds	r3, #1
 800921a:	429a      	cmp	r2, r3
 800921c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009220:	fbb2 f6f3 	udiv	r6, r2, r3
 8009224:	d32e      	bcc.n	8009284 <quorem+0x96>
 8009226:	f04f 0a00 	mov.w	sl, #0
 800922a:	46c4      	mov	ip, r8
 800922c:	46ae      	mov	lr, r5
 800922e:	46d3      	mov	fp, sl
 8009230:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009234:	b298      	uxth	r0, r3
 8009236:	fb06 a000 	mla	r0, r6, r0, sl
 800923a:	0c02      	lsrs	r2, r0, #16
 800923c:	0c1b      	lsrs	r3, r3, #16
 800923e:	fb06 2303 	mla	r3, r6, r3, r2
 8009242:	f8de 2000 	ldr.w	r2, [lr]
 8009246:	b280      	uxth	r0, r0
 8009248:	b292      	uxth	r2, r2
 800924a:	1a12      	subs	r2, r2, r0
 800924c:	445a      	add	r2, fp
 800924e:	f8de 0000 	ldr.w	r0, [lr]
 8009252:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009256:	b29b      	uxth	r3, r3
 8009258:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800925c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009260:	b292      	uxth	r2, r2
 8009262:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009266:	45e1      	cmp	r9, ip
 8009268:	f84e 2b04 	str.w	r2, [lr], #4
 800926c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009270:	d2de      	bcs.n	8009230 <quorem+0x42>
 8009272:	9b00      	ldr	r3, [sp, #0]
 8009274:	58eb      	ldr	r3, [r5, r3]
 8009276:	b92b      	cbnz	r3, 8009284 <quorem+0x96>
 8009278:	9b01      	ldr	r3, [sp, #4]
 800927a:	3b04      	subs	r3, #4
 800927c:	429d      	cmp	r5, r3
 800927e:	461a      	mov	r2, r3
 8009280:	d32f      	bcc.n	80092e2 <quorem+0xf4>
 8009282:	613c      	str	r4, [r7, #16]
 8009284:	4638      	mov	r0, r7
 8009286:	f001 f979 	bl	800a57c <__mcmp>
 800928a:	2800      	cmp	r0, #0
 800928c:	db25      	blt.n	80092da <quorem+0xec>
 800928e:	4629      	mov	r1, r5
 8009290:	2000      	movs	r0, #0
 8009292:	f858 2b04 	ldr.w	r2, [r8], #4
 8009296:	f8d1 c000 	ldr.w	ip, [r1]
 800929a:	fa1f fe82 	uxth.w	lr, r2
 800929e:	fa1f f38c 	uxth.w	r3, ip
 80092a2:	eba3 030e 	sub.w	r3, r3, lr
 80092a6:	4403      	add	r3, r0
 80092a8:	0c12      	lsrs	r2, r2, #16
 80092aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80092ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092b8:	45c1      	cmp	r9, r8
 80092ba:	f841 3b04 	str.w	r3, [r1], #4
 80092be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80092c2:	d2e6      	bcs.n	8009292 <quorem+0xa4>
 80092c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092cc:	b922      	cbnz	r2, 80092d8 <quorem+0xea>
 80092ce:	3b04      	subs	r3, #4
 80092d0:	429d      	cmp	r5, r3
 80092d2:	461a      	mov	r2, r3
 80092d4:	d30b      	bcc.n	80092ee <quorem+0x100>
 80092d6:	613c      	str	r4, [r7, #16]
 80092d8:	3601      	adds	r6, #1
 80092da:	4630      	mov	r0, r6
 80092dc:	b003      	add	sp, #12
 80092de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e2:	6812      	ldr	r2, [r2, #0]
 80092e4:	3b04      	subs	r3, #4
 80092e6:	2a00      	cmp	r2, #0
 80092e8:	d1cb      	bne.n	8009282 <quorem+0x94>
 80092ea:	3c01      	subs	r4, #1
 80092ec:	e7c6      	b.n	800927c <quorem+0x8e>
 80092ee:	6812      	ldr	r2, [r2, #0]
 80092f0:	3b04      	subs	r3, #4
 80092f2:	2a00      	cmp	r2, #0
 80092f4:	d1ef      	bne.n	80092d6 <quorem+0xe8>
 80092f6:	3c01      	subs	r4, #1
 80092f8:	e7ea      	b.n	80092d0 <quorem+0xe2>
 80092fa:	2000      	movs	r0, #0
 80092fc:	e7ee      	b.n	80092dc <quorem+0xee>
	...

08009300 <_dtoa_r>:
 8009300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009304:	69c7      	ldr	r7, [r0, #28]
 8009306:	b099      	sub	sp, #100	@ 0x64
 8009308:	ed8d 0b02 	vstr	d0, [sp, #8]
 800930c:	ec55 4b10 	vmov	r4, r5, d0
 8009310:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009312:	9109      	str	r1, [sp, #36]	@ 0x24
 8009314:	4683      	mov	fp, r0
 8009316:	920e      	str	r2, [sp, #56]	@ 0x38
 8009318:	9313      	str	r3, [sp, #76]	@ 0x4c
 800931a:	b97f      	cbnz	r7, 800933c <_dtoa_r+0x3c>
 800931c:	2010      	movs	r0, #16
 800931e:	f000 fdfd 	bl	8009f1c <malloc>
 8009322:	4602      	mov	r2, r0
 8009324:	f8cb 001c 	str.w	r0, [fp, #28]
 8009328:	b920      	cbnz	r0, 8009334 <_dtoa_r+0x34>
 800932a:	4ba7      	ldr	r3, [pc, #668]	@ (80095c8 <_dtoa_r+0x2c8>)
 800932c:	21ef      	movs	r1, #239	@ 0xef
 800932e:	48a7      	ldr	r0, [pc, #668]	@ (80095cc <_dtoa_r+0x2cc>)
 8009330:	f001 fc5a 	bl	800abe8 <__assert_func>
 8009334:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009338:	6007      	str	r7, [r0, #0]
 800933a:	60c7      	str	r7, [r0, #12]
 800933c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009340:	6819      	ldr	r1, [r3, #0]
 8009342:	b159      	cbz	r1, 800935c <_dtoa_r+0x5c>
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	604a      	str	r2, [r1, #4]
 8009348:	2301      	movs	r3, #1
 800934a:	4093      	lsls	r3, r2
 800934c:	608b      	str	r3, [r1, #8]
 800934e:	4658      	mov	r0, fp
 8009350:	f000 feda 	bl	800a108 <_Bfree>
 8009354:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009358:	2200      	movs	r2, #0
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	1e2b      	subs	r3, r5, #0
 800935e:	bfb9      	ittee	lt
 8009360:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009364:	9303      	strlt	r3, [sp, #12]
 8009366:	2300      	movge	r3, #0
 8009368:	6033      	strge	r3, [r6, #0]
 800936a:	9f03      	ldr	r7, [sp, #12]
 800936c:	4b98      	ldr	r3, [pc, #608]	@ (80095d0 <_dtoa_r+0x2d0>)
 800936e:	bfbc      	itt	lt
 8009370:	2201      	movlt	r2, #1
 8009372:	6032      	strlt	r2, [r6, #0]
 8009374:	43bb      	bics	r3, r7
 8009376:	d112      	bne.n	800939e <_dtoa_r+0x9e>
 8009378:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800937a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800937e:	6013      	str	r3, [r2, #0]
 8009380:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009384:	4323      	orrs	r3, r4
 8009386:	f000 854d 	beq.w	8009e24 <_dtoa_r+0xb24>
 800938a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800938c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80095e4 <_dtoa_r+0x2e4>
 8009390:	2b00      	cmp	r3, #0
 8009392:	f000 854f 	beq.w	8009e34 <_dtoa_r+0xb34>
 8009396:	f10a 0303 	add.w	r3, sl, #3
 800939a:	f000 bd49 	b.w	8009e30 <_dtoa_r+0xb30>
 800939e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093a2:	2200      	movs	r2, #0
 80093a4:	ec51 0b17 	vmov	r0, r1, d7
 80093a8:	2300      	movs	r3, #0
 80093aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80093ae:	f7f7 fbb3 	bl	8000b18 <__aeabi_dcmpeq>
 80093b2:	4680      	mov	r8, r0
 80093b4:	b158      	cbz	r0, 80093ce <_dtoa_r+0xce>
 80093b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80093b8:	2301      	movs	r3, #1
 80093ba:	6013      	str	r3, [r2, #0]
 80093bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80093be:	b113      	cbz	r3, 80093c6 <_dtoa_r+0xc6>
 80093c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80093c2:	4b84      	ldr	r3, [pc, #528]	@ (80095d4 <_dtoa_r+0x2d4>)
 80093c4:	6013      	str	r3, [r2, #0]
 80093c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80095e8 <_dtoa_r+0x2e8>
 80093ca:	f000 bd33 	b.w	8009e34 <_dtoa_r+0xb34>
 80093ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80093d2:	aa16      	add	r2, sp, #88	@ 0x58
 80093d4:	a917      	add	r1, sp, #92	@ 0x5c
 80093d6:	4658      	mov	r0, fp
 80093d8:	f001 f980 	bl	800a6dc <__d2b>
 80093dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80093e0:	4681      	mov	r9, r0
 80093e2:	2e00      	cmp	r6, #0
 80093e4:	d077      	beq.n	80094d6 <_dtoa_r+0x1d6>
 80093e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80093e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80093ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80093f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80093fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009400:	4619      	mov	r1, r3
 8009402:	2200      	movs	r2, #0
 8009404:	4b74      	ldr	r3, [pc, #464]	@ (80095d8 <_dtoa_r+0x2d8>)
 8009406:	f7f6 ff67 	bl	80002d8 <__aeabi_dsub>
 800940a:	a369      	add	r3, pc, #420	@ (adr r3, 80095b0 <_dtoa_r+0x2b0>)
 800940c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009410:	f7f7 f91a 	bl	8000648 <__aeabi_dmul>
 8009414:	a368      	add	r3, pc, #416	@ (adr r3, 80095b8 <_dtoa_r+0x2b8>)
 8009416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941a:	f7f6 ff5f 	bl	80002dc <__adddf3>
 800941e:	4604      	mov	r4, r0
 8009420:	4630      	mov	r0, r6
 8009422:	460d      	mov	r5, r1
 8009424:	f7f7 f8a6 	bl	8000574 <__aeabi_i2d>
 8009428:	a365      	add	r3, pc, #404	@ (adr r3, 80095c0 <_dtoa_r+0x2c0>)
 800942a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942e:	f7f7 f90b 	bl	8000648 <__aeabi_dmul>
 8009432:	4602      	mov	r2, r0
 8009434:	460b      	mov	r3, r1
 8009436:	4620      	mov	r0, r4
 8009438:	4629      	mov	r1, r5
 800943a:	f7f6 ff4f 	bl	80002dc <__adddf3>
 800943e:	4604      	mov	r4, r0
 8009440:	460d      	mov	r5, r1
 8009442:	f7f7 fbb1 	bl	8000ba8 <__aeabi_d2iz>
 8009446:	2200      	movs	r2, #0
 8009448:	4607      	mov	r7, r0
 800944a:	2300      	movs	r3, #0
 800944c:	4620      	mov	r0, r4
 800944e:	4629      	mov	r1, r5
 8009450:	f7f7 fb6c 	bl	8000b2c <__aeabi_dcmplt>
 8009454:	b140      	cbz	r0, 8009468 <_dtoa_r+0x168>
 8009456:	4638      	mov	r0, r7
 8009458:	f7f7 f88c 	bl	8000574 <__aeabi_i2d>
 800945c:	4622      	mov	r2, r4
 800945e:	462b      	mov	r3, r5
 8009460:	f7f7 fb5a 	bl	8000b18 <__aeabi_dcmpeq>
 8009464:	b900      	cbnz	r0, 8009468 <_dtoa_r+0x168>
 8009466:	3f01      	subs	r7, #1
 8009468:	2f16      	cmp	r7, #22
 800946a:	d851      	bhi.n	8009510 <_dtoa_r+0x210>
 800946c:	4b5b      	ldr	r3, [pc, #364]	@ (80095dc <_dtoa_r+0x2dc>)
 800946e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800947a:	f7f7 fb57 	bl	8000b2c <__aeabi_dcmplt>
 800947e:	2800      	cmp	r0, #0
 8009480:	d048      	beq.n	8009514 <_dtoa_r+0x214>
 8009482:	3f01      	subs	r7, #1
 8009484:	2300      	movs	r3, #0
 8009486:	9312      	str	r3, [sp, #72]	@ 0x48
 8009488:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800948a:	1b9b      	subs	r3, r3, r6
 800948c:	1e5a      	subs	r2, r3, #1
 800948e:	bf44      	itt	mi
 8009490:	f1c3 0801 	rsbmi	r8, r3, #1
 8009494:	2300      	movmi	r3, #0
 8009496:	9208      	str	r2, [sp, #32]
 8009498:	bf54      	ite	pl
 800949a:	f04f 0800 	movpl.w	r8, #0
 800949e:	9308      	strmi	r3, [sp, #32]
 80094a0:	2f00      	cmp	r7, #0
 80094a2:	db39      	blt.n	8009518 <_dtoa_r+0x218>
 80094a4:	9b08      	ldr	r3, [sp, #32]
 80094a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80094a8:	443b      	add	r3, r7
 80094aa:	9308      	str	r3, [sp, #32]
 80094ac:	2300      	movs	r3, #0
 80094ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80094b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094b2:	2b09      	cmp	r3, #9
 80094b4:	d864      	bhi.n	8009580 <_dtoa_r+0x280>
 80094b6:	2b05      	cmp	r3, #5
 80094b8:	bfc4      	itt	gt
 80094ba:	3b04      	subgt	r3, #4
 80094bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80094be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094c0:	f1a3 0302 	sub.w	r3, r3, #2
 80094c4:	bfcc      	ite	gt
 80094c6:	2400      	movgt	r4, #0
 80094c8:	2401      	movle	r4, #1
 80094ca:	2b03      	cmp	r3, #3
 80094cc:	d863      	bhi.n	8009596 <_dtoa_r+0x296>
 80094ce:	e8df f003 	tbb	[pc, r3]
 80094d2:	372a      	.short	0x372a
 80094d4:	5535      	.short	0x5535
 80094d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80094da:	441e      	add	r6, r3
 80094dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80094e0:	2b20      	cmp	r3, #32
 80094e2:	bfc1      	itttt	gt
 80094e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80094e8:	409f      	lslgt	r7, r3
 80094ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80094ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 80094f2:	bfd6      	itet	le
 80094f4:	f1c3 0320 	rsble	r3, r3, #32
 80094f8:	ea47 0003 	orrgt.w	r0, r7, r3
 80094fc:	fa04 f003 	lslle.w	r0, r4, r3
 8009500:	f7f7 f828 	bl	8000554 <__aeabi_ui2d>
 8009504:	2201      	movs	r2, #1
 8009506:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800950a:	3e01      	subs	r6, #1
 800950c:	9214      	str	r2, [sp, #80]	@ 0x50
 800950e:	e777      	b.n	8009400 <_dtoa_r+0x100>
 8009510:	2301      	movs	r3, #1
 8009512:	e7b8      	b.n	8009486 <_dtoa_r+0x186>
 8009514:	9012      	str	r0, [sp, #72]	@ 0x48
 8009516:	e7b7      	b.n	8009488 <_dtoa_r+0x188>
 8009518:	427b      	negs	r3, r7
 800951a:	930a      	str	r3, [sp, #40]	@ 0x28
 800951c:	2300      	movs	r3, #0
 800951e:	eba8 0807 	sub.w	r8, r8, r7
 8009522:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009524:	e7c4      	b.n	80094b0 <_dtoa_r+0x1b0>
 8009526:	2300      	movs	r3, #0
 8009528:	930b      	str	r3, [sp, #44]	@ 0x2c
 800952a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800952c:	2b00      	cmp	r3, #0
 800952e:	dc35      	bgt.n	800959c <_dtoa_r+0x29c>
 8009530:	2301      	movs	r3, #1
 8009532:	9300      	str	r3, [sp, #0]
 8009534:	9307      	str	r3, [sp, #28]
 8009536:	461a      	mov	r2, r3
 8009538:	920e      	str	r2, [sp, #56]	@ 0x38
 800953a:	e00b      	b.n	8009554 <_dtoa_r+0x254>
 800953c:	2301      	movs	r3, #1
 800953e:	e7f3      	b.n	8009528 <_dtoa_r+0x228>
 8009540:	2300      	movs	r3, #0
 8009542:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009544:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009546:	18fb      	adds	r3, r7, r3
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	3301      	adds	r3, #1
 800954c:	2b01      	cmp	r3, #1
 800954e:	9307      	str	r3, [sp, #28]
 8009550:	bfb8      	it	lt
 8009552:	2301      	movlt	r3, #1
 8009554:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009558:	2100      	movs	r1, #0
 800955a:	2204      	movs	r2, #4
 800955c:	f102 0514 	add.w	r5, r2, #20
 8009560:	429d      	cmp	r5, r3
 8009562:	d91f      	bls.n	80095a4 <_dtoa_r+0x2a4>
 8009564:	6041      	str	r1, [r0, #4]
 8009566:	4658      	mov	r0, fp
 8009568:	f000 fd8e 	bl	800a088 <_Balloc>
 800956c:	4682      	mov	sl, r0
 800956e:	2800      	cmp	r0, #0
 8009570:	d13c      	bne.n	80095ec <_dtoa_r+0x2ec>
 8009572:	4b1b      	ldr	r3, [pc, #108]	@ (80095e0 <_dtoa_r+0x2e0>)
 8009574:	4602      	mov	r2, r0
 8009576:	f240 11af 	movw	r1, #431	@ 0x1af
 800957a:	e6d8      	b.n	800932e <_dtoa_r+0x2e>
 800957c:	2301      	movs	r3, #1
 800957e:	e7e0      	b.n	8009542 <_dtoa_r+0x242>
 8009580:	2401      	movs	r4, #1
 8009582:	2300      	movs	r3, #0
 8009584:	9309      	str	r3, [sp, #36]	@ 0x24
 8009586:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009588:	f04f 33ff 	mov.w	r3, #4294967295
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	9307      	str	r3, [sp, #28]
 8009590:	2200      	movs	r2, #0
 8009592:	2312      	movs	r3, #18
 8009594:	e7d0      	b.n	8009538 <_dtoa_r+0x238>
 8009596:	2301      	movs	r3, #1
 8009598:	930b      	str	r3, [sp, #44]	@ 0x2c
 800959a:	e7f5      	b.n	8009588 <_dtoa_r+0x288>
 800959c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	9307      	str	r3, [sp, #28]
 80095a2:	e7d7      	b.n	8009554 <_dtoa_r+0x254>
 80095a4:	3101      	adds	r1, #1
 80095a6:	0052      	lsls	r2, r2, #1
 80095a8:	e7d8      	b.n	800955c <_dtoa_r+0x25c>
 80095aa:	bf00      	nop
 80095ac:	f3af 8000 	nop.w
 80095b0:	636f4361 	.word	0x636f4361
 80095b4:	3fd287a7 	.word	0x3fd287a7
 80095b8:	8b60c8b3 	.word	0x8b60c8b3
 80095bc:	3fc68a28 	.word	0x3fc68a28
 80095c0:	509f79fb 	.word	0x509f79fb
 80095c4:	3fd34413 	.word	0x3fd34413
 80095c8:	0800b93d 	.word	0x0800b93d
 80095cc:	0800b954 	.word	0x0800b954
 80095d0:	7ff00000 	.word	0x7ff00000
 80095d4:	0800b90d 	.word	0x0800b90d
 80095d8:	3ff80000 	.word	0x3ff80000
 80095dc:	0800ba50 	.word	0x0800ba50
 80095e0:	0800b9ac 	.word	0x0800b9ac
 80095e4:	0800b939 	.word	0x0800b939
 80095e8:	0800b90c 	.word	0x0800b90c
 80095ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80095f0:	6018      	str	r0, [r3, #0]
 80095f2:	9b07      	ldr	r3, [sp, #28]
 80095f4:	2b0e      	cmp	r3, #14
 80095f6:	f200 80a4 	bhi.w	8009742 <_dtoa_r+0x442>
 80095fa:	2c00      	cmp	r4, #0
 80095fc:	f000 80a1 	beq.w	8009742 <_dtoa_r+0x442>
 8009600:	2f00      	cmp	r7, #0
 8009602:	dd33      	ble.n	800966c <_dtoa_r+0x36c>
 8009604:	4bad      	ldr	r3, [pc, #692]	@ (80098bc <_dtoa_r+0x5bc>)
 8009606:	f007 020f 	and.w	r2, r7, #15
 800960a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800960e:	ed93 7b00 	vldr	d7, [r3]
 8009612:	05f8      	lsls	r0, r7, #23
 8009614:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009618:	ea4f 1427 	mov.w	r4, r7, asr #4
 800961c:	d516      	bpl.n	800964c <_dtoa_r+0x34c>
 800961e:	4ba8      	ldr	r3, [pc, #672]	@ (80098c0 <_dtoa_r+0x5c0>)
 8009620:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009624:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009628:	f7f7 f938 	bl	800089c <__aeabi_ddiv>
 800962c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009630:	f004 040f 	and.w	r4, r4, #15
 8009634:	2603      	movs	r6, #3
 8009636:	4da2      	ldr	r5, [pc, #648]	@ (80098c0 <_dtoa_r+0x5c0>)
 8009638:	b954      	cbnz	r4, 8009650 <_dtoa_r+0x350>
 800963a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800963e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009642:	f7f7 f92b 	bl	800089c <__aeabi_ddiv>
 8009646:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800964a:	e028      	b.n	800969e <_dtoa_r+0x39e>
 800964c:	2602      	movs	r6, #2
 800964e:	e7f2      	b.n	8009636 <_dtoa_r+0x336>
 8009650:	07e1      	lsls	r1, r4, #31
 8009652:	d508      	bpl.n	8009666 <_dtoa_r+0x366>
 8009654:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009658:	e9d5 2300 	ldrd	r2, r3, [r5]
 800965c:	f7f6 fff4 	bl	8000648 <__aeabi_dmul>
 8009660:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009664:	3601      	adds	r6, #1
 8009666:	1064      	asrs	r4, r4, #1
 8009668:	3508      	adds	r5, #8
 800966a:	e7e5      	b.n	8009638 <_dtoa_r+0x338>
 800966c:	f000 80d2 	beq.w	8009814 <_dtoa_r+0x514>
 8009670:	427c      	negs	r4, r7
 8009672:	4b92      	ldr	r3, [pc, #584]	@ (80098bc <_dtoa_r+0x5bc>)
 8009674:	4d92      	ldr	r5, [pc, #584]	@ (80098c0 <_dtoa_r+0x5c0>)
 8009676:	f004 020f 	and.w	r2, r4, #15
 800967a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800967e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009682:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009686:	f7f6 ffdf 	bl	8000648 <__aeabi_dmul>
 800968a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800968e:	1124      	asrs	r4, r4, #4
 8009690:	2300      	movs	r3, #0
 8009692:	2602      	movs	r6, #2
 8009694:	2c00      	cmp	r4, #0
 8009696:	f040 80b2 	bne.w	80097fe <_dtoa_r+0x4fe>
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1d3      	bne.n	8009646 <_dtoa_r+0x346>
 800969e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80096a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f000 80b7 	beq.w	8009818 <_dtoa_r+0x518>
 80096aa:	4b86      	ldr	r3, [pc, #536]	@ (80098c4 <_dtoa_r+0x5c4>)
 80096ac:	2200      	movs	r2, #0
 80096ae:	4620      	mov	r0, r4
 80096b0:	4629      	mov	r1, r5
 80096b2:	f7f7 fa3b 	bl	8000b2c <__aeabi_dcmplt>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	f000 80ae 	beq.w	8009818 <_dtoa_r+0x518>
 80096bc:	9b07      	ldr	r3, [sp, #28]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f000 80aa 	beq.w	8009818 <_dtoa_r+0x518>
 80096c4:	9b00      	ldr	r3, [sp, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	dd37      	ble.n	800973a <_dtoa_r+0x43a>
 80096ca:	1e7b      	subs	r3, r7, #1
 80096cc:	9304      	str	r3, [sp, #16]
 80096ce:	4620      	mov	r0, r4
 80096d0:	4b7d      	ldr	r3, [pc, #500]	@ (80098c8 <_dtoa_r+0x5c8>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	4629      	mov	r1, r5
 80096d6:	f7f6 ffb7 	bl	8000648 <__aeabi_dmul>
 80096da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096de:	9c00      	ldr	r4, [sp, #0]
 80096e0:	3601      	adds	r6, #1
 80096e2:	4630      	mov	r0, r6
 80096e4:	f7f6 ff46 	bl	8000574 <__aeabi_i2d>
 80096e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096ec:	f7f6 ffac 	bl	8000648 <__aeabi_dmul>
 80096f0:	4b76      	ldr	r3, [pc, #472]	@ (80098cc <_dtoa_r+0x5cc>)
 80096f2:	2200      	movs	r2, #0
 80096f4:	f7f6 fdf2 	bl	80002dc <__adddf3>
 80096f8:	4605      	mov	r5, r0
 80096fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80096fe:	2c00      	cmp	r4, #0
 8009700:	f040 808d 	bne.w	800981e <_dtoa_r+0x51e>
 8009704:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009708:	4b71      	ldr	r3, [pc, #452]	@ (80098d0 <_dtoa_r+0x5d0>)
 800970a:	2200      	movs	r2, #0
 800970c:	f7f6 fde4 	bl	80002d8 <__aeabi_dsub>
 8009710:	4602      	mov	r2, r0
 8009712:	460b      	mov	r3, r1
 8009714:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009718:	462a      	mov	r2, r5
 800971a:	4633      	mov	r3, r6
 800971c:	f7f7 fa24 	bl	8000b68 <__aeabi_dcmpgt>
 8009720:	2800      	cmp	r0, #0
 8009722:	f040 828b 	bne.w	8009c3c <_dtoa_r+0x93c>
 8009726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800972a:	462a      	mov	r2, r5
 800972c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009730:	f7f7 f9fc 	bl	8000b2c <__aeabi_dcmplt>
 8009734:	2800      	cmp	r0, #0
 8009736:	f040 8128 	bne.w	800998a <_dtoa_r+0x68a>
 800973a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800973e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009742:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009744:	2b00      	cmp	r3, #0
 8009746:	f2c0 815a 	blt.w	80099fe <_dtoa_r+0x6fe>
 800974a:	2f0e      	cmp	r7, #14
 800974c:	f300 8157 	bgt.w	80099fe <_dtoa_r+0x6fe>
 8009750:	4b5a      	ldr	r3, [pc, #360]	@ (80098bc <_dtoa_r+0x5bc>)
 8009752:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009756:	ed93 7b00 	vldr	d7, [r3]
 800975a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800975c:	2b00      	cmp	r3, #0
 800975e:	ed8d 7b00 	vstr	d7, [sp]
 8009762:	da03      	bge.n	800976c <_dtoa_r+0x46c>
 8009764:	9b07      	ldr	r3, [sp, #28]
 8009766:	2b00      	cmp	r3, #0
 8009768:	f340 8101 	ble.w	800996e <_dtoa_r+0x66e>
 800976c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009770:	4656      	mov	r6, sl
 8009772:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009776:	4620      	mov	r0, r4
 8009778:	4629      	mov	r1, r5
 800977a:	f7f7 f88f 	bl	800089c <__aeabi_ddiv>
 800977e:	f7f7 fa13 	bl	8000ba8 <__aeabi_d2iz>
 8009782:	4680      	mov	r8, r0
 8009784:	f7f6 fef6 	bl	8000574 <__aeabi_i2d>
 8009788:	e9dd 2300 	ldrd	r2, r3, [sp]
 800978c:	f7f6 ff5c 	bl	8000648 <__aeabi_dmul>
 8009790:	4602      	mov	r2, r0
 8009792:	460b      	mov	r3, r1
 8009794:	4620      	mov	r0, r4
 8009796:	4629      	mov	r1, r5
 8009798:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800979c:	f7f6 fd9c 	bl	80002d8 <__aeabi_dsub>
 80097a0:	f806 4b01 	strb.w	r4, [r6], #1
 80097a4:	9d07      	ldr	r5, [sp, #28]
 80097a6:	eba6 040a 	sub.w	r4, r6, sl
 80097aa:	42a5      	cmp	r5, r4
 80097ac:	4602      	mov	r2, r0
 80097ae:	460b      	mov	r3, r1
 80097b0:	f040 8117 	bne.w	80099e2 <_dtoa_r+0x6e2>
 80097b4:	f7f6 fd92 	bl	80002dc <__adddf3>
 80097b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097bc:	4604      	mov	r4, r0
 80097be:	460d      	mov	r5, r1
 80097c0:	f7f7 f9d2 	bl	8000b68 <__aeabi_dcmpgt>
 80097c4:	2800      	cmp	r0, #0
 80097c6:	f040 80f9 	bne.w	80099bc <_dtoa_r+0x6bc>
 80097ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097ce:	4620      	mov	r0, r4
 80097d0:	4629      	mov	r1, r5
 80097d2:	f7f7 f9a1 	bl	8000b18 <__aeabi_dcmpeq>
 80097d6:	b118      	cbz	r0, 80097e0 <_dtoa_r+0x4e0>
 80097d8:	f018 0f01 	tst.w	r8, #1
 80097dc:	f040 80ee 	bne.w	80099bc <_dtoa_r+0x6bc>
 80097e0:	4649      	mov	r1, r9
 80097e2:	4658      	mov	r0, fp
 80097e4:	f000 fc90 	bl	800a108 <_Bfree>
 80097e8:	2300      	movs	r3, #0
 80097ea:	7033      	strb	r3, [r6, #0]
 80097ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80097ee:	3701      	adds	r7, #1
 80097f0:	601f      	str	r7, [r3, #0]
 80097f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f000 831d 	beq.w	8009e34 <_dtoa_r+0xb34>
 80097fa:	601e      	str	r6, [r3, #0]
 80097fc:	e31a      	b.n	8009e34 <_dtoa_r+0xb34>
 80097fe:	07e2      	lsls	r2, r4, #31
 8009800:	d505      	bpl.n	800980e <_dtoa_r+0x50e>
 8009802:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009806:	f7f6 ff1f 	bl	8000648 <__aeabi_dmul>
 800980a:	3601      	adds	r6, #1
 800980c:	2301      	movs	r3, #1
 800980e:	1064      	asrs	r4, r4, #1
 8009810:	3508      	adds	r5, #8
 8009812:	e73f      	b.n	8009694 <_dtoa_r+0x394>
 8009814:	2602      	movs	r6, #2
 8009816:	e742      	b.n	800969e <_dtoa_r+0x39e>
 8009818:	9c07      	ldr	r4, [sp, #28]
 800981a:	9704      	str	r7, [sp, #16]
 800981c:	e761      	b.n	80096e2 <_dtoa_r+0x3e2>
 800981e:	4b27      	ldr	r3, [pc, #156]	@ (80098bc <_dtoa_r+0x5bc>)
 8009820:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009822:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009826:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800982a:	4454      	add	r4, sl
 800982c:	2900      	cmp	r1, #0
 800982e:	d053      	beq.n	80098d8 <_dtoa_r+0x5d8>
 8009830:	4928      	ldr	r1, [pc, #160]	@ (80098d4 <_dtoa_r+0x5d4>)
 8009832:	2000      	movs	r0, #0
 8009834:	f7f7 f832 	bl	800089c <__aeabi_ddiv>
 8009838:	4633      	mov	r3, r6
 800983a:	462a      	mov	r2, r5
 800983c:	f7f6 fd4c 	bl	80002d8 <__aeabi_dsub>
 8009840:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009844:	4656      	mov	r6, sl
 8009846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800984a:	f7f7 f9ad 	bl	8000ba8 <__aeabi_d2iz>
 800984e:	4605      	mov	r5, r0
 8009850:	f7f6 fe90 	bl	8000574 <__aeabi_i2d>
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800985c:	f7f6 fd3c 	bl	80002d8 <__aeabi_dsub>
 8009860:	3530      	adds	r5, #48	@ 0x30
 8009862:	4602      	mov	r2, r0
 8009864:	460b      	mov	r3, r1
 8009866:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800986a:	f806 5b01 	strb.w	r5, [r6], #1
 800986e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009872:	f7f7 f95b 	bl	8000b2c <__aeabi_dcmplt>
 8009876:	2800      	cmp	r0, #0
 8009878:	d171      	bne.n	800995e <_dtoa_r+0x65e>
 800987a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800987e:	4911      	ldr	r1, [pc, #68]	@ (80098c4 <_dtoa_r+0x5c4>)
 8009880:	2000      	movs	r0, #0
 8009882:	f7f6 fd29 	bl	80002d8 <__aeabi_dsub>
 8009886:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800988a:	f7f7 f94f 	bl	8000b2c <__aeabi_dcmplt>
 800988e:	2800      	cmp	r0, #0
 8009890:	f040 8095 	bne.w	80099be <_dtoa_r+0x6be>
 8009894:	42a6      	cmp	r6, r4
 8009896:	f43f af50 	beq.w	800973a <_dtoa_r+0x43a>
 800989a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800989e:	4b0a      	ldr	r3, [pc, #40]	@ (80098c8 <_dtoa_r+0x5c8>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	f7f6 fed1 	bl	8000648 <__aeabi_dmul>
 80098a6:	4b08      	ldr	r3, [pc, #32]	@ (80098c8 <_dtoa_r+0x5c8>)
 80098a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80098ac:	2200      	movs	r2, #0
 80098ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098b2:	f7f6 fec9 	bl	8000648 <__aeabi_dmul>
 80098b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098ba:	e7c4      	b.n	8009846 <_dtoa_r+0x546>
 80098bc:	0800ba50 	.word	0x0800ba50
 80098c0:	0800ba28 	.word	0x0800ba28
 80098c4:	3ff00000 	.word	0x3ff00000
 80098c8:	40240000 	.word	0x40240000
 80098cc:	401c0000 	.word	0x401c0000
 80098d0:	40140000 	.word	0x40140000
 80098d4:	3fe00000 	.word	0x3fe00000
 80098d8:	4631      	mov	r1, r6
 80098da:	4628      	mov	r0, r5
 80098dc:	f7f6 feb4 	bl	8000648 <__aeabi_dmul>
 80098e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80098e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80098e6:	4656      	mov	r6, sl
 80098e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098ec:	f7f7 f95c 	bl	8000ba8 <__aeabi_d2iz>
 80098f0:	4605      	mov	r5, r0
 80098f2:	f7f6 fe3f 	bl	8000574 <__aeabi_i2d>
 80098f6:	4602      	mov	r2, r0
 80098f8:	460b      	mov	r3, r1
 80098fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098fe:	f7f6 fceb 	bl	80002d8 <__aeabi_dsub>
 8009902:	3530      	adds	r5, #48	@ 0x30
 8009904:	f806 5b01 	strb.w	r5, [r6], #1
 8009908:	4602      	mov	r2, r0
 800990a:	460b      	mov	r3, r1
 800990c:	42a6      	cmp	r6, r4
 800990e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009912:	f04f 0200 	mov.w	r2, #0
 8009916:	d124      	bne.n	8009962 <_dtoa_r+0x662>
 8009918:	4bac      	ldr	r3, [pc, #688]	@ (8009bcc <_dtoa_r+0x8cc>)
 800991a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800991e:	f7f6 fcdd 	bl	80002dc <__adddf3>
 8009922:	4602      	mov	r2, r0
 8009924:	460b      	mov	r3, r1
 8009926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800992a:	f7f7 f91d 	bl	8000b68 <__aeabi_dcmpgt>
 800992e:	2800      	cmp	r0, #0
 8009930:	d145      	bne.n	80099be <_dtoa_r+0x6be>
 8009932:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009936:	49a5      	ldr	r1, [pc, #660]	@ (8009bcc <_dtoa_r+0x8cc>)
 8009938:	2000      	movs	r0, #0
 800993a:	f7f6 fccd 	bl	80002d8 <__aeabi_dsub>
 800993e:	4602      	mov	r2, r0
 8009940:	460b      	mov	r3, r1
 8009942:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009946:	f7f7 f8f1 	bl	8000b2c <__aeabi_dcmplt>
 800994a:	2800      	cmp	r0, #0
 800994c:	f43f aef5 	beq.w	800973a <_dtoa_r+0x43a>
 8009950:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009952:	1e73      	subs	r3, r6, #1
 8009954:	9315      	str	r3, [sp, #84]	@ 0x54
 8009956:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800995a:	2b30      	cmp	r3, #48	@ 0x30
 800995c:	d0f8      	beq.n	8009950 <_dtoa_r+0x650>
 800995e:	9f04      	ldr	r7, [sp, #16]
 8009960:	e73e      	b.n	80097e0 <_dtoa_r+0x4e0>
 8009962:	4b9b      	ldr	r3, [pc, #620]	@ (8009bd0 <_dtoa_r+0x8d0>)
 8009964:	f7f6 fe70 	bl	8000648 <__aeabi_dmul>
 8009968:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800996c:	e7bc      	b.n	80098e8 <_dtoa_r+0x5e8>
 800996e:	d10c      	bne.n	800998a <_dtoa_r+0x68a>
 8009970:	4b98      	ldr	r3, [pc, #608]	@ (8009bd4 <_dtoa_r+0x8d4>)
 8009972:	2200      	movs	r2, #0
 8009974:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009978:	f7f6 fe66 	bl	8000648 <__aeabi_dmul>
 800997c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009980:	f7f7 f8e8 	bl	8000b54 <__aeabi_dcmpge>
 8009984:	2800      	cmp	r0, #0
 8009986:	f000 8157 	beq.w	8009c38 <_dtoa_r+0x938>
 800998a:	2400      	movs	r4, #0
 800998c:	4625      	mov	r5, r4
 800998e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009990:	43db      	mvns	r3, r3
 8009992:	9304      	str	r3, [sp, #16]
 8009994:	4656      	mov	r6, sl
 8009996:	2700      	movs	r7, #0
 8009998:	4621      	mov	r1, r4
 800999a:	4658      	mov	r0, fp
 800999c:	f000 fbb4 	bl	800a108 <_Bfree>
 80099a0:	2d00      	cmp	r5, #0
 80099a2:	d0dc      	beq.n	800995e <_dtoa_r+0x65e>
 80099a4:	b12f      	cbz	r7, 80099b2 <_dtoa_r+0x6b2>
 80099a6:	42af      	cmp	r7, r5
 80099a8:	d003      	beq.n	80099b2 <_dtoa_r+0x6b2>
 80099aa:	4639      	mov	r1, r7
 80099ac:	4658      	mov	r0, fp
 80099ae:	f000 fbab 	bl	800a108 <_Bfree>
 80099b2:	4629      	mov	r1, r5
 80099b4:	4658      	mov	r0, fp
 80099b6:	f000 fba7 	bl	800a108 <_Bfree>
 80099ba:	e7d0      	b.n	800995e <_dtoa_r+0x65e>
 80099bc:	9704      	str	r7, [sp, #16]
 80099be:	4633      	mov	r3, r6
 80099c0:	461e      	mov	r6, r3
 80099c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099c6:	2a39      	cmp	r2, #57	@ 0x39
 80099c8:	d107      	bne.n	80099da <_dtoa_r+0x6da>
 80099ca:	459a      	cmp	sl, r3
 80099cc:	d1f8      	bne.n	80099c0 <_dtoa_r+0x6c0>
 80099ce:	9a04      	ldr	r2, [sp, #16]
 80099d0:	3201      	adds	r2, #1
 80099d2:	9204      	str	r2, [sp, #16]
 80099d4:	2230      	movs	r2, #48	@ 0x30
 80099d6:	f88a 2000 	strb.w	r2, [sl]
 80099da:	781a      	ldrb	r2, [r3, #0]
 80099dc:	3201      	adds	r2, #1
 80099de:	701a      	strb	r2, [r3, #0]
 80099e0:	e7bd      	b.n	800995e <_dtoa_r+0x65e>
 80099e2:	4b7b      	ldr	r3, [pc, #492]	@ (8009bd0 <_dtoa_r+0x8d0>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	f7f6 fe2f 	bl	8000648 <__aeabi_dmul>
 80099ea:	2200      	movs	r2, #0
 80099ec:	2300      	movs	r3, #0
 80099ee:	4604      	mov	r4, r0
 80099f0:	460d      	mov	r5, r1
 80099f2:	f7f7 f891 	bl	8000b18 <__aeabi_dcmpeq>
 80099f6:	2800      	cmp	r0, #0
 80099f8:	f43f aebb 	beq.w	8009772 <_dtoa_r+0x472>
 80099fc:	e6f0      	b.n	80097e0 <_dtoa_r+0x4e0>
 80099fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009a00:	2a00      	cmp	r2, #0
 8009a02:	f000 80db 	beq.w	8009bbc <_dtoa_r+0x8bc>
 8009a06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a08:	2a01      	cmp	r2, #1
 8009a0a:	f300 80bf 	bgt.w	8009b8c <_dtoa_r+0x88c>
 8009a0e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009a10:	2a00      	cmp	r2, #0
 8009a12:	f000 80b7 	beq.w	8009b84 <_dtoa_r+0x884>
 8009a16:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009a1a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009a1c:	4646      	mov	r6, r8
 8009a1e:	9a08      	ldr	r2, [sp, #32]
 8009a20:	2101      	movs	r1, #1
 8009a22:	441a      	add	r2, r3
 8009a24:	4658      	mov	r0, fp
 8009a26:	4498      	add	r8, r3
 8009a28:	9208      	str	r2, [sp, #32]
 8009a2a:	f000 fc21 	bl	800a270 <__i2b>
 8009a2e:	4605      	mov	r5, r0
 8009a30:	b15e      	cbz	r6, 8009a4a <_dtoa_r+0x74a>
 8009a32:	9b08      	ldr	r3, [sp, #32]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	dd08      	ble.n	8009a4a <_dtoa_r+0x74a>
 8009a38:	42b3      	cmp	r3, r6
 8009a3a:	9a08      	ldr	r2, [sp, #32]
 8009a3c:	bfa8      	it	ge
 8009a3e:	4633      	movge	r3, r6
 8009a40:	eba8 0803 	sub.w	r8, r8, r3
 8009a44:	1af6      	subs	r6, r6, r3
 8009a46:	1ad3      	subs	r3, r2, r3
 8009a48:	9308      	str	r3, [sp, #32]
 8009a4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a4c:	b1f3      	cbz	r3, 8009a8c <_dtoa_r+0x78c>
 8009a4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f000 80b7 	beq.w	8009bc4 <_dtoa_r+0x8c4>
 8009a56:	b18c      	cbz	r4, 8009a7c <_dtoa_r+0x77c>
 8009a58:	4629      	mov	r1, r5
 8009a5a:	4622      	mov	r2, r4
 8009a5c:	4658      	mov	r0, fp
 8009a5e:	f000 fcc7 	bl	800a3f0 <__pow5mult>
 8009a62:	464a      	mov	r2, r9
 8009a64:	4601      	mov	r1, r0
 8009a66:	4605      	mov	r5, r0
 8009a68:	4658      	mov	r0, fp
 8009a6a:	f000 fc17 	bl	800a29c <__multiply>
 8009a6e:	4649      	mov	r1, r9
 8009a70:	9004      	str	r0, [sp, #16]
 8009a72:	4658      	mov	r0, fp
 8009a74:	f000 fb48 	bl	800a108 <_Bfree>
 8009a78:	9b04      	ldr	r3, [sp, #16]
 8009a7a:	4699      	mov	r9, r3
 8009a7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a7e:	1b1a      	subs	r2, r3, r4
 8009a80:	d004      	beq.n	8009a8c <_dtoa_r+0x78c>
 8009a82:	4649      	mov	r1, r9
 8009a84:	4658      	mov	r0, fp
 8009a86:	f000 fcb3 	bl	800a3f0 <__pow5mult>
 8009a8a:	4681      	mov	r9, r0
 8009a8c:	2101      	movs	r1, #1
 8009a8e:	4658      	mov	r0, fp
 8009a90:	f000 fbee 	bl	800a270 <__i2b>
 8009a94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a96:	4604      	mov	r4, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f000 81cf 	beq.w	8009e3c <_dtoa_r+0xb3c>
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	4601      	mov	r1, r0
 8009aa2:	4658      	mov	r0, fp
 8009aa4:	f000 fca4 	bl	800a3f0 <__pow5mult>
 8009aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	4604      	mov	r4, r0
 8009aae:	f300 8095 	bgt.w	8009bdc <_dtoa_r+0x8dc>
 8009ab2:	9b02      	ldr	r3, [sp, #8]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f040 8087 	bne.w	8009bc8 <_dtoa_r+0x8c8>
 8009aba:	9b03      	ldr	r3, [sp, #12]
 8009abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f040 8089 	bne.w	8009bd8 <_dtoa_r+0x8d8>
 8009ac6:	9b03      	ldr	r3, [sp, #12]
 8009ac8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009acc:	0d1b      	lsrs	r3, r3, #20
 8009ace:	051b      	lsls	r3, r3, #20
 8009ad0:	b12b      	cbz	r3, 8009ade <_dtoa_r+0x7de>
 8009ad2:	9b08      	ldr	r3, [sp, #32]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	9308      	str	r3, [sp, #32]
 8009ad8:	f108 0801 	add.w	r8, r8, #1
 8009adc:	2301      	movs	r3, #1
 8009ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ae0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f000 81b0 	beq.w	8009e48 <_dtoa_r+0xb48>
 8009ae8:	6923      	ldr	r3, [r4, #16]
 8009aea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009aee:	6918      	ldr	r0, [r3, #16]
 8009af0:	f000 fb72 	bl	800a1d8 <__hi0bits>
 8009af4:	f1c0 0020 	rsb	r0, r0, #32
 8009af8:	9b08      	ldr	r3, [sp, #32]
 8009afa:	4418      	add	r0, r3
 8009afc:	f010 001f 	ands.w	r0, r0, #31
 8009b00:	d077      	beq.n	8009bf2 <_dtoa_r+0x8f2>
 8009b02:	f1c0 0320 	rsb	r3, r0, #32
 8009b06:	2b04      	cmp	r3, #4
 8009b08:	dd6b      	ble.n	8009be2 <_dtoa_r+0x8e2>
 8009b0a:	9b08      	ldr	r3, [sp, #32]
 8009b0c:	f1c0 001c 	rsb	r0, r0, #28
 8009b10:	4403      	add	r3, r0
 8009b12:	4480      	add	r8, r0
 8009b14:	4406      	add	r6, r0
 8009b16:	9308      	str	r3, [sp, #32]
 8009b18:	f1b8 0f00 	cmp.w	r8, #0
 8009b1c:	dd05      	ble.n	8009b2a <_dtoa_r+0x82a>
 8009b1e:	4649      	mov	r1, r9
 8009b20:	4642      	mov	r2, r8
 8009b22:	4658      	mov	r0, fp
 8009b24:	f000 fcbe 	bl	800a4a4 <__lshift>
 8009b28:	4681      	mov	r9, r0
 8009b2a:	9b08      	ldr	r3, [sp, #32]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	dd05      	ble.n	8009b3c <_dtoa_r+0x83c>
 8009b30:	4621      	mov	r1, r4
 8009b32:	461a      	mov	r2, r3
 8009b34:	4658      	mov	r0, fp
 8009b36:	f000 fcb5 	bl	800a4a4 <__lshift>
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d059      	beq.n	8009bf6 <_dtoa_r+0x8f6>
 8009b42:	4621      	mov	r1, r4
 8009b44:	4648      	mov	r0, r9
 8009b46:	f000 fd19 	bl	800a57c <__mcmp>
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	da53      	bge.n	8009bf6 <_dtoa_r+0x8f6>
 8009b4e:	1e7b      	subs	r3, r7, #1
 8009b50:	9304      	str	r3, [sp, #16]
 8009b52:	4649      	mov	r1, r9
 8009b54:	2300      	movs	r3, #0
 8009b56:	220a      	movs	r2, #10
 8009b58:	4658      	mov	r0, fp
 8009b5a:	f000 faf7 	bl	800a14c <__multadd>
 8009b5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b60:	4681      	mov	r9, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f000 8172 	beq.w	8009e4c <_dtoa_r+0xb4c>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	4629      	mov	r1, r5
 8009b6c:	220a      	movs	r2, #10
 8009b6e:	4658      	mov	r0, fp
 8009b70:	f000 faec 	bl	800a14c <__multadd>
 8009b74:	9b00      	ldr	r3, [sp, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	4605      	mov	r5, r0
 8009b7a:	dc67      	bgt.n	8009c4c <_dtoa_r+0x94c>
 8009b7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	dc41      	bgt.n	8009c06 <_dtoa_r+0x906>
 8009b82:	e063      	b.n	8009c4c <_dtoa_r+0x94c>
 8009b84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009b86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009b8a:	e746      	b.n	8009a1a <_dtoa_r+0x71a>
 8009b8c:	9b07      	ldr	r3, [sp, #28]
 8009b8e:	1e5c      	subs	r4, r3, #1
 8009b90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b92:	42a3      	cmp	r3, r4
 8009b94:	bfbf      	itttt	lt
 8009b96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009b98:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009b9a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009b9c:	1ae3      	sublt	r3, r4, r3
 8009b9e:	bfb4      	ite	lt
 8009ba0:	18d2      	addlt	r2, r2, r3
 8009ba2:	1b1c      	subge	r4, r3, r4
 8009ba4:	9b07      	ldr	r3, [sp, #28]
 8009ba6:	bfbc      	itt	lt
 8009ba8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009baa:	2400      	movlt	r4, #0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	bfb5      	itete	lt
 8009bb0:	eba8 0603 	sublt.w	r6, r8, r3
 8009bb4:	9b07      	ldrge	r3, [sp, #28]
 8009bb6:	2300      	movlt	r3, #0
 8009bb8:	4646      	movge	r6, r8
 8009bba:	e730      	b.n	8009a1e <_dtoa_r+0x71e>
 8009bbc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009bbe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009bc0:	4646      	mov	r6, r8
 8009bc2:	e735      	b.n	8009a30 <_dtoa_r+0x730>
 8009bc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009bc6:	e75c      	b.n	8009a82 <_dtoa_r+0x782>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	e788      	b.n	8009ade <_dtoa_r+0x7de>
 8009bcc:	3fe00000 	.word	0x3fe00000
 8009bd0:	40240000 	.word	0x40240000
 8009bd4:	40140000 	.word	0x40140000
 8009bd8:	9b02      	ldr	r3, [sp, #8]
 8009bda:	e780      	b.n	8009ade <_dtoa_r+0x7de>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	930a      	str	r3, [sp, #40]	@ 0x28
 8009be0:	e782      	b.n	8009ae8 <_dtoa_r+0x7e8>
 8009be2:	d099      	beq.n	8009b18 <_dtoa_r+0x818>
 8009be4:	9a08      	ldr	r2, [sp, #32]
 8009be6:	331c      	adds	r3, #28
 8009be8:	441a      	add	r2, r3
 8009bea:	4498      	add	r8, r3
 8009bec:	441e      	add	r6, r3
 8009bee:	9208      	str	r2, [sp, #32]
 8009bf0:	e792      	b.n	8009b18 <_dtoa_r+0x818>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	e7f6      	b.n	8009be4 <_dtoa_r+0x8e4>
 8009bf6:	9b07      	ldr	r3, [sp, #28]
 8009bf8:	9704      	str	r7, [sp, #16]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	dc20      	bgt.n	8009c40 <_dtoa_r+0x940>
 8009bfe:	9300      	str	r3, [sp, #0]
 8009c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	dd1e      	ble.n	8009c44 <_dtoa_r+0x944>
 8009c06:	9b00      	ldr	r3, [sp, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f47f aec0 	bne.w	800998e <_dtoa_r+0x68e>
 8009c0e:	4621      	mov	r1, r4
 8009c10:	2205      	movs	r2, #5
 8009c12:	4658      	mov	r0, fp
 8009c14:	f000 fa9a 	bl	800a14c <__multadd>
 8009c18:	4601      	mov	r1, r0
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	4648      	mov	r0, r9
 8009c1e:	f000 fcad 	bl	800a57c <__mcmp>
 8009c22:	2800      	cmp	r0, #0
 8009c24:	f77f aeb3 	ble.w	800998e <_dtoa_r+0x68e>
 8009c28:	4656      	mov	r6, sl
 8009c2a:	2331      	movs	r3, #49	@ 0x31
 8009c2c:	f806 3b01 	strb.w	r3, [r6], #1
 8009c30:	9b04      	ldr	r3, [sp, #16]
 8009c32:	3301      	adds	r3, #1
 8009c34:	9304      	str	r3, [sp, #16]
 8009c36:	e6ae      	b.n	8009996 <_dtoa_r+0x696>
 8009c38:	9c07      	ldr	r4, [sp, #28]
 8009c3a:	9704      	str	r7, [sp, #16]
 8009c3c:	4625      	mov	r5, r4
 8009c3e:	e7f3      	b.n	8009c28 <_dtoa_r+0x928>
 8009c40:	9b07      	ldr	r3, [sp, #28]
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f000 8104 	beq.w	8009e54 <_dtoa_r+0xb54>
 8009c4c:	2e00      	cmp	r6, #0
 8009c4e:	dd05      	ble.n	8009c5c <_dtoa_r+0x95c>
 8009c50:	4629      	mov	r1, r5
 8009c52:	4632      	mov	r2, r6
 8009c54:	4658      	mov	r0, fp
 8009c56:	f000 fc25 	bl	800a4a4 <__lshift>
 8009c5a:	4605      	mov	r5, r0
 8009c5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d05a      	beq.n	8009d18 <_dtoa_r+0xa18>
 8009c62:	6869      	ldr	r1, [r5, #4]
 8009c64:	4658      	mov	r0, fp
 8009c66:	f000 fa0f 	bl	800a088 <_Balloc>
 8009c6a:	4606      	mov	r6, r0
 8009c6c:	b928      	cbnz	r0, 8009c7a <_dtoa_r+0x97a>
 8009c6e:	4b84      	ldr	r3, [pc, #528]	@ (8009e80 <_dtoa_r+0xb80>)
 8009c70:	4602      	mov	r2, r0
 8009c72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009c76:	f7ff bb5a 	b.w	800932e <_dtoa_r+0x2e>
 8009c7a:	692a      	ldr	r2, [r5, #16]
 8009c7c:	3202      	adds	r2, #2
 8009c7e:	0092      	lsls	r2, r2, #2
 8009c80:	f105 010c 	add.w	r1, r5, #12
 8009c84:	300c      	adds	r0, #12
 8009c86:	f7ff faa4 	bl	80091d2 <memcpy>
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	4631      	mov	r1, r6
 8009c8e:	4658      	mov	r0, fp
 8009c90:	f000 fc08 	bl	800a4a4 <__lshift>
 8009c94:	f10a 0301 	add.w	r3, sl, #1
 8009c98:	9307      	str	r3, [sp, #28]
 8009c9a:	9b00      	ldr	r3, [sp, #0]
 8009c9c:	4453      	add	r3, sl
 8009c9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ca0:	9b02      	ldr	r3, [sp, #8]
 8009ca2:	f003 0301 	and.w	r3, r3, #1
 8009ca6:	462f      	mov	r7, r5
 8009ca8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009caa:	4605      	mov	r5, r0
 8009cac:	9b07      	ldr	r3, [sp, #28]
 8009cae:	4621      	mov	r1, r4
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	4648      	mov	r0, r9
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	f7ff fa9a 	bl	80091ee <quorem>
 8009cba:	4639      	mov	r1, r7
 8009cbc:	9002      	str	r0, [sp, #8]
 8009cbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009cc2:	4648      	mov	r0, r9
 8009cc4:	f000 fc5a 	bl	800a57c <__mcmp>
 8009cc8:	462a      	mov	r2, r5
 8009cca:	9008      	str	r0, [sp, #32]
 8009ccc:	4621      	mov	r1, r4
 8009cce:	4658      	mov	r0, fp
 8009cd0:	f000 fc70 	bl	800a5b4 <__mdiff>
 8009cd4:	68c2      	ldr	r2, [r0, #12]
 8009cd6:	4606      	mov	r6, r0
 8009cd8:	bb02      	cbnz	r2, 8009d1c <_dtoa_r+0xa1c>
 8009cda:	4601      	mov	r1, r0
 8009cdc:	4648      	mov	r0, r9
 8009cde:	f000 fc4d 	bl	800a57c <__mcmp>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	4631      	mov	r1, r6
 8009ce6:	4658      	mov	r0, fp
 8009ce8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009cea:	f000 fa0d 	bl	800a108 <_Bfree>
 8009cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cf2:	9e07      	ldr	r6, [sp, #28]
 8009cf4:	ea43 0102 	orr.w	r1, r3, r2
 8009cf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cfa:	4319      	orrs	r1, r3
 8009cfc:	d110      	bne.n	8009d20 <_dtoa_r+0xa20>
 8009cfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d02:	d029      	beq.n	8009d58 <_dtoa_r+0xa58>
 8009d04:	9b08      	ldr	r3, [sp, #32]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	dd02      	ble.n	8009d10 <_dtoa_r+0xa10>
 8009d0a:	9b02      	ldr	r3, [sp, #8]
 8009d0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009d10:	9b00      	ldr	r3, [sp, #0]
 8009d12:	f883 8000 	strb.w	r8, [r3]
 8009d16:	e63f      	b.n	8009998 <_dtoa_r+0x698>
 8009d18:	4628      	mov	r0, r5
 8009d1a:	e7bb      	b.n	8009c94 <_dtoa_r+0x994>
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	e7e1      	b.n	8009ce4 <_dtoa_r+0x9e4>
 8009d20:	9b08      	ldr	r3, [sp, #32]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	db04      	blt.n	8009d30 <_dtoa_r+0xa30>
 8009d26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d28:	430b      	orrs	r3, r1
 8009d2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d2c:	430b      	orrs	r3, r1
 8009d2e:	d120      	bne.n	8009d72 <_dtoa_r+0xa72>
 8009d30:	2a00      	cmp	r2, #0
 8009d32:	dded      	ble.n	8009d10 <_dtoa_r+0xa10>
 8009d34:	4649      	mov	r1, r9
 8009d36:	2201      	movs	r2, #1
 8009d38:	4658      	mov	r0, fp
 8009d3a:	f000 fbb3 	bl	800a4a4 <__lshift>
 8009d3e:	4621      	mov	r1, r4
 8009d40:	4681      	mov	r9, r0
 8009d42:	f000 fc1b 	bl	800a57c <__mcmp>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	dc03      	bgt.n	8009d52 <_dtoa_r+0xa52>
 8009d4a:	d1e1      	bne.n	8009d10 <_dtoa_r+0xa10>
 8009d4c:	f018 0f01 	tst.w	r8, #1
 8009d50:	d0de      	beq.n	8009d10 <_dtoa_r+0xa10>
 8009d52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d56:	d1d8      	bne.n	8009d0a <_dtoa_r+0xa0a>
 8009d58:	9a00      	ldr	r2, [sp, #0]
 8009d5a:	2339      	movs	r3, #57	@ 0x39
 8009d5c:	7013      	strb	r3, [r2, #0]
 8009d5e:	4633      	mov	r3, r6
 8009d60:	461e      	mov	r6, r3
 8009d62:	3b01      	subs	r3, #1
 8009d64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009d68:	2a39      	cmp	r2, #57	@ 0x39
 8009d6a:	d052      	beq.n	8009e12 <_dtoa_r+0xb12>
 8009d6c:	3201      	adds	r2, #1
 8009d6e:	701a      	strb	r2, [r3, #0]
 8009d70:	e612      	b.n	8009998 <_dtoa_r+0x698>
 8009d72:	2a00      	cmp	r2, #0
 8009d74:	dd07      	ble.n	8009d86 <_dtoa_r+0xa86>
 8009d76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d7a:	d0ed      	beq.n	8009d58 <_dtoa_r+0xa58>
 8009d7c:	9a00      	ldr	r2, [sp, #0]
 8009d7e:	f108 0301 	add.w	r3, r8, #1
 8009d82:	7013      	strb	r3, [r2, #0]
 8009d84:	e608      	b.n	8009998 <_dtoa_r+0x698>
 8009d86:	9b07      	ldr	r3, [sp, #28]
 8009d88:	9a07      	ldr	r2, [sp, #28]
 8009d8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009d8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d028      	beq.n	8009de6 <_dtoa_r+0xae6>
 8009d94:	4649      	mov	r1, r9
 8009d96:	2300      	movs	r3, #0
 8009d98:	220a      	movs	r2, #10
 8009d9a:	4658      	mov	r0, fp
 8009d9c:	f000 f9d6 	bl	800a14c <__multadd>
 8009da0:	42af      	cmp	r7, r5
 8009da2:	4681      	mov	r9, r0
 8009da4:	f04f 0300 	mov.w	r3, #0
 8009da8:	f04f 020a 	mov.w	r2, #10
 8009dac:	4639      	mov	r1, r7
 8009dae:	4658      	mov	r0, fp
 8009db0:	d107      	bne.n	8009dc2 <_dtoa_r+0xac2>
 8009db2:	f000 f9cb 	bl	800a14c <__multadd>
 8009db6:	4607      	mov	r7, r0
 8009db8:	4605      	mov	r5, r0
 8009dba:	9b07      	ldr	r3, [sp, #28]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	9307      	str	r3, [sp, #28]
 8009dc0:	e774      	b.n	8009cac <_dtoa_r+0x9ac>
 8009dc2:	f000 f9c3 	bl	800a14c <__multadd>
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	4607      	mov	r7, r0
 8009dca:	2300      	movs	r3, #0
 8009dcc:	220a      	movs	r2, #10
 8009dce:	4658      	mov	r0, fp
 8009dd0:	f000 f9bc 	bl	800a14c <__multadd>
 8009dd4:	4605      	mov	r5, r0
 8009dd6:	e7f0      	b.n	8009dba <_dtoa_r+0xaba>
 8009dd8:	9b00      	ldr	r3, [sp, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	bfcc      	ite	gt
 8009dde:	461e      	movgt	r6, r3
 8009de0:	2601      	movle	r6, #1
 8009de2:	4456      	add	r6, sl
 8009de4:	2700      	movs	r7, #0
 8009de6:	4649      	mov	r1, r9
 8009de8:	2201      	movs	r2, #1
 8009dea:	4658      	mov	r0, fp
 8009dec:	f000 fb5a 	bl	800a4a4 <__lshift>
 8009df0:	4621      	mov	r1, r4
 8009df2:	4681      	mov	r9, r0
 8009df4:	f000 fbc2 	bl	800a57c <__mcmp>
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	dcb0      	bgt.n	8009d5e <_dtoa_r+0xa5e>
 8009dfc:	d102      	bne.n	8009e04 <_dtoa_r+0xb04>
 8009dfe:	f018 0f01 	tst.w	r8, #1
 8009e02:	d1ac      	bne.n	8009d5e <_dtoa_r+0xa5e>
 8009e04:	4633      	mov	r3, r6
 8009e06:	461e      	mov	r6, r3
 8009e08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e0c:	2a30      	cmp	r2, #48	@ 0x30
 8009e0e:	d0fa      	beq.n	8009e06 <_dtoa_r+0xb06>
 8009e10:	e5c2      	b.n	8009998 <_dtoa_r+0x698>
 8009e12:	459a      	cmp	sl, r3
 8009e14:	d1a4      	bne.n	8009d60 <_dtoa_r+0xa60>
 8009e16:	9b04      	ldr	r3, [sp, #16]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	9304      	str	r3, [sp, #16]
 8009e1c:	2331      	movs	r3, #49	@ 0x31
 8009e1e:	f88a 3000 	strb.w	r3, [sl]
 8009e22:	e5b9      	b.n	8009998 <_dtoa_r+0x698>
 8009e24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009e84 <_dtoa_r+0xb84>
 8009e2a:	b11b      	cbz	r3, 8009e34 <_dtoa_r+0xb34>
 8009e2c:	f10a 0308 	add.w	r3, sl, #8
 8009e30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009e32:	6013      	str	r3, [r2, #0]
 8009e34:	4650      	mov	r0, sl
 8009e36:	b019      	add	sp, #100	@ 0x64
 8009e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	f77f ae37 	ble.w	8009ab2 <_dtoa_r+0x7b2>
 8009e44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e46:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e48:	2001      	movs	r0, #1
 8009e4a:	e655      	b.n	8009af8 <_dtoa_r+0x7f8>
 8009e4c:	9b00      	ldr	r3, [sp, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f77f aed6 	ble.w	8009c00 <_dtoa_r+0x900>
 8009e54:	4656      	mov	r6, sl
 8009e56:	4621      	mov	r1, r4
 8009e58:	4648      	mov	r0, r9
 8009e5a:	f7ff f9c8 	bl	80091ee <quorem>
 8009e5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009e62:	f806 8b01 	strb.w	r8, [r6], #1
 8009e66:	9b00      	ldr	r3, [sp, #0]
 8009e68:	eba6 020a 	sub.w	r2, r6, sl
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	ddb3      	ble.n	8009dd8 <_dtoa_r+0xad8>
 8009e70:	4649      	mov	r1, r9
 8009e72:	2300      	movs	r3, #0
 8009e74:	220a      	movs	r2, #10
 8009e76:	4658      	mov	r0, fp
 8009e78:	f000 f968 	bl	800a14c <__multadd>
 8009e7c:	4681      	mov	r9, r0
 8009e7e:	e7ea      	b.n	8009e56 <_dtoa_r+0xb56>
 8009e80:	0800b9ac 	.word	0x0800b9ac
 8009e84:	0800b930 	.word	0x0800b930

08009e88 <_free_r>:
 8009e88:	b538      	push	{r3, r4, r5, lr}
 8009e8a:	4605      	mov	r5, r0
 8009e8c:	2900      	cmp	r1, #0
 8009e8e:	d041      	beq.n	8009f14 <_free_r+0x8c>
 8009e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e94:	1f0c      	subs	r4, r1, #4
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	bfb8      	it	lt
 8009e9a:	18e4      	addlt	r4, r4, r3
 8009e9c:	f000 f8e8 	bl	800a070 <__malloc_lock>
 8009ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8009f18 <_free_r+0x90>)
 8009ea2:	6813      	ldr	r3, [r2, #0]
 8009ea4:	b933      	cbnz	r3, 8009eb4 <_free_r+0x2c>
 8009ea6:	6063      	str	r3, [r4, #4]
 8009ea8:	6014      	str	r4, [r2, #0]
 8009eaa:	4628      	mov	r0, r5
 8009eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eb0:	f000 b8e4 	b.w	800a07c <__malloc_unlock>
 8009eb4:	42a3      	cmp	r3, r4
 8009eb6:	d908      	bls.n	8009eca <_free_r+0x42>
 8009eb8:	6820      	ldr	r0, [r4, #0]
 8009eba:	1821      	adds	r1, r4, r0
 8009ebc:	428b      	cmp	r3, r1
 8009ebe:	bf01      	itttt	eq
 8009ec0:	6819      	ldreq	r1, [r3, #0]
 8009ec2:	685b      	ldreq	r3, [r3, #4]
 8009ec4:	1809      	addeq	r1, r1, r0
 8009ec6:	6021      	streq	r1, [r4, #0]
 8009ec8:	e7ed      	b.n	8009ea6 <_free_r+0x1e>
 8009eca:	461a      	mov	r2, r3
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	b10b      	cbz	r3, 8009ed4 <_free_r+0x4c>
 8009ed0:	42a3      	cmp	r3, r4
 8009ed2:	d9fa      	bls.n	8009eca <_free_r+0x42>
 8009ed4:	6811      	ldr	r1, [r2, #0]
 8009ed6:	1850      	adds	r0, r2, r1
 8009ed8:	42a0      	cmp	r0, r4
 8009eda:	d10b      	bne.n	8009ef4 <_free_r+0x6c>
 8009edc:	6820      	ldr	r0, [r4, #0]
 8009ede:	4401      	add	r1, r0
 8009ee0:	1850      	adds	r0, r2, r1
 8009ee2:	4283      	cmp	r3, r0
 8009ee4:	6011      	str	r1, [r2, #0]
 8009ee6:	d1e0      	bne.n	8009eaa <_free_r+0x22>
 8009ee8:	6818      	ldr	r0, [r3, #0]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	6053      	str	r3, [r2, #4]
 8009eee:	4408      	add	r0, r1
 8009ef0:	6010      	str	r0, [r2, #0]
 8009ef2:	e7da      	b.n	8009eaa <_free_r+0x22>
 8009ef4:	d902      	bls.n	8009efc <_free_r+0x74>
 8009ef6:	230c      	movs	r3, #12
 8009ef8:	602b      	str	r3, [r5, #0]
 8009efa:	e7d6      	b.n	8009eaa <_free_r+0x22>
 8009efc:	6820      	ldr	r0, [r4, #0]
 8009efe:	1821      	adds	r1, r4, r0
 8009f00:	428b      	cmp	r3, r1
 8009f02:	bf04      	itt	eq
 8009f04:	6819      	ldreq	r1, [r3, #0]
 8009f06:	685b      	ldreq	r3, [r3, #4]
 8009f08:	6063      	str	r3, [r4, #4]
 8009f0a:	bf04      	itt	eq
 8009f0c:	1809      	addeq	r1, r1, r0
 8009f0e:	6021      	streq	r1, [r4, #0]
 8009f10:	6054      	str	r4, [r2, #4]
 8009f12:	e7ca      	b.n	8009eaa <_free_r+0x22>
 8009f14:	bd38      	pop	{r3, r4, r5, pc}
 8009f16:	bf00      	nop
 8009f18:	20000580 	.word	0x20000580

08009f1c <malloc>:
 8009f1c:	4b02      	ldr	r3, [pc, #8]	@ (8009f28 <malloc+0xc>)
 8009f1e:	4601      	mov	r1, r0
 8009f20:	6818      	ldr	r0, [r3, #0]
 8009f22:	f000 b825 	b.w	8009f70 <_malloc_r>
 8009f26:	bf00      	nop
 8009f28:	20000018 	.word	0x20000018

08009f2c <sbrk_aligned>:
 8009f2c:	b570      	push	{r4, r5, r6, lr}
 8009f2e:	4e0f      	ldr	r6, [pc, #60]	@ (8009f6c <sbrk_aligned+0x40>)
 8009f30:	460c      	mov	r4, r1
 8009f32:	6831      	ldr	r1, [r6, #0]
 8009f34:	4605      	mov	r5, r0
 8009f36:	b911      	cbnz	r1, 8009f3e <sbrk_aligned+0x12>
 8009f38:	f000 fe46 	bl	800abc8 <_sbrk_r>
 8009f3c:	6030      	str	r0, [r6, #0]
 8009f3e:	4621      	mov	r1, r4
 8009f40:	4628      	mov	r0, r5
 8009f42:	f000 fe41 	bl	800abc8 <_sbrk_r>
 8009f46:	1c43      	adds	r3, r0, #1
 8009f48:	d103      	bne.n	8009f52 <sbrk_aligned+0x26>
 8009f4a:	f04f 34ff 	mov.w	r4, #4294967295
 8009f4e:	4620      	mov	r0, r4
 8009f50:	bd70      	pop	{r4, r5, r6, pc}
 8009f52:	1cc4      	adds	r4, r0, #3
 8009f54:	f024 0403 	bic.w	r4, r4, #3
 8009f58:	42a0      	cmp	r0, r4
 8009f5a:	d0f8      	beq.n	8009f4e <sbrk_aligned+0x22>
 8009f5c:	1a21      	subs	r1, r4, r0
 8009f5e:	4628      	mov	r0, r5
 8009f60:	f000 fe32 	bl	800abc8 <_sbrk_r>
 8009f64:	3001      	adds	r0, #1
 8009f66:	d1f2      	bne.n	8009f4e <sbrk_aligned+0x22>
 8009f68:	e7ef      	b.n	8009f4a <sbrk_aligned+0x1e>
 8009f6a:	bf00      	nop
 8009f6c:	2000057c 	.word	0x2000057c

08009f70 <_malloc_r>:
 8009f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f74:	1ccd      	adds	r5, r1, #3
 8009f76:	f025 0503 	bic.w	r5, r5, #3
 8009f7a:	3508      	adds	r5, #8
 8009f7c:	2d0c      	cmp	r5, #12
 8009f7e:	bf38      	it	cc
 8009f80:	250c      	movcc	r5, #12
 8009f82:	2d00      	cmp	r5, #0
 8009f84:	4606      	mov	r6, r0
 8009f86:	db01      	blt.n	8009f8c <_malloc_r+0x1c>
 8009f88:	42a9      	cmp	r1, r5
 8009f8a:	d904      	bls.n	8009f96 <_malloc_r+0x26>
 8009f8c:	230c      	movs	r3, #12
 8009f8e:	6033      	str	r3, [r6, #0]
 8009f90:	2000      	movs	r0, #0
 8009f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a06c <_malloc_r+0xfc>
 8009f9a:	f000 f869 	bl	800a070 <__malloc_lock>
 8009f9e:	f8d8 3000 	ldr.w	r3, [r8]
 8009fa2:	461c      	mov	r4, r3
 8009fa4:	bb44      	cbnz	r4, 8009ff8 <_malloc_r+0x88>
 8009fa6:	4629      	mov	r1, r5
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f7ff ffbf 	bl	8009f2c <sbrk_aligned>
 8009fae:	1c43      	adds	r3, r0, #1
 8009fb0:	4604      	mov	r4, r0
 8009fb2:	d158      	bne.n	800a066 <_malloc_r+0xf6>
 8009fb4:	f8d8 4000 	ldr.w	r4, [r8]
 8009fb8:	4627      	mov	r7, r4
 8009fba:	2f00      	cmp	r7, #0
 8009fbc:	d143      	bne.n	800a046 <_malloc_r+0xd6>
 8009fbe:	2c00      	cmp	r4, #0
 8009fc0:	d04b      	beq.n	800a05a <_malloc_r+0xea>
 8009fc2:	6823      	ldr	r3, [r4, #0]
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	eb04 0903 	add.w	r9, r4, r3
 8009fcc:	f000 fdfc 	bl	800abc8 <_sbrk_r>
 8009fd0:	4581      	cmp	r9, r0
 8009fd2:	d142      	bne.n	800a05a <_malloc_r+0xea>
 8009fd4:	6821      	ldr	r1, [r4, #0]
 8009fd6:	1a6d      	subs	r5, r5, r1
 8009fd8:	4629      	mov	r1, r5
 8009fda:	4630      	mov	r0, r6
 8009fdc:	f7ff ffa6 	bl	8009f2c <sbrk_aligned>
 8009fe0:	3001      	adds	r0, #1
 8009fe2:	d03a      	beq.n	800a05a <_malloc_r+0xea>
 8009fe4:	6823      	ldr	r3, [r4, #0]
 8009fe6:	442b      	add	r3, r5
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	f8d8 3000 	ldr.w	r3, [r8]
 8009fee:	685a      	ldr	r2, [r3, #4]
 8009ff0:	bb62      	cbnz	r2, 800a04c <_malloc_r+0xdc>
 8009ff2:	f8c8 7000 	str.w	r7, [r8]
 8009ff6:	e00f      	b.n	800a018 <_malloc_r+0xa8>
 8009ff8:	6822      	ldr	r2, [r4, #0]
 8009ffa:	1b52      	subs	r2, r2, r5
 8009ffc:	d420      	bmi.n	800a040 <_malloc_r+0xd0>
 8009ffe:	2a0b      	cmp	r2, #11
 800a000:	d917      	bls.n	800a032 <_malloc_r+0xc2>
 800a002:	1961      	adds	r1, r4, r5
 800a004:	42a3      	cmp	r3, r4
 800a006:	6025      	str	r5, [r4, #0]
 800a008:	bf18      	it	ne
 800a00a:	6059      	strne	r1, [r3, #4]
 800a00c:	6863      	ldr	r3, [r4, #4]
 800a00e:	bf08      	it	eq
 800a010:	f8c8 1000 	streq.w	r1, [r8]
 800a014:	5162      	str	r2, [r4, r5]
 800a016:	604b      	str	r3, [r1, #4]
 800a018:	4630      	mov	r0, r6
 800a01a:	f000 f82f 	bl	800a07c <__malloc_unlock>
 800a01e:	f104 000b 	add.w	r0, r4, #11
 800a022:	1d23      	adds	r3, r4, #4
 800a024:	f020 0007 	bic.w	r0, r0, #7
 800a028:	1ac2      	subs	r2, r0, r3
 800a02a:	bf1c      	itt	ne
 800a02c:	1a1b      	subne	r3, r3, r0
 800a02e:	50a3      	strne	r3, [r4, r2]
 800a030:	e7af      	b.n	8009f92 <_malloc_r+0x22>
 800a032:	6862      	ldr	r2, [r4, #4]
 800a034:	42a3      	cmp	r3, r4
 800a036:	bf0c      	ite	eq
 800a038:	f8c8 2000 	streq.w	r2, [r8]
 800a03c:	605a      	strne	r2, [r3, #4]
 800a03e:	e7eb      	b.n	800a018 <_malloc_r+0xa8>
 800a040:	4623      	mov	r3, r4
 800a042:	6864      	ldr	r4, [r4, #4]
 800a044:	e7ae      	b.n	8009fa4 <_malloc_r+0x34>
 800a046:	463c      	mov	r4, r7
 800a048:	687f      	ldr	r7, [r7, #4]
 800a04a:	e7b6      	b.n	8009fba <_malloc_r+0x4a>
 800a04c:	461a      	mov	r2, r3
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	42a3      	cmp	r3, r4
 800a052:	d1fb      	bne.n	800a04c <_malloc_r+0xdc>
 800a054:	2300      	movs	r3, #0
 800a056:	6053      	str	r3, [r2, #4]
 800a058:	e7de      	b.n	800a018 <_malloc_r+0xa8>
 800a05a:	230c      	movs	r3, #12
 800a05c:	6033      	str	r3, [r6, #0]
 800a05e:	4630      	mov	r0, r6
 800a060:	f000 f80c 	bl	800a07c <__malloc_unlock>
 800a064:	e794      	b.n	8009f90 <_malloc_r+0x20>
 800a066:	6005      	str	r5, [r0, #0]
 800a068:	e7d6      	b.n	800a018 <_malloc_r+0xa8>
 800a06a:	bf00      	nop
 800a06c:	20000580 	.word	0x20000580

0800a070 <__malloc_lock>:
 800a070:	4801      	ldr	r0, [pc, #4]	@ (800a078 <__malloc_lock+0x8>)
 800a072:	f7ff b8ac 	b.w	80091ce <__retarget_lock_acquire_recursive>
 800a076:	bf00      	nop
 800a078:	20000578 	.word	0x20000578

0800a07c <__malloc_unlock>:
 800a07c:	4801      	ldr	r0, [pc, #4]	@ (800a084 <__malloc_unlock+0x8>)
 800a07e:	f7ff b8a7 	b.w	80091d0 <__retarget_lock_release_recursive>
 800a082:	bf00      	nop
 800a084:	20000578 	.word	0x20000578

0800a088 <_Balloc>:
 800a088:	b570      	push	{r4, r5, r6, lr}
 800a08a:	69c6      	ldr	r6, [r0, #28]
 800a08c:	4604      	mov	r4, r0
 800a08e:	460d      	mov	r5, r1
 800a090:	b976      	cbnz	r6, 800a0b0 <_Balloc+0x28>
 800a092:	2010      	movs	r0, #16
 800a094:	f7ff ff42 	bl	8009f1c <malloc>
 800a098:	4602      	mov	r2, r0
 800a09a:	61e0      	str	r0, [r4, #28]
 800a09c:	b920      	cbnz	r0, 800a0a8 <_Balloc+0x20>
 800a09e:	4b18      	ldr	r3, [pc, #96]	@ (800a100 <_Balloc+0x78>)
 800a0a0:	4818      	ldr	r0, [pc, #96]	@ (800a104 <_Balloc+0x7c>)
 800a0a2:	216b      	movs	r1, #107	@ 0x6b
 800a0a4:	f000 fda0 	bl	800abe8 <__assert_func>
 800a0a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0ac:	6006      	str	r6, [r0, #0]
 800a0ae:	60c6      	str	r6, [r0, #12]
 800a0b0:	69e6      	ldr	r6, [r4, #28]
 800a0b2:	68f3      	ldr	r3, [r6, #12]
 800a0b4:	b183      	cbz	r3, 800a0d8 <_Balloc+0x50>
 800a0b6:	69e3      	ldr	r3, [r4, #28]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a0be:	b9b8      	cbnz	r0, 800a0f0 <_Balloc+0x68>
 800a0c0:	2101      	movs	r1, #1
 800a0c2:	fa01 f605 	lsl.w	r6, r1, r5
 800a0c6:	1d72      	adds	r2, r6, #5
 800a0c8:	0092      	lsls	r2, r2, #2
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	f000 fdaa 	bl	800ac24 <_calloc_r>
 800a0d0:	b160      	cbz	r0, 800a0ec <_Balloc+0x64>
 800a0d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a0d6:	e00e      	b.n	800a0f6 <_Balloc+0x6e>
 800a0d8:	2221      	movs	r2, #33	@ 0x21
 800a0da:	2104      	movs	r1, #4
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f000 fda1 	bl	800ac24 <_calloc_r>
 800a0e2:	69e3      	ldr	r3, [r4, #28]
 800a0e4:	60f0      	str	r0, [r6, #12]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d1e4      	bne.n	800a0b6 <_Balloc+0x2e>
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	bd70      	pop	{r4, r5, r6, pc}
 800a0f0:	6802      	ldr	r2, [r0, #0]
 800a0f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0fc:	e7f7      	b.n	800a0ee <_Balloc+0x66>
 800a0fe:	bf00      	nop
 800a100:	0800b93d 	.word	0x0800b93d
 800a104:	0800b9bd 	.word	0x0800b9bd

0800a108 <_Bfree>:
 800a108:	b570      	push	{r4, r5, r6, lr}
 800a10a:	69c6      	ldr	r6, [r0, #28]
 800a10c:	4605      	mov	r5, r0
 800a10e:	460c      	mov	r4, r1
 800a110:	b976      	cbnz	r6, 800a130 <_Bfree+0x28>
 800a112:	2010      	movs	r0, #16
 800a114:	f7ff ff02 	bl	8009f1c <malloc>
 800a118:	4602      	mov	r2, r0
 800a11a:	61e8      	str	r0, [r5, #28]
 800a11c:	b920      	cbnz	r0, 800a128 <_Bfree+0x20>
 800a11e:	4b09      	ldr	r3, [pc, #36]	@ (800a144 <_Bfree+0x3c>)
 800a120:	4809      	ldr	r0, [pc, #36]	@ (800a148 <_Bfree+0x40>)
 800a122:	218f      	movs	r1, #143	@ 0x8f
 800a124:	f000 fd60 	bl	800abe8 <__assert_func>
 800a128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a12c:	6006      	str	r6, [r0, #0]
 800a12e:	60c6      	str	r6, [r0, #12]
 800a130:	b13c      	cbz	r4, 800a142 <_Bfree+0x3a>
 800a132:	69eb      	ldr	r3, [r5, #28]
 800a134:	6862      	ldr	r2, [r4, #4]
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a13c:	6021      	str	r1, [r4, #0]
 800a13e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a142:	bd70      	pop	{r4, r5, r6, pc}
 800a144:	0800b93d 	.word	0x0800b93d
 800a148:	0800b9bd 	.word	0x0800b9bd

0800a14c <__multadd>:
 800a14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a150:	690d      	ldr	r5, [r1, #16]
 800a152:	4607      	mov	r7, r0
 800a154:	460c      	mov	r4, r1
 800a156:	461e      	mov	r6, r3
 800a158:	f101 0c14 	add.w	ip, r1, #20
 800a15c:	2000      	movs	r0, #0
 800a15e:	f8dc 3000 	ldr.w	r3, [ip]
 800a162:	b299      	uxth	r1, r3
 800a164:	fb02 6101 	mla	r1, r2, r1, r6
 800a168:	0c1e      	lsrs	r6, r3, #16
 800a16a:	0c0b      	lsrs	r3, r1, #16
 800a16c:	fb02 3306 	mla	r3, r2, r6, r3
 800a170:	b289      	uxth	r1, r1
 800a172:	3001      	adds	r0, #1
 800a174:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a178:	4285      	cmp	r5, r0
 800a17a:	f84c 1b04 	str.w	r1, [ip], #4
 800a17e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a182:	dcec      	bgt.n	800a15e <__multadd+0x12>
 800a184:	b30e      	cbz	r6, 800a1ca <__multadd+0x7e>
 800a186:	68a3      	ldr	r3, [r4, #8]
 800a188:	42ab      	cmp	r3, r5
 800a18a:	dc19      	bgt.n	800a1c0 <__multadd+0x74>
 800a18c:	6861      	ldr	r1, [r4, #4]
 800a18e:	4638      	mov	r0, r7
 800a190:	3101      	adds	r1, #1
 800a192:	f7ff ff79 	bl	800a088 <_Balloc>
 800a196:	4680      	mov	r8, r0
 800a198:	b928      	cbnz	r0, 800a1a6 <__multadd+0x5a>
 800a19a:	4602      	mov	r2, r0
 800a19c:	4b0c      	ldr	r3, [pc, #48]	@ (800a1d0 <__multadd+0x84>)
 800a19e:	480d      	ldr	r0, [pc, #52]	@ (800a1d4 <__multadd+0x88>)
 800a1a0:	21ba      	movs	r1, #186	@ 0xba
 800a1a2:	f000 fd21 	bl	800abe8 <__assert_func>
 800a1a6:	6922      	ldr	r2, [r4, #16]
 800a1a8:	3202      	adds	r2, #2
 800a1aa:	f104 010c 	add.w	r1, r4, #12
 800a1ae:	0092      	lsls	r2, r2, #2
 800a1b0:	300c      	adds	r0, #12
 800a1b2:	f7ff f80e 	bl	80091d2 <memcpy>
 800a1b6:	4621      	mov	r1, r4
 800a1b8:	4638      	mov	r0, r7
 800a1ba:	f7ff ffa5 	bl	800a108 <_Bfree>
 800a1be:	4644      	mov	r4, r8
 800a1c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a1c4:	3501      	adds	r5, #1
 800a1c6:	615e      	str	r6, [r3, #20]
 800a1c8:	6125      	str	r5, [r4, #16]
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1d0:	0800b9ac 	.word	0x0800b9ac
 800a1d4:	0800b9bd 	.word	0x0800b9bd

0800a1d8 <__hi0bits>:
 800a1d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a1dc:	4603      	mov	r3, r0
 800a1de:	bf36      	itet	cc
 800a1e0:	0403      	lslcc	r3, r0, #16
 800a1e2:	2000      	movcs	r0, #0
 800a1e4:	2010      	movcc	r0, #16
 800a1e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1ea:	bf3c      	itt	cc
 800a1ec:	021b      	lslcc	r3, r3, #8
 800a1ee:	3008      	addcc	r0, #8
 800a1f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1f4:	bf3c      	itt	cc
 800a1f6:	011b      	lslcc	r3, r3, #4
 800a1f8:	3004      	addcc	r0, #4
 800a1fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1fe:	bf3c      	itt	cc
 800a200:	009b      	lslcc	r3, r3, #2
 800a202:	3002      	addcc	r0, #2
 800a204:	2b00      	cmp	r3, #0
 800a206:	db05      	blt.n	800a214 <__hi0bits+0x3c>
 800a208:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a20c:	f100 0001 	add.w	r0, r0, #1
 800a210:	bf08      	it	eq
 800a212:	2020      	moveq	r0, #32
 800a214:	4770      	bx	lr

0800a216 <__lo0bits>:
 800a216:	6803      	ldr	r3, [r0, #0]
 800a218:	4602      	mov	r2, r0
 800a21a:	f013 0007 	ands.w	r0, r3, #7
 800a21e:	d00b      	beq.n	800a238 <__lo0bits+0x22>
 800a220:	07d9      	lsls	r1, r3, #31
 800a222:	d421      	bmi.n	800a268 <__lo0bits+0x52>
 800a224:	0798      	lsls	r0, r3, #30
 800a226:	bf49      	itett	mi
 800a228:	085b      	lsrmi	r3, r3, #1
 800a22a:	089b      	lsrpl	r3, r3, #2
 800a22c:	2001      	movmi	r0, #1
 800a22e:	6013      	strmi	r3, [r2, #0]
 800a230:	bf5c      	itt	pl
 800a232:	6013      	strpl	r3, [r2, #0]
 800a234:	2002      	movpl	r0, #2
 800a236:	4770      	bx	lr
 800a238:	b299      	uxth	r1, r3
 800a23a:	b909      	cbnz	r1, 800a240 <__lo0bits+0x2a>
 800a23c:	0c1b      	lsrs	r3, r3, #16
 800a23e:	2010      	movs	r0, #16
 800a240:	b2d9      	uxtb	r1, r3
 800a242:	b909      	cbnz	r1, 800a248 <__lo0bits+0x32>
 800a244:	3008      	adds	r0, #8
 800a246:	0a1b      	lsrs	r3, r3, #8
 800a248:	0719      	lsls	r1, r3, #28
 800a24a:	bf04      	itt	eq
 800a24c:	091b      	lsreq	r3, r3, #4
 800a24e:	3004      	addeq	r0, #4
 800a250:	0799      	lsls	r1, r3, #30
 800a252:	bf04      	itt	eq
 800a254:	089b      	lsreq	r3, r3, #2
 800a256:	3002      	addeq	r0, #2
 800a258:	07d9      	lsls	r1, r3, #31
 800a25a:	d403      	bmi.n	800a264 <__lo0bits+0x4e>
 800a25c:	085b      	lsrs	r3, r3, #1
 800a25e:	f100 0001 	add.w	r0, r0, #1
 800a262:	d003      	beq.n	800a26c <__lo0bits+0x56>
 800a264:	6013      	str	r3, [r2, #0]
 800a266:	4770      	bx	lr
 800a268:	2000      	movs	r0, #0
 800a26a:	4770      	bx	lr
 800a26c:	2020      	movs	r0, #32
 800a26e:	4770      	bx	lr

0800a270 <__i2b>:
 800a270:	b510      	push	{r4, lr}
 800a272:	460c      	mov	r4, r1
 800a274:	2101      	movs	r1, #1
 800a276:	f7ff ff07 	bl	800a088 <_Balloc>
 800a27a:	4602      	mov	r2, r0
 800a27c:	b928      	cbnz	r0, 800a28a <__i2b+0x1a>
 800a27e:	4b05      	ldr	r3, [pc, #20]	@ (800a294 <__i2b+0x24>)
 800a280:	4805      	ldr	r0, [pc, #20]	@ (800a298 <__i2b+0x28>)
 800a282:	f240 1145 	movw	r1, #325	@ 0x145
 800a286:	f000 fcaf 	bl	800abe8 <__assert_func>
 800a28a:	2301      	movs	r3, #1
 800a28c:	6144      	str	r4, [r0, #20]
 800a28e:	6103      	str	r3, [r0, #16]
 800a290:	bd10      	pop	{r4, pc}
 800a292:	bf00      	nop
 800a294:	0800b9ac 	.word	0x0800b9ac
 800a298:	0800b9bd 	.word	0x0800b9bd

0800a29c <__multiply>:
 800a29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a0:	4614      	mov	r4, r2
 800a2a2:	690a      	ldr	r2, [r1, #16]
 800a2a4:	6923      	ldr	r3, [r4, #16]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	bfa8      	it	ge
 800a2aa:	4623      	movge	r3, r4
 800a2ac:	460f      	mov	r7, r1
 800a2ae:	bfa4      	itt	ge
 800a2b0:	460c      	movge	r4, r1
 800a2b2:	461f      	movge	r7, r3
 800a2b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a2b8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a2bc:	68a3      	ldr	r3, [r4, #8]
 800a2be:	6861      	ldr	r1, [r4, #4]
 800a2c0:	eb0a 0609 	add.w	r6, sl, r9
 800a2c4:	42b3      	cmp	r3, r6
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	bfb8      	it	lt
 800a2ca:	3101      	addlt	r1, #1
 800a2cc:	f7ff fedc 	bl	800a088 <_Balloc>
 800a2d0:	b930      	cbnz	r0, 800a2e0 <__multiply+0x44>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	4b44      	ldr	r3, [pc, #272]	@ (800a3e8 <__multiply+0x14c>)
 800a2d6:	4845      	ldr	r0, [pc, #276]	@ (800a3ec <__multiply+0x150>)
 800a2d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a2dc:	f000 fc84 	bl	800abe8 <__assert_func>
 800a2e0:	f100 0514 	add.w	r5, r0, #20
 800a2e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a2e8:	462b      	mov	r3, r5
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	4543      	cmp	r3, r8
 800a2ee:	d321      	bcc.n	800a334 <__multiply+0x98>
 800a2f0:	f107 0114 	add.w	r1, r7, #20
 800a2f4:	f104 0214 	add.w	r2, r4, #20
 800a2f8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a2fc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a300:	9302      	str	r3, [sp, #8]
 800a302:	1b13      	subs	r3, r2, r4
 800a304:	3b15      	subs	r3, #21
 800a306:	f023 0303 	bic.w	r3, r3, #3
 800a30a:	3304      	adds	r3, #4
 800a30c:	f104 0715 	add.w	r7, r4, #21
 800a310:	42ba      	cmp	r2, r7
 800a312:	bf38      	it	cc
 800a314:	2304      	movcc	r3, #4
 800a316:	9301      	str	r3, [sp, #4]
 800a318:	9b02      	ldr	r3, [sp, #8]
 800a31a:	9103      	str	r1, [sp, #12]
 800a31c:	428b      	cmp	r3, r1
 800a31e:	d80c      	bhi.n	800a33a <__multiply+0x9e>
 800a320:	2e00      	cmp	r6, #0
 800a322:	dd03      	ble.n	800a32c <__multiply+0x90>
 800a324:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d05b      	beq.n	800a3e4 <__multiply+0x148>
 800a32c:	6106      	str	r6, [r0, #16]
 800a32e:	b005      	add	sp, #20
 800a330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a334:	f843 2b04 	str.w	r2, [r3], #4
 800a338:	e7d8      	b.n	800a2ec <__multiply+0x50>
 800a33a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a33e:	f1ba 0f00 	cmp.w	sl, #0
 800a342:	d024      	beq.n	800a38e <__multiply+0xf2>
 800a344:	f104 0e14 	add.w	lr, r4, #20
 800a348:	46a9      	mov	r9, r5
 800a34a:	f04f 0c00 	mov.w	ip, #0
 800a34e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a352:	f8d9 3000 	ldr.w	r3, [r9]
 800a356:	fa1f fb87 	uxth.w	fp, r7
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a360:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a364:	f8d9 7000 	ldr.w	r7, [r9]
 800a368:	4463      	add	r3, ip
 800a36a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a36e:	fb0a c70b 	mla	r7, sl, fp, ip
 800a372:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a376:	b29b      	uxth	r3, r3
 800a378:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a37c:	4572      	cmp	r2, lr
 800a37e:	f849 3b04 	str.w	r3, [r9], #4
 800a382:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a386:	d8e2      	bhi.n	800a34e <__multiply+0xb2>
 800a388:	9b01      	ldr	r3, [sp, #4]
 800a38a:	f845 c003 	str.w	ip, [r5, r3]
 800a38e:	9b03      	ldr	r3, [sp, #12]
 800a390:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a394:	3104      	adds	r1, #4
 800a396:	f1b9 0f00 	cmp.w	r9, #0
 800a39a:	d021      	beq.n	800a3e0 <__multiply+0x144>
 800a39c:	682b      	ldr	r3, [r5, #0]
 800a39e:	f104 0c14 	add.w	ip, r4, #20
 800a3a2:	46ae      	mov	lr, r5
 800a3a4:	f04f 0a00 	mov.w	sl, #0
 800a3a8:	f8bc b000 	ldrh.w	fp, [ip]
 800a3ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a3b0:	fb09 770b 	mla	r7, r9, fp, r7
 800a3b4:	4457      	add	r7, sl
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a3bc:	f84e 3b04 	str.w	r3, [lr], #4
 800a3c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a3c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3c8:	f8be 3000 	ldrh.w	r3, [lr]
 800a3cc:	fb09 330a 	mla	r3, r9, sl, r3
 800a3d0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a3d4:	4562      	cmp	r2, ip
 800a3d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3da:	d8e5      	bhi.n	800a3a8 <__multiply+0x10c>
 800a3dc:	9f01      	ldr	r7, [sp, #4]
 800a3de:	51eb      	str	r3, [r5, r7]
 800a3e0:	3504      	adds	r5, #4
 800a3e2:	e799      	b.n	800a318 <__multiply+0x7c>
 800a3e4:	3e01      	subs	r6, #1
 800a3e6:	e79b      	b.n	800a320 <__multiply+0x84>
 800a3e8:	0800b9ac 	.word	0x0800b9ac
 800a3ec:	0800b9bd 	.word	0x0800b9bd

0800a3f0 <__pow5mult>:
 800a3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3f4:	4615      	mov	r5, r2
 800a3f6:	f012 0203 	ands.w	r2, r2, #3
 800a3fa:	4607      	mov	r7, r0
 800a3fc:	460e      	mov	r6, r1
 800a3fe:	d007      	beq.n	800a410 <__pow5mult+0x20>
 800a400:	4c25      	ldr	r4, [pc, #148]	@ (800a498 <__pow5mult+0xa8>)
 800a402:	3a01      	subs	r2, #1
 800a404:	2300      	movs	r3, #0
 800a406:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a40a:	f7ff fe9f 	bl	800a14c <__multadd>
 800a40e:	4606      	mov	r6, r0
 800a410:	10ad      	asrs	r5, r5, #2
 800a412:	d03d      	beq.n	800a490 <__pow5mult+0xa0>
 800a414:	69fc      	ldr	r4, [r7, #28]
 800a416:	b97c      	cbnz	r4, 800a438 <__pow5mult+0x48>
 800a418:	2010      	movs	r0, #16
 800a41a:	f7ff fd7f 	bl	8009f1c <malloc>
 800a41e:	4602      	mov	r2, r0
 800a420:	61f8      	str	r0, [r7, #28]
 800a422:	b928      	cbnz	r0, 800a430 <__pow5mult+0x40>
 800a424:	4b1d      	ldr	r3, [pc, #116]	@ (800a49c <__pow5mult+0xac>)
 800a426:	481e      	ldr	r0, [pc, #120]	@ (800a4a0 <__pow5mult+0xb0>)
 800a428:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a42c:	f000 fbdc 	bl	800abe8 <__assert_func>
 800a430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a434:	6004      	str	r4, [r0, #0]
 800a436:	60c4      	str	r4, [r0, #12]
 800a438:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a43c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a440:	b94c      	cbnz	r4, 800a456 <__pow5mult+0x66>
 800a442:	f240 2171 	movw	r1, #625	@ 0x271
 800a446:	4638      	mov	r0, r7
 800a448:	f7ff ff12 	bl	800a270 <__i2b>
 800a44c:	2300      	movs	r3, #0
 800a44e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a452:	4604      	mov	r4, r0
 800a454:	6003      	str	r3, [r0, #0]
 800a456:	f04f 0900 	mov.w	r9, #0
 800a45a:	07eb      	lsls	r3, r5, #31
 800a45c:	d50a      	bpl.n	800a474 <__pow5mult+0x84>
 800a45e:	4631      	mov	r1, r6
 800a460:	4622      	mov	r2, r4
 800a462:	4638      	mov	r0, r7
 800a464:	f7ff ff1a 	bl	800a29c <__multiply>
 800a468:	4631      	mov	r1, r6
 800a46a:	4680      	mov	r8, r0
 800a46c:	4638      	mov	r0, r7
 800a46e:	f7ff fe4b 	bl	800a108 <_Bfree>
 800a472:	4646      	mov	r6, r8
 800a474:	106d      	asrs	r5, r5, #1
 800a476:	d00b      	beq.n	800a490 <__pow5mult+0xa0>
 800a478:	6820      	ldr	r0, [r4, #0]
 800a47a:	b938      	cbnz	r0, 800a48c <__pow5mult+0x9c>
 800a47c:	4622      	mov	r2, r4
 800a47e:	4621      	mov	r1, r4
 800a480:	4638      	mov	r0, r7
 800a482:	f7ff ff0b 	bl	800a29c <__multiply>
 800a486:	6020      	str	r0, [r4, #0]
 800a488:	f8c0 9000 	str.w	r9, [r0]
 800a48c:	4604      	mov	r4, r0
 800a48e:	e7e4      	b.n	800a45a <__pow5mult+0x6a>
 800a490:	4630      	mov	r0, r6
 800a492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a496:	bf00      	nop
 800a498:	0800ba18 	.word	0x0800ba18
 800a49c:	0800b93d 	.word	0x0800b93d
 800a4a0:	0800b9bd 	.word	0x0800b9bd

0800a4a4 <__lshift>:
 800a4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4a8:	460c      	mov	r4, r1
 800a4aa:	6849      	ldr	r1, [r1, #4]
 800a4ac:	6923      	ldr	r3, [r4, #16]
 800a4ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4b2:	68a3      	ldr	r3, [r4, #8]
 800a4b4:	4607      	mov	r7, r0
 800a4b6:	4691      	mov	r9, r2
 800a4b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4bc:	f108 0601 	add.w	r6, r8, #1
 800a4c0:	42b3      	cmp	r3, r6
 800a4c2:	db0b      	blt.n	800a4dc <__lshift+0x38>
 800a4c4:	4638      	mov	r0, r7
 800a4c6:	f7ff fddf 	bl	800a088 <_Balloc>
 800a4ca:	4605      	mov	r5, r0
 800a4cc:	b948      	cbnz	r0, 800a4e2 <__lshift+0x3e>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	4b28      	ldr	r3, [pc, #160]	@ (800a574 <__lshift+0xd0>)
 800a4d2:	4829      	ldr	r0, [pc, #164]	@ (800a578 <__lshift+0xd4>)
 800a4d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a4d8:	f000 fb86 	bl	800abe8 <__assert_func>
 800a4dc:	3101      	adds	r1, #1
 800a4de:	005b      	lsls	r3, r3, #1
 800a4e0:	e7ee      	b.n	800a4c0 <__lshift+0x1c>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	f100 0114 	add.w	r1, r0, #20
 800a4e8:	f100 0210 	add.w	r2, r0, #16
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	4553      	cmp	r3, sl
 800a4f0:	db33      	blt.n	800a55a <__lshift+0xb6>
 800a4f2:	6920      	ldr	r0, [r4, #16]
 800a4f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4f8:	f104 0314 	add.w	r3, r4, #20
 800a4fc:	f019 091f 	ands.w	r9, r9, #31
 800a500:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a504:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a508:	d02b      	beq.n	800a562 <__lshift+0xbe>
 800a50a:	f1c9 0e20 	rsb	lr, r9, #32
 800a50e:	468a      	mov	sl, r1
 800a510:	2200      	movs	r2, #0
 800a512:	6818      	ldr	r0, [r3, #0]
 800a514:	fa00 f009 	lsl.w	r0, r0, r9
 800a518:	4310      	orrs	r0, r2
 800a51a:	f84a 0b04 	str.w	r0, [sl], #4
 800a51e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a522:	459c      	cmp	ip, r3
 800a524:	fa22 f20e 	lsr.w	r2, r2, lr
 800a528:	d8f3      	bhi.n	800a512 <__lshift+0x6e>
 800a52a:	ebac 0304 	sub.w	r3, ip, r4
 800a52e:	3b15      	subs	r3, #21
 800a530:	f023 0303 	bic.w	r3, r3, #3
 800a534:	3304      	adds	r3, #4
 800a536:	f104 0015 	add.w	r0, r4, #21
 800a53a:	4584      	cmp	ip, r0
 800a53c:	bf38      	it	cc
 800a53e:	2304      	movcc	r3, #4
 800a540:	50ca      	str	r2, [r1, r3]
 800a542:	b10a      	cbz	r2, 800a548 <__lshift+0xa4>
 800a544:	f108 0602 	add.w	r6, r8, #2
 800a548:	3e01      	subs	r6, #1
 800a54a:	4638      	mov	r0, r7
 800a54c:	612e      	str	r6, [r5, #16]
 800a54e:	4621      	mov	r1, r4
 800a550:	f7ff fdda 	bl	800a108 <_Bfree>
 800a554:	4628      	mov	r0, r5
 800a556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a55a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a55e:	3301      	adds	r3, #1
 800a560:	e7c5      	b.n	800a4ee <__lshift+0x4a>
 800a562:	3904      	subs	r1, #4
 800a564:	f853 2b04 	ldr.w	r2, [r3], #4
 800a568:	f841 2f04 	str.w	r2, [r1, #4]!
 800a56c:	459c      	cmp	ip, r3
 800a56e:	d8f9      	bhi.n	800a564 <__lshift+0xc0>
 800a570:	e7ea      	b.n	800a548 <__lshift+0xa4>
 800a572:	bf00      	nop
 800a574:	0800b9ac 	.word	0x0800b9ac
 800a578:	0800b9bd 	.word	0x0800b9bd

0800a57c <__mcmp>:
 800a57c:	690a      	ldr	r2, [r1, #16]
 800a57e:	4603      	mov	r3, r0
 800a580:	6900      	ldr	r0, [r0, #16]
 800a582:	1a80      	subs	r0, r0, r2
 800a584:	b530      	push	{r4, r5, lr}
 800a586:	d10e      	bne.n	800a5a6 <__mcmp+0x2a>
 800a588:	3314      	adds	r3, #20
 800a58a:	3114      	adds	r1, #20
 800a58c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a590:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a594:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a598:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a59c:	4295      	cmp	r5, r2
 800a59e:	d003      	beq.n	800a5a8 <__mcmp+0x2c>
 800a5a0:	d205      	bcs.n	800a5ae <__mcmp+0x32>
 800a5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a6:	bd30      	pop	{r4, r5, pc}
 800a5a8:	42a3      	cmp	r3, r4
 800a5aa:	d3f3      	bcc.n	800a594 <__mcmp+0x18>
 800a5ac:	e7fb      	b.n	800a5a6 <__mcmp+0x2a>
 800a5ae:	2001      	movs	r0, #1
 800a5b0:	e7f9      	b.n	800a5a6 <__mcmp+0x2a>
	...

0800a5b4 <__mdiff>:
 800a5b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b8:	4689      	mov	r9, r1
 800a5ba:	4606      	mov	r6, r0
 800a5bc:	4611      	mov	r1, r2
 800a5be:	4648      	mov	r0, r9
 800a5c0:	4614      	mov	r4, r2
 800a5c2:	f7ff ffdb 	bl	800a57c <__mcmp>
 800a5c6:	1e05      	subs	r5, r0, #0
 800a5c8:	d112      	bne.n	800a5f0 <__mdiff+0x3c>
 800a5ca:	4629      	mov	r1, r5
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	f7ff fd5b 	bl	800a088 <_Balloc>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	b928      	cbnz	r0, 800a5e2 <__mdiff+0x2e>
 800a5d6:	4b3f      	ldr	r3, [pc, #252]	@ (800a6d4 <__mdiff+0x120>)
 800a5d8:	f240 2137 	movw	r1, #567	@ 0x237
 800a5dc:	483e      	ldr	r0, [pc, #248]	@ (800a6d8 <__mdiff+0x124>)
 800a5de:	f000 fb03 	bl	800abe8 <__assert_func>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a5e8:	4610      	mov	r0, r2
 800a5ea:	b003      	add	sp, #12
 800a5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f0:	bfbc      	itt	lt
 800a5f2:	464b      	movlt	r3, r9
 800a5f4:	46a1      	movlt	r9, r4
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a5fc:	bfba      	itte	lt
 800a5fe:	461c      	movlt	r4, r3
 800a600:	2501      	movlt	r5, #1
 800a602:	2500      	movge	r5, #0
 800a604:	f7ff fd40 	bl	800a088 <_Balloc>
 800a608:	4602      	mov	r2, r0
 800a60a:	b918      	cbnz	r0, 800a614 <__mdiff+0x60>
 800a60c:	4b31      	ldr	r3, [pc, #196]	@ (800a6d4 <__mdiff+0x120>)
 800a60e:	f240 2145 	movw	r1, #581	@ 0x245
 800a612:	e7e3      	b.n	800a5dc <__mdiff+0x28>
 800a614:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a618:	6926      	ldr	r6, [r4, #16]
 800a61a:	60c5      	str	r5, [r0, #12]
 800a61c:	f109 0310 	add.w	r3, r9, #16
 800a620:	f109 0514 	add.w	r5, r9, #20
 800a624:	f104 0e14 	add.w	lr, r4, #20
 800a628:	f100 0b14 	add.w	fp, r0, #20
 800a62c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a630:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a634:	9301      	str	r3, [sp, #4]
 800a636:	46d9      	mov	r9, fp
 800a638:	f04f 0c00 	mov.w	ip, #0
 800a63c:	9b01      	ldr	r3, [sp, #4]
 800a63e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a642:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	fa1f f38a 	uxth.w	r3, sl
 800a64c:	4619      	mov	r1, r3
 800a64e:	b283      	uxth	r3, r0
 800a650:	1acb      	subs	r3, r1, r3
 800a652:	0c00      	lsrs	r0, r0, #16
 800a654:	4463      	add	r3, ip
 800a656:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a65a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a65e:	b29b      	uxth	r3, r3
 800a660:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a664:	4576      	cmp	r6, lr
 800a666:	f849 3b04 	str.w	r3, [r9], #4
 800a66a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a66e:	d8e5      	bhi.n	800a63c <__mdiff+0x88>
 800a670:	1b33      	subs	r3, r6, r4
 800a672:	3b15      	subs	r3, #21
 800a674:	f023 0303 	bic.w	r3, r3, #3
 800a678:	3415      	adds	r4, #21
 800a67a:	3304      	adds	r3, #4
 800a67c:	42a6      	cmp	r6, r4
 800a67e:	bf38      	it	cc
 800a680:	2304      	movcc	r3, #4
 800a682:	441d      	add	r5, r3
 800a684:	445b      	add	r3, fp
 800a686:	461e      	mov	r6, r3
 800a688:	462c      	mov	r4, r5
 800a68a:	4544      	cmp	r4, r8
 800a68c:	d30e      	bcc.n	800a6ac <__mdiff+0xf8>
 800a68e:	f108 0103 	add.w	r1, r8, #3
 800a692:	1b49      	subs	r1, r1, r5
 800a694:	f021 0103 	bic.w	r1, r1, #3
 800a698:	3d03      	subs	r5, #3
 800a69a:	45a8      	cmp	r8, r5
 800a69c:	bf38      	it	cc
 800a69e:	2100      	movcc	r1, #0
 800a6a0:	440b      	add	r3, r1
 800a6a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6a6:	b191      	cbz	r1, 800a6ce <__mdiff+0x11a>
 800a6a8:	6117      	str	r7, [r2, #16]
 800a6aa:	e79d      	b.n	800a5e8 <__mdiff+0x34>
 800a6ac:	f854 1b04 	ldr.w	r1, [r4], #4
 800a6b0:	46e6      	mov	lr, ip
 800a6b2:	0c08      	lsrs	r0, r1, #16
 800a6b4:	fa1c fc81 	uxtah	ip, ip, r1
 800a6b8:	4471      	add	r1, lr
 800a6ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a6be:	b289      	uxth	r1, r1
 800a6c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a6c4:	f846 1b04 	str.w	r1, [r6], #4
 800a6c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6cc:	e7dd      	b.n	800a68a <__mdiff+0xd6>
 800a6ce:	3f01      	subs	r7, #1
 800a6d0:	e7e7      	b.n	800a6a2 <__mdiff+0xee>
 800a6d2:	bf00      	nop
 800a6d4:	0800b9ac 	.word	0x0800b9ac
 800a6d8:	0800b9bd 	.word	0x0800b9bd

0800a6dc <__d2b>:
 800a6dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a6e0:	460f      	mov	r7, r1
 800a6e2:	2101      	movs	r1, #1
 800a6e4:	ec59 8b10 	vmov	r8, r9, d0
 800a6e8:	4616      	mov	r6, r2
 800a6ea:	f7ff fccd 	bl	800a088 <_Balloc>
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	b930      	cbnz	r0, 800a700 <__d2b+0x24>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	4b23      	ldr	r3, [pc, #140]	@ (800a784 <__d2b+0xa8>)
 800a6f6:	4824      	ldr	r0, [pc, #144]	@ (800a788 <__d2b+0xac>)
 800a6f8:	f240 310f 	movw	r1, #783	@ 0x30f
 800a6fc:	f000 fa74 	bl	800abe8 <__assert_func>
 800a700:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a704:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a708:	b10d      	cbz	r5, 800a70e <__d2b+0x32>
 800a70a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a70e:	9301      	str	r3, [sp, #4]
 800a710:	f1b8 0300 	subs.w	r3, r8, #0
 800a714:	d023      	beq.n	800a75e <__d2b+0x82>
 800a716:	4668      	mov	r0, sp
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	f7ff fd7c 	bl	800a216 <__lo0bits>
 800a71e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a722:	b1d0      	cbz	r0, 800a75a <__d2b+0x7e>
 800a724:	f1c0 0320 	rsb	r3, r0, #32
 800a728:	fa02 f303 	lsl.w	r3, r2, r3
 800a72c:	430b      	orrs	r3, r1
 800a72e:	40c2      	lsrs	r2, r0
 800a730:	6163      	str	r3, [r4, #20]
 800a732:	9201      	str	r2, [sp, #4]
 800a734:	9b01      	ldr	r3, [sp, #4]
 800a736:	61a3      	str	r3, [r4, #24]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	bf0c      	ite	eq
 800a73c:	2201      	moveq	r2, #1
 800a73e:	2202      	movne	r2, #2
 800a740:	6122      	str	r2, [r4, #16]
 800a742:	b1a5      	cbz	r5, 800a76e <__d2b+0x92>
 800a744:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a748:	4405      	add	r5, r0
 800a74a:	603d      	str	r5, [r7, #0]
 800a74c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a750:	6030      	str	r0, [r6, #0]
 800a752:	4620      	mov	r0, r4
 800a754:	b003      	add	sp, #12
 800a756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a75a:	6161      	str	r1, [r4, #20]
 800a75c:	e7ea      	b.n	800a734 <__d2b+0x58>
 800a75e:	a801      	add	r0, sp, #4
 800a760:	f7ff fd59 	bl	800a216 <__lo0bits>
 800a764:	9b01      	ldr	r3, [sp, #4]
 800a766:	6163      	str	r3, [r4, #20]
 800a768:	3020      	adds	r0, #32
 800a76a:	2201      	movs	r2, #1
 800a76c:	e7e8      	b.n	800a740 <__d2b+0x64>
 800a76e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a772:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a776:	6038      	str	r0, [r7, #0]
 800a778:	6918      	ldr	r0, [r3, #16]
 800a77a:	f7ff fd2d 	bl	800a1d8 <__hi0bits>
 800a77e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a782:	e7e5      	b.n	800a750 <__d2b+0x74>
 800a784:	0800b9ac 	.word	0x0800b9ac
 800a788:	0800b9bd 	.word	0x0800b9bd

0800a78c <__ssputs_r>:
 800a78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a790:	688e      	ldr	r6, [r1, #8]
 800a792:	461f      	mov	r7, r3
 800a794:	42be      	cmp	r6, r7
 800a796:	680b      	ldr	r3, [r1, #0]
 800a798:	4682      	mov	sl, r0
 800a79a:	460c      	mov	r4, r1
 800a79c:	4690      	mov	r8, r2
 800a79e:	d82d      	bhi.n	800a7fc <__ssputs_r+0x70>
 800a7a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a7a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a7a8:	d026      	beq.n	800a7f8 <__ssputs_r+0x6c>
 800a7aa:	6965      	ldr	r5, [r4, #20]
 800a7ac:	6909      	ldr	r1, [r1, #16]
 800a7ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7b2:	eba3 0901 	sub.w	r9, r3, r1
 800a7b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7ba:	1c7b      	adds	r3, r7, #1
 800a7bc:	444b      	add	r3, r9
 800a7be:	106d      	asrs	r5, r5, #1
 800a7c0:	429d      	cmp	r5, r3
 800a7c2:	bf38      	it	cc
 800a7c4:	461d      	movcc	r5, r3
 800a7c6:	0553      	lsls	r3, r2, #21
 800a7c8:	d527      	bpl.n	800a81a <__ssputs_r+0x8e>
 800a7ca:	4629      	mov	r1, r5
 800a7cc:	f7ff fbd0 	bl	8009f70 <_malloc_r>
 800a7d0:	4606      	mov	r6, r0
 800a7d2:	b360      	cbz	r0, 800a82e <__ssputs_r+0xa2>
 800a7d4:	6921      	ldr	r1, [r4, #16]
 800a7d6:	464a      	mov	r2, r9
 800a7d8:	f7fe fcfb 	bl	80091d2 <memcpy>
 800a7dc:	89a3      	ldrh	r3, [r4, #12]
 800a7de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a7e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7e6:	81a3      	strh	r3, [r4, #12]
 800a7e8:	6126      	str	r6, [r4, #16]
 800a7ea:	6165      	str	r5, [r4, #20]
 800a7ec:	444e      	add	r6, r9
 800a7ee:	eba5 0509 	sub.w	r5, r5, r9
 800a7f2:	6026      	str	r6, [r4, #0]
 800a7f4:	60a5      	str	r5, [r4, #8]
 800a7f6:	463e      	mov	r6, r7
 800a7f8:	42be      	cmp	r6, r7
 800a7fa:	d900      	bls.n	800a7fe <__ssputs_r+0x72>
 800a7fc:	463e      	mov	r6, r7
 800a7fe:	6820      	ldr	r0, [r4, #0]
 800a800:	4632      	mov	r2, r6
 800a802:	4641      	mov	r1, r8
 800a804:	f000 f9c6 	bl	800ab94 <memmove>
 800a808:	68a3      	ldr	r3, [r4, #8]
 800a80a:	1b9b      	subs	r3, r3, r6
 800a80c:	60a3      	str	r3, [r4, #8]
 800a80e:	6823      	ldr	r3, [r4, #0]
 800a810:	4433      	add	r3, r6
 800a812:	6023      	str	r3, [r4, #0]
 800a814:	2000      	movs	r0, #0
 800a816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a81a:	462a      	mov	r2, r5
 800a81c:	f000 fa28 	bl	800ac70 <_realloc_r>
 800a820:	4606      	mov	r6, r0
 800a822:	2800      	cmp	r0, #0
 800a824:	d1e0      	bne.n	800a7e8 <__ssputs_r+0x5c>
 800a826:	6921      	ldr	r1, [r4, #16]
 800a828:	4650      	mov	r0, sl
 800a82a:	f7ff fb2d 	bl	8009e88 <_free_r>
 800a82e:	230c      	movs	r3, #12
 800a830:	f8ca 3000 	str.w	r3, [sl]
 800a834:	89a3      	ldrh	r3, [r4, #12]
 800a836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a83a:	81a3      	strh	r3, [r4, #12]
 800a83c:	f04f 30ff 	mov.w	r0, #4294967295
 800a840:	e7e9      	b.n	800a816 <__ssputs_r+0x8a>
	...

0800a844 <_svfiprintf_r>:
 800a844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a848:	4698      	mov	r8, r3
 800a84a:	898b      	ldrh	r3, [r1, #12]
 800a84c:	061b      	lsls	r3, r3, #24
 800a84e:	b09d      	sub	sp, #116	@ 0x74
 800a850:	4607      	mov	r7, r0
 800a852:	460d      	mov	r5, r1
 800a854:	4614      	mov	r4, r2
 800a856:	d510      	bpl.n	800a87a <_svfiprintf_r+0x36>
 800a858:	690b      	ldr	r3, [r1, #16]
 800a85a:	b973      	cbnz	r3, 800a87a <_svfiprintf_r+0x36>
 800a85c:	2140      	movs	r1, #64	@ 0x40
 800a85e:	f7ff fb87 	bl	8009f70 <_malloc_r>
 800a862:	6028      	str	r0, [r5, #0]
 800a864:	6128      	str	r0, [r5, #16]
 800a866:	b930      	cbnz	r0, 800a876 <_svfiprintf_r+0x32>
 800a868:	230c      	movs	r3, #12
 800a86a:	603b      	str	r3, [r7, #0]
 800a86c:	f04f 30ff 	mov.w	r0, #4294967295
 800a870:	b01d      	add	sp, #116	@ 0x74
 800a872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a876:	2340      	movs	r3, #64	@ 0x40
 800a878:	616b      	str	r3, [r5, #20]
 800a87a:	2300      	movs	r3, #0
 800a87c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a87e:	2320      	movs	r3, #32
 800a880:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a884:	f8cd 800c 	str.w	r8, [sp, #12]
 800a888:	2330      	movs	r3, #48	@ 0x30
 800a88a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aa28 <_svfiprintf_r+0x1e4>
 800a88e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a892:	f04f 0901 	mov.w	r9, #1
 800a896:	4623      	mov	r3, r4
 800a898:	469a      	mov	sl, r3
 800a89a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a89e:	b10a      	cbz	r2, 800a8a4 <_svfiprintf_r+0x60>
 800a8a0:	2a25      	cmp	r2, #37	@ 0x25
 800a8a2:	d1f9      	bne.n	800a898 <_svfiprintf_r+0x54>
 800a8a4:	ebba 0b04 	subs.w	fp, sl, r4
 800a8a8:	d00b      	beq.n	800a8c2 <_svfiprintf_r+0x7e>
 800a8aa:	465b      	mov	r3, fp
 800a8ac:	4622      	mov	r2, r4
 800a8ae:	4629      	mov	r1, r5
 800a8b0:	4638      	mov	r0, r7
 800a8b2:	f7ff ff6b 	bl	800a78c <__ssputs_r>
 800a8b6:	3001      	adds	r0, #1
 800a8b8:	f000 80a7 	beq.w	800aa0a <_svfiprintf_r+0x1c6>
 800a8bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8be:	445a      	add	r2, fp
 800a8c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f000 809f 	beq.w	800aa0a <_svfiprintf_r+0x1c6>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a8d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8d6:	f10a 0a01 	add.w	sl, sl, #1
 800a8da:	9304      	str	r3, [sp, #16]
 800a8dc:	9307      	str	r3, [sp, #28]
 800a8de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a8e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8e4:	4654      	mov	r4, sl
 800a8e6:	2205      	movs	r2, #5
 800a8e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ec:	484e      	ldr	r0, [pc, #312]	@ (800aa28 <_svfiprintf_r+0x1e4>)
 800a8ee:	f7f5 fc97 	bl	8000220 <memchr>
 800a8f2:	9a04      	ldr	r2, [sp, #16]
 800a8f4:	b9d8      	cbnz	r0, 800a92e <_svfiprintf_r+0xea>
 800a8f6:	06d0      	lsls	r0, r2, #27
 800a8f8:	bf44      	itt	mi
 800a8fa:	2320      	movmi	r3, #32
 800a8fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a900:	0711      	lsls	r1, r2, #28
 800a902:	bf44      	itt	mi
 800a904:	232b      	movmi	r3, #43	@ 0x2b
 800a906:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a90a:	f89a 3000 	ldrb.w	r3, [sl]
 800a90e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a910:	d015      	beq.n	800a93e <_svfiprintf_r+0xfa>
 800a912:	9a07      	ldr	r2, [sp, #28]
 800a914:	4654      	mov	r4, sl
 800a916:	2000      	movs	r0, #0
 800a918:	f04f 0c0a 	mov.w	ip, #10
 800a91c:	4621      	mov	r1, r4
 800a91e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a922:	3b30      	subs	r3, #48	@ 0x30
 800a924:	2b09      	cmp	r3, #9
 800a926:	d94b      	bls.n	800a9c0 <_svfiprintf_r+0x17c>
 800a928:	b1b0      	cbz	r0, 800a958 <_svfiprintf_r+0x114>
 800a92a:	9207      	str	r2, [sp, #28]
 800a92c:	e014      	b.n	800a958 <_svfiprintf_r+0x114>
 800a92e:	eba0 0308 	sub.w	r3, r0, r8
 800a932:	fa09 f303 	lsl.w	r3, r9, r3
 800a936:	4313      	orrs	r3, r2
 800a938:	9304      	str	r3, [sp, #16]
 800a93a:	46a2      	mov	sl, r4
 800a93c:	e7d2      	b.n	800a8e4 <_svfiprintf_r+0xa0>
 800a93e:	9b03      	ldr	r3, [sp, #12]
 800a940:	1d19      	adds	r1, r3, #4
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	9103      	str	r1, [sp, #12]
 800a946:	2b00      	cmp	r3, #0
 800a948:	bfbb      	ittet	lt
 800a94a:	425b      	neglt	r3, r3
 800a94c:	f042 0202 	orrlt.w	r2, r2, #2
 800a950:	9307      	strge	r3, [sp, #28]
 800a952:	9307      	strlt	r3, [sp, #28]
 800a954:	bfb8      	it	lt
 800a956:	9204      	strlt	r2, [sp, #16]
 800a958:	7823      	ldrb	r3, [r4, #0]
 800a95a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a95c:	d10a      	bne.n	800a974 <_svfiprintf_r+0x130>
 800a95e:	7863      	ldrb	r3, [r4, #1]
 800a960:	2b2a      	cmp	r3, #42	@ 0x2a
 800a962:	d132      	bne.n	800a9ca <_svfiprintf_r+0x186>
 800a964:	9b03      	ldr	r3, [sp, #12]
 800a966:	1d1a      	adds	r2, r3, #4
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	9203      	str	r2, [sp, #12]
 800a96c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a970:	3402      	adds	r4, #2
 800a972:	9305      	str	r3, [sp, #20]
 800a974:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aa38 <_svfiprintf_r+0x1f4>
 800a978:	7821      	ldrb	r1, [r4, #0]
 800a97a:	2203      	movs	r2, #3
 800a97c:	4650      	mov	r0, sl
 800a97e:	f7f5 fc4f 	bl	8000220 <memchr>
 800a982:	b138      	cbz	r0, 800a994 <_svfiprintf_r+0x150>
 800a984:	9b04      	ldr	r3, [sp, #16]
 800a986:	eba0 000a 	sub.w	r0, r0, sl
 800a98a:	2240      	movs	r2, #64	@ 0x40
 800a98c:	4082      	lsls	r2, r0
 800a98e:	4313      	orrs	r3, r2
 800a990:	3401      	adds	r4, #1
 800a992:	9304      	str	r3, [sp, #16]
 800a994:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a998:	4824      	ldr	r0, [pc, #144]	@ (800aa2c <_svfiprintf_r+0x1e8>)
 800a99a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a99e:	2206      	movs	r2, #6
 800a9a0:	f7f5 fc3e 	bl	8000220 <memchr>
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	d036      	beq.n	800aa16 <_svfiprintf_r+0x1d2>
 800a9a8:	4b21      	ldr	r3, [pc, #132]	@ (800aa30 <_svfiprintf_r+0x1ec>)
 800a9aa:	bb1b      	cbnz	r3, 800a9f4 <_svfiprintf_r+0x1b0>
 800a9ac:	9b03      	ldr	r3, [sp, #12]
 800a9ae:	3307      	adds	r3, #7
 800a9b0:	f023 0307 	bic.w	r3, r3, #7
 800a9b4:	3308      	adds	r3, #8
 800a9b6:	9303      	str	r3, [sp, #12]
 800a9b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ba:	4433      	add	r3, r6
 800a9bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9be:	e76a      	b.n	800a896 <_svfiprintf_r+0x52>
 800a9c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9c4:	460c      	mov	r4, r1
 800a9c6:	2001      	movs	r0, #1
 800a9c8:	e7a8      	b.n	800a91c <_svfiprintf_r+0xd8>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	3401      	adds	r4, #1
 800a9ce:	9305      	str	r3, [sp, #20]
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	f04f 0c0a 	mov.w	ip, #10
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9dc:	3a30      	subs	r2, #48	@ 0x30
 800a9de:	2a09      	cmp	r2, #9
 800a9e0:	d903      	bls.n	800a9ea <_svfiprintf_r+0x1a6>
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d0c6      	beq.n	800a974 <_svfiprintf_r+0x130>
 800a9e6:	9105      	str	r1, [sp, #20]
 800a9e8:	e7c4      	b.n	800a974 <_svfiprintf_r+0x130>
 800a9ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	e7f0      	b.n	800a9d6 <_svfiprintf_r+0x192>
 800a9f4:	ab03      	add	r3, sp, #12
 800a9f6:	9300      	str	r3, [sp, #0]
 800a9f8:	462a      	mov	r2, r5
 800a9fa:	4b0e      	ldr	r3, [pc, #56]	@ (800aa34 <_svfiprintf_r+0x1f0>)
 800a9fc:	a904      	add	r1, sp, #16
 800a9fe:	4638      	mov	r0, r7
 800aa00:	f7fd fe8a 	bl	8008718 <_printf_float>
 800aa04:	1c42      	adds	r2, r0, #1
 800aa06:	4606      	mov	r6, r0
 800aa08:	d1d6      	bne.n	800a9b8 <_svfiprintf_r+0x174>
 800aa0a:	89ab      	ldrh	r3, [r5, #12]
 800aa0c:	065b      	lsls	r3, r3, #25
 800aa0e:	f53f af2d 	bmi.w	800a86c <_svfiprintf_r+0x28>
 800aa12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa14:	e72c      	b.n	800a870 <_svfiprintf_r+0x2c>
 800aa16:	ab03      	add	r3, sp, #12
 800aa18:	9300      	str	r3, [sp, #0]
 800aa1a:	462a      	mov	r2, r5
 800aa1c:	4b05      	ldr	r3, [pc, #20]	@ (800aa34 <_svfiprintf_r+0x1f0>)
 800aa1e:	a904      	add	r1, sp, #16
 800aa20:	4638      	mov	r0, r7
 800aa22:	f7fe f911 	bl	8008c48 <_printf_i>
 800aa26:	e7ed      	b.n	800aa04 <_svfiprintf_r+0x1c0>
 800aa28:	0800bb18 	.word	0x0800bb18
 800aa2c:	0800bb22 	.word	0x0800bb22
 800aa30:	08008719 	.word	0x08008719
 800aa34:	0800a78d 	.word	0x0800a78d
 800aa38:	0800bb1e 	.word	0x0800bb1e

0800aa3c <__sflush_r>:
 800aa3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa44:	0716      	lsls	r6, r2, #28
 800aa46:	4605      	mov	r5, r0
 800aa48:	460c      	mov	r4, r1
 800aa4a:	d454      	bmi.n	800aaf6 <__sflush_r+0xba>
 800aa4c:	684b      	ldr	r3, [r1, #4]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	dc02      	bgt.n	800aa58 <__sflush_r+0x1c>
 800aa52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	dd48      	ble.n	800aaea <__sflush_r+0xae>
 800aa58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa5a:	2e00      	cmp	r6, #0
 800aa5c:	d045      	beq.n	800aaea <__sflush_r+0xae>
 800aa5e:	2300      	movs	r3, #0
 800aa60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aa64:	682f      	ldr	r7, [r5, #0]
 800aa66:	6a21      	ldr	r1, [r4, #32]
 800aa68:	602b      	str	r3, [r5, #0]
 800aa6a:	d030      	beq.n	800aace <__sflush_r+0x92>
 800aa6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aa6e:	89a3      	ldrh	r3, [r4, #12]
 800aa70:	0759      	lsls	r1, r3, #29
 800aa72:	d505      	bpl.n	800aa80 <__sflush_r+0x44>
 800aa74:	6863      	ldr	r3, [r4, #4]
 800aa76:	1ad2      	subs	r2, r2, r3
 800aa78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aa7a:	b10b      	cbz	r3, 800aa80 <__sflush_r+0x44>
 800aa7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aa7e:	1ad2      	subs	r2, r2, r3
 800aa80:	2300      	movs	r3, #0
 800aa82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa84:	6a21      	ldr	r1, [r4, #32]
 800aa86:	4628      	mov	r0, r5
 800aa88:	47b0      	blx	r6
 800aa8a:	1c43      	adds	r3, r0, #1
 800aa8c:	89a3      	ldrh	r3, [r4, #12]
 800aa8e:	d106      	bne.n	800aa9e <__sflush_r+0x62>
 800aa90:	6829      	ldr	r1, [r5, #0]
 800aa92:	291d      	cmp	r1, #29
 800aa94:	d82b      	bhi.n	800aaee <__sflush_r+0xb2>
 800aa96:	4a2a      	ldr	r2, [pc, #168]	@ (800ab40 <__sflush_r+0x104>)
 800aa98:	410a      	asrs	r2, r1
 800aa9a:	07d6      	lsls	r6, r2, #31
 800aa9c:	d427      	bmi.n	800aaee <__sflush_r+0xb2>
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	6062      	str	r2, [r4, #4]
 800aaa2:	04d9      	lsls	r1, r3, #19
 800aaa4:	6922      	ldr	r2, [r4, #16]
 800aaa6:	6022      	str	r2, [r4, #0]
 800aaa8:	d504      	bpl.n	800aab4 <__sflush_r+0x78>
 800aaaa:	1c42      	adds	r2, r0, #1
 800aaac:	d101      	bne.n	800aab2 <__sflush_r+0x76>
 800aaae:	682b      	ldr	r3, [r5, #0]
 800aab0:	b903      	cbnz	r3, 800aab4 <__sflush_r+0x78>
 800aab2:	6560      	str	r0, [r4, #84]	@ 0x54
 800aab4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aab6:	602f      	str	r7, [r5, #0]
 800aab8:	b1b9      	cbz	r1, 800aaea <__sflush_r+0xae>
 800aaba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aabe:	4299      	cmp	r1, r3
 800aac0:	d002      	beq.n	800aac8 <__sflush_r+0x8c>
 800aac2:	4628      	mov	r0, r5
 800aac4:	f7ff f9e0 	bl	8009e88 <_free_r>
 800aac8:	2300      	movs	r3, #0
 800aaca:	6363      	str	r3, [r4, #52]	@ 0x34
 800aacc:	e00d      	b.n	800aaea <__sflush_r+0xae>
 800aace:	2301      	movs	r3, #1
 800aad0:	4628      	mov	r0, r5
 800aad2:	47b0      	blx	r6
 800aad4:	4602      	mov	r2, r0
 800aad6:	1c50      	adds	r0, r2, #1
 800aad8:	d1c9      	bne.n	800aa6e <__sflush_r+0x32>
 800aada:	682b      	ldr	r3, [r5, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d0c6      	beq.n	800aa6e <__sflush_r+0x32>
 800aae0:	2b1d      	cmp	r3, #29
 800aae2:	d001      	beq.n	800aae8 <__sflush_r+0xac>
 800aae4:	2b16      	cmp	r3, #22
 800aae6:	d11e      	bne.n	800ab26 <__sflush_r+0xea>
 800aae8:	602f      	str	r7, [r5, #0]
 800aaea:	2000      	movs	r0, #0
 800aaec:	e022      	b.n	800ab34 <__sflush_r+0xf8>
 800aaee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aaf2:	b21b      	sxth	r3, r3
 800aaf4:	e01b      	b.n	800ab2e <__sflush_r+0xf2>
 800aaf6:	690f      	ldr	r7, [r1, #16]
 800aaf8:	2f00      	cmp	r7, #0
 800aafa:	d0f6      	beq.n	800aaea <__sflush_r+0xae>
 800aafc:	0793      	lsls	r3, r2, #30
 800aafe:	680e      	ldr	r6, [r1, #0]
 800ab00:	bf08      	it	eq
 800ab02:	694b      	ldreq	r3, [r1, #20]
 800ab04:	600f      	str	r7, [r1, #0]
 800ab06:	bf18      	it	ne
 800ab08:	2300      	movne	r3, #0
 800ab0a:	eba6 0807 	sub.w	r8, r6, r7
 800ab0e:	608b      	str	r3, [r1, #8]
 800ab10:	f1b8 0f00 	cmp.w	r8, #0
 800ab14:	dde9      	ble.n	800aaea <__sflush_r+0xae>
 800ab16:	6a21      	ldr	r1, [r4, #32]
 800ab18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ab1a:	4643      	mov	r3, r8
 800ab1c:	463a      	mov	r2, r7
 800ab1e:	4628      	mov	r0, r5
 800ab20:	47b0      	blx	r6
 800ab22:	2800      	cmp	r0, #0
 800ab24:	dc08      	bgt.n	800ab38 <__sflush_r+0xfc>
 800ab26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab2e:	81a3      	strh	r3, [r4, #12]
 800ab30:	f04f 30ff 	mov.w	r0, #4294967295
 800ab34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab38:	4407      	add	r7, r0
 800ab3a:	eba8 0800 	sub.w	r8, r8, r0
 800ab3e:	e7e7      	b.n	800ab10 <__sflush_r+0xd4>
 800ab40:	dfbffffe 	.word	0xdfbffffe

0800ab44 <_fflush_r>:
 800ab44:	b538      	push	{r3, r4, r5, lr}
 800ab46:	690b      	ldr	r3, [r1, #16]
 800ab48:	4605      	mov	r5, r0
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	b913      	cbnz	r3, 800ab54 <_fflush_r+0x10>
 800ab4e:	2500      	movs	r5, #0
 800ab50:	4628      	mov	r0, r5
 800ab52:	bd38      	pop	{r3, r4, r5, pc}
 800ab54:	b118      	cbz	r0, 800ab5e <_fflush_r+0x1a>
 800ab56:	6a03      	ldr	r3, [r0, #32]
 800ab58:	b90b      	cbnz	r3, 800ab5e <_fflush_r+0x1a>
 800ab5a:	f7fe fa21 	bl	8008fa0 <__sinit>
 800ab5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d0f3      	beq.n	800ab4e <_fflush_r+0xa>
 800ab66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ab68:	07d0      	lsls	r0, r2, #31
 800ab6a:	d404      	bmi.n	800ab76 <_fflush_r+0x32>
 800ab6c:	0599      	lsls	r1, r3, #22
 800ab6e:	d402      	bmi.n	800ab76 <_fflush_r+0x32>
 800ab70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab72:	f7fe fb2c 	bl	80091ce <__retarget_lock_acquire_recursive>
 800ab76:	4628      	mov	r0, r5
 800ab78:	4621      	mov	r1, r4
 800ab7a:	f7ff ff5f 	bl	800aa3c <__sflush_r>
 800ab7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab80:	07da      	lsls	r2, r3, #31
 800ab82:	4605      	mov	r5, r0
 800ab84:	d4e4      	bmi.n	800ab50 <_fflush_r+0xc>
 800ab86:	89a3      	ldrh	r3, [r4, #12]
 800ab88:	059b      	lsls	r3, r3, #22
 800ab8a:	d4e1      	bmi.n	800ab50 <_fflush_r+0xc>
 800ab8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab8e:	f7fe fb1f 	bl	80091d0 <__retarget_lock_release_recursive>
 800ab92:	e7dd      	b.n	800ab50 <_fflush_r+0xc>

0800ab94 <memmove>:
 800ab94:	4288      	cmp	r0, r1
 800ab96:	b510      	push	{r4, lr}
 800ab98:	eb01 0402 	add.w	r4, r1, r2
 800ab9c:	d902      	bls.n	800aba4 <memmove+0x10>
 800ab9e:	4284      	cmp	r4, r0
 800aba0:	4623      	mov	r3, r4
 800aba2:	d807      	bhi.n	800abb4 <memmove+0x20>
 800aba4:	1e43      	subs	r3, r0, #1
 800aba6:	42a1      	cmp	r1, r4
 800aba8:	d008      	beq.n	800abbc <memmove+0x28>
 800abaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abb2:	e7f8      	b.n	800aba6 <memmove+0x12>
 800abb4:	4402      	add	r2, r0
 800abb6:	4601      	mov	r1, r0
 800abb8:	428a      	cmp	r2, r1
 800abba:	d100      	bne.n	800abbe <memmove+0x2a>
 800abbc:	bd10      	pop	{r4, pc}
 800abbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abc6:	e7f7      	b.n	800abb8 <memmove+0x24>

0800abc8 <_sbrk_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	4d06      	ldr	r5, [pc, #24]	@ (800abe4 <_sbrk_r+0x1c>)
 800abcc:	2300      	movs	r3, #0
 800abce:	4604      	mov	r4, r0
 800abd0:	4608      	mov	r0, r1
 800abd2:	602b      	str	r3, [r5, #0]
 800abd4:	f7f8 f920 	bl	8002e18 <_sbrk>
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	d102      	bne.n	800abe2 <_sbrk_r+0x1a>
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	b103      	cbz	r3, 800abe2 <_sbrk_r+0x1a>
 800abe0:	6023      	str	r3, [r4, #0]
 800abe2:	bd38      	pop	{r3, r4, r5, pc}
 800abe4:	20000574 	.word	0x20000574

0800abe8 <__assert_func>:
 800abe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abea:	4614      	mov	r4, r2
 800abec:	461a      	mov	r2, r3
 800abee:	4b09      	ldr	r3, [pc, #36]	@ (800ac14 <__assert_func+0x2c>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4605      	mov	r5, r0
 800abf4:	68d8      	ldr	r0, [r3, #12]
 800abf6:	b954      	cbnz	r4, 800ac0e <__assert_func+0x26>
 800abf8:	4b07      	ldr	r3, [pc, #28]	@ (800ac18 <__assert_func+0x30>)
 800abfa:	461c      	mov	r4, r3
 800abfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac00:	9100      	str	r1, [sp, #0]
 800ac02:	462b      	mov	r3, r5
 800ac04:	4905      	ldr	r1, [pc, #20]	@ (800ac1c <__assert_func+0x34>)
 800ac06:	f000 f86f 	bl	800ace8 <fiprintf>
 800ac0a:	f000 f87f 	bl	800ad0c <abort>
 800ac0e:	4b04      	ldr	r3, [pc, #16]	@ (800ac20 <__assert_func+0x38>)
 800ac10:	e7f4      	b.n	800abfc <__assert_func+0x14>
 800ac12:	bf00      	nop
 800ac14:	20000018 	.word	0x20000018
 800ac18:	0800bb6e 	.word	0x0800bb6e
 800ac1c:	0800bb40 	.word	0x0800bb40
 800ac20:	0800bb33 	.word	0x0800bb33

0800ac24 <_calloc_r>:
 800ac24:	b570      	push	{r4, r5, r6, lr}
 800ac26:	fba1 5402 	umull	r5, r4, r1, r2
 800ac2a:	b93c      	cbnz	r4, 800ac3c <_calloc_r+0x18>
 800ac2c:	4629      	mov	r1, r5
 800ac2e:	f7ff f99f 	bl	8009f70 <_malloc_r>
 800ac32:	4606      	mov	r6, r0
 800ac34:	b928      	cbnz	r0, 800ac42 <_calloc_r+0x1e>
 800ac36:	2600      	movs	r6, #0
 800ac38:	4630      	mov	r0, r6
 800ac3a:	bd70      	pop	{r4, r5, r6, pc}
 800ac3c:	220c      	movs	r2, #12
 800ac3e:	6002      	str	r2, [r0, #0]
 800ac40:	e7f9      	b.n	800ac36 <_calloc_r+0x12>
 800ac42:	462a      	mov	r2, r5
 800ac44:	4621      	mov	r1, r4
 800ac46:	f7fe fa44 	bl	80090d2 <memset>
 800ac4a:	e7f5      	b.n	800ac38 <_calloc_r+0x14>

0800ac4c <__ascii_mbtowc>:
 800ac4c:	b082      	sub	sp, #8
 800ac4e:	b901      	cbnz	r1, 800ac52 <__ascii_mbtowc+0x6>
 800ac50:	a901      	add	r1, sp, #4
 800ac52:	b142      	cbz	r2, 800ac66 <__ascii_mbtowc+0x1a>
 800ac54:	b14b      	cbz	r3, 800ac6a <__ascii_mbtowc+0x1e>
 800ac56:	7813      	ldrb	r3, [r2, #0]
 800ac58:	600b      	str	r3, [r1, #0]
 800ac5a:	7812      	ldrb	r2, [r2, #0]
 800ac5c:	1e10      	subs	r0, r2, #0
 800ac5e:	bf18      	it	ne
 800ac60:	2001      	movne	r0, #1
 800ac62:	b002      	add	sp, #8
 800ac64:	4770      	bx	lr
 800ac66:	4610      	mov	r0, r2
 800ac68:	e7fb      	b.n	800ac62 <__ascii_mbtowc+0x16>
 800ac6a:	f06f 0001 	mvn.w	r0, #1
 800ac6e:	e7f8      	b.n	800ac62 <__ascii_mbtowc+0x16>

0800ac70 <_realloc_r>:
 800ac70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac74:	4680      	mov	r8, r0
 800ac76:	4615      	mov	r5, r2
 800ac78:	460c      	mov	r4, r1
 800ac7a:	b921      	cbnz	r1, 800ac86 <_realloc_r+0x16>
 800ac7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac80:	4611      	mov	r1, r2
 800ac82:	f7ff b975 	b.w	8009f70 <_malloc_r>
 800ac86:	b92a      	cbnz	r2, 800ac94 <_realloc_r+0x24>
 800ac88:	f7ff f8fe 	bl	8009e88 <_free_r>
 800ac8c:	2400      	movs	r4, #0
 800ac8e:	4620      	mov	r0, r4
 800ac90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac94:	f000 f841 	bl	800ad1a <_malloc_usable_size_r>
 800ac98:	4285      	cmp	r5, r0
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	d802      	bhi.n	800aca4 <_realloc_r+0x34>
 800ac9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aca2:	d8f4      	bhi.n	800ac8e <_realloc_r+0x1e>
 800aca4:	4629      	mov	r1, r5
 800aca6:	4640      	mov	r0, r8
 800aca8:	f7ff f962 	bl	8009f70 <_malloc_r>
 800acac:	4607      	mov	r7, r0
 800acae:	2800      	cmp	r0, #0
 800acb0:	d0ec      	beq.n	800ac8c <_realloc_r+0x1c>
 800acb2:	42b5      	cmp	r5, r6
 800acb4:	462a      	mov	r2, r5
 800acb6:	4621      	mov	r1, r4
 800acb8:	bf28      	it	cs
 800acba:	4632      	movcs	r2, r6
 800acbc:	f7fe fa89 	bl	80091d2 <memcpy>
 800acc0:	4621      	mov	r1, r4
 800acc2:	4640      	mov	r0, r8
 800acc4:	f7ff f8e0 	bl	8009e88 <_free_r>
 800acc8:	463c      	mov	r4, r7
 800acca:	e7e0      	b.n	800ac8e <_realloc_r+0x1e>

0800accc <__ascii_wctomb>:
 800accc:	4603      	mov	r3, r0
 800acce:	4608      	mov	r0, r1
 800acd0:	b141      	cbz	r1, 800ace4 <__ascii_wctomb+0x18>
 800acd2:	2aff      	cmp	r2, #255	@ 0xff
 800acd4:	d904      	bls.n	800ace0 <__ascii_wctomb+0x14>
 800acd6:	228a      	movs	r2, #138	@ 0x8a
 800acd8:	601a      	str	r2, [r3, #0]
 800acda:	f04f 30ff 	mov.w	r0, #4294967295
 800acde:	4770      	bx	lr
 800ace0:	700a      	strb	r2, [r1, #0]
 800ace2:	2001      	movs	r0, #1
 800ace4:	4770      	bx	lr
	...

0800ace8 <fiprintf>:
 800ace8:	b40e      	push	{r1, r2, r3}
 800acea:	b503      	push	{r0, r1, lr}
 800acec:	4601      	mov	r1, r0
 800acee:	ab03      	add	r3, sp, #12
 800acf0:	4805      	ldr	r0, [pc, #20]	@ (800ad08 <fiprintf+0x20>)
 800acf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800acf6:	6800      	ldr	r0, [r0, #0]
 800acf8:	9301      	str	r3, [sp, #4]
 800acfa:	f000 f83f 	bl	800ad7c <_vfiprintf_r>
 800acfe:	b002      	add	sp, #8
 800ad00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad04:	b003      	add	sp, #12
 800ad06:	4770      	bx	lr
 800ad08:	20000018 	.word	0x20000018

0800ad0c <abort>:
 800ad0c:	b508      	push	{r3, lr}
 800ad0e:	2006      	movs	r0, #6
 800ad10:	f000 fa08 	bl	800b124 <raise>
 800ad14:	2001      	movs	r0, #1
 800ad16:	f7f8 f806 	bl	8002d26 <_exit>

0800ad1a <_malloc_usable_size_r>:
 800ad1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad1e:	1f18      	subs	r0, r3, #4
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	bfbc      	itt	lt
 800ad24:	580b      	ldrlt	r3, [r1, r0]
 800ad26:	18c0      	addlt	r0, r0, r3
 800ad28:	4770      	bx	lr

0800ad2a <__sfputc_r>:
 800ad2a:	6893      	ldr	r3, [r2, #8]
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	b410      	push	{r4}
 800ad32:	6093      	str	r3, [r2, #8]
 800ad34:	da08      	bge.n	800ad48 <__sfputc_r+0x1e>
 800ad36:	6994      	ldr	r4, [r2, #24]
 800ad38:	42a3      	cmp	r3, r4
 800ad3a:	db01      	blt.n	800ad40 <__sfputc_r+0x16>
 800ad3c:	290a      	cmp	r1, #10
 800ad3e:	d103      	bne.n	800ad48 <__sfputc_r+0x1e>
 800ad40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad44:	f000 b932 	b.w	800afac <__swbuf_r>
 800ad48:	6813      	ldr	r3, [r2, #0]
 800ad4a:	1c58      	adds	r0, r3, #1
 800ad4c:	6010      	str	r0, [r2, #0]
 800ad4e:	7019      	strb	r1, [r3, #0]
 800ad50:	4608      	mov	r0, r1
 800ad52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <__sfputs_r>:
 800ad58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5a:	4606      	mov	r6, r0
 800ad5c:	460f      	mov	r7, r1
 800ad5e:	4614      	mov	r4, r2
 800ad60:	18d5      	adds	r5, r2, r3
 800ad62:	42ac      	cmp	r4, r5
 800ad64:	d101      	bne.n	800ad6a <__sfputs_r+0x12>
 800ad66:	2000      	movs	r0, #0
 800ad68:	e007      	b.n	800ad7a <__sfputs_r+0x22>
 800ad6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad6e:	463a      	mov	r2, r7
 800ad70:	4630      	mov	r0, r6
 800ad72:	f7ff ffda 	bl	800ad2a <__sfputc_r>
 800ad76:	1c43      	adds	r3, r0, #1
 800ad78:	d1f3      	bne.n	800ad62 <__sfputs_r+0xa>
 800ad7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad7c <_vfiprintf_r>:
 800ad7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad80:	460d      	mov	r5, r1
 800ad82:	b09d      	sub	sp, #116	@ 0x74
 800ad84:	4614      	mov	r4, r2
 800ad86:	4698      	mov	r8, r3
 800ad88:	4606      	mov	r6, r0
 800ad8a:	b118      	cbz	r0, 800ad94 <_vfiprintf_r+0x18>
 800ad8c:	6a03      	ldr	r3, [r0, #32]
 800ad8e:	b90b      	cbnz	r3, 800ad94 <_vfiprintf_r+0x18>
 800ad90:	f7fe f906 	bl	8008fa0 <__sinit>
 800ad94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad96:	07d9      	lsls	r1, r3, #31
 800ad98:	d405      	bmi.n	800ada6 <_vfiprintf_r+0x2a>
 800ad9a:	89ab      	ldrh	r3, [r5, #12]
 800ad9c:	059a      	lsls	r2, r3, #22
 800ad9e:	d402      	bmi.n	800ada6 <_vfiprintf_r+0x2a>
 800ada0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ada2:	f7fe fa14 	bl	80091ce <__retarget_lock_acquire_recursive>
 800ada6:	89ab      	ldrh	r3, [r5, #12]
 800ada8:	071b      	lsls	r3, r3, #28
 800adaa:	d501      	bpl.n	800adb0 <_vfiprintf_r+0x34>
 800adac:	692b      	ldr	r3, [r5, #16]
 800adae:	b99b      	cbnz	r3, 800add8 <_vfiprintf_r+0x5c>
 800adb0:	4629      	mov	r1, r5
 800adb2:	4630      	mov	r0, r6
 800adb4:	f000 f938 	bl	800b028 <__swsetup_r>
 800adb8:	b170      	cbz	r0, 800add8 <_vfiprintf_r+0x5c>
 800adba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800adbc:	07dc      	lsls	r4, r3, #31
 800adbe:	d504      	bpl.n	800adca <_vfiprintf_r+0x4e>
 800adc0:	f04f 30ff 	mov.w	r0, #4294967295
 800adc4:	b01d      	add	sp, #116	@ 0x74
 800adc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adca:	89ab      	ldrh	r3, [r5, #12]
 800adcc:	0598      	lsls	r0, r3, #22
 800adce:	d4f7      	bmi.n	800adc0 <_vfiprintf_r+0x44>
 800add0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800add2:	f7fe f9fd 	bl	80091d0 <__retarget_lock_release_recursive>
 800add6:	e7f3      	b.n	800adc0 <_vfiprintf_r+0x44>
 800add8:	2300      	movs	r3, #0
 800adda:	9309      	str	r3, [sp, #36]	@ 0x24
 800addc:	2320      	movs	r3, #32
 800adde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ade2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ade6:	2330      	movs	r3, #48	@ 0x30
 800ade8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800af98 <_vfiprintf_r+0x21c>
 800adec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800adf0:	f04f 0901 	mov.w	r9, #1
 800adf4:	4623      	mov	r3, r4
 800adf6:	469a      	mov	sl, r3
 800adf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adfc:	b10a      	cbz	r2, 800ae02 <_vfiprintf_r+0x86>
 800adfe:	2a25      	cmp	r2, #37	@ 0x25
 800ae00:	d1f9      	bne.n	800adf6 <_vfiprintf_r+0x7a>
 800ae02:	ebba 0b04 	subs.w	fp, sl, r4
 800ae06:	d00b      	beq.n	800ae20 <_vfiprintf_r+0xa4>
 800ae08:	465b      	mov	r3, fp
 800ae0a:	4622      	mov	r2, r4
 800ae0c:	4629      	mov	r1, r5
 800ae0e:	4630      	mov	r0, r6
 800ae10:	f7ff ffa2 	bl	800ad58 <__sfputs_r>
 800ae14:	3001      	adds	r0, #1
 800ae16:	f000 80a7 	beq.w	800af68 <_vfiprintf_r+0x1ec>
 800ae1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae1c:	445a      	add	r2, fp
 800ae1e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae20:	f89a 3000 	ldrb.w	r3, [sl]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f000 809f 	beq.w	800af68 <_vfiprintf_r+0x1ec>
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae34:	f10a 0a01 	add.w	sl, sl, #1
 800ae38:	9304      	str	r3, [sp, #16]
 800ae3a:	9307      	str	r3, [sp, #28]
 800ae3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae40:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae42:	4654      	mov	r4, sl
 800ae44:	2205      	movs	r2, #5
 800ae46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae4a:	4853      	ldr	r0, [pc, #332]	@ (800af98 <_vfiprintf_r+0x21c>)
 800ae4c:	f7f5 f9e8 	bl	8000220 <memchr>
 800ae50:	9a04      	ldr	r2, [sp, #16]
 800ae52:	b9d8      	cbnz	r0, 800ae8c <_vfiprintf_r+0x110>
 800ae54:	06d1      	lsls	r1, r2, #27
 800ae56:	bf44      	itt	mi
 800ae58:	2320      	movmi	r3, #32
 800ae5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae5e:	0713      	lsls	r3, r2, #28
 800ae60:	bf44      	itt	mi
 800ae62:	232b      	movmi	r3, #43	@ 0x2b
 800ae64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae68:	f89a 3000 	ldrb.w	r3, [sl]
 800ae6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae6e:	d015      	beq.n	800ae9c <_vfiprintf_r+0x120>
 800ae70:	9a07      	ldr	r2, [sp, #28]
 800ae72:	4654      	mov	r4, sl
 800ae74:	2000      	movs	r0, #0
 800ae76:	f04f 0c0a 	mov.w	ip, #10
 800ae7a:	4621      	mov	r1, r4
 800ae7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae80:	3b30      	subs	r3, #48	@ 0x30
 800ae82:	2b09      	cmp	r3, #9
 800ae84:	d94b      	bls.n	800af1e <_vfiprintf_r+0x1a2>
 800ae86:	b1b0      	cbz	r0, 800aeb6 <_vfiprintf_r+0x13a>
 800ae88:	9207      	str	r2, [sp, #28]
 800ae8a:	e014      	b.n	800aeb6 <_vfiprintf_r+0x13a>
 800ae8c:	eba0 0308 	sub.w	r3, r0, r8
 800ae90:	fa09 f303 	lsl.w	r3, r9, r3
 800ae94:	4313      	orrs	r3, r2
 800ae96:	9304      	str	r3, [sp, #16]
 800ae98:	46a2      	mov	sl, r4
 800ae9a:	e7d2      	b.n	800ae42 <_vfiprintf_r+0xc6>
 800ae9c:	9b03      	ldr	r3, [sp, #12]
 800ae9e:	1d19      	adds	r1, r3, #4
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	9103      	str	r1, [sp, #12]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	bfbb      	ittet	lt
 800aea8:	425b      	neglt	r3, r3
 800aeaa:	f042 0202 	orrlt.w	r2, r2, #2
 800aeae:	9307      	strge	r3, [sp, #28]
 800aeb0:	9307      	strlt	r3, [sp, #28]
 800aeb2:	bfb8      	it	lt
 800aeb4:	9204      	strlt	r2, [sp, #16]
 800aeb6:	7823      	ldrb	r3, [r4, #0]
 800aeb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800aeba:	d10a      	bne.n	800aed2 <_vfiprintf_r+0x156>
 800aebc:	7863      	ldrb	r3, [r4, #1]
 800aebe:	2b2a      	cmp	r3, #42	@ 0x2a
 800aec0:	d132      	bne.n	800af28 <_vfiprintf_r+0x1ac>
 800aec2:	9b03      	ldr	r3, [sp, #12]
 800aec4:	1d1a      	adds	r2, r3, #4
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	9203      	str	r2, [sp, #12]
 800aeca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aece:	3402      	adds	r4, #2
 800aed0:	9305      	str	r3, [sp, #20]
 800aed2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800afa8 <_vfiprintf_r+0x22c>
 800aed6:	7821      	ldrb	r1, [r4, #0]
 800aed8:	2203      	movs	r2, #3
 800aeda:	4650      	mov	r0, sl
 800aedc:	f7f5 f9a0 	bl	8000220 <memchr>
 800aee0:	b138      	cbz	r0, 800aef2 <_vfiprintf_r+0x176>
 800aee2:	9b04      	ldr	r3, [sp, #16]
 800aee4:	eba0 000a 	sub.w	r0, r0, sl
 800aee8:	2240      	movs	r2, #64	@ 0x40
 800aeea:	4082      	lsls	r2, r0
 800aeec:	4313      	orrs	r3, r2
 800aeee:	3401      	adds	r4, #1
 800aef0:	9304      	str	r3, [sp, #16]
 800aef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aef6:	4829      	ldr	r0, [pc, #164]	@ (800af9c <_vfiprintf_r+0x220>)
 800aef8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aefc:	2206      	movs	r2, #6
 800aefe:	f7f5 f98f 	bl	8000220 <memchr>
 800af02:	2800      	cmp	r0, #0
 800af04:	d03f      	beq.n	800af86 <_vfiprintf_r+0x20a>
 800af06:	4b26      	ldr	r3, [pc, #152]	@ (800afa0 <_vfiprintf_r+0x224>)
 800af08:	bb1b      	cbnz	r3, 800af52 <_vfiprintf_r+0x1d6>
 800af0a:	9b03      	ldr	r3, [sp, #12]
 800af0c:	3307      	adds	r3, #7
 800af0e:	f023 0307 	bic.w	r3, r3, #7
 800af12:	3308      	adds	r3, #8
 800af14:	9303      	str	r3, [sp, #12]
 800af16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af18:	443b      	add	r3, r7
 800af1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800af1c:	e76a      	b.n	800adf4 <_vfiprintf_r+0x78>
 800af1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800af22:	460c      	mov	r4, r1
 800af24:	2001      	movs	r0, #1
 800af26:	e7a8      	b.n	800ae7a <_vfiprintf_r+0xfe>
 800af28:	2300      	movs	r3, #0
 800af2a:	3401      	adds	r4, #1
 800af2c:	9305      	str	r3, [sp, #20]
 800af2e:	4619      	mov	r1, r3
 800af30:	f04f 0c0a 	mov.w	ip, #10
 800af34:	4620      	mov	r0, r4
 800af36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af3a:	3a30      	subs	r2, #48	@ 0x30
 800af3c:	2a09      	cmp	r2, #9
 800af3e:	d903      	bls.n	800af48 <_vfiprintf_r+0x1cc>
 800af40:	2b00      	cmp	r3, #0
 800af42:	d0c6      	beq.n	800aed2 <_vfiprintf_r+0x156>
 800af44:	9105      	str	r1, [sp, #20]
 800af46:	e7c4      	b.n	800aed2 <_vfiprintf_r+0x156>
 800af48:	fb0c 2101 	mla	r1, ip, r1, r2
 800af4c:	4604      	mov	r4, r0
 800af4e:	2301      	movs	r3, #1
 800af50:	e7f0      	b.n	800af34 <_vfiprintf_r+0x1b8>
 800af52:	ab03      	add	r3, sp, #12
 800af54:	9300      	str	r3, [sp, #0]
 800af56:	462a      	mov	r2, r5
 800af58:	4b12      	ldr	r3, [pc, #72]	@ (800afa4 <_vfiprintf_r+0x228>)
 800af5a:	a904      	add	r1, sp, #16
 800af5c:	4630      	mov	r0, r6
 800af5e:	f7fd fbdb 	bl	8008718 <_printf_float>
 800af62:	4607      	mov	r7, r0
 800af64:	1c78      	adds	r0, r7, #1
 800af66:	d1d6      	bne.n	800af16 <_vfiprintf_r+0x19a>
 800af68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af6a:	07d9      	lsls	r1, r3, #31
 800af6c:	d405      	bmi.n	800af7a <_vfiprintf_r+0x1fe>
 800af6e:	89ab      	ldrh	r3, [r5, #12]
 800af70:	059a      	lsls	r2, r3, #22
 800af72:	d402      	bmi.n	800af7a <_vfiprintf_r+0x1fe>
 800af74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af76:	f7fe f92b 	bl	80091d0 <__retarget_lock_release_recursive>
 800af7a:	89ab      	ldrh	r3, [r5, #12]
 800af7c:	065b      	lsls	r3, r3, #25
 800af7e:	f53f af1f 	bmi.w	800adc0 <_vfiprintf_r+0x44>
 800af82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af84:	e71e      	b.n	800adc4 <_vfiprintf_r+0x48>
 800af86:	ab03      	add	r3, sp, #12
 800af88:	9300      	str	r3, [sp, #0]
 800af8a:	462a      	mov	r2, r5
 800af8c:	4b05      	ldr	r3, [pc, #20]	@ (800afa4 <_vfiprintf_r+0x228>)
 800af8e:	a904      	add	r1, sp, #16
 800af90:	4630      	mov	r0, r6
 800af92:	f7fd fe59 	bl	8008c48 <_printf_i>
 800af96:	e7e4      	b.n	800af62 <_vfiprintf_r+0x1e6>
 800af98:	0800bb18 	.word	0x0800bb18
 800af9c:	0800bb22 	.word	0x0800bb22
 800afa0:	08008719 	.word	0x08008719
 800afa4:	0800ad59 	.word	0x0800ad59
 800afa8:	0800bb1e 	.word	0x0800bb1e

0800afac <__swbuf_r>:
 800afac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afae:	460e      	mov	r6, r1
 800afb0:	4614      	mov	r4, r2
 800afb2:	4605      	mov	r5, r0
 800afb4:	b118      	cbz	r0, 800afbe <__swbuf_r+0x12>
 800afb6:	6a03      	ldr	r3, [r0, #32]
 800afb8:	b90b      	cbnz	r3, 800afbe <__swbuf_r+0x12>
 800afba:	f7fd fff1 	bl	8008fa0 <__sinit>
 800afbe:	69a3      	ldr	r3, [r4, #24]
 800afc0:	60a3      	str	r3, [r4, #8]
 800afc2:	89a3      	ldrh	r3, [r4, #12]
 800afc4:	071a      	lsls	r2, r3, #28
 800afc6:	d501      	bpl.n	800afcc <__swbuf_r+0x20>
 800afc8:	6923      	ldr	r3, [r4, #16]
 800afca:	b943      	cbnz	r3, 800afde <__swbuf_r+0x32>
 800afcc:	4621      	mov	r1, r4
 800afce:	4628      	mov	r0, r5
 800afd0:	f000 f82a 	bl	800b028 <__swsetup_r>
 800afd4:	b118      	cbz	r0, 800afde <__swbuf_r+0x32>
 800afd6:	f04f 37ff 	mov.w	r7, #4294967295
 800afda:	4638      	mov	r0, r7
 800afdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afde:	6823      	ldr	r3, [r4, #0]
 800afe0:	6922      	ldr	r2, [r4, #16]
 800afe2:	1a98      	subs	r0, r3, r2
 800afe4:	6963      	ldr	r3, [r4, #20]
 800afe6:	b2f6      	uxtb	r6, r6
 800afe8:	4283      	cmp	r3, r0
 800afea:	4637      	mov	r7, r6
 800afec:	dc05      	bgt.n	800affa <__swbuf_r+0x4e>
 800afee:	4621      	mov	r1, r4
 800aff0:	4628      	mov	r0, r5
 800aff2:	f7ff fda7 	bl	800ab44 <_fflush_r>
 800aff6:	2800      	cmp	r0, #0
 800aff8:	d1ed      	bne.n	800afd6 <__swbuf_r+0x2a>
 800affa:	68a3      	ldr	r3, [r4, #8]
 800affc:	3b01      	subs	r3, #1
 800affe:	60a3      	str	r3, [r4, #8]
 800b000:	6823      	ldr	r3, [r4, #0]
 800b002:	1c5a      	adds	r2, r3, #1
 800b004:	6022      	str	r2, [r4, #0]
 800b006:	701e      	strb	r6, [r3, #0]
 800b008:	6962      	ldr	r2, [r4, #20]
 800b00a:	1c43      	adds	r3, r0, #1
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d004      	beq.n	800b01a <__swbuf_r+0x6e>
 800b010:	89a3      	ldrh	r3, [r4, #12]
 800b012:	07db      	lsls	r3, r3, #31
 800b014:	d5e1      	bpl.n	800afda <__swbuf_r+0x2e>
 800b016:	2e0a      	cmp	r6, #10
 800b018:	d1df      	bne.n	800afda <__swbuf_r+0x2e>
 800b01a:	4621      	mov	r1, r4
 800b01c:	4628      	mov	r0, r5
 800b01e:	f7ff fd91 	bl	800ab44 <_fflush_r>
 800b022:	2800      	cmp	r0, #0
 800b024:	d0d9      	beq.n	800afda <__swbuf_r+0x2e>
 800b026:	e7d6      	b.n	800afd6 <__swbuf_r+0x2a>

0800b028 <__swsetup_r>:
 800b028:	b538      	push	{r3, r4, r5, lr}
 800b02a:	4b29      	ldr	r3, [pc, #164]	@ (800b0d0 <__swsetup_r+0xa8>)
 800b02c:	4605      	mov	r5, r0
 800b02e:	6818      	ldr	r0, [r3, #0]
 800b030:	460c      	mov	r4, r1
 800b032:	b118      	cbz	r0, 800b03c <__swsetup_r+0x14>
 800b034:	6a03      	ldr	r3, [r0, #32]
 800b036:	b90b      	cbnz	r3, 800b03c <__swsetup_r+0x14>
 800b038:	f7fd ffb2 	bl	8008fa0 <__sinit>
 800b03c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b040:	0719      	lsls	r1, r3, #28
 800b042:	d422      	bmi.n	800b08a <__swsetup_r+0x62>
 800b044:	06da      	lsls	r2, r3, #27
 800b046:	d407      	bmi.n	800b058 <__swsetup_r+0x30>
 800b048:	2209      	movs	r2, #9
 800b04a:	602a      	str	r2, [r5, #0]
 800b04c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b050:	81a3      	strh	r3, [r4, #12]
 800b052:	f04f 30ff 	mov.w	r0, #4294967295
 800b056:	e033      	b.n	800b0c0 <__swsetup_r+0x98>
 800b058:	0758      	lsls	r0, r3, #29
 800b05a:	d512      	bpl.n	800b082 <__swsetup_r+0x5a>
 800b05c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b05e:	b141      	cbz	r1, 800b072 <__swsetup_r+0x4a>
 800b060:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b064:	4299      	cmp	r1, r3
 800b066:	d002      	beq.n	800b06e <__swsetup_r+0x46>
 800b068:	4628      	mov	r0, r5
 800b06a:	f7fe ff0d 	bl	8009e88 <_free_r>
 800b06e:	2300      	movs	r3, #0
 800b070:	6363      	str	r3, [r4, #52]	@ 0x34
 800b072:	89a3      	ldrh	r3, [r4, #12]
 800b074:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b078:	81a3      	strh	r3, [r4, #12]
 800b07a:	2300      	movs	r3, #0
 800b07c:	6063      	str	r3, [r4, #4]
 800b07e:	6923      	ldr	r3, [r4, #16]
 800b080:	6023      	str	r3, [r4, #0]
 800b082:	89a3      	ldrh	r3, [r4, #12]
 800b084:	f043 0308 	orr.w	r3, r3, #8
 800b088:	81a3      	strh	r3, [r4, #12]
 800b08a:	6923      	ldr	r3, [r4, #16]
 800b08c:	b94b      	cbnz	r3, 800b0a2 <__swsetup_r+0x7a>
 800b08e:	89a3      	ldrh	r3, [r4, #12]
 800b090:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b098:	d003      	beq.n	800b0a2 <__swsetup_r+0x7a>
 800b09a:	4621      	mov	r1, r4
 800b09c:	4628      	mov	r0, r5
 800b09e:	f000 f883 	bl	800b1a8 <__smakebuf_r>
 800b0a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0a6:	f013 0201 	ands.w	r2, r3, #1
 800b0aa:	d00a      	beq.n	800b0c2 <__swsetup_r+0x9a>
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	60a2      	str	r2, [r4, #8]
 800b0b0:	6962      	ldr	r2, [r4, #20]
 800b0b2:	4252      	negs	r2, r2
 800b0b4:	61a2      	str	r2, [r4, #24]
 800b0b6:	6922      	ldr	r2, [r4, #16]
 800b0b8:	b942      	cbnz	r2, 800b0cc <__swsetup_r+0xa4>
 800b0ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b0be:	d1c5      	bne.n	800b04c <__swsetup_r+0x24>
 800b0c0:	bd38      	pop	{r3, r4, r5, pc}
 800b0c2:	0799      	lsls	r1, r3, #30
 800b0c4:	bf58      	it	pl
 800b0c6:	6962      	ldrpl	r2, [r4, #20]
 800b0c8:	60a2      	str	r2, [r4, #8]
 800b0ca:	e7f4      	b.n	800b0b6 <__swsetup_r+0x8e>
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	e7f7      	b.n	800b0c0 <__swsetup_r+0x98>
 800b0d0:	20000018 	.word	0x20000018

0800b0d4 <_raise_r>:
 800b0d4:	291f      	cmp	r1, #31
 800b0d6:	b538      	push	{r3, r4, r5, lr}
 800b0d8:	4605      	mov	r5, r0
 800b0da:	460c      	mov	r4, r1
 800b0dc:	d904      	bls.n	800b0e8 <_raise_r+0x14>
 800b0de:	2316      	movs	r3, #22
 800b0e0:	6003      	str	r3, [r0, #0]
 800b0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e6:	bd38      	pop	{r3, r4, r5, pc}
 800b0e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b0ea:	b112      	cbz	r2, 800b0f2 <_raise_r+0x1e>
 800b0ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0f0:	b94b      	cbnz	r3, 800b106 <_raise_r+0x32>
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	f000 f830 	bl	800b158 <_getpid_r>
 800b0f8:	4622      	mov	r2, r4
 800b0fa:	4601      	mov	r1, r0
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b102:	f000 b817 	b.w	800b134 <_kill_r>
 800b106:	2b01      	cmp	r3, #1
 800b108:	d00a      	beq.n	800b120 <_raise_r+0x4c>
 800b10a:	1c59      	adds	r1, r3, #1
 800b10c:	d103      	bne.n	800b116 <_raise_r+0x42>
 800b10e:	2316      	movs	r3, #22
 800b110:	6003      	str	r3, [r0, #0]
 800b112:	2001      	movs	r0, #1
 800b114:	e7e7      	b.n	800b0e6 <_raise_r+0x12>
 800b116:	2100      	movs	r1, #0
 800b118:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b11c:	4620      	mov	r0, r4
 800b11e:	4798      	blx	r3
 800b120:	2000      	movs	r0, #0
 800b122:	e7e0      	b.n	800b0e6 <_raise_r+0x12>

0800b124 <raise>:
 800b124:	4b02      	ldr	r3, [pc, #8]	@ (800b130 <raise+0xc>)
 800b126:	4601      	mov	r1, r0
 800b128:	6818      	ldr	r0, [r3, #0]
 800b12a:	f7ff bfd3 	b.w	800b0d4 <_raise_r>
 800b12e:	bf00      	nop
 800b130:	20000018 	.word	0x20000018

0800b134 <_kill_r>:
 800b134:	b538      	push	{r3, r4, r5, lr}
 800b136:	4d07      	ldr	r5, [pc, #28]	@ (800b154 <_kill_r+0x20>)
 800b138:	2300      	movs	r3, #0
 800b13a:	4604      	mov	r4, r0
 800b13c:	4608      	mov	r0, r1
 800b13e:	4611      	mov	r1, r2
 800b140:	602b      	str	r3, [r5, #0]
 800b142:	f7f7 fde0 	bl	8002d06 <_kill>
 800b146:	1c43      	adds	r3, r0, #1
 800b148:	d102      	bne.n	800b150 <_kill_r+0x1c>
 800b14a:	682b      	ldr	r3, [r5, #0]
 800b14c:	b103      	cbz	r3, 800b150 <_kill_r+0x1c>
 800b14e:	6023      	str	r3, [r4, #0]
 800b150:	bd38      	pop	{r3, r4, r5, pc}
 800b152:	bf00      	nop
 800b154:	20000574 	.word	0x20000574

0800b158 <_getpid_r>:
 800b158:	f7f7 bdcd 	b.w	8002cf6 <_getpid>

0800b15c <__swhatbuf_r>:
 800b15c:	b570      	push	{r4, r5, r6, lr}
 800b15e:	460c      	mov	r4, r1
 800b160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b164:	2900      	cmp	r1, #0
 800b166:	b096      	sub	sp, #88	@ 0x58
 800b168:	4615      	mov	r5, r2
 800b16a:	461e      	mov	r6, r3
 800b16c:	da0d      	bge.n	800b18a <__swhatbuf_r+0x2e>
 800b16e:	89a3      	ldrh	r3, [r4, #12]
 800b170:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b174:	f04f 0100 	mov.w	r1, #0
 800b178:	bf14      	ite	ne
 800b17a:	2340      	movne	r3, #64	@ 0x40
 800b17c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b180:	2000      	movs	r0, #0
 800b182:	6031      	str	r1, [r6, #0]
 800b184:	602b      	str	r3, [r5, #0]
 800b186:	b016      	add	sp, #88	@ 0x58
 800b188:	bd70      	pop	{r4, r5, r6, pc}
 800b18a:	466a      	mov	r2, sp
 800b18c:	f000 f848 	bl	800b220 <_fstat_r>
 800b190:	2800      	cmp	r0, #0
 800b192:	dbec      	blt.n	800b16e <__swhatbuf_r+0x12>
 800b194:	9901      	ldr	r1, [sp, #4]
 800b196:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b19a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b19e:	4259      	negs	r1, r3
 800b1a0:	4159      	adcs	r1, r3
 800b1a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b1a6:	e7eb      	b.n	800b180 <__swhatbuf_r+0x24>

0800b1a8 <__smakebuf_r>:
 800b1a8:	898b      	ldrh	r3, [r1, #12]
 800b1aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1ac:	079d      	lsls	r5, r3, #30
 800b1ae:	4606      	mov	r6, r0
 800b1b0:	460c      	mov	r4, r1
 800b1b2:	d507      	bpl.n	800b1c4 <__smakebuf_r+0x1c>
 800b1b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b1b8:	6023      	str	r3, [r4, #0]
 800b1ba:	6123      	str	r3, [r4, #16]
 800b1bc:	2301      	movs	r3, #1
 800b1be:	6163      	str	r3, [r4, #20]
 800b1c0:	b003      	add	sp, #12
 800b1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1c4:	ab01      	add	r3, sp, #4
 800b1c6:	466a      	mov	r2, sp
 800b1c8:	f7ff ffc8 	bl	800b15c <__swhatbuf_r>
 800b1cc:	9f00      	ldr	r7, [sp, #0]
 800b1ce:	4605      	mov	r5, r0
 800b1d0:	4639      	mov	r1, r7
 800b1d2:	4630      	mov	r0, r6
 800b1d4:	f7fe fecc 	bl	8009f70 <_malloc_r>
 800b1d8:	b948      	cbnz	r0, 800b1ee <__smakebuf_r+0x46>
 800b1da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1de:	059a      	lsls	r2, r3, #22
 800b1e0:	d4ee      	bmi.n	800b1c0 <__smakebuf_r+0x18>
 800b1e2:	f023 0303 	bic.w	r3, r3, #3
 800b1e6:	f043 0302 	orr.w	r3, r3, #2
 800b1ea:	81a3      	strh	r3, [r4, #12]
 800b1ec:	e7e2      	b.n	800b1b4 <__smakebuf_r+0xc>
 800b1ee:	89a3      	ldrh	r3, [r4, #12]
 800b1f0:	6020      	str	r0, [r4, #0]
 800b1f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1f6:	81a3      	strh	r3, [r4, #12]
 800b1f8:	9b01      	ldr	r3, [sp, #4]
 800b1fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b1fe:	b15b      	cbz	r3, 800b218 <__smakebuf_r+0x70>
 800b200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b204:	4630      	mov	r0, r6
 800b206:	f000 f81d 	bl	800b244 <_isatty_r>
 800b20a:	b128      	cbz	r0, 800b218 <__smakebuf_r+0x70>
 800b20c:	89a3      	ldrh	r3, [r4, #12]
 800b20e:	f023 0303 	bic.w	r3, r3, #3
 800b212:	f043 0301 	orr.w	r3, r3, #1
 800b216:	81a3      	strh	r3, [r4, #12]
 800b218:	89a3      	ldrh	r3, [r4, #12]
 800b21a:	431d      	orrs	r5, r3
 800b21c:	81a5      	strh	r5, [r4, #12]
 800b21e:	e7cf      	b.n	800b1c0 <__smakebuf_r+0x18>

0800b220 <_fstat_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4d07      	ldr	r5, [pc, #28]	@ (800b240 <_fstat_r+0x20>)
 800b224:	2300      	movs	r3, #0
 800b226:	4604      	mov	r4, r0
 800b228:	4608      	mov	r0, r1
 800b22a:	4611      	mov	r1, r2
 800b22c:	602b      	str	r3, [r5, #0]
 800b22e:	f7f7 fdca 	bl	8002dc6 <_fstat>
 800b232:	1c43      	adds	r3, r0, #1
 800b234:	d102      	bne.n	800b23c <_fstat_r+0x1c>
 800b236:	682b      	ldr	r3, [r5, #0]
 800b238:	b103      	cbz	r3, 800b23c <_fstat_r+0x1c>
 800b23a:	6023      	str	r3, [r4, #0]
 800b23c:	bd38      	pop	{r3, r4, r5, pc}
 800b23e:	bf00      	nop
 800b240:	20000574 	.word	0x20000574

0800b244 <_isatty_r>:
 800b244:	b538      	push	{r3, r4, r5, lr}
 800b246:	4d06      	ldr	r5, [pc, #24]	@ (800b260 <_isatty_r+0x1c>)
 800b248:	2300      	movs	r3, #0
 800b24a:	4604      	mov	r4, r0
 800b24c:	4608      	mov	r0, r1
 800b24e:	602b      	str	r3, [r5, #0]
 800b250:	f7f7 fdc9 	bl	8002de6 <_isatty>
 800b254:	1c43      	adds	r3, r0, #1
 800b256:	d102      	bne.n	800b25e <_isatty_r+0x1a>
 800b258:	682b      	ldr	r3, [r5, #0]
 800b25a:	b103      	cbz	r3, 800b25e <_isatty_r+0x1a>
 800b25c:	6023      	str	r3, [r4, #0]
 800b25e:	bd38      	pop	{r3, r4, r5, pc}
 800b260:	20000574 	.word	0x20000574

0800b264 <atan2>:
 800b264:	f000 b800 	b.w	800b268 <__ieee754_atan2>

0800b268 <__ieee754_atan2>:
 800b268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b26c:	ec57 6b11 	vmov	r6, r7, d1
 800b270:	4273      	negs	r3, r6
 800b272:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800b3f0 <__ieee754_atan2+0x188>
 800b276:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800b27a:	4333      	orrs	r3, r6
 800b27c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b280:	4543      	cmp	r3, r8
 800b282:	ec51 0b10 	vmov	r0, r1, d0
 800b286:	4635      	mov	r5, r6
 800b288:	d809      	bhi.n	800b29e <__ieee754_atan2+0x36>
 800b28a:	4244      	negs	r4, r0
 800b28c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b290:	4304      	orrs	r4, r0
 800b292:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b296:	4544      	cmp	r4, r8
 800b298:	468e      	mov	lr, r1
 800b29a:	4681      	mov	r9, r0
 800b29c:	d907      	bls.n	800b2ae <__ieee754_atan2+0x46>
 800b29e:	4632      	mov	r2, r6
 800b2a0:	463b      	mov	r3, r7
 800b2a2:	f7f5 f81b 	bl	80002dc <__adddf3>
 800b2a6:	ec41 0b10 	vmov	d0, r0, r1
 800b2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2ae:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800b2b2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800b2b6:	4334      	orrs	r4, r6
 800b2b8:	d103      	bne.n	800b2c2 <__ieee754_atan2+0x5a>
 800b2ba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2be:	f000 b89b 	b.w	800b3f8 <atan>
 800b2c2:	17bc      	asrs	r4, r7, #30
 800b2c4:	f004 0402 	and.w	r4, r4, #2
 800b2c8:	ea53 0909 	orrs.w	r9, r3, r9
 800b2cc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b2d0:	d107      	bne.n	800b2e2 <__ieee754_atan2+0x7a>
 800b2d2:	2c02      	cmp	r4, #2
 800b2d4:	d05f      	beq.n	800b396 <__ieee754_atan2+0x12e>
 800b2d6:	2c03      	cmp	r4, #3
 800b2d8:	d1e5      	bne.n	800b2a6 <__ieee754_atan2+0x3e>
 800b2da:	a141      	add	r1, pc, #260	@ (adr r1, 800b3e0 <__ieee754_atan2+0x178>)
 800b2dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2e0:	e7e1      	b.n	800b2a6 <__ieee754_atan2+0x3e>
 800b2e2:	4315      	orrs	r5, r2
 800b2e4:	d106      	bne.n	800b2f4 <__ieee754_atan2+0x8c>
 800b2e6:	f1be 0f00 	cmp.w	lr, #0
 800b2ea:	da5f      	bge.n	800b3ac <__ieee754_atan2+0x144>
 800b2ec:	a13e      	add	r1, pc, #248	@ (adr r1, 800b3e8 <__ieee754_atan2+0x180>)
 800b2ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2f2:	e7d8      	b.n	800b2a6 <__ieee754_atan2+0x3e>
 800b2f4:	4542      	cmp	r2, r8
 800b2f6:	d10f      	bne.n	800b318 <__ieee754_atan2+0xb0>
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	f104 34ff 	add.w	r4, r4, #4294967295
 800b2fe:	d107      	bne.n	800b310 <__ieee754_atan2+0xa8>
 800b300:	2c02      	cmp	r4, #2
 800b302:	d84c      	bhi.n	800b39e <__ieee754_atan2+0x136>
 800b304:	4b34      	ldr	r3, [pc, #208]	@ (800b3d8 <__ieee754_atan2+0x170>)
 800b306:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b30a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b30e:	e7ca      	b.n	800b2a6 <__ieee754_atan2+0x3e>
 800b310:	2c02      	cmp	r4, #2
 800b312:	d848      	bhi.n	800b3a6 <__ieee754_atan2+0x13e>
 800b314:	4b31      	ldr	r3, [pc, #196]	@ (800b3dc <__ieee754_atan2+0x174>)
 800b316:	e7f6      	b.n	800b306 <__ieee754_atan2+0x9e>
 800b318:	4543      	cmp	r3, r8
 800b31a:	d0e4      	beq.n	800b2e6 <__ieee754_atan2+0x7e>
 800b31c:	1a9b      	subs	r3, r3, r2
 800b31e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800b322:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b326:	da1e      	bge.n	800b366 <__ieee754_atan2+0xfe>
 800b328:	2f00      	cmp	r7, #0
 800b32a:	da01      	bge.n	800b330 <__ieee754_atan2+0xc8>
 800b32c:	323c      	adds	r2, #60	@ 0x3c
 800b32e:	db1e      	blt.n	800b36e <__ieee754_atan2+0x106>
 800b330:	4632      	mov	r2, r6
 800b332:	463b      	mov	r3, r7
 800b334:	f7f5 fab2 	bl	800089c <__aeabi_ddiv>
 800b338:	ec41 0b10 	vmov	d0, r0, r1
 800b33c:	f000 f9f4 	bl	800b728 <fabs>
 800b340:	f000 f85a 	bl	800b3f8 <atan>
 800b344:	ec51 0b10 	vmov	r0, r1, d0
 800b348:	2c01      	cmp	r4, #1
 800b34a:	d013      	beq.n	800b374 <__ieee754_atan2+0x10c>
 800b34c:	2c02      	cmp	r4, #2
 800b34e:	d015      	beq.n	800b37c <__ieee754_atan2+0x114>
 800b350:	2c00      	cmp	r4, #0
 800b352:	d0a8      	beq.n	800b2a6 <__ieee754_atan2+0x3e>
 800b354:	a318      	add	r3, pc, #96	@ (adr r3, 800b3b8 <__ieee754_atan2+0x150>)
 800b356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35a:	f7f4 ffbd 	bl	80002d8 <__aeabi_dsub>
 800b35e:	a318      	add	r3, pc, #96	@ (adr r3, 800b3c0 <__ieee754_atan2+0x158>)
 800b360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b364:	e014      	b.n	800b390 <__ieee754_atan2+0x128>
 800b366:	a118      	add	r1, pc, #96	@ (adr r1, 800b3c8 <__ieee754_atan2+0x160>)
 800b368:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b36c:	e7ec      	b.n	800b348 <__ieee754_atan2+0xe0>
 800b36e:	2000      	movs	r0, #0
 800b370:	2100      	movs	r1, #0
 800b372:	e7e9      	b.n	800b348 <__ieee754_atan2+0xe0>
 800b374:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b378:	4619      	mov	r1, r3
 800b37a:	e794      	b.n	800b2a6 <__ieee754_atan2+0x3e>
 800b37c:	a30e      	add	r3, pc, #56	@ (adr r3, 800b3b8 <__ieee754_atan2+0x150>)
 800b37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b382:	f7f4 ffa9 	bl	80002d8 <__aeabi_dsub>
 800b386:	4602      	mov	r2, r0
 800b388:	460b      	mov	r3, r1
 800b38a:	a10d      	add	r1, pc, #52	@ (adr r1, 800b3c0 <__ieee754_atan2+0x158>)
 800b38c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b390:	f7f4 ffa2 	bl	80002d8 <__aeabi_dsub>
 800b394:	e787      	b.n	800b2a6 <__ieee754_atan2+0x3e>
 800b396:	a10a      	add	r1, pc, #40	@ (adr r1, 800b3c0 <__ieee754_atan2+0x158>)
 800b398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b39c:	e783      	b.n	800b2a6 <__ieee754_atan2+0x3e>
 800b39e:	a10c      	add	r1, pc, #48	@ (adr r1, 800b3d0 <__ieee754_atan2+0x168>)
 800b3a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3a4:	e77f      	b.n	800b2a6 <__ieee754_atan2+0x3e>
 800b3a6:	2000      	movs	r0, #0
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	e77c      	b.n	800b2a6 <__ieee754_atan2+0x3e>
 800b3ac:	a106      	add	r1, pc, #24	@ (adr r1, 800b3c8 <__ieee754_atan2+0x160>)
 800b3ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3b2:	e778      	b.n	800b2a6 <__ieee754_atan2+0x3e>
 800b3b4:	f3af 8000 	nop.w
 800b3b8:	33145c07 	.word	0x33145c07
 800b3bc:	3ca1a626 	.word	0x3ca1a626
 800b3c0:	54442d18 	.word	0x54442d18
 800b3c4:	400921fb 	.word	0x400921fb
 800b3c8:	54442d18 	.word	0x54442d18
 800b3cc:	3ff921fb 	.word	0x3ff921fb
 800b3d0:	54442d18 	.word	0x54442d18
 800b3d4:	3fe921fb 	.word	0x3fe921fb
 800b3d8:	0800bc88 	.word	0x0800bc88
 800b3dc:	0800bc70 	.word	0x0800bc70
 800b3e0:	54442d18 	.word	0x54442d18
 800b3e4:	c00921fb 	.word	0xc00921fb
 800b3e8:	54442d18 	.word	0x54442d18
 800b3ec:	bff921fb 	.word	0xbff921fb
 800b3f0:	7ff00000 	.word	0x7ff00000
 800b3f4:	00000000 	.word	0x00000000

0800b3f8 <atan>:
 800b3f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fc:	ec55 4b10 	vmov	r4, r5, d0
 800b400:	4bbf      	ldr	r3, [pc, #764]	@ (800b700 <atan+0x308>)
 800b402:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800b406:	429e      	cmp	r6, r3
 800b408:	46ab      	mov	fp, r5
 800b40a:	d918      	bls.n	800b43e <atan+0x46>
 800b40c:	4bbd      	ldr	r3, [pc, #756]	@ (800b704 <atan+0x30c>)
 800b40e:	429e      	cmp	r6, r3
 800b410:	d801      	bhi.n	800b416 <atan+0x1e>
 800b412:	d109      	bne.n	800b428 <atan+0x30>
 800b414:	b144      	cbz	r4, 800b428 <atan+0x30>
 800b416:	4622      	mov	r2, r4
 800b418:	462b      	mov	r3, r5
 800b41a:	4620      	mov	r0, r4
 800b41c:	4629      	mov	r1, r5
 800b41e:	f7f4 ff5d 	bl	80002dc <__adddf3>
 800b422:	4604      	mov	r4, r0
 800b424:	460d      	mov	r5, r1
 800b426:	e006      	b.n	800b436 <atan+0x3e>
 800b428:	f1bb 0f00 	cmp.w	fp, #0
 800b42c:	f340 812b 	ble.w	800b686 <atan+0x28e>
 800b430:	a597      	add	r5, pc, #604	@ (adr r5, 800b690 <atan+0x298>)
 800b432:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b436:	ec45 4b10 	vmov	d0, r4, r5
 800b43a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b43e:	4bb2      	ldr	r3, [pc, #712]	@ (800b708 <atan+0x310>)
 800b440:	429e      	cmp	r6, r3
 800b442:	d813      	bhi.n	800b46c <atan+0x74>
 800b444:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800b448:	429e      	cmp	r6, r3
 800b44a:	d80c      	bhi.n	800b466 <atan+0x6e>
 800b44c:	a392      	add	r3, pc, #584	@ (adr r3, 800b698 <atan+0x2a0>)
 800b44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b452:	4620      	mov	r0, r4
 800b454:	4629      	mov	r1, r5
 800b456:	f7f4 ff41 	bl	80002dc <__adddf3>
 800b45a:	4bac      	ldr	r3, [pc, #688]	@ (800b70c <atan+0x314>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	f7f5 fb83 	bl	8000b68 <__aeabi_dcmpgt>
 800b462:	2800      	cmp	r0, #0
 800b464:	d1e7      	bne.n	800b436 <atan+0x3e>
 800b466:	f04f 3aff 	mov.w	sl, #4294967295
 800b46a:	e029      	b.n	800b4c0 <atan+0xc8>
 800b46c:	f000 f95c 	bl	800b728 <fabs>
 800b470:	4ba7      	ldr	r3, [pc, #668]	@ (800b710 <atan+0x318>)
 800b472:	429e      	cmp	r6, r3
 800b474:	ec55 4b10 	vmov	r4, r5, d0
 800b478:	f200 80bc 	bhi.w	800b5f4 <atan+0x1fc>
 800b47c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800b480:	429e      	cmp	r6, r3
 800b482:	f200 809e 	bhi.w	800b5c2 <atan+0x1ca>
 800b486:	4622      	mov	r2, r4
 800b488:	462b      	mov	r3, r5
 800b48a:	4620      	mov	r0, r4
 800b48c:	4629      	mov	r1, r5
 800b48e:	f7f4 ff25 	bl	80002dc <__adddf3>
 800b492:	4b9e      	ldr	r3, [pc, #632]	@ (800b70c <atan+0x314>)
 800b494:	2200      	movs	r2, #0
 800b496:	f7f4 ff1f 	bl	80002d8 <__aeabi_dsub>
 800b49a:	2200      	movs	r2, #0
 800b49c:	4606      	mov	r6, r0
 800b49e:	460f      	mov	r7, r1
 800b4a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	f7f4 ff18 	bl	80002dc <__adddf3>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	4639      	mov	r1, r7
 800b4b4:	f7f5 f9f2 	bl	800089c <__aeabi_ddiv>
 800b4b8:	f04f 0a00 	mov.w	sl, #0
 800b4bc:	4604      	mov	r4, r0
 800b4be:	460d      	mov	r5, r1
 800b4c0:	4622      	mov	r2, r4
 800b4c2:	462b      	mov	r3, r5
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	4629      	mov	r1, r5
 800b4c8:	f7f5 f8be 	bl	8000648 <__aeabi_dmul>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	4680      	mov	r8, r0
 800b4d2:	4689      	mov	r9, r1
 800b4d4:	f7f5 f8b8 	bl	8000648 <__aeabi_dmul>
 800b4d8:	a371      	add	r3, pc, #452	@ (adr r3, 800b6a0 <atan+0x2a8>)
 800b4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4de:	4606      	mov	r6, r0
 800b4e0:	460f      	mov	r7, r1
 800b4e2:	f7f5 f8b1 	bl	8000648 <__aeabi_dmul>
 800b4e6:	a370      	add	r3, pc, #448	@ (adr r3, 800b6a8 <atan+0x2b0>)
 800b4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ec:	f7f4 fef6 	bl	80002dc <__adddf3>
 800b4f0:	4632      	mov	r2, r6
 800b4f2:	463b      	mov	r3, r7
 800b4f4:	f7f5 f8a8 	bl	8000648 <__aeabi_dmul>
 800b4f8:	a36d      	add	r3, pc, #436	@ (adr r3, 800b6b0 <atan+0x2b8>)
 800b4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fe:	f7f4 feed 	bl	80002dc <__adddf3>
 800b502:	4632      	mov	r2, r6
 800b504:	463b      	mov	r3, r7
 800b506:	f7f5 f89f 	bl	8000648 <__aeabi_dmul>
 800b50a:	a36b      	add	r3, pc, #428	@ (adr r3, 800b6b8 <atan+0x2c0>)
 800b50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b510:	f7f4 fee4 	bl	80002dc <__adddf3>
 800b514:	4632      	mov	r2, r6
 800b516:	463b      	mov	r3, r7
 800b518:	f7f5 f896 	bl	8000648 <__aeabi_dmul>
 800b51c:	a368      	add	r3, pc, #416	@ (adr r3, 800b6c0 <atan+0x2c8>)
 800b51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b522:	f7f4 fedb 	bl	80002dc <__adddf3>
 800b526:	4632      	mov	r2, r6
 800b528:	463b      	mov	r3, r7
 800b52a:	f7f5 f88d 	bl	8000648 <__aeabi_dmul>
 800b52e:	a366      	add	r3, pc, #408	@ (adr r3, 800b6c8 <atan+0x2d0>)
 800b530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b534:	f7f4 fed2 	bl	80002dc <__adddf3>
 800b538:	4642      	mov	r2, r8
 800b53a:	464b      	mov	r3, r9
 800b53c:	f7f5 f884 	bl	8000648 <__aeabi_dmul>
 800b540:	a363      	add	r3, pc, #396	@ (adr r3, 800b6d0 <atan+0x2d8>)
 800b542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b546:	4680      	mov	r8, r0
 800b548:	4689      	mov	r9, r1
 800b54a:	4630      	mov	r0, r6
 800b54c:	4639      	mov	r1, r7
 800b54e:	f7f5 f87b 	bl	8000648 <__aeabi_dmul>
 800b552:	a361      	add	r3, pc, #388	@ (adr r3, 800b6d8 <atan+0x2e0>)
 800b554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b558:	f7f4 febe 	bl	80002d8 <__aeabi_dsub>
 800b55c:	4632      	mov	r2, r6
 800b55e:	463b      	mov	r3, r7
 800b560:	f7f5 f872 	bl	8000648 <__aeabi_dmul>
 800b564:	a35e      	add	r3, pc, #376	@ (adr r3, 800b6e0 <atan+0x2e8>)
 800b566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56a:	f7f4 feb5 	bl	80002d8 <__aeabi_dsub>
 800b56e:	4632      	mov	r2, r6
 800b570:	463b      	mov	r3, r7
 800b572:	f7f5 f869 	bl	8000648 <__aeabi_dmul>
 800b576:	a35c      	add	r3, pc, #368	@ (adr r3, 800b6e8 <atan+0x2f0>)
 800b578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57c:	f7f4 feac 	bl	80002d8 <__aeabi_dsub>
 800b580:	4632      	mov	r2, r6
 800b582:	463b      	mov	r3, r7
 800b584:	f7f5 f860 	bl	8000648 <__aeabi_dmul>
 800b588:	a359      	add	r3, pc, #356	@ (adr r3, 800b6f0 <atan+0x2f8>)
 800b58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58e:	f7f4 fea3 	bl	80002d8 <__aeabi_dsub>
 800b592:	4632      	mov	r2, r6
 800b594:	463b      	mov	r3, r7
 800b596:	f7f5 f857 	bl	8000648 <__aeabi_dmul>
 800b59a:	4602      	mov	r2, r0
 800b59c:	460b      	mov	r3, r1
 800b59e:	4640      	mov	r0, r8
 800b5a0:	4649      	mov	r1, r9
 800b5a2:	f7f4 fe9b 	bl	80002dc <__adddf3>
 800b5a6:	4622      	mov	r2, r4
 800b5a8:	462b      	mov	r3, r5
 800b5aa:	f7f5 f84d 	bl	8000648 <__aeabi_dmul>
 800b5ae:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	d148      	bne.n	800b64a <atan+0x252>
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	4629      	mov	r1, r5
 800b5bc:	f7f4 fe8c 	bl	80002d8 <__aeabi_dsub>
 800b5c0:	e72f      	b.n	800b422 <atan+0x2a>
 800b5c2:	4b52      	ldr	r3, [pc, #328]	@ (800b70c <atan+0x314>)
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	f7f4 fe85 	bl	80002d8 <__aeabi_dsub>
 800b5ce:	4b4f      	ldr	r3, [pc, #316]	@ (800b70c <atan+0x314>)
 800b5d0:	4606      	mov	r6, r0
 800b5d2:	460f      	mov	r7, r1
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	4629      	mov	r1, r5
 800b5da:	f7f4 fe7f 	bl	80002dc <__adddf3>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	4639      	mov	r1, r7
 800b5e6:	f7f5 f959 	bl	800089c <__aeabi_ddiv>
 800b5ea:	f04f 0a01 	mov.w	sl, #1
 800b5ee:	4604      	mov	r4, r0
 800b5f0:	460d      	mov	r5, r1
 800b5f2:	e765      	b.n	800b4c0 <atan+0xc8>
 800b5f4:	4b47      	ldr	r3, [pc, #284]	@ (800b714 <atan+0x31c>)
 800b5f6:	429e      	cmp	r6, r3
 800b5f8:	d21c      	bcs.n	800b634 <atan+0x23c>
 800b5fa:	4b47      	ldr	r3, [pc, #284]	@ (800b718 <atan+0x320>)
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	4620      	mov	r0, r4
 800b600:	4629      	mov	r1, r5
 800b602:	f7f4 fe69 	bl	80002d8 <__aeabi_dsub>
 800b606:	4b44      	ldr	r3, [pc, #272]	@ (800b718 <atan+0x320>)
 800b608:	4606      	mov	r6, r0
 800b60a:	460f      	mov	r7, r1
 800b60c:	2200      	movs	r2, #0
 800b60e:	4620      	mov	r0, r4
 800b610:	4629      	mov	r1, r5
 800b612:	f7f5 f819 	bl	8000648 <__aeabi_dmul>
 800b616:	4b3d      	ldr	r3, [pc, #244]	@ (800b70c <atan+0x314>)
 800b618:	2200      	movs	r2, #0
 800b61a:	f7f4 fe5f 	bl	80002dc <__adddf3>
 800b61e:	4602      	mov	r2, r0
 800b620:	460b      	mov	r3, r1
 800b622:	4630      	mov	r0, r6
 800b624:	4639      	mov	r1, r7
 800b626:	f7f5 f939 	bl	800089c <__aeabi_ddiv>
 800b62a:	f04f 0a02 	mov.w	sl, #2
 800b62e:	4604      	mov	r4, r0
 800b630:	460d      	mov	r5, r1
 800b632:	e745      	b.n	800b4c0 <atan+0xc8>
 800b634:	4622      	mov	r2, r4
 800b636:	462b      	mov	r3, r5
 800b638:	4938      	ldr	r1, [pc, #224]	@ (800b71c <atan+0x324>)
 800b63a:	2000      	movs	r0, #0
 800b63c:	f7f5 f92e 	bl	800089c <__aeabi_ddiv>
 800b640:	f04f 0a03 	mov.w	sl, #3
 800b644:	4604      	mov	r4, r0
 800b646:	460d      	mov	r5, r1
 800b648:	e73a      	b.n	800b4c0 <atan+0xc8>
 800b64a:	4b35      	ldr	r3, [pc, #212]	@ (800b720 <atan+0x328>)
 800b64c:	4e35      	ldr	r6, [pc, #212]	@ (800b724 <atan+0x32c>)
 800b64e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b656:	f7f4 fe3f 	bl	80002d8 <__aeabi_dsub>
 800b65a:	4622      	mov	r2, r4
 800b65c:	462b      	mov	r3, r5
 800b65e:	f7f4 fe3b 	bl	80002d8 <__aeabi_dsub>
 800b662:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b666:	4602      	mov	r2, r0
 800b668:	460b      	mov	r3, r1
 800b66a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b66e:	f7f4 fe33 	bl	80002d8 <__aeabi_dsub>
 800b672:	f1bb 0f00 	cmp.w	fp, #0
 800b676:	4604      	mov	r4, r0
 800b678:	460d      	mov	r5, r1
 800b67a:	f6bf aedc 	bge.w	800b436 <atan+0x3e>
 800b67e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b682:	461d      	mov	r5, r3
 800b684:	e6d7      	b.n	800b436 <atan+0x3e>
 800b686:	a51c      	add	r5, pc, #112	@ (adr r5, 800b6f8 <atan+0x300>)
 800b688:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b68c:	e6d3      	b.n	800b436 <atan+0x3e>
 800b68e:	bf00      	nop
 800b690:	54442d18 	.word	0x54442d18
 800b694:	3ff921fb 	.word	0x3ff921fb
 800b698:	8800759c 	.word	0x8800759c
 800b69c:	7e37e43c 	.word	0x7e37e43c
 800b6a0:	e322da11 	.word	0xe322da11
 800b6a4:	3f90ad3a 	.word	0x3f90ad3a
 800b6a8:	24760deb 	.word	0x24760deb
 800b6ac:	3fa97b4b 	.word	0x3fa97b4b
 800b6b0:	a0d03d51 	.word	0xa0d03d51
 800b6b4:	3fb10d66 	.word	0x3fb10d66
 800b6b8:	c54c206e 	.word	0xc54c206e
 800b6bc:	3fb745cd 	.word	0x3fb745cd
 800b6c0:	920083ff 	.word	0x920083ff
 800b6c4:	3fc24924 	.word	0x3fc24924
 800b6c8:	5555550d 	.word	0x5555550d
 800b6cc:	3fd55555 	.word	0x3fd55555
 800b6d0:	2c6a6c2f 	.word	0x2c6a6c2f
 800b6d4:	bfa2b444 	.word	0xbfa2b444
 800b6d8:	52defd9a 	.word	0x52defd9a
 800b6dc:	3fadde2d 	.word	0x3fadde2d
 800b6e0:	af749a6d 	.word	0xaf749a6d
 800b6e4:	3fb3b0f2 	.word	0x3fb3b0f2
 800b6e8:	fe231671 	.word	0xfe231671
 800b6ec:	3fbc71c6 	.word	0x3fbc71c6
 800b6f0:	9998ebc4 	.word	0x9998ebc4
 800b6f4:	3fc99999 	.word	0x3fc99999
 800b6f8:	54442d18 	.word	0x54442d18
 800b6fc:	bff921fb 	.word	0xbff921fb
 800b700:	440fffff 	.word	0x440fffff
 800b704:	7ff00000 	.word	0x7ff00000
 800b708:	3fdbffff 	.word	0x3fdbffff
 800b70c:	3ff00000 	.word	0x3ff00000
 800b710:	3ff2ffff 	.word	0x3ff2ffff
 800b714:	40038000 	.word	0x40038000
 800b718:	3ff80000 	.word	0x3ff80000
 800b71c:	bff00000 	.word	0xbff00000
 800b720:	0800bca0 	.word	0x0800bca0
 800b724:	0800bcc0 	.word	0x0800bcc0

0800b728 <fabs>:
 800b728:	ec51 0b10 	vmov	r0, r1, d0
 800b72c:	4602      	mov	r2, r0
 800b72e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b732:	ec43 2b10 	vmov	d0, r2, r3
 800b736:	4770      	bx	lr

0800b738 <_init>:
 800b738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b73a:	bf00      	nop
 800b73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b73e:	bc08      	pop	{r3}
 800b740:	469e      	mov	lr, r3
 800b742:	4770      	bx	lr

0800b744 <_fini>:
 800b744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b746:	bf00      	nop
 800b748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b74a:	bc08      	pop	{r3}
 800b74c:	469e      	mov	lr, r3
 800b74e:	4770      	bx	lr
