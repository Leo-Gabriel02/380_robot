
380_robot_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088f4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08008ad8  08008ad8  00018ad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008edc  08008edc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008edc  08008edc  00018edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ee4  08008ee4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ee4  08008ee4  00018ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ee8  08008ee8  00018ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008eec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  200001d4  080090c0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  080090c0  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001453c  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000267d  00000000  00000000  00034783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f0  00000000  00000000  00036e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec1  00000000  00000000  000380f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000247c3  00000000  00000000  00038fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000157eb  00000000  00000000  0005d774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f80c7  00000000  00000000  00072f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000618c  00000000  00000000  0016b028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001711b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008abc 	.word	0x08008abc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08008abc 	.word	0x08008abc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <driveFast>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void driveFast() {
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
	char b[] = "Driving fast!\r\n";
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <driveFast+0x30>)
 8000efc:	463c      	mov	r4, r7
 8000efe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8000f04:	463b      	mov	r3, r7
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff f9da 	bl	80002c0 <strlen>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4639      	mov	r1, r7
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	4804      	ldr	r0, [pc, #16]	; (8000f28 <driveFast+0x34>)
 8000f18:	f004 fa98 	bl	800544c <HAL_UART_Transmit>

}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd90      	pop	{r4, r7, pc}
 8000f24:	08008ad8 	.word	0x08008ad8
 8000f28:	200002f4 	.word	0x200002f4

08000f2c <lineFollow>:

void lineFollow() {
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
	char b[] = "Following the line?\r\n";
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <lineFollow+0x3c>)
 8000f34:	463c      	mov	r4, r7
 8000f36:	461d      	mov	r5, r3
 8000f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f3c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f40:	6020      	str	r0, [r4, #0]
 8000f42:	3404      	adds	r4, #4
 8000f44:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8000f46:	463b      	mov	r3, r7
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff f9b9 	bl	80002c0 <strlen>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	4639      	mov	r1, r7
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
 8000f58:	4804      	ldr	r0, [pc, #16]	; (8000f6c <lineFollow+0x40>)
 8000f5a:	f004 fa77 	bl	800544c <HAL_UART_Transmit>

}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bdb0      	pop	{r4, r5, r7, pc}
 8000f66:	bf00      	nop
 8000f68:	08008ae8 	.word	0x08008ae8
 8000f6c:	200002f4 	.word	0x200002f4

08000f70 <shoot>:

void shoot() {
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
	char b[] = "goodbye mr lego man\r\n";
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <shoot+0x3c>)
 8000f78:	463c      	mov	r4, r7
 8000f7a:	461d      	mov	r5, r3
 8000f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f84:	6020      	str	r0, [r4, #0]
 8000f86:	3404      	adds	r4, #4
 8000f88:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff f997 	bl	80002c0 <strlen>
 8000f92:	4603      	mov	r3, r0
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	4639      	mov	r1, r7
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <shoot+0x40>)
 8000f9e:	f004 fa55 	bl	800544c <HAL_UART_Transmit>
}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	08008b00 	.word	0x08008b00
 8000fb0:	200002f4 	.word	0x200002f4

08000fb4 <surprise>:

void surprise() {
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
	char b[] = "surprise :0\r\n";
 8000fba:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <surprise+0x3c>)
 8000fbc:	463c      	mov	r4, r7
 8000fbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fc0:	c407      	stmia	r4!, {r0, r1, r2}
 8000fc2:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff f97a 	bl	80002c0 <strlen>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	4639      	mov	r1, r7
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <surprise+0x40>)
 8000fd8:	f004 fa38 	bl	800544c <HAL_UART_Transmit>

	while (1) {
		HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin);
 8000fdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe0:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <surprise+0x44>)
 8000fe2:	f001 ffe3 	bl	8002fac <HAL_GPIO_TogglePin>
		HAL_Delay (100);
 8000fe6:	2064      	movs	r0, #100	; 0x64
 8000fe8:	f000 fdf6 	bl	8001bd8 <HAL_Delay>
		HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin);
 8000fec:	e7f6      	b.n	8000fdc <surprise+0x28>
 8000fee:	bf00      	nop
 8000ff0:	08008b18 	.word	0x08008b18
 8000ff4:	200002f4 	.word	0x200002f4
 8000ff8:	48000400 	.word	0x48000400

08000ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t mode_a = MODE_A_GPIO_Port->IDR & MODE_A_Pin;
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <main+0x70>)
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	b29b      	uxth	r3, r3
 8001008:	f003 0320 	and.w	r3, r3, #32
 800100c:	80fb      	strh	r3, [r7, #6]
	uint16_t mode_b = MODE_B_GPIO_Port->IDR & MODE_B_Pin;
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <main+0x70>)
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	b29b      	uxth	r3, r3
 8001014:	f003 0310 	and.w	r3, r3, #16
 8001018:	80bb      	strh	r3, [r7, #4]

	uint8_t mode = mode_a | mode_b<<1;
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	b25a      	sxtb	r2, r3
 800101e:	88bb      	ldrh	r3, [r7, #4]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	b25b      	sxtb	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b25b      	sxtb	r3, r3
 8001028:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102a:	f000 fd64 	bl	8001af6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102e:	f000 f81f 	bl	8001070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001032:	f000 fa4f 	bl	80014d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001036:	f000 fa01 	bl	800143c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800103a:	f000 f8cb 	bl	80011d4 <MX_TIM1_Init>
  MX_ADC2_Init();
 800103e:	f000 f863 	bl	8001108 <MX_ADC2_Init>
  MX_TIM3_Init();
 8001042:	f000 f99b 	bl	800137c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //MX_I2C1_Init();

  switch (mode) {
 8001046:	78fb      	ldrb	r3, [r7, #3]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d00a      	beq.n	8001062 <main+0x66>
 800104c:	2b02      	cmp	r3, #2
 800104e:	dc0a      	bgt.n	8001066 <main+0x6a>
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <main+0x5e>
 8001054:	2b01      	cmp	r3, #1
 8001056:	d002      	beq.n	800105e <main+0x62>
 8001058:	e005      	b.n	8001066 <main+0x6a>
  case 0:
  	driveFast();
 800105a:	f7ff ff4b 	bl	8000ef4 <driveFast>
  case 1:
  	lineFollow();
 800105e:	f7ff ff65 	bl	8000f2c <lineFollow>
  case 2:
  	shoot();
 8001062:	f7ff ff85 	bl	8000f70 <shoot>
  default:
  	surprise();
 8001066:	f7ff ffa5 	bl	8000fb4 <surprise>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800106a:	e7fe      	b.n	800106a <main+0x6e>
 800106c:	48000400 	.word	0x48000400

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b094      	sub	sp, #80	; 0x50
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 0318 	add.w	r3, r7, #24
 800107a:	2238      	movs	r2, #56	; 0x38
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f005 fdcb 	bl	8006c1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001092:	2000      	movs	r0, #0
 8001094:	f001 ffa4 	bl	8002fe0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001098:	2302      	movs	r3, #2
 800109a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800109c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a2:	2340      	movs	r3, #64	; 0x40
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a6:	2302      	movs	r3, #2
 80010a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010aa:	2302      	movs	r3, #2
 80010ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80010ae:	2304      	movs	r3, #4
 80010b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80010b2:	2355      	movs	r3, #85	; 0x55
 80010b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b6:	2302      	movs	r3, #2
 80010b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010be:	2302      	movs	r3, #2
 80010c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c2:	f107 0318 	add.w	r3, r7, #24
 80010c6:	4618      	mov	r0, r3
 80010c8:	f002 f83e 	bl	8003148 <HAL_RCC_OscConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010d2:	f000 fa61 	bl	8001598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d6:	230f      	movs	r3, #15
 80010d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010da:	2303      	movs	r3, #3
 80010dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2104      	movs	r1, #4
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 fb3c 	bl	800376c <HAL_RCC_ClockConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010fa:	f000 fa4d 	bl	8001598 <Error_Handler>
  }
}
 80010fe:	bf00      	nop
 8001100:	3750      	adds	r7, #80	; 0x50
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800110e:	463b      	mov	r3, r7
 8001110:	2220      	movs	r2, #32
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f005 fd80 	bl	8006c1a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800111a:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <MX_ADC2_Init+0xc0>)
 800111c:	4a2b      	ldr	r2, [pc, #172]	; (80011cc <MX_ADC2_Init+0xc4>)
 800111e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001120:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <MX_ADC2_Init+0xc0>)
 8001122:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001126:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001128:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <MX_ADC2_Init+0xc0>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800112e:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <MX_ADC2_Init+0xc0>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001134:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <MX_ADC2_Init+0xc0>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800113a:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <MX_ADC2_Init+0xc0>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001140:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <MX_ADC2_Init+0xc0>)
 8001142:	2204      	movs	r2, #4
 8001144:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <MX_ADC2_Init+0xc0>)
 8001148:	2200      	movs	r2, #0
 800114a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <MX_ADC2_Init+0xc0>)
 800114e:	2200      	movs	r2, #0
 8001150:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <MX_ADC2_Init+0xc0>)
 8001154:	2201      	movs	r2, #1
 8001156:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <MX_ADC2_Init+0xc0>)
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <MX_ADC2_Init+0xc0>)
 8001162:	2200      	movs	r2, #0
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_ADC2_Init+0xc0>)
 8001168:	2200      	movs	r2, #0
 800116a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <MX_ADC2_Init+0xc0>)
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_ADC2_Init+0xc0>)
 8001176:	2200      	movs	r2, #0
 8001178:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <MX_ADC2_Init+0xc0>)
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001182:	4811      	ldr	r0, [pc, #68]	; (80011c8 <MX_ADC2_Init+0xc0>)
 8001184:	f000 ff20 	bl	8001fc8 <HAL_ADC_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800118e:	f000 fa03 	bl	8001598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_ADC2_Init+0xc8>)
 8001194:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001196:	2306      	movs	r3, #6
 8001198:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800119e:	237f      	movs	r3, #127	; 0x7f
 80011a0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011a2:	2304      	movs	r3, #4
 80011a4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <MX_ADC2_Init+0xc0>)
 80011b0:	f001 f88e 	bl	80022d0 <HAL_ADC_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011ba:	f000 f9ed 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200001f0 	.word	0x200001f0
 80011cc:	50000100 	.word	0x50000100
 80011d0:	47520000 	.word	0x47520000

080011d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b09c      	sub	sp, #112	; 0x70
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
 8001204:	615a      	str	r2, [r3, #20]
 8001206:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2234      	movs	r2, #52	; 0x34
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f005 fd03 	bl	8006c1a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001214:	4b57      	ldr	r3, [pc, #348]	; (8001374 <MX_TIM1_Init+0x1a0>)
 8001216:	4a58      	ldr	r2, [pc, #352]	; (8001378 <MX_TIM1_Init+0x1a4>)
 8001218:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800121a:	4b56      	ldr	r3, [pc, #344]	; (8001374 <MX_TIM1_Init+0x1a0>)
 800121c:	2200      	movs	r2, #0
 800121e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001220:	4b54      	ldr	r3, [pc, #336]	; (8001374 <MX_TIM1_Init+0x1a0>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001226:	4b53      	ldr	r3, [pc, #332]	; (8001374 <MX_TIM1_Init+0x1a0>)
 8001228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800122c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122e:	4b51      	ldr	r3, [pc, #324]	; (8001374 <MX_TIM1_Init+0x1a0>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001234:	4b4f      	ldr	r3, [pc, #316]	; (8001374 <MX_TIM1_Init+0x1a0>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800123a:	4b4e      	ldr	r3, [pc, #312]	; (8001374 <MX_TIM1_Init+0x1a0>)
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001240:	484c      	ldr	r0, [pc, #304]	; (8001374 <MX_TIM1_Init+0x1a0>)
 8001242:	f002 fe9f 	bl	8003f84 <HAL_TIM_Base_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800124c:	f000 f9a4 	bl	8001598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001254:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001256:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800125a:	4619      	mov	r1, r3
 800125c:	4845      	ldr	r0, [pc, #276]	; (8001374 <MX_TIM1_Init+0x1a0>)
 800125e:	f003 f951 	bl	8004504 <HAL_TIM_ConfigClockSource>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001268:	f000 f996 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800126c:	4841      	ldr	r0, [pc, #260]	; (8001374 <MX_TIM1_Init+0x1a0>)
 800126e:	f002 fee0 	bl	8004032 <HAL_TIM_PWM_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001278:	f000 f98e 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001280:	2300      	movs	r3, #0
 8001282:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001288:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800128c:	4619      	mov	r1, r3
 800128e:	4839      	ldr	r0, [pc, #228]	; (8001374 <MX_TIM1_Init+0x1a0>)
 8001290:	f003 ff7e 	bl	8005190 <HAL_TIMEx_MasterConfigSynchronization>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800129a:	f000 f97d 	bl	8001598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800129e:	2360      	movs	r3, #96	; 0x60
 80012a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a6:	2300      	movs	r3, #0
 80012a8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012aa:	2300      	movs	r3, #0
 80012ac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012be:	2200      	movs	r2, #0
 80012c0:	4619      	mov	r1, r3
 80012c2:	482c      	ldr	r0, [pc, #176]	; (8001374 <MX_TIM1_Init+0x1a0>)
 80012c4:	f003 f80a 	bl	80042dc <HAL_TIM_PWM_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80012ce:	f000 f963 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012d6:	2204      	movs	r2, #4
 80012d8:	4619      	mov	r1, r3
 80012da:	4826      	ldr	r0, [pc, #152]	; (8001374 <MX_TIM1_Init+0x1a0>)
 80012dc:	f002 fffe 	bl	80042dc <HAL_TIM_PWM_ConfigChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80012e6:	f000 f957 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012ee:	2208      	movs	r2, #8
 80012f0:	4619      	mov	r1, r3
 80012f2:	4820      	ldr	r0, [pc, #128]	; (8001374 <MX_TIM1_Init+0x1a0>)
 80012f4:	f002 fff2 	bl	80042dc <HAL_TIM_PWM_ConfigChannel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80012fe:	f000 f94b 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001302:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001306:	220c      	movs	r2, #12
 8001308:	4619      	mov	r1, r3
 800130a:	481a      	ldr	r0, [pc, #104]	; (8001374 <MX_TIM1_Init+0x1a0>)
 800130c:	f002 ffe6 	bl	80042dc <HAL_TIM_PWM_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001316:	f000 f93f 	bl	8001598 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800132e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001332:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001340:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800134a:	2300      	movs	r3, #0
 800134c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	4619      	mov	r1, r3
 8001356:	4807      	ldr	r0, [pc, #28]	; (8001374 <MX_TIM1_Init+0x1a0>)
 8001358:	f003 ff9c 	bl	8005294 <HAL_TIMEx_ConfigBreakDeadTime>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8001362:	f000 f919 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001366:	4803      	ldr	r0, [pc, #12]	; (8001374 <MX_TIM1_Init+0x1a0>)
 8001368:	f000 f9f8 	bl	800175c <HAL_TIM_MspPostInit>

}
 800136c:	bf00      	nop
 800136e:	3770      	adds	r7, #112	; 0x70
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2000025c 	.word	0x2000025c
 8001378:	40012c00 	.word	0x40012c00

0800137c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800139a:	4b26      	ldr	r3, [pc, #152]	; (8001434 <MX_TIM3_Init+0xb8>)
 800139c:	4a26      	ldr	r2, [pc, #152]	; (8001438 <MX_TIM3_Init+0xbc>)
 800139e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013a0:	4b24      	ldr	r3, [pc, #144]	; (8001434 <MX_TIM3_Init+0xb8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a6:	4b23      	ldr	r3, [pc, #140]	; (8001434 <MX_TIM3_Init+0xb8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013ac:	4b21      	ldr	r3, [pc, #132]	; (8001434 <MX_TIM3_Init+0xb8>)
 80013ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <MX_TIM3_Init+0xb8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ba:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <MX_TIM3_Init+0xb8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80013c0:	481c      	ldr	r0, [pc, #112]	; (8001434 <MX_TIM3_Init+0xb8>)
 80013c2:	f002 fe97 	bl	80040f4 <HAL_TIM_IC_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80013cc:	f000 f8e4 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	4815      	ldr	r0, [pc, #84]	; (8001434 <MX_TIM3_Init+0xb8>)
 80013e0:	f003 fed6 	bl	8005190 <HAL_TIMEx_MasterConfigSynchronization>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80013ea:	f000 f8d5 	bl	8001598 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013f2:	2301      	movs	r3, #1
 80013f4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2200      	movs	r2, #0
 8001402:	4619      	mov	r1, r3
 8001404:	480b      	ldr	r0, [pc, #44]	; (8001434 <MX_TIM3_Init+0xb8>)
 8001406:	f002 fecc 	bl	80041a2 <HAL_TIM_IC_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001410:	f000 f8c2 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2204      	movs	r2, #4
 8001418:	4619      	mov	r1, r3
 800141a:	4806      	ldr	r0, [pc, #24]	; (8001434 <MX_TIM3_Init+0xb8>)
 800141c:	f002 fec1 	bl	80041a2 <HAL_TIM_IC_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001426:	f000 f8b7 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	3720      	adds	r7, #32
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200002a8 	.word	0x200002a8
 8001438:	40000400 	.word	0x40000400

0800143c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <MX_USART2_UART_Init+0x90>)
 8001442:	4a23      	ldr	r2, [pc, #140]	; (80014d0 <MX_USART2_UART_Init+0x94>)
 8001444:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001446:	4b21      	ldr	r3, [pc, #132]	; (80014cc <MX_USART2_UART_Init+0x90>)
 8001448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800144c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800144e:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <MX_USART2_UART_Init+0x90>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <MX_USART2_UART_Init+0x90>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <MX_USART2_UART_Init+0x90>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <MX_USART2_UART_Init+0x90>)
 8001462:	220c      	movs	r2, #12
 8001464:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <MX_USART2_UART_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800146c:	4b17      	ldr	r3, [pc, #92]	; (80014cc <MX_USART2_UART_Init+0x90>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <MX_USART2_UART_Init+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_USART2_UART_Init+0x90>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <MX_USART2_UART_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001484:	4811      	ldr	r0, [pc, #68]	; (80014cc <MX_USART2_UART_Init+0x90>)
 8001486:	f003 ff91 	bl	80053ac <HAL_UART_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001490:	f000 f882 	bl	8001598 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001494:	2100      	movs	r1, #0
 8001496:	480d      	ldr	r0, [pc, #52]	; (80014cc <MX_USART2_UART_Init+0x90>)
 8001498:	f004 fd8a 	bl	8005fb0 <HAL_UARTEx_SetTxFifoThreshold>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80014a2:	f000 f879 	bl	8001598 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014a6:	2100      	movs	r1, #0
 80014a8:	4808      	ldr	r0, [pc, #32]	; (80014cc <MX_USART2_UART_Init+0x90>)
 80014aa:	f004 fdbf 	bl	800602c <HAL_UARTEx_SetRxFifoThreshold>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80014b4:	f000 f870 	bl	8001598 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80014b8:	4804      	ldr	r0, [pc, #16]	; (80014cc <MX_USART2_UART_Init+0x90>)
 80014ba:	f004 fd40 	bl	8005f3e <HAL_UARTEx_DisableFifoMode>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80014c4:	f000 f868 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200002f4 	.word	0x200002f4
 80014d0:	40004400 	.word	0x40004400

080014d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	4b29      	ldr	r3, [pc, #164]	; (8001590 <MX_GPIO_Init+0xbc>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	4a28      	ldr	r2, [pc, #160]	; (8001590 <MX_GPIO_Init+0xbc>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f6:	4b26      	ldr	r3, [pc, #152]	; (8001590 <MX_GPIO_Init+0xbc>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001502:	4b23      	ldr	r3, [pc, #140]	; (8001590 <MX_GPIO_Init+0xbc>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	4a22      	ldr	r2, [pc, #136]	; (8001590 <MX_GPIO_Init+0xbc>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150e:	4b20      	ldr	r3, [pc, #128]	; (8001590 <MX_GPIO_Init+0xbc>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LS_DIR_Pin|RS_DIR_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	2103      	movs	r1, #3
 800151e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001522:	f001 fd2b 	bl	8002f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 7180 	mov.w	r1, #256	; 0x100
 800152c:	4819      	ldr	r0, [pc, #100]	; (8001594 <MX_GPIO_Init+0xc0>)
 800152e:	f001 fd25 	bl	8002f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LS_DIR_Pin RS_DIR_Pin */
  GPIO_InitStruct.Pin = LS_DIR_Pin|RS_DIR_Pin;
 8001532:	2303      	movs	r3, #3
 8001534:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001536:	2301      	movs	r3, #1
 8001538:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	4619      	mov	r1, r3
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f001 fb94 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_B_Pin MODE_A_Pin */
  GPIO_InitStruct.Pin = MODE_B_Pin|MODE_A_Pin;
 8001550:	2330      	movs	r3, #48	; 0x30
 8001552:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4619      	mov	r1, r3
 8001562:	480c      	ldr	r0, [pc, #48]	; (8001594 <MX_GPIO_Init+0xc0>)
 8001564:	f001 fb88 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001568:	f44f 7380 	mov.w	r3, #256	; 0x100
 800156c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156e:	2301      	movs	r3, #1
 8001570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 030c 	add.w	r3, r7, #12
 800157e:	4619      	mov	r1, r3
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <MX_GPIO_Init+0xc0>)
 8001582:	f001 fb79 	bl	8002c78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001586:	bf00      	nop
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
 8001594:	48000400 	.word	0x48000400

08001598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800159c:	b672      	cpsid	i
}
 800159e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <Error_Handler+0x8>
	...

080015a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_MspInit+0x44>)
 80015ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ae:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <HAL_MspInit+0x44>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6613      	str	r3, [r2, #96]	; 0x60
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <HAL_MspInit+0x44>)
 80015b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_MspInit+0x44>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <HAL_MspInit+0x44>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015cc:	6593      	str	r3, [r2, #88]	; 0x58
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_MspInit+0x44>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80015da:	f001 fda5 	bl	8003128 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000

080015ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b09a      	sub	sp, #104	; 0x68
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001604:	f107 0310 	add.w	r3, r7, #16
 8001608:	2244      	movs	r2, #68	; 0x44
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f005 fb04 	bl	8006c1a <memset>
  if(hadc->Instance==ADC2)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a1e      	ldr	r2, [pc, #120]	; (8001690 <HAL_ADC_MspInit+0xa4>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d134      	bne.n	8001686 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800161c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001620:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001622:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001626:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001628:	f107 0310 	add.w	r3, r7, #16
 800162c:	4618      	mov	r0, r3
 800162e:	f002 fab9 	bl	8003ba4 <HAL_RCCEx_PeriphCLKConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001638:	f7ff ffae 	bl	8001598 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800163c:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_ADC_MspInit+0xa8>)
 800163e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001640:	4a14      	ldr	r2, [pc, #80]	; (8001694 <HAL_ADC_MspInit+0xa8>)
 8001642:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001646:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_ADC_MspInit+0xa8>)
 800164a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <HAL_ADC_MspInit+0xa8>)
 8001656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001658:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <HAL_ADC_MspInit+0xa8>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <HAL_ADC_MspInit+0xa8>)
 8001662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN17
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800166c:	2310      	movs	r3, #16
 800166e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001670:	2303      	movs	r3, #3
 8001672:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800167c:	4619      	mov	r1, r3
 800167e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001682:	f001 faf9 	bl	8002c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001686:	bf00      	nop
 8001688:	3768      	adds	r7, #104	; 0x68
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	50000100 	.word	0x50000100
 8001694:	40021000 	.word	0x40021000

08001698 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_TIM_Base_MspInit+0x38>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d10b      	bne.n	80016c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_TIM_Base_MspInit+0x3c>)
 80016ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ae:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <HAL_TIM_Base_MspInit+0x3c>)
 80016b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016b4:	6613      	str	r3, [r2, #96]	; 0x60
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <HAL_TIM_Base_MspInit+0x3c>)
 80016b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40012c00 	.word	0x40012c00
 80016d4:	40021000 	.word	0x40021000

080016d8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a17      	ldr	r2, [pc, #92]	; (8001754 <HAL_TIM_IC_MspInit+0x7c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d128      	bne.n	800174c <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <HAL_TIM_IC_MspInit+0x80>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	4a16      	ldr	r2, [pc, #88]	; (8001758 <HAL_TIM_IC_MspInit+0x80>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6593      	str	r3, [r2, #88]	; 0x58
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <HAL_TIM_IC_MspInit+0x80>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_TIM_IC_MspInit+0x80>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	4a10      	ldr	r2, [pc, #64]	; (8001758 <HAL_TIM_IC_MspInit+0x80>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_TIM_IC_MspInit+0x80>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_R_Pin|ENC_L_Pin;
 800172a:	23c0      	movs	r3, #192	; 0xc0
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800173a:	2302      	movs	r3, #2
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001748:	f001 fa96 	bl	8002c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	; 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40000400 	.word	0x40000400
 8001758:	40021000 	.word	0x40021000

0800175c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1b      	ldr	r2, [pc, #108]	; (80017e8 <HAL_TIM_MspPostInit+0x8c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d12f      	bne.n	80017de <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_TIM_MspPostInit+0x90>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	4a1a      	ldr	r2, [pc, #104]	; (80017ec <HAL_TIM_MspPostInit+0x90>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178a:	4b18      	ldr	r3, [pc, #96]	; (80017ec <HAL_TIM_MspPostInit+0x90>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = RS_M2_Pin|RS_M1_Pin|LS_M2_Pin;
 8001796:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800179a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80017a8:	2306      	movs	r3, #6
 80017aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	4619      	mov	r1, r3
 80017b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b6:	f001 fa5f 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LS_M1_Pin;
 80017ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 80017cc:	230b      	movs	r3, #11
 80017ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LS_M1_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	4619      	mov	r1, r3
 80017d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017da:	f001 fa4d 	bl	8002c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017de:	bf00      	nop
 80017e0:	3720      	adds	r7, #32
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40012c00 	.word	0x40012c00
 80017ec:	40021000 	.word	0x40021000

080017f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b09a      	sub	sp, #104	; 0x68
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	2244      	movs	r2, #68	; 0x44
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f005 fa02 	bl	8006c1a <memset>
  if(huart->Instance==USART2)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a1f      	ldr	r2, [pc, #124]	; (8001898 <HAL_UART_MspInit+0xa8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d136      	bne.n	800188e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001820:	2302      	movs	r3, #2
 8001822:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001824:	2300      	movs	r3, #0
 8001826:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	4618      	mov	r0, r3
 800182e:	f002 f9b9 	bl	8003ba4 <HAL_RCCEx_PeriphCLKConfig>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001838:	f7ff feae 	bl	8001598 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <HAL_UART_MspInit+0xac>)
 800183e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001840:	4a16      	ldr	r2, [pc, #88]	; (800189c <HAL_UART_MspInit+0xac>)
 8001842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001846:	6593      	str	r3, [r2, #88]	; 0x58
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <HAL_UART_MspInit+0xac>)
 800184a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_UART_MspInit+0xac>)
 8001856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001858:	4a10      	ldr	r2, [pc, #64]	; (800189c <HAL_UART_MspInit+0xac>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_UART_MspInit+0xac>)
 8001862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800186c:	230c      	movs	r3, #12
 800186e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800187c:	2307      	movs	r3, #7
 800187e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001884:	4619      	mov	r1, r3
 8001886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188a:	f001 f9f5 	bl	8002c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800188e:	bf00      	nop
 8001890:	3768      	adds	r7, #104	; 0x68
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40004400 	.word	0x40004400
 800189c:	40021000 	.word	0x40021000

080018a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018a4:	e7fe      	b.n	80018a4 <NMI_Handler+0x4>

080018a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <HardFault_Handler+0x4>

080018ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <MemManage_Handler+0x4>

080018b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <UsageFault_Handler+0x4>

080018be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ec:	f000 f956 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return 1;
 80018f8:	2301      	movs	r3, #1
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <_kill>:

int _kill(int pid, int sig)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800190e:	f005 f9d7 	bl	8006cc0 <__errno>
 8001912:	4603      	mov	r3, r0
 8001914:	2216      	movs	r2, #22
 8001916:	601a      	str	r2, [r3, #0]
  return -1;
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <_exit>:

void _exit (int status)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ffe7 	bl	8001904 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001936:	e7fe      	b.n	8001936 <_exit+0x12>

08001938 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	e00a      	b.n	8001960 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800194a:	f3af 8000 	nop.w
 800194e:	4601      	mov	r1, r0
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	60ba      	str	r2, [r7, #8]
 8001956:	b2ca      	uxtb	r2, r1
 8001958:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	dbf0      	blt.n	800194a <_read+0x12>
  }

  return len;
 8001968:	687b      	ldr	r3, [r7, #4]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	e009      	b.n	8001998 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	60ba      	str	r2, [r7, #8]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3301      	adds	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	dbf1      	blt.n	8001984 <_write+0x12>
  }
  return len;
 80019a0:	687b      	ldr	r3, [r7, #4]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_close>:

int _close(int file)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019d2:	605a      	str	r2, [r3, #4]
  return 0;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <_isatty>:

int _isatty(int file)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a1c:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <_sbrk+0x5c>)
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <_sbrk+0x60>)
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a28:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <_sbrk+0x64>)
 8001a32:	4a12      	ldr	r2, [pc, #72]	; (8001a7c <_sbrk+0x68>)
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d207      	bcs.n	8001a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a44:	f005 f93c 	bl	8006cc0 <__errno>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a52:	e009      	b.n	8001a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <_sbrk+0x64>)
 8001a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20008000 	.word	0x20008000
 8001a74:	00000400 	.word	0x00000400
 8001a78:	20000388 	.word	0x20000388
 8001a7c:	200004e0 	.word	0x200004e0

08001a80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <SystemInit+0x20>)
 8001a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8a:	4a05      	ldr	r2, [pc, #20]	; (8001aa0 <SystemInit+0x20>)
 8001a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001aa4:	480d      	ldr	r0, [pc, #52]	; (8001adc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001aa6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aa8:	f7ff ffea 	bl	8001a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aac:	480c      	ldr	r0, [pc, #48]	; (8001ae0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aae:	490d      	ldr	r1, [pc, #52]	; (8001ae4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <LoopForever+0xe>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ab4:	e002      	b.n	8001abc <LoopCopyDataInit>

08001ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aba:	3304      	adds	r3, #4

08001abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac0:	d3f9      	bcc.n	8001ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ac4:	4c0a      	ldr	r4, [pc, #40]	; (8001af0 <LoopForever+0x16>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac8:	e001      	b.n	8001ace <LoopFillZerobss>

08001aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001acc:	3204      	adds	r2, #4

08001ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad0:	d3fb      	bcc.n	8001aca <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001ad2:	f005 f8fb 	bl	8006ccc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ad6:	f7ff fa91 	bl	8000ffc <main>

08001ada <LoopForever>:

LoopForever:
    b LoopForever
 8001ada:	e7fe      	b.n	8001ada <LoopForever>
  ldr   r0, =_estack
 8001adc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ae8:	08008eec 	.word	0x08008eec
  ldr r2, =_sbss
 8001aec:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001af0:	200004dc 	.word	0x200004dc

08001af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC1_2_IRQHandler>

08001af6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b00:	2003      	movs	r0, #3
 8001b02:	f001 f887 	bl	8002c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b06:	2000      	movs	r0, #0
 8001b08:	f000 f80e 	bl	8001b28 <HAL_InitTick>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	71fb      	strb	r3, [r7, #7]
 8001b16:	e001      	b.n	8001b1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b18:	f7ff fd44 	bl	80015a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b1c:	79fb      	ldrb	r3, [r7, #7]

}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b34:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <HAL_InitTick+0x68>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d022      	beq.n	8001b82 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <HAL_InitTick+0x6c>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <HAL_InitTick+0x68>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b50:	4618      	mov	r0, r3
 8001b52:	f001 f884 	bl	8002c5e <HAL_SYSTICK_Config>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10f      	bne.n	8001b7c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b0f      	cmp	r3, #15
 8001b60:	d809      	bhi.n	8001b76 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b62:	2200      	movs	r2, #0
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6a:	f001 f85e 	bl	8002c2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <HAL_InitTick+0x70>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	e007      	b.n	8001b86 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
 8001b7a:	e004      	b.n	8001b86 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
 8001b80:	e001      	b.n	8001b86 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000008 	.word	0x20000008
 8001b94:	20000000 	.word	0x20000000
 8001b98:	20000004 	.word	0x20000004

08001b9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_IncTick+0x1c>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_IncTick+0x20>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4413      	add	r3, r2
 8001baa:	4a03      	ldr	r2, [pc, #12]	; (8001bb8 <HAL_IncTick+0x1c>)
 8001bac:	6013      	str	r3, [r2, #0]
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	2000038c 	.word	0x2000038c
 8001bbc:	20000008 	.word	0x20000008

08001bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <HAL_GetTick+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	2000038c 	.word	0x2000038c

08001bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff ffee 	bl	8001bc0 <HAL_GetTick>
 8001be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf0:	d004      	beq.n	8001bfc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_Delay+0x40>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bfc:	bf00      	nop
 8001bfe:	f7ff ffdf 	bl	8001bc0 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d8f7      	bhi.n	8001bfe <HAL_Delay+0x26>
  {
  }
}
 8001c0e:	bf00      	nop
 8001c10:	bf00      	nop
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000008 	.word	0x20000008

08001c1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	609a      	str	r2, [r3, #8]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3360      	adds	r3, #96	; 0x60
 8001c96:	461a      	mov	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <LL_ADC_SetOffset+0x44>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cbc:	bf00      	nop
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	03fff000 	.word	0x03fff000

08001ccc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3360      	adds	r3, #96	; 0x60
 8001cda:	461a      	mov	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b087      	sub	sp, #28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	3360      	adds	r3, #96	; 0x60
 8001d08:	461a      	mov	r2, r3
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d22:	bf00      	nop
 8001d24:	371c      	adds	r7, #28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b087      	sub	sp, #28
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	3360      	adds	r3, #96	; 0x60
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001d58:	bf00      	nop
 8001d5a:	371c      	adds	r7, #28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3360      	adds	r3, #96	; 0x60
 8001d74:	461a      	mov	r2, r3
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001d8e:	bf00      	nop
 8001d90:	371c      	adds	r7, #28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	615a      	str	r2, [r3, #20]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	3330      	adds	r3, #48	; 0x30
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	4413      	add	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	211f      	movs	r1, #31
 8001dec:	fa01 f303 	lsl.w	r3, r1, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	401a      	ands	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	0e9b      	lsrs	r3, r3, #26
 8001df8:	f003 011f 	and.w	r1, r3, #31
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	431a      	orrs	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e0c:	bf00      	nop
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3314      	adds	r3, #20
 8001e28:	461a      	mov	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	0e5b      	lsrs	r3, r3, #25
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	4413      	add	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	0d1b      	lsrs	r3, r3, #20
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	2107      	movs	r1, #7
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	401a      	ands	r2, r3
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	0d1b      	lsrs	r3, r3, #20
 8001e52:	f003 031f 	and.w	r3, r3, #31
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e62:	bf00      	nop
 8001e64:	371c      	adds	r7, #28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f003 0318 	and.w	r3, r3, #24
 8001e92:	4908      	ldr	r1, [pc, #32]	; (8001eb4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e94:	40d9      	lsrs	r1, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	400b      	ands	r3, r1
 8001e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	0007ffff 	.word	0x0007ffff

08001eb8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ec8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6093      	str	r3, [r2, #8]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ef0:	d101      	bne.n	8001ef6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f40:	d101      	bne.n	8001f46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <LL_ADC_IsEnabled+0x18>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <LL_ADC_IsEnabled+0x1a>
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d101      	bne.n	8001f92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d101      	bne.n	8001fb8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b089      	sub	sp, #36	; 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e167      	b.n	80022b2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d109      	bne.n	8002004 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff fafb 	bl	80015ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff67 	bl	8001edc <LL_ADC_IsDeepPowerDownEnabled>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d004      	beq.n	800201e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff4d 	bl	8001eb8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff82 	bl	8001f2c <LL_ADC_IsInternalRegulatorEnabled>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d115      	bne.n	800205a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ff66 	bl	8001f04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002038:	4ba0      	ldr	r3, [pc, #640]	; (80022bc <HAL_ADC_Init+0x2f4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	099b      	lsrs	r3, r3, #6
 800203e:	4aa0      	ldr	r2, [pc, #640]	; (80022c0 <HAL_ADC_Init+0x2f8>)
 8002040:	fba2 2303 	umull	r2, r3, r2, r3
 8002044:	099b      	lsrs	r3, r3, #6
 8002046:	3301      	adds	r3, #1
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800204c:	e002      	b.n	8002054 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	3b01      	subs	r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f9      	bne.n	800204e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ff64 	bl	8001f2c <LL_ADC_IsInternalRegulatorEnabled>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10d      	bne.n	8002086 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	f043 0210 	orr.w	r2, r3, #16
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207a:	f043 0201 	orr.w	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff ff75 	bl	8001f7a <LL_ADC_REG_IsConversionOngoing>
 8002090:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 8100 	bne.w	80022a0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 80fc 	bne.w	80022a0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020b0:	f043 0202 	orr.w	r2, r3, #2
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff49 	bl	8001f54 <LL_ADC_IsEnabled>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d111      	bne.n	80020ec <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020c8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020cc:	f7ff ff42 	bl	8001f54 <LL_ADC_IsEnabled>
 80020d0:	4604      	mov	r4, r0
 80020d2:	487c      	ldr	r0, [pc, #496]	; (80022c4 <HAL_ADC_Init+0x2fc>)
 80020d4:	f7ff ff3e 	bl	8001f54 <LL_ADC_IsEnabled>
 80020d8:	4603      	mov	r3, r0
 80020da:	4323      	orrs	r3, r4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d105      	bne.n	80020ec <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4619      	mov	r1, r3
 80020e6:	4878      	ldr	r0, [pc, #480]	; (80022c8 <HAL_ADC_Init+0x300>)
 80020e8:	f7ff fd98 	bl	8001c1c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	7f5b      	ldrb	r3, [r3, #29]
 80020f0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020f6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020fc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002102:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800210a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002116:	2b01      	cmp	r3, #1
 8002118:	d106      	bne.n	8002128 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	3b01      	subs	r3, #1
 8002120:	045b      	lsls	r3, r3, #17
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	2b00      	cmp	r3, #0
 800212e:	d009      	beq.n	8002144 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	4b60      	ldr	r3, [pc, #384]	; (80022cc <HAL_ADC_Init+0x304>)
 800214c:	4013      	ands	r3, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	69b9      	ldr	r1, [r7, #24]
 8002154:	430b      	orrs	r3, r1
 8002156:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff14 	bl	8001fa0 <LL_ADC_INJ_IsConversionOngoing>
 8002178:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d16d      	bne.n	800225c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d16a      	bne.n	800225c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800218a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002192:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021a2:	f023 0302 	bic.w	r3, r3, #2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	69b9      	ldr	r1, [r7, #24]
 80021ac:	430b      	orrs	r3, r1
 80021ae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d017      	beq.n	80021e8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691a      	ldr	r2, [r3, #16]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80021d0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80021d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6911      	ldr	r1, [r2, #16]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	430b      	orrs	r3, r1
 80021e2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80021e6:	e013      	b.n	8002210 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691a      	ldr	r2, [r3, #16]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021f6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002208:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800220c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002216:	2b01      	cmp	r3, #1
 8002218:	d118      	bne.n	800224c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002224:	f023 0304 	bic.w	r3, r3, #4
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002230:	4311      	orrs	r1, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002236:	4311      	orrs	r1, r2
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800223c:	430a      	orrs	r2, r1
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0201 	orr.w	r2, r2, #1
 8002248:	611a      	str	r2, [r3, #16]
 800224a:	e007      	b.n	800225c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691a      	ldr	r2, [r3, #16]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0201 	bic.w	r2, r2, #1
 800225a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d10c      	bne.n	800227e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f023 010f 	bic.w	r1, r3, #15
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	1e5a      	subs	r2, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	631a      	str	r2, [r3, #48]	; 0x30
 800227c:	e007      	b.n	800228e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 020f 	bic.w	r2, r2, #15
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002292:	f023 0303 	bic.w	r3, r3, #3
 8002296:	f043 0201 	orr.w	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	65da      	str	r2, [r3, #92]	; 0x5c
 800229e:	e007      	b.n	80022b0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a4:	f043 0210 	orr.w	r2, r3, #16
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3724      	adds	r7, #36	; 0x24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd90      	pop	{r4, r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000000 	.word	0x20000000
 80022c0:	053e2d63 	.word	0x053e2d63
 80022c4:	50000100 	.word	0x50000100
 80022c8:	50000300 	.word	0x50000300
 80022cc:	fff04007 	.word	0xfff04007

080022d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b0b6      	sub	sp, #216	; 0xd8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x22>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e3c8      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x7b4>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fe3b 	bl	8001f7a <LL_ADC_REG_IsConversionOngoing>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	f040 83ad 	bne.w	8002a66 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	f7ff fd51 	bl	8001dc0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fe29 	bl	8001f7a <LL_ADC_REG_IsConversionOngoing>
 8002328:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fe35 	bl	8001fa0 <LL_ADC_INJ_IsConversionOngoing>
 8002336:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800233a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800233e:	2b00      	cmp	r3, #0
 8002340:	f040 81d9 	bne.w	80026f6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002344:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002348:	2b00      	cmp	r3, #0
 800234a:	f040 81d4 	bne.w	80026f6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002356:	d10f      	bne.n	8002378 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2200      	movs	r2, #0
 8002362:	4619      	mov	r1, r3
 8002364:	f7ff fd58 	bl	8001e18 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fd12 	bl	8001d9a <LL_ADC_SetSamplingTimeCommonConfig>
 8002376:	e00e      	b.n	8002396 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	6819      	ldr	r1, [r3, #0]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	461a      	mov	r2, r3
 8002386:	f7ff fd47 	bl	8001e18 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2100      	movs	r1, #0
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fd02 	bl	8001d9a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	08db      	lsrs	r3, r3, #3
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d022      	beq.n	80023fe <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6919      	ldr	r1, [r3, #16]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023c8:	f7ff fc5c 	bl	8001c84 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6818      	ldr	r0, [r3, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6919      	ldr	r1, [r3, #16]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	461a      	mov	r2, r3
 80023da:	f7ff fca8 	bl	8001d2e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d102      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x124>
 80023ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023f2:	e000      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x126>
 80023f4:	2300      	movs	r3, #0
 80023f6:	461a      	mov	r2, r3
 80023f8:	f7ff fcb4 	bl	8001d64 <LL_ADC_SetOffsetSaturation>
 80023fc:	e17b      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fc61 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 800240a:	4603      	mov	r3, r0
 800240c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10a      	bne.n	800242a <HAL_ADC_ConfigChannel+0x15a>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2100      	movs	r1, #0
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fc56 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 8002420:	4603      	mov	r3, r0
 8002422:	0e9b      	lsrs	r3, r3, #26
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	e01e      	b.n	8002468 <HAL_ADC_ConfigChannel+0x198>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2100      	movs	r1, #0
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fc4b 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 8002436:	4603      	mov	r3, r0
 8002438:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002448:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800244c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002450:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002458:	2320      	movs	r3, #32
 800245a:	e004      	b.n	8002466 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800245c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002470:	2b00      	cmp	r3, #0
 8002472:	d105      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x1b0>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0e9b      	lsrs	r3, r3, #26
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	e018      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x1e2>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002494:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800249c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80024a4:	2320      	movs	r3, #32
 80024a6:	e004      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80024a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d106      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2200      	movs	r2, #0
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fc1a 	bl	8001cf8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2101      	movs	r1, #1
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fbfe 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10a      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x220>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2101      	movs	r1, #1
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fbf3 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 80024e6:	4603      	mov	r3, r0
 80024e8:	0e9b      	lsrs	r3, r3, #26
 80024ea:	f003 021f 	and.w	r2, r3, #31
 80024ee:	e01e      	b.n	800252e <HAL_ADC_ConfigChannel+0x25e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2101      	movs	r1, #1
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fbe8 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800250e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002512:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002516:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800251e:	2320      	movs	r3, #32
 8002520:	e004      	b.n	800252c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002522:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002536:	2b00      	cmp	r3, #0
 8002538:	d105      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x276>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	0e9b      	lsrs	r3, r3, #26
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	e018      	b.n	8002578 <HAL_ADC_ConfigChannel+0x2a8>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800255a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800255e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002562:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800256a:	2320      	movs	r3, #32
 800256c:	e004      	b.n	8002578 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800256e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002578:	429a      	cmp	r2, r3
 800257a:	d106      	bne.n	800258a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2200      	movs	r2, #0
 8002582:	2101      	movs	r1, #1
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fbb7 	bl	8001cf8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2102      	movs	r1, #2
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fb9b 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 8002596:	4603      	mov	r3, r0
 8002598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10a      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x2e6>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2102      	movs	r1, #2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fb90 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 80025ac:	4603      	mov	r3, r0
 80025ae:	0e9b      	lsrs	r3, r3, #26
 80025b0:	f003 021f 	and.w	r2, r3, #31
 80025b4:	e01e      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x324>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2102      	movs	r1, #2
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fb85 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80025d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80025dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80025e4:	2320      	movs	r3, #32
 80025e6:	e004      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80025e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025ec:	fab3 f383 	clz	r3, r3
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d105      	bne.n	800260c <HAL_ADC_ConfigChannel+0x33c>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	0e9b      	lsrs	r3, r3, #26
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	e016      	b.n	800263a <HAL_ADC_ConfigChannel+0x36a>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800261e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002620:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800262c:	2320      	movs	r3, #32
 800262e:	e004      	b.n	800263a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002630:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002634:	fab3 f383 	clz	r3, r3
 8002638:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800263a:	429a      	cmp	r2, r3
 800263c:	d106      	bne.n	800264c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2200      	movs	r2, #0
 8002644:	2102      	movs	r1, #2
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fb56 	bl	8001cf8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2103      	movs	r1, #3
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fb3a 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 8002658:	4603      	mov	r3, r0
 800265a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10a      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x3a8>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2103      	movs	r1, #3
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fb2f 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 800266e:	4603      	mov	r3, r0
 8002670:	0e9b      	lsrs	r3, r3, #26
 8002672:	f003 021f 	and.w	r2, r3, #31
 8002676:	e017      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x3d8>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2103      	movs	r1, #3
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fb24 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 8002684:	4603      	mov	r3, r0
 8002686:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002690:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002692:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800269a:	2320      	movs	r3, #32
 800269c:	e003      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800269e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d105      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x3f0>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	0e9b      	lsrs	r3, r3, #26
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	e011      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x414>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80026ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80026d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80026d8:	2320      	movs	r3, #32
 80026da:	e003      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80026dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026de:	fab3 f383 	clz	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d106      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2200      	movs	r2, #0
 80026ee:	2103      	movs	r1, #3
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fb01 	bl	8001cf8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fc2a 	bl	8001f54 <LL_ADC_IsEnabled>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 8140 	bne.w	8002988 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	6819      	ldr	r1, [r3, #0]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	461a      	mov	r2, r3
 8002716:	f7ff fbab 	bl	8001e70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	4a8f      	ldr	r2, [pc, #572]	; (800295c <HAL_ADC_ConfigChannel+0x68c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	f040 8131 	bne.w	8002988 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10b      	bne.n	800274e <HAL_ADC_ConfigChannel+0x47e>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	0e9b      	lsrs	r3, r3, #26
 800273c:	3301      	adds	r3, #1
 800273e:	f003 031f 	and.w	r3, r3, #31
 8002742:	2b09      	cmp	r3, #9
 8002744:	bf94      	ite	ls
 8002746:	2301      	movls	r3, #1
 8002748:	2300      	movhi	r3, #0
 800274a:	b2db      	uxtb	r3, r3
 800274c:	e019      	b.n	8002782 <HAL_ADC_ConfigChannel+0x4b2>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800275c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800275e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002760:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002766:	2320      	movs	r3, #32
 8002768:	e003      	b.n	8002772 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800276a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	3301      	adds	r3, #1
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	2b09      	cmp	r3, #9
 800277a:	bf94      	ite	ls
 800277c:	2301      	movls	r3, #1
 800277e:	2300      	movhi	r3, #0
 8002780:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002782:	2b00      	cmp	r3, #0
 8002784:	d079      	beq.n	800287a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278e:	2b00      	cmp	r3, #0
 8002790:	d107      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x4d2>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	0e9b      	lsrs	r3, r3, #26
 8002798:	3301      	adds	r3, #1
 800279a:	069b      	lsls	r3, r3, #26
 800279c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027a0:	e015      	b.n	80027ce <HAL_ADC_ConfigChannel+0x4fe>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80027b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80027ba:	2320      	movs	r3, #32
 80027bc:	e003      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80027be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	3301      	adds	r3, #1
 80027c8:	069b      	lsls	r3, r3, #26
 80027ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x51e>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	0e9b      	lsrs	r3, r3, #26
 80027e0:	3301      	adds	r3, #1
 80027e2:	f003 031f 	and.w	r3, r3, #31
 80027e6:	2101      	movs	r1, #1
 80027e8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ec:	e017      	b.n	800281e <HAL_ADC_ConfigChannel+0x54e>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f6:	fa93 f3a3 	rbit	r3, r3
 80027fa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80027fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002806:	2320      	movs	r3, #32
 8002808:	e003      	b.n	8002812 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800280a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
 8002812:	3301      	adds	r3, #1
 8002814:	f003 031f 	and.w	r3, r3, #31
 8002818:	2101      	movs	r1, #1
 800281a:	fa01 f303 	lsl.w	r3, r1, r3
 800281e:	ea42 0103 	orr.w	r1, r2, r3
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10a      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x574>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	0e9b      	lsrs	r3, r3, #26
 8002834:	3301      	adds	r3, #1
 8002836:	f003 021f 	and.w	r2, r3, #31
 800283a:	4613      	mov	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4413      	add	r3, r2
 8002840:	051b      	lsls	r3, r3, #20
 8002842:	e018      	b.n	8002876 <HAL_ADC_ConfigChannel+0x5a6>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002854:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800285c:	2320      	movs	r3, #32
 800285e:	e003      	b.n	8002868 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	3301      	adds	r3, #1
 800286a:	f003 021f 	and.w	r2, r3, #31
 800286e:	4613      	mov	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4413      	add	r3, r2
 8002874:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002876:	430b      	orrs	r3, r1
 8002878:	e081      	b.n	800297e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002882:	2b00      	cmp	r3, #0
 8002884:	d107      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x5c6>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	0e9b      	lsrs	r3, r3, #26
 800288c:	3301      	adds	r3, #1
 800288e:	069b      	lsls	r3, r3, #26
 8002890:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002894:	e015      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x5f2>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80028a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80028a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80028ae:	2320      	movs	r3, #32
 80028b0:	e003      	b.n	80028ba <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80028b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b4:	fab3 f383 	clz	r3, r3
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	3301      	adds	r3, #1
 80028bc:	069b      	lsls	r3, r3, #26
 80028be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x612>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	0e9b      	lsrs	r3, r3, #26
 80028d4:	3301      	adds	r3, #1
 80028d6:	f003 031f 	and.w	r3, r3, #31
 80028da:	2101      	movs	r1, #1
 80028dc:	fa01 f303 	lsl.w	r3, r1, r3
 80028e0:	e017      	b.n	8002912 <HAL_ADC_ConfigChannel+0x642>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	fa93 f3a3 	rbit	r3, r3
 80028ee:	61fb      	str	r3, [r7, #28]
  return result;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80028fa:	2320      	movs	r3, #32
 80028fc:	e003      	b.n	8002906 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	fab3 f383 	clz	r3, r3
 8002904:	b2db      	uxtb	r3, r3
 8002906:	3301      	adds	r3, #1
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	2101      	movs	r1, #1
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	ea42 0103 	orr.w	r1, r2, r3
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10d      	bne.n	800293e <HAL_ADC_ConfigChannel+0x66e>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	0e9b      	lsrs	r3, r3, #26
 8002928:	3301      	adds	r3, #1
 800292a:	f003 021f 	and.w	r2, r3, #31
 800292e:	4613      	mov	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4413      	add	r3, r2
 8002934:	3b1e      	subs	r3, #30
 8002936:	051b      	lsls	r3, r3, #20
 8002938:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800293c:	e01e      	b.n	800297c <HAL_ADC_ConfigChannel+0x6ac>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	613b      	str	r3, [r7, #16]
  return result;
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d104      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002956:	2320      	movs	r3, #32
 8002958:	e006      	b.n	8002968 <HAL_ADC_ConfigChannel+0x698>
 800295a:	bf00      	nop
 800295c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	fab3 f383 	clz	r3, r3
 8002966:	b2db      	uxtb	r3, r3
 8002968:	3301      	adds	r3, #1
 800296a:	f003 021f 	and.w	r2, r3, #31
 800296e:	4613      	mov	r3, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4413      	add	r3, r2
 8002974:	3b1e      	subs	r3, #30
 8002976:	051b      	lsls	r3, r3, #20
 8002978:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800297c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002982:	4619      	mov	r1, r3
 8002984:	f7ff fa48 	bl	8001e18 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b3f      	ldr	r3, [pc, #252]	; (8002a8c <HAL_ADC_ConfigChannel+0x7bc>)
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d071      	beq.n	8002a78 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002994:	483e      	ldr	r0, [pc, #248]	; (8002a90 <HAL_ADC_ConfigChannel+0x7c0>)
 8002996:	f7ff f967 	bl	8001c68 <LL_ADC_GetCommonPathInternalCh>
 800299a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a3c      	ldr	r2, [pc, #240]	; (8002a94 <HAL_ADC_ConfigChannel+0x7c4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d004      	beq.n	80029b2 <HAL_ADC_ConfigChannel+0x6e2>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a3a      	ldr	r2, [pc, #232]	; (8002a98 <HAL_ADC_ConfigChannel+0x7c8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d127      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d121      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029c6:	d157      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029d0:	4619      	mov	r1, r3
 80029d2:	482f      	ldr	r0, [pc, #188]	; (8002a90 <HAL_ADC_ConfigChannel+0x7c0>)
 80029d4:	f7ff f935 	bl	8001c42 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029d8:	4b30      	ldr	r3, [pc, #192]	; (8002a9c <HAL_ADC_ConfigChannel+0x7cc>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	099b      	lsrs	r3, r3, #6
 80029de:	4a30      	ldr	r2, [pc, #192]	; (8002aa0 <HAL_ADC_ConfigChannel+0x7d0>)
 80029e0:	fba2 2303 	umull	r2, r3, r2, r3
 80029e4:	099b      	lsrs	r3, r3, #6
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	4613      	mov	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029f2:	e002      	b.n	80029fa <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1f9      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a00:	e03a      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a27      	ldr	r2, [pc, #156]	; (8002aa4 <HAL_ADC_ConfigChannel+0x7d4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d113      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10d      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a22      	ldr	r2, [pc, #136]	; (8002aa8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d02a      	beq.n	8002a78 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4818      	ldr	r0, [pc, #96]	; (8002a90 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a2e:	f7ff f908 	bl	8001c42 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a32:	e021      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a1c      	ldr	r2, [pc, #112]	; (8002aac <HAL_ADC_ConfigChannel+0x7dc>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d11c      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d116      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a16      	ldr	r2, [pc, #88]	; (8002aa8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d011      	beq.n	8002a78 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	480c      	ldr	r0, [pc, #48]	; (8002a90 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a60:	f7ff f8ef 	bl	8001c42 <LL_ADC_SetCommonPathInternalCh>
 8002a64:	e008      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6a:	f043 0220 	orr.w	r2, r3, #32
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a80:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	37d8      	adds	r7, #216	; 0xd8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	80080000 	.word	0x80080000
 8002a90:	50000300 	.word	0x50000300
 8002a94:	c3210000 	.word	0xc3210000
 8002a98:	90c00010 	.word	0x90c00010
 8002a9c:	20000000 	.word	0x20000000
 8002aa0:	053e2d63 	.word	0x053e2d63
 8002aa4:	c7520000 	.word	0xc7520000
 8002aa8:	50000100 	.word	0x50000100
 8002aac:	cb840000 	.word	0xcb840000

08002ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002acc:	4013      	ands	r3, r2
 8002ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ae2:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	60d3      	str	r3, [r2, #12]
}
 8002ae8:	bf00      	nop
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002afc:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <__NVIC_GetPriorityGrouping+0x18>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	0a1b      	lsrs	r3, r3, #8
 8002b02:	f003 0307 	and.w	r3, r3, #7
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	db0a      	blt.n	8002b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	490c      	ldr	r1, [pc, #48]	; (8002b60 <__NVIC_SetPriority+0x4c>)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	0112      	lsls	r2, r2, #4
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	440b      	add	r3, r1
 8002b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b3c:	e00a      	b.n	8002b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	4908      	ldr	r1, [pc, #32]	; (8002b64 <__NVIC_SetPriority+0x50>)
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	3b04      	subs	r3, #4
 8002b4c:	0112      	lsls	r2, r2, #4
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	440b      	add	r3, r1
 8002b52:	761a      	strb	r2, [r3, #24]
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000e100 	.word	0xe000e100
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b089      	sub	sp, #36	; 0x24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f1c3 0307 	rsb	r3, r3, #7
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	bf28      	it	cs
 8002b86:	2304      	movcs	r3, #4
 8002b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2b06      	cmp	r3, #6
 8002b90:	d902      	bls.n	8002b98 <NVIC_EncodePriority+0x30>
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3b03      	subs	r3, #3
 8002b96:	e000      	b.n	8002b9a <NVIC_EncodePriority+0x32>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	401a      	ands	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	43d9      	mvns	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc0:	4313      	orrs	r3, r2
         );
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3724      	adds	r7, #36	; 0x24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be0:	d301      	bcc.n	8002be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002be2:	2301      	movs	r3, #1
 8002be4:	e00f      	b.n	8002c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002be6:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <SysTick_Config+0x40>)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bee:	210f      	movs	r1, #15
 8002bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf4:	f7ff ff8e 	bl	8002b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <SysTick_Config+0x40>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bfe:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <SysTick_Config+0x40>)
 8002c00:	2207      	movs	r2, #7
 8002c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	e000e010 	.word	0xe000e010

08002c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff ff47 	bl	8002ab0 <__NVIC_SetPriorityGrouping>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b086      	sub	sp, #24
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	4603      	mov	r3, r0
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c38:	f7ff ff5e 	bl	8002af8 <__NVIC_GetPriorityGrouping>
 8002c3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	6978      	ldr	r0, [r7, #20]
 8002c44:	f7ff ff90 	bl	8002b68 <NVIC_EncodePriority>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ff5f 	bl	8002b14 <__NVIC_SetPriority>
}
 8002c56:	bf00      	nop
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff ffb2 	bl	8002bd0 <SysTick_Config>
 8002c6c:	4603      	mov	r3, r0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c86:	e15a      	b.n	8002f3e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	fa01 f303 	lsl.w	r3, r1, r3
 8002c94:	4013      	ands	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 814c 	beq.w	8002f38 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d005      	beq.n	8002cb8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d130      	bne.n	8002d1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cee:	2201      	movs	r2, #1
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	091b      	lsrs	r3, r3, #4
 8002d04:	f003 0201 	and.w	r2, r3, #1
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d017      	beq.n	8002d56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	2203      	movs	r2, #3
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d123      	bne.n	8002daa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	08da      	lsrs	r2, r3, #3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3208      	adds	r2, #8
 8002d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	220f      	movs	r2, #15
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4013      	ands	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	691a      	ldr	r2, [r3, #16]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	08da      	lsrs	r2, r3, #3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3208      	adds	r2, #8
 8002da4:	6939      	ldr	r1, [r7, #16]
 8002da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	2203      	movs	r2, #3
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 0203 	and.w	r2, r3, #3
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 80a6 	beq.w	8002f38 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dec:	4b5b      	ldr	r3, [pc, #364]	; (8002f5c <HAL_GPIO_Init+0x2e4>)
 8002dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df0:	4a5a      	ldr	r2, [pc, #360]	; (8002f5c <HAL_GPIO_Init+0x2e4>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	6613      	str	r3, [r2, #96]	; 0x60
 8002df8:	4b58      	ldr	r3, [pc, #352]	; (8002f5c <HAL_GPIO_Init+0x2e4>)
 8002dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e04:	4a56      	ldr	r2, [pc, #344]	; (8002f60 <HAL_GPIO_Init+0x2e8>)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	089b      	lsrs	r3, r3, #2
 8002e0a:	3302      	adds	r3, #2
 8002e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f003 0303 	and.w	r3, r3, #3
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	220f      	movs	r2, #15
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e2e:	d01f      	beq.n	8002e70 <HAL_GPIO_Init+0x1f8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a4c      	ldr	r2, [pc, #304]	; (8002f64 <HAL_GPIO_Init+0x2ec>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d019      	beq.n	8002e6c <HAL_GPIO_Init+0x1f4>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a4b      	ldr	r2, [pc, #300]	; (8002f68 <HAL_GPIO_Init+0x2f0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d013      	beq.n	8002e68 <HAL_GPIO_Init+0x1f0>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a4a      	ldr	r2, [pc, #296]	; (8002f6c <HAL_GPIO_Init+0x2f4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d00d      	beq.n	8002e64 <HAL_GPIO_Init+0x1ec>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a49      	ldr	r2, [pc, #292]	; (8002f70 <HAL_GPIO_Init+0x2f8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d007      	beq.n	8002e60 <HAL_GPIO_Init+0x1e8>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a48      	ldr	r2, [pc, #288]	; (8002f74 <HAL_GPIO_Init+0x2fc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d101      	bne.n	8002e5c <HAL_GPIO_Init+0x1e4>
 8002e58:	2305      	movs	r3, #5
 8002e5a:	e00a      	b.n	8002e72 <HAL_GPIO_Init+0x1fa>
 8002e5c:	2306      	movs	r3, #6
 8002e5e:	e008      	b.n	8002e72 <HAL_GPIO_Init+0x1fa>
 8002e60:	2304      	movs	r3, #4
 8002e62:	e006      	b.n	8002e72 <HAL_GPIO_Init+0x1fa>
 8002e64:	2303      	movs	r3, #3
 8002e66:	e004      	b.n	8002e72 <HAL_GPIO_Init+0x1fa>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e002      	b.n	8002e72 <HAL_GPIO_Init+0x1fa>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <HAL_GPIO_Init+0x1fa>
 8002e70:	2300      	movs	r3, #0
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	f002 0203 	and.w	r2, r2, #3
 8002e78:	0092      	lsls	r2, r2, #2
 8002e7a:	4093      	lsls	r3, r2
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e82:	4937      	ldr	r1, [pc, #220]	; (8002f60 <HAL_GPIO_Init+0x2e8>)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	089b      	lsrs	r3, r3, #2
 8002e88:	3302      	adds	r3, #2
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e90:	4b39      	ldr	r3, [pc, #228]	; (8002f78 <HAL_GPIO_Init+0x300>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002eb4:	4a30      	ldr	r2, [pc, #192]	; (8002f78 <HAL_GPIO_Init+0x300>)
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002eba:	4b2f      	ldr	r3, [pc, #188]	; (8002f78 <HAL_GPIO_Init+0x300>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ede:	4a26      	ldr	r2, [pc, #152]	; (8002f78 <HAL_GPIO_Init+0x300>)
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002ee4:	4b24      	ldr	r3, [pc, #144]	; (8002f78 <HAL_GPIO_Init+0x300>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f08:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <HAL_GPIO_Init+0x300>)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f0e:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <HAL_GPIO_Init+0x300>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f32:	4a11      	ldr	r2, [pc, #68]	; (8002f78 <HAL_GPIO_Init+0x300>)
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	fa22 f303 	lsr.w	r3, r2, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f47f ae9d 	bne.w	8002c88 <HAL_GPIO_Init+0x10>
  }
}
 8002f4e:	bf00      	nop
 8002f50:	bf00      	nop
 8002f52:	371c      	adds	r7, #28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40010000 	.word	0x40010000
 8002f64:	48000400 	.word	0x48000400
 8002f68:	48000800 	.word	0x48000800
 8002f6c:	48000c00 	.word	0x48000c00
 8002f70:	48001000 	.word	0x48001000
 8002f74:	48001400 	.word	0x48001400
 8002f78:	40010400 	.word	0x40010400

08002f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	807b      	strh	r3, [r7, #2]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f8c:	787b      	ldrb	r3, [r7, #1]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f92:	887a      	ldrh	r2, [r7, #2]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f98:	e002      	b.n	8002fa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f9a:	887a      	ldrh	r2, [r7, #2]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fbe:	887a      	ldrh	r2, [r7, #2]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	041a      	lsls	r2, r3, #16
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	43d9      	mvns	r1, r3
 8002fca:	887b      	ldrh	r3, [r7, #2]
 8002fcc:	400b      	ands	r3, r1
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	619a      	str	r2, [r3, #24]
}
 8002fd4:	bf00      	nop
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d141      	bne.n	8003072 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fee:	4b4b      	ldr	r3, [pc, #300]	; (800311c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ffa:	d131      	bne.n	8003060 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ffc:	4b47      	ldr	r3, [pc, #284]	; (800311c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003002:	4a46      	ldr	r2, [pc, #280]	; (800311c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003008:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800300c:	4b43      	ldr	r3, [pc, #268]	; (800311c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003014:	4a41      	ldr	r2, [pc, #260]	; (800311c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800301a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800301c:	4b40      	ldr	r3, [pc, #256]	; (8003120 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2232      	movs	r2, #50	; 0x32
 8003022:	fb02 f303 	mul.w	r3, r2, r3
 8003026:	4a3f      	ldr	r2, [pc, #252]	; (8003124 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003028:	fba2 2303 	umull	r2, r3, r2, r3
 800302c:	0c9b      	lsrs	r3, r3, #18
 800302e:	3301      	adds	r3, #1
 8003030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003032:	e002      	b.n	800303a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3b01      	subs	r3, #1
 8003038:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800303a:	4b38      	ldr	r3, [pc, #224]	; (800311c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003046:	d102      	bne.n	800304e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f2      	bne.n	8003034 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800304e:	4b33      	ldr	r3, [pc, #204]	; (800311c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800305a:	d158      	bne.n	800310e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e057      	b.n	8003110 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003060:	4b2e      	ldr	r3, [pc, #184]	; (800311c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003066:	4a2d      	ldr	r2, [pc, #180]	; (800311c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800306c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003070:	e04d      	b.n	800310e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003078:	d141      	bne.n	80030fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800307a:	4b28      	ldr	r3, [pc, #160]	; (800311c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003086:	d131      	bne.n	80030ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003088:	4b24      	ldr	r3, [pc, #144]	; (800311c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800308a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800308e:	4a23      	ldr	r2, [pc, #140]	; (800311c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003094:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003098:	4b20      	ldr	r3, [pc, #128]	; (800311c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030a0:	4a1e      	ldr	r2, [pc, #120]	; (800311c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030a8:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2232      	movs	r2, #50	; 0x32
 80030ae:	fb02 f303 	mul.w	r3, r2, r3
 80030b2:	4a1c      	ldr	r2, [pc, #112]	; (8003124 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	0c9b      	lsrs	r3, r3, #18
 80030ba:	3301      	adds	r3, #1
 80030bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030be:	e002      	b.n	80030c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030c6:	4b15      	ldr	r3, [pc, #84]	; (800311c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d2:	d102      	bne.n	80030da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f2      	bne.n	80030c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030da:	4b10      	ldr	r3, [pc, #64]	; (800311c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e6:	d112      	bne.n	800310e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e011      	b.n	8003110 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030ec:	4b0b      	ldr	r3, [pc, #44]	; (800311c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030f2:	4a0a      	ldr	r2, [pc, #40]	; (800311c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80030fc:	e007      	b.n	800310e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030fe:	4b07      	ldr	r3, [pc, #28]	; (800311c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003106:	4a05      	ldr	r2, [pc, #20]	; (800311c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003108:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800310c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	40007000 	.word	0x40007000
 8003120:	20000000 	.word	0x20000000
 8003124:	431bde83 	.word	0x431bde83

08003128 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	4a04      	ldr	r2, [pc, #16]	; (8003144 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003132:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003136:	6093      	str	r3, [r2, #8]
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40007000 	.word	0x40007000

08003148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e2fe      	b.n	8003758 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d075      	beq.n	8003252 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003166:	4b97      	ldr	r3, [pc, #604]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003170:	4b94      	ldr	r3, [pc, #592]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	2b0c      	cmp	r3, #12
 800317e:	d102      	bne.n	8003186 <HAL_RCC_OscConfig+0x3e>
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2b03      	cmp	r3, #3
 8003184:	d002      	beq.n	800318c <HAL_RCC_OscConfig+0x44>
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2b08      	cmp	r3, #8
 800318a:	d10b      	bne.n	80031a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318c:	4b8d      	ldr	r3, [pc, #564]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d05b      	beq.n	8003250 <HAL_RCC_OscConfig+0x108>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d157      	bne.n	8003250 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e2d9      	b.n	8003758 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ac:	d106      	bne.n	80031bc <HAL_RCC_OscConfig+0x74>
 80031ae:	4b85      	ldr	r3, [pc, #532]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a84      	ldr	r2, [pc, #528]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 80031b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	e01d      	b.n	80031f8 <HAL_RCC_OscConfig+0xb0>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031c4:	d10c      	bne.n	80031e0 <HAL_RCC_OscConfig+0x98>
 80031c6:	4b7f      	ldr	r3, [pc, #508]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a7e      	ldr	r2, [pc, #504]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 80031cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	4b7c      	ldr	r3, [pc, #496]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a7b      	ldr	r2, [pc, #492]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 80031d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	e00b      	b.n	80031f8 <HAL_RCC_OscConfig+0xb0>
 80031e0:	4b78      	ldr	r3, [pc, #480]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a77      	ldr	r2, [pc, #476]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 80031e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	4b75      	ldr	r3, [pc, #468]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a74      	ldr	r2, [pc, #464]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 80031f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d013      	beq.n	8003228 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fe fcde 	bl	8001bc0 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003208:	f7fe fcda 	bl	8001bc0 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	; 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e29e      	b.n	8003758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800321a:	4b6a      	ldr	r3, [pc, #424]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0xc0>
 8003226:	e014      	b.n	8003252 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003228:	f7fe fcca 	bl	8001bc0 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003230:	f7fe fcc6 	bl	8001bc0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	; 0x64
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e28a      	b.n	8003758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003242:	4b60      	ldr	r3, [pc, #384]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0xe8>
 800324e:	e000      	b.n	8003252 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d075      	beq.n	800334a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800325e:	4b59      	ldr	r3, [pc, #356]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
 8003266:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003268:	4b56      	ldr	r3, [pc, #344]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0303 	and.w	r3, r3, #3
 8003270:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2b0c      	cmp	r3, #12
 8003276:	d102      	bne.n	800327e <HAL_RCC_OscConfig+0x136>
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d002      	beq.n	8003284 <HAL_RCC_OscConfig+0x13c>
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	2b04      	cmp	r3, #4
 8003282:	d11f      	bne.n	80032c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003284:	4b4f      	ldr	r3, [pc, #316]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_RCC_OscConfig+0x154>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e25d      	b.n	8003758 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329c:	4b49      	ldr	r3, [pc, #292]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	061b      	lsls	r3, r3, #24
 80032aa:	4946      	ldr	r1, [pc, #280]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032b0:	4b45      	ldr	r3, [pc, #276]	; (80033c8 <HAL_RCC_OscConfig+0x280>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fe fc37 	bl	8001b28 <HAL_InitTick>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d043      	beq.n	8003348 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e249      	b.n	8003758 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d023      	beq.n	8003314 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032cc:	4b3d      	ldr	r3, [pc, #244]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a3c      	ldr	r2, [pc, #240]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 80032d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fe fc72 	bl	8001bc0 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e0:	f7fe fc6e 	bl	8001bc0 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e232      	b.n	8003758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f2:	4b34      	ldr	r3, [pc, #208]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fe:	4b31      	ldr	r3, [pc, #196]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	061b      	lsls	r3, r3, #24
 800330c:	492d      	ldr	r1, [pc, #180]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 800330e:	4313      	orrs	r3, r2
 8003310:	604b      	str	r3, [r1, #4]
 8003312:	e01a      	b.n	800334a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003314:	4b2b      	ldr	r3, [pc, #172]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a2a      	ldr	r2, [pc, #168]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 800331a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800331e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003320:	f7fe fc4e 	bl	8001bc0 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003328:	f7fe fc4a 	bl	8001bc0 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e20e      	b.n	8003758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800333a:	4b22      	ldr	r3, [pc, #136]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x1e0>
 8003346:	e000      	b.n	800334a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003348:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d041      	beq.n	80033da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d01c      	beq.n	8003398 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800335e:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 8003360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003364:	4a17      	ldr	r2, [pc, #92]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336e:	f7fe fc27 	bl	8001bc0 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003376:	f7fe fc23 	bl	8001bc0 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e1e7      	b.n	8003758 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003388:	4b0e      	ldr	r3, [pc, #56]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 800338a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0ef      	beq.n	8003376 <HAL_RCC_OscConfig+0x22e>
 8003396:	e020      	b.n	80033da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003398:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 800339a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800339e:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <HAL_RCC_OscConfig+0x27c>)
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a8:	f7fe fc0a 	bl	8001bc0 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033ae:	e00d      	b.n	80033cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b0:	f7fe fc06 	bl	8001bc0 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d906      	bls.n	80033cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e1ca      	b.n	8003758 <HAL_RCC_OscConfig+0x610>
 80033c2:	bf00      	nop
 80033c4:	40021000 	.word	0x40021000
 80033c8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033cc:	4b8c      	ldr	r3, [pc, #560]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 80033ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1ea      	bne.n	80033b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 80a6 	beq.w	8003534 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e8:	2300      	movs	r3, #0
 80033ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033ec:	4b84      	ldr	r3, [pc, #528]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_RCC_OscConfig+0x2b4>
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <HAL_RCC_OscConfig+0x2b6>
 80033fc:	2300      	movs	r3, #0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003402:	4b7f      	ldr	r3, [pc, #508]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 8003404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003406:	4a7e      	ldr	r2, [pc, #504]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 8003408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340c:	6593      	str	r3, [r2, #88]	; 0x58
 800340e:	4b7c      	ldr	r3, [pc, #496]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 8003410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800341a:	2301      	movs	r3, #1
 800341c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800341e:	4b79      	ldr	r3, [pc, #484]	; (8003604 <HAL_RCC_OscConfig+0x4bc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d118      	bne.n	800345c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800342a:	4b76      	ldr	r3, [pc, #472]	; (8003604 <HAL_RCC_OscConfig+0x4bc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a75      	ldr	r2, [pc, #468]	; (8003604 <HAL_RCC_OscConfig+0x4bc>)
 8003430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003436:	f7fe fbc3 	bl	8001bc0 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343e:	f7fe fbbf 	bl	8001bc0 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e183      	b.n	8003758 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003450:	4b6c      	ldr	r3, [pc, #432]	; (8003604 <HAL_RCC_OscConfig+0x4bc>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f0      	beq.n	800343e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d108      	bne.n	8003476 <HAL_RCC_OscConfig+0x32e>
 8003464:	4b66      	ldr	r3, [pc, #408]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346a:	4a65      	ldr	r2, [pc, #404]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003474:	e024      	b.n	80034c0 <HAL_RCC_OscConfig+0x378>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b05      	cmp	r3, #5
 800347c:	d110      	bne.n	80034a0 <HAL_RCC_OscConfig+0x358>
 800347e:	4b60      	ldr	r3, [pc, #384]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 8003480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003484:	4a5e      	ldr	r2, [pc, #376]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 8003486:	f043 0304 	orr.w	r3, r3, #4
 800348a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800348e:	4b5c      	ldr	r3, [pc, #368]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 8003490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003494:	4a5a      	ldr	r2, [pc, #360]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800349e:	e00f      	b.n	80034c0 <HAL_RCC_OscConfig+0x378>
 80034a0:	4b57      	ldr	r3, [pc, #348]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a6:	4a56      	ldr	r2, [pc, #344]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034b0:	4b53      	ldr	r3, [pc, #332]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b6:	4a52      	ldr	r2, [pc, #328]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 80034b8:	f023 0304 	bic.w	r3, r3, #4
 80034bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d016      	beq.n	80034f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c8:	f7fe fb7a 	bl	8001bc0 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ce:	e00a      	b.n	80034e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d0:	f7fe fb76 	bl	8001bc0 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	f241 3288 	movw	r2, #5000	; 0x1388
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e138      	b.n	8003758 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e6:	4b46      	ldr	r3, [pc, #280]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 80034e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0ed      	beq.n	80034d0 <HAL_RCC_OscConfig+0x388>
 80034f4:	e015      	b.n	8003522 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f6:	f7fe fb63 	bl	8001bc0 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034fc:	e00a      	b.n	8003514 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fe:	f7fe fb5f 	bl	8001bc0 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	f241 3288 	movw	r2, #5000	; 0x1388
 800350c:	4293      	cmp	r3, r2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e121      	b.n	8003758 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003514:	4b3a      	ldr	r3, [pc, #232]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1ed      	bne.n	80034fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003522:	7ffb      	ldrb	r3, [r7, #31]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d105      	bne.n	8003534 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003528:	4b35      	ldr	r3, [pc, #212]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 800352a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352c:	4a34      	ldr	r2, [pc, #208]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 800352e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003532:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b00      	cmp	r3, #0
 800353e:	d03c      	beq.n	80035ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01c      	beq.n	8003582 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003548:	4b2d      	ldr	r3, [pc, #180]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 800354a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800354e:	4a2c      	ldr	r2, [pc, #176]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003558:	f7fe fb32 	bl	8001bc0 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003560:	f7fe fb2e 	bl	8001bc0 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e0f2      	b.n	8003758 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003572:	4b23      	ldr	r3, [pc, #140]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 8003574:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ef      	beq.n	8003560 <HAL_RCC_OscConfig+0x418>
 8003580:	e01b      	b.n	80035ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003582:	4b1f      	ldr	r3, [pc, #124]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 8003584:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003588:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 800358a:	f023 0301 	bic.w	r3, r3, #1
 800358e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003592:	f7fe fb15 	bl	8001bc0 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800359a:	f7fe fb11 	bl	8001bc0 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e0d5      	b.n	8003758 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035ac:	4b14      	ldr	r3, [pc, #80]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 80035ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1ef      	bne.n	800359a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80c9 	beq.w	8003756 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035c4:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 030c 	and.w	r3, r3, #12
 80035cc:	2b0c      	cmp	r3, #12
 80035ce:	f000 8083 	beq.w	80036d8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d15e      	bne.n	8003698 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a08      	ldr	r2, [pc, #32]	; (8003600 <HAL_RCC_OscConfig+0x4b8>)
 80035e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e6:	f7fe faeb 	bl	8001bc0 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ec:	e00c      	b.n	8003608 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ee:	f7fe fae7 	bl	8001bc0 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d905      	bls.n	8003608 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e0ab      	b.n	8003758 <HAL_RCC_OscConfig+0x610>
 8003600:	40021000 	.word	0x40021000
 8003604:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003608:	4b55      	ldr	r3, [pc, #340]	; (8003760 <HAL_RCC_OscConfig+0x618>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1ec      	bne.n	80035ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003614:	4b52      	ldr	r3, [pc, #328]	; (8003760 <HAL_RCC_OscConfig+0x618>)
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	4b52      	ldr	r3, [pc, #328]	; (8003764 <HAL_RCC_OscConfig+0x61c>)
 800361a:	4013      	ands	r3, r2
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6a11      	ldr	r1, [r2, #32]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003624:	3a01      	subs	r2, #1
 8003626:	0112      	lsls	r2, r2, #4
 8003628:	4311      	orrs	r1, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800362e:	0212      	lsls	r2, r2, #8
 8003630:	4311      	orrs	r1, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003636:	0852      	lsrs	r2, r2, #1
 8003638:	3a01      	subs	r2, #1
 800363a:	0552      	lsls	r2, r2, #21
 800363c:	4311      	orrs	r1, r2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003642:	0852      	lsrs	r2, r2, #1
 8003644:	3a01      	subs	r2, #1
 8003646:	0652      	lsls	r2, r2, #25
 8003648:	4311      	orrs	r1, r2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800364e:	06d2      	lsls	r2, r2, #27
 8003650:	430a      	orrs	r2, r1
 8003652:	4943      	ldr	r1, [pc, #268]	; (8003760 <HAL_RCC_OscConfig+0x618>)
 8003654:	4313      	orrs	r3, r2
 8003656:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003658:	4b41      	ldr	r3, [pc, #260]	; (8003760 <HAL_RCC_OscConfig+0x618>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a40      	ldr	r2, [pc, #256]	; (8003760 <HAL_RCC_OscConfig+0x618>)
 800365e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003662:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003664:	4b3e      	ldr	r3, [pc, #248]	; (8003760 <HAL_RCC_OscConfig+0x618>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4a3d      	ldr	r2, [pc, #244]	; (8003760 <HAL_RCC_OscConfig+0x618>)
 800366a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800366e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fe faa6 	bl	8001bc0 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003678:	f7fe faa2 	bl	8001bc0 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e066      	b.n	8003758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800368a:	4b35      	ldr	r3, [pc, #212]	; (8003760 <HAL_RCC_OscConfig+0x618>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f0      	beq.n	8003678 <HAL_RCC_OscConfig+0x530>
 8003696:	e05e      	b.n	8003756 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003698:	4b31      	ldr	r3, [pc, #196]	; (8003760 <HAL_RCC_OscConfig+0x618>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a30      	ldr	r2, [pc, #192]	; (8003760 <HAL_RCC_OscConfig+0x618>)
 800369e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fe fa8c 	bl	8001bc0 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ac:	f7fe fa88 	bl	8001bc0 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e04c      	b.n	8003758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036be:	4b28      	ldr	r3, [pc, #160]	; (8003760 <HAL_RCC_OscConfig+0x618>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80036ca:	4b25      	ldr	r3, [pc, #148]	; (8003760 <HAL_RCC_OscConfig+0x618>)
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	4924      	ldr	r1, [pc, #144]	; (8003760 <HAL_RCC_OscConfig+0x618>)
 80036d0:	4b25      	ldr	r3, [pc, #148]	; (8003768 <HAL_RCC_OscConfig+0x620>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	60cb      	str	r3, [r1, #12]
 80036d6:	e03e      	b.n	8003756 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e039      	b.n	8003758 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80036e4:	4b1e      	ldr	r3, [pc, #120]	; (8003760 <HAL_RCC_OscConfig+0x618>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f003 0203 	and.w	r2, r3, #3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d12c      	bne.n	8003752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	3b01      	subs	r3, #1
 8003704:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003706:	429a      	cmp	r2, r3
 8003708:	d123      	bne.n	8003752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003716:	429a      	cmp	r2, r3
 8003718:	d11b      	bne.n	8003752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003726:	429a      	cmp	r2, r3
 8003728:	d113      	bne.n	8003752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	085b      	lsrs	r3, r3, #1
 8003736:	3b01      	subs	r3, #1
 8003738:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800373a:	429a      	cmp	r2, r3
 800373c:	d109      	bne.n	8003752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003748:	085b      	lsrs	r3, r3, #1
 800374a:	3b01      	subs	r3, #1
 800374c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800374e:	429a      	cmp	r2, r3
 8003750:	d001      	beq.n	8003756 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40021000 	.word	0x40021000
 8003764:	019f800c 	.word	0x019f800c
 8003768:	feeefffc 	.word	0xfeeefffc

0800376c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e11e      	b.n	80039c2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003784:	4b91      	ldr	r3, [pc, #580]	; (80039cc <HAL_RCC_ClockConfig+0x260>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 030f 	and.w	r3, r3, #15
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d910      	bls.n	80037b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003792:	4b8e      	ldr	r3, [pc, #568]	; (80039cc <HAL_RCC_ClockConfig+0x260>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f023 020f 	bic.w	r2, r3, #15
 800379a:	498c      	ldr	r1, [pc, #560]	; (80039cc <HAL_RCC_ClockConfig+0x260>)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	4313      	orrs	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a2:	4b8a      	ldr	r3, [pc, #552]	; (80039cc <HAL_RCC_ClockConfig+0x260>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d001      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e106      	b.n	80039c2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d073      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	d129      	bne.n	800381c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c8:	4b81      	ldr	r3, [pc, #516]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0f4      	b.n	80039c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80037d8:	f000 f99e 	bl	8003b18 <RCC_GetSysClockFreqFromPLLSource>
 80037dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	4a7c      	ldr	r2, [pc, #496]	; (80039d4 <HAL_RCC_ClockConfig+0x268>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d93f      	bls.n	8003866 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037e6:	4b7a      	ldr	r3, [pc, #488]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d009      	beq.n	8003806 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d033      	beq.n	8003866 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003802:	2b00      	cmp	r3, #0
 8003804:	d12f      	bne.n	8003866 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003806:	4b72      	ldr	r3, [pc, #456]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800380e:	4a70      	ldr	r2, [pc, #448]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 8003810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003814:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003816:	2380      	movs	r3, #128	; 0x80
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	e024      	b.n	8003866 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d107      	bne.n	8003834 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003824:	4b6a      	ldr	r3, [pc, #424]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d109      	bne.n	8003844 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0c6      	b.n	80039c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003834:	4b66      	ldr	r3, [pc, #408]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0be      	b.n	80039c2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003844:	f000 f8ce 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8003848:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4a61      	ldr	r2, [pc, #388]	; (80039d4 <HAL_RCC_ClockConfig+0x268>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d909      	bls.n	8003866 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003852:	4b5f      	ldr	r3, [pc, #380]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800385a:	4a5d      	ldr	r2, [pc, #372]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 800385c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003860:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003866:	4b5a      	ldr	r3, [pc, #360]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f023 0203 	bic.w	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4957      	ldr	r1, [pc, #348]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 8003874:	4313      	orrs	r3, r2
 8003876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003878:	f7fe f9a2 	bl	8001bc0 <HAL_GetTick>
 800387c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387e:	e00a      	b.n	8003896 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003880:	f7fe f99e 	bl	8001bc0 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f241 3288 	movw	r2, #5000	; 0x1388
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e095      	b.n	80039c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003896:	4b4e      	ldr	r3, [pc, #312]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 020c 	and.w	r2, r3, #12
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d1eb      	bne.n	8003880 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d023      	beq.n	80038fc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c0:	4b43      	ldr	r3, [pc, #268]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4a42      	ldr	r2, [pc, #264]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 80038c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038ca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d007      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80038d8:	4b3d      	ldr	r3, [pc, #244]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80038e0:	4a3b      	ldr	r2, [pc, #236]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 80038e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e8:	4b39      	ldr	r3, [pc, #228]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	4936      	ldr	r1, [pc, #216]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]
 80038fa:	e008      	b.n	800390e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b80      	cmp	r3, #128	; 0x80
 8003900:	d105      	bne.n	800390e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003902:	4b33      	ldr	r3, [pc, #204]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	4a32      	ldr	r2, [pc, #200]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 8003908:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800390c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800390e:	4b2f      	ldr	r3, [pc, #188]	; (80039cc <HAL_RCC_ClockConfig+0x260>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	429a      	cmp	r2, r3
 800391a:	d21d      	bcs.n	8003958 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391c:	4b2b      	ldr	r3, [pc, #172]	; (80039cc <HAL_RCC_ClockConfig+0x260>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f023 020f 	bic.w	r2, r3, #15
 8003924:	4929      	ldr	r1, [pc, #164]	; (80039cc <HAL_RCC_ClockConfig+0x260>)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	4313      	orrs	r3, r2
 800392a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800392c:	f7fe f948 	bl	8001bc0 <HAL_GetTick>
 8003930:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003932:	e00a      	b.n	800394a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003934:	f7fe f944 	bl	8001bc0 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003942:	4293      	cmp	r3, r2
 8003944:	d901      	bls.n	800394a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e03b      	b.n	80039c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394a:	4b20      	ldr	r3, [pc, #128]	; (80039cc <HAL_RCC_ClockConfig+0x260>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d1ed      	bne.n	8003934 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003964:	4b1a      	ldr	r3, [pc, #104]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4917      	ldr	r1, [pc, #92]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 8003972:	4313      	orrs	r3, r2
 8003974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d009      	beq.n	8003996 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003982:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	490f      	ldr	r1, [pc, #60]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003996:	f000 f825 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 800399a:	4602      	mov	r2, r0
 800399c:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <HAL_RCC_ClockConfig+0x264>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	490c      	ldr	r1, [pc, #48]	; (80039d8 <HAL_RCC_ClockConfig+0x26c>)
 80039a8:	5ccb      	ldrb	r3, [r1, r3]
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	fa22 f303 	lsr.w	r3, r2, r3
 80039b2:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <HAL_RCC_ClockConfig+0x270>)
 80039b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80039b6:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <HAL_RCC_ClockConfig+0x274>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe f8b4 	bl	8001b28 <HAL_InitTick>
 80039c0:	4603      	mov	r3, r0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40022000 	.word	0x40022000
 80039d0:	40021000 	.word	0x40021000
 80039d4:	04c4b400 	.word	0x04c4b400
 80039d8:	08008b28 	.word	0x08008b28
 80039dc:	20000000 	.word	0x20000000
 80039e0:	20000004 	.word	0x20000004

080039e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039ea:	4b2c      	ldr	r3, [pc, #176]	; (8003a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d102      	bne.n	80039fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039f6:	4b2a      	ldr	r3, [pc, #168]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	e047      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80039fc:	4b27      	ldr	r3, [pc, #156]	; (8003a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 030c 	and.w	r3, r3, #12
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d102      	bne.n	8003a0e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a08:	4b26      	ldr	r3, [pc, #152]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	e03e      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003a0e:	4b23      	ldr	r3, [pc, #140]	; (8003a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	2b0c      	cmp	r3, #12
 8003a18:	d136      	bne.n	8003a88 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a1a:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a24:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	091b      	lsrs	r3, r3, #4
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	3301      	adds	r3, #1
 8003a30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d10c      	bne.n	8003a52 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a38:	4a1a      	ldr	r2, [pc, #104]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	4a16      	ldr	r2, [pc, #88]	; (8003a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a42:	68d2      	ldr	r2, [r2, #12]
 8003a44:	0a12      	lsrs	r2, r2, #8
 8003a46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a4a:	fb02 f303 	mul.w	r3, r2, r3
 8003a4e:	617b      	str	r3, [r7, #20]
      break;
 8003a50:	e00c      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a52:	4a13      	ldr	r2, [pc, #76]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5a:	4a10      	ldr	r2, [pc, #64]	; (8003a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a5c:	68d2      	ldr	r2, [r2, #12]
 8003a5e:	0a12      	lsrs	r2, r2, #8
 8003a60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a64:	fb02 f303 	mul.w	r3, r2, r3
 8003a68:	617b      	str	r3, [r7, #20]
      break;
 8003a6a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	0e5b      	lsrs	r3, r3, #25
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	3301      	adds	r3, #1
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	e001      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a8c:	693b      	ldr	r3, [r7, #16]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	371c      	adds	r7, #28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	00f42400 	.word	0x00f42400
 8003aa4:	007a1200 	.word	0x007a1200

08003aa8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aac:	4b03      	ldr	r3, [pc, #12]	; (8003abc <HAL_RCC_GetHCLKFreq+0x14>)
 8003aae:	681b      	ldr	r3, [r3, #0]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	20000000 	.word	0x20000000

08003ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ac4:	f7ff fff0 	bl	8003aa8 <HAL_RCC_GetHCLKFreq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	0a1b      	lsrs	r3, r3, #8
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	4904      	ldr	r1, [pc, #16]	; (8003ae8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ad6:	5ccb      	ldrb	r3, [r1, r3]
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	08008b38 	.word	0x08008b38

08003aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003af0:	f7ff ffda 	bl	8003aa8 <HAL_RCC_GetHCLKFreq>
 8003af4:	4602      	mov	r2, r0
 8003af6:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	0adb      	lsrs	r3, r3, #11
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	4904      	ldr	r1, [pc, #16]	; (8003b14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b02:	5ccb      	ldrb	r3, [r1, r3]
 8003b04:	f003 031f 	and.w	r3, r3, #31
 8003b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40021000 	.word	0x40021000
 8003b14:	08008b38 	.word	0x08008b38

08003b18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b1e:	4b1e      	ldr	r3, [pc, #120]	; (8003b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b28:	4b1b      	ldr	r3, [pc, #108]	; (8003b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	091b      	lsrs	r3, r3, #4
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	3301      	adds	r3, #1
 8003b34:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b03      	cmp	r3, #3
 8003b3a:	d10c      	bne.n	8003b56 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b3c:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b44:	4a14      	ldr	r2, [pc, #80]	; (8003b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b46:	68d2      	ldr	r2, [r2, #12]
 8003b48:	0a12      	lsrs	r2, r2, #8
 8003b4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b4e:	fb02 f303 	mul.w	r3, r2, r3
 8003b52:	617b      	str	r3, [r7, #20]
    break;
 8003b54:	e00c      	b.n	8003b70 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b56:	4a12      	ldr	r2, [pc, #72]	; (8003ba0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5e:	4a0e      	ldr	r2, [pc, #56]	; (8003b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b60:	68d2      	ldr	r2, [r2, #12]
 8003b62:	0a12      	lsrs	r2, r2, #8
 8003b64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b68:	fb02 f303 	mul.w	r3, r2, r3
 8003b6c:	617b      	str	r3, [r7, #20]
    break;
 8003b6e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b70:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	0e5b      	lsrs	r3, r3, #25
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b8a:	687b      	ldr	r3, [r7, #4]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	007a1200 	.word	0x007a1200
 8003ba0:	00f42400 	.word	0x00f42400

08003ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bac:	2300      	movs	r3, #0
 8003bae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 8098 	beq.w	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc6:	4b43      	ldr	r3, [pc, #268]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10d      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd2:	4b40      	ldr	r3, [pc, #256]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd6:	4a3f      	ldr	r2, [pc, #252]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	6593      	str	r3, [r2, #88]	; 0x58
 8003bde:	4b3d      	ldr	r3, [pc, #244]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bea:	2301      	movs	r3, #1
 8003bec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bee:	4b3a      	ldr	r3, [pc, #232]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a39      	ldr	r2, [pc, #228]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bfa:	f7fd ffe1 	bl	8001bc0 <HAL_GetTick>
 8003bfe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c00:	e009      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c02:	f7fd ffdd 	bl	8001bc0 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d902      	bls.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	74fb      	strb	r3, [r7, #19]
        break;
 8003c14:	e005      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c16:	4b30      	ldr	r3, [pc, #192]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0ef      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003c22:	7cfb      	ldrb	r3, [r7, #19]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d159      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c28:	4b2a      	ldr	r3, [pc, #168]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c32:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d01e      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d019      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c44:	4b23      	ldr	r3, [pc, #140]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c50:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c56:	4a1f      	ldr	r2, [pc, #124]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c60:	4b1c      	ldr	r3, [pc, #112]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c66:	4a1b      	ldr	r2, [pc, #108]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c70:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d016      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c82:	f7fd ff9d 	bl	8001bc0 <HAL_GetTick>
 8003c86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c88:	e00b      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8a:	f7fd ff99 	bl	8001bc0 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d902      	bls.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	74fb      	strb	r3, [r7, #19]
            break;
 8003ca0:	e006      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca2:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0ec      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10b      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cb6:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	4903      	ldr	r1, [pc, #12]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cce:	7cfb      	ldrb	r3, [r7, #19]
 8003cd0:	74bb      	strb	r3, [r7, #18]
 8003cd2:	e005      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cdc:	7cfb      	ldrb	r3, [r7, #19]
 8003cde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ce0:	7c7b      	ldrb	r3, [r7, #17]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d105      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce6:	4ba6      	ldr	r3, [pc, #664]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cea:	4aa5      	ldr	r2, [pc, #660]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cfe:	4ba0      	ldr	r3, [pc, #640]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d04:	f023 0203 	bic.w	r2, r3, #3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	499c      	ldr	r1, [pc, #624]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d20:	4b97      	ldr	r3, [pc, #604]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d26:	f023 020c 	bic.w	r2, r3, #12
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	4994      	ldr	r1, [pc, #592]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d42:	4b8f      	ldr	r3, [pc, #572]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	498b      	ldr	r1, [pc, #556]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d64:	4b86      	ldr	r3, [pc, #536]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	4983      	ldr	r1, [pc, #524]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d86:	4b7e      	ldr	r3, [pc, #504]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	497a      	ldr	r1, [pc, #488]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003da8:	4b75      	ldr	r3, [pc, #468]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	4972      	ldr	r1, [pc, #456]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dca:	4b6d      	ldr	r3, [pc, #436]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	4969      	ldr	r1, [pc, #420]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00a      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dec:	4b64      	ldr	r3, [pc, #400]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	4961      	ldr	r1, [pc, #388]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e0e:	4b5c      	ldr	r3, [pc, #368]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	4958      	ldr	r1, [pc, #352]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d015      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e30:	4b53      	ldr	r3, [pc, #332]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3e:	4950      	ldr	r1, [pc, #320]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e4e:	d105      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e50:	4b4b      	ldr	r3, [pc, #300]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	4a4a      	ldr	r2, [pc, #296]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e5a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d015      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e68:	4b45      	ldr	r3, [pc, #276]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	4942      	ldr	r1, [pc, #264]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e86:	d105      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e88:	4b3d      	ldr	r3, [pc, #244]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4a3c      	ldr	r2, [pc, #240]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e92:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d015      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ea0:	4b37      	ldr	r3, [pc, #220]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	4934      	ldr	r1, [pc, #208]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ebe:	d105      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ec0:	4b2f      	ldr	r3, [pc, #188]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4a2e      	ldr	r2, [pc, #184]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d015      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ed8:	4b29      	ldr	r3, [pc, #164]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee6:	4926      	ldr	r1, [pc, #152]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ef6:	d105      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ef8:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4a20      	ldr	r2, [pc, #128]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f02:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d015      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f10:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	4918      	ldr	r1, [pc, #96]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f2e:	d105      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f30:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	4a12      	ldr	r2, [pc, #72]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f3a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d015      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f48:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f56:	490a      	ldr	r1, [pc, #40]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f66:	d105      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4a04      	ldr	r2, [pc, #16]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f72:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f74:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40021000 	.word	0x40021000

08003f84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e049      	b.n	800402a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fd fb74 	bl	8001698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	f000 fb98 	bl	80046f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e049      	b.n	80040d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d106      	bne.n	800405e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f841 	bl	80040e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2202      	movs	r2, #2
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3304      	adds	r3, #4
 800406e:	4619      	mov	r1, r3
 8004070:	4610      	mov	r0, r2
 8004072:	f000 fb41 	bl	80046f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e049      	b.n	800419a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fd fadc 	bl	80016d8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	4619      	mov	r1, r3
 8004132:	4610      	mov	r0, r2
 8004134:	f000 fae0 	bl	80046f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b086      	sub	sp, #24
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80041bc:	2302      	movs	r3, #2
 80041be:	e088      	b.n	80042d2 <HAL_TIM_IC_ConfigChannel+0x130>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d11b      	bne.n	8004206 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80041de:	f000 fe1d 	bl	8004e1c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699a      	ldr	r2, [r3, #24]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 020c 	bic.w	r2, r2, #12
 80041f0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6999      	ldr	r1, [r3, #24]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	619a      	str	r2, [r3, #24]
 8004204:	e060      	b.n	80042c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b04      	cmp	r3, #4
 800420a:	d11c      	bne.n	8004246 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800421c:	f000 fe95 	bl	8004f4a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699a      	ldr	r2, [r3, #24]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800422e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6999      	ldr	r1, [r3, #24]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	021a      	lsls	r2, r3, #8
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	619a      	str	r2, [r3, #24]
 8004244:	e040      	b.n	80042c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b08      	cmp	r3, #8
 800424a:	d11b      	bne.n	8004284 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800425c:	f000 fee2 	bl	8005024 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69da      	ldr	r2, [r3, #28]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 020c 	bic.w	r2, r2, #12
 800426e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	69d9      	ldr	r1, [r3, #28]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	61da      	str	r2, [r3, #28]
 8004282:	e021      	b.n	80042c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b0c      	cmp	r3, #12
 8004288:	d11c      	bne.n	80042c4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800429a:	f000 feff 	bl	800509c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69da      	ldr	r2, [r3, #28]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80042ac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69d9      	ldr	r1, [r3, #28]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	021a      	lsls	r2, r3, #8
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	61da      	str	r2, [r3, #28]
 80042c2:	e001      	b.n	80042c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e0ff      	b.n	80044fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b14      	cmp	r3, #20
 8004306:	f200 80f0 	bhi.w	80044ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800430a:	a201      	add	r2, pc, #4	; (adr r2, 8004310 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800430c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004310:	08004365 	.word	0x08004365
 8004314:	080044eb 	.word	0x080044eb
 8004318:	080044eb 	.word	0x080044eb
 800431c:	080044eb 	.word	0x080044eb
 8004320:	080043a5 	.word	0x080043a5
 8004324:	080044eb 	.word	0x080044eb
 8004328:	080044eb 	.word	0x080044eb
 800432c:	080044eb 	.word	0x080044eb
 8004330:	080043e7 	.word	0x080043e7
 8004334:	080044eb 	.word	0x080044eb
 8004338:	080044eb 	.word	0x080044eb
 800433c:	080044eb 	.word	0x080044eb
 8004340:	08004427 	.word	0x08004427
 8004344:	080044eb 	.word	0x080044eb
 8004348:	080044eb 	.word	0x080044eb
 800434c:	080044eb 	.word	0x080044eb
 8004350:	08004469 	.word	0x08004469
 8004354:	080044eb 	.word	0x080044eb
 8004358:	080044eb 	.word	0x080044eb
 800435c:	080044eb 	.word	0x080044eb
 8004360:	080044a9 	.word	0x080044a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68b9      	ldr	r1, [r7, #8]
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fa60 	bl	8004830 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699a      	ldr	r2, [r3, #24]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0208 	orr.w	r2, r2, #8
 800437e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0204 	bic.w	r2, r2, #4
 800438e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6999      	ldr	r1, [r3, #24]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	691a      	ldr	r2, [r3, #16]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	619a      	str	r2, [r3, #24]
      break;
 80043a2:	e0a5      	b.n	80044f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68b9      	ldr	r1, [r7, #8]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fad0 	bl	8004950 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699a      	ldr	r2, [r3, #24]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699a      	ldr	r2, [r3, #24]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6999      	ldr	r1, [r3, #24]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	021a      	lsls	r2, r3, #8
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	619a      	str	r2, [r3, #24]
      break;
 80043e4:	e084      	b.n	80044f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68b9      	ldr	r1, [r7, #8]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fb39 	bl	8004a64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69da      	ldr	r2, [r3, #28]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f042 0208 	orr.w	r2, r2, #8
 8004400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69da      	ldr	r2, [r3, #28]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0204 	bic.w	r2, r2, #4
 8004410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69d9      	ldr	r1, [r3, #28]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	61da      	str	r2, [r3, #28]
      break;
 8004424:	e064      	b.n	80044f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68b9      	ldr	r1, [r7, #8]
 800442c:	4618      	mov	r0, r3
 800442e:	f000 fba1 	bl	8004b74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69da      	ldr	r2, [r3, #28]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	69da      	ldr	r2, [r3, #28]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69d9      	ldr	r1, [r3, #28]
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	021a      	lsls	r2, r3, #8
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	61da      	str	r2, [r3, #28]
      break;
 8004466:	e043      	b.n	80044f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68b9      	ldr	r1, [r7, #8]
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fc0a 	bl	8004c88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0208 	orr.w	r2, r2, #8
 8004482:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0204 	bic.w	r2, r2, #4
 8004492:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	691a      	ldr	r2, [r3, #16]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80044a6:	e023      	b.n	80044f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68b9      	ldr	r1, [r7, #8]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fc4e 	bl	8004d50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	021a      	lsls	r2, r3, #8
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80044e8:	e002      	b.n	80044f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	75fb      	strb	r3, [r7, #23]
      break;
 80044ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop

08004504 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <HAL_TIM_ConfigClockSource+0x1c>
 800451c:	2302      	movs	r3, #2
 800451e:	e0de      	b.n	80046de <HAL_TIM_ConfigClockSource+0x1da>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800453e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800454a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a63      	ldr	r2, [pc, #396]	; (80046e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	f000 80a9 	beq.w	80046b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004560:	4a61      	ldr	r2, [pc, #388]	; (80046e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	f200 80ae 	bhi.w	80046c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004568:	4a60      	ldr	r2, [pc, #384]	; (80046ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800456a:	4293      	cmp	r3, r2
 800456c:	f000 80a1 	beq.w	80046b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004570:	4a5e      	ldr	r2, [pc, #376]	; (80046ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8004572:	4293      	cmp	r3, r2
 8004574:	f200 80a6 	bhi.w	80046c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004578:	4a5d      	ldr	r2, [pc, #372]	; (80046f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800457a:	4293      	cmp	r3, r2
 800457c:	f000 8099 	beq.w	80046b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004580:	4a5b      	ldr	r2, [pc, #364]	; (80046f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004582:	4293      	cmp	r3, r2
 8004584:	f200 809e 	bhi.w	80046c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004588:	4a5a      	ldr	r2, [pc, #360]	; (80046f4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	f000 8091 	beq.w	80046b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004590:	4a58      	ldr	r2, [pc, #352]	; (80046f4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	f200 8096 	bhi.w	80046c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004598:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800459c:	f000 8089 	beq.w	80046b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80045a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80045a4:	f200 808e 	bhi.w	80046c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80045a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ac:	d03e      	beq.n	800462c <HAL_TIM_ConfigClockSource+0x128>
 80045ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045b2:	f200 8087 	bhi.w	80046c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80045b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ba:	f000 8086 	beq.w	80046ca <HAL_TIM_ConfigClockSource+0x1c6>
 80045be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c2:	d87f      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80045c4:	2b70      	cmp	r3, #112	; 0x70
 80045c6:	d01a      	beq.n	80045fe <HAL_TIM_ConfigClockSource+0xfa>
 80045c8:	2b70      	cmp	r3, #112	; 0x70
 80045ca:	d87b      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80045cc:	2b60      	cmp	r3, #96	; 0x60
 80045ce:	d050      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0x16e>
 80045d0:	2b60      	cmp	r3, #96	; 0x60
 80045d2:	d877      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80045d4:	2b50      	cmp	r3, #80	; 0x50
 80045d6:	d03c      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x14e>
 80045d8:	2b50      	cmp	r3, #80	; 0x50
 80045da:	d873      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	d058      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x18e>
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	d86f      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80045e4:	2b30      	cmp	r3, #48	; 0x30
 80045e6:	d064      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80045e8:	2b30      	cmp	r3, #48	; 0x30
 80045ea:	d86b      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80045ec:	2b20      	cmp	r3, #32
 80045ee:	d060      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80045f0:	2b20      	cmp	r3, #32
 80045f2:	d867      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d05c      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80045f8:	2b10      	cmp	r3, #16
 80045fa:	d05a      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80045fc:	e062      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800460e:	f000 fd9f 	bl	8005150 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004620:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	609a      	str	r2, [r3, #8]
      break;
 800462a:	e04f      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800463c:	f000 fd88 	bl	8005150 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800464e:	609a      	str	r2, [r3, #8]
      break;
 8004650:	e03c      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800465e:	461a      	mov	r2, r3
 8004660:	f000 fc44 	bl	8004eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2150      	movs	r1, #80	; 0x50
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fd53 	bl	8005116 <TIM_ITRx_SetConfig>
      break;
 8004670:	e02c      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800467e:	461a      	mov	r2, r3
 8004680:	f000 fca0 	bl	8004fc4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2160      	movs	r1, #96	; 0x60
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fd43 	bl	8005116 <TIM_ITRx_SetConfig>
      break;
 8004690:	e01c      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800469e:	461a      	mov	r2, r3
 80046a0:	f000 fc24 	bl	8004eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2140      	movs	r1, #64	; 0x40
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fd33 	bl	8005116 <TIM_ITRx_SetConfig>
      break;
 80046b0:	e00c      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4619      	mov	r1, r3
 80046bc:	4610      	mov	r0, r2
 80046be:	f000 fd2a 	bl	8005116 <TIM_ITRx_SetConfig>
      break;
 80046c2:	e003      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	73fb      	strb	r3, [r7, #15]
      break;
 80046c8:	e000      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80046ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	00100070 	.word	0x00100070
 80046ec:	00100040 	.word	0x00100040
 80046f0:	00100030 	.word	0x00100030
 80046f4:	00100020 	.word	0x00100020

080046f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a42      	ldr	r2, [pc, #264]	; (8004814 <TIM_Base_SetConfig+0x11c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d00f      	beq.n	8004730 <TIM_Base_SetConfig+0x38>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004716:	d00b      	beq.n	8004730 <TIM_Base_SetConfig+0x38>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a3f      	ldr	r2, [pc, #252]	; (8004818 <TIM_Base_SetConfig+0x120>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d007      	beq.n	8004730 <TIM_Base_SetConfig+0x38>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a3e      	ldr	r2, [pc, #248]	; (800481c <TIM_Base_SetConfig+0x124>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d003      	beq.n	8004730 <TIM_Base_SetConfig+0x38>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a3d      	ldr	r2, [pc, #244]	; (8004820 <TIM_Base_SetConfig+0x128>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d108      	bne.n	8004742 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a33      	ldr	r2, [pc, #204]	; (8004814 <TIM_Base_SetConfig+0x11c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d01b      	beq.n	8004782 <TIM_Base_SetConfig+0x8a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004750:	d017      	beq.n	8004782 <TIM_Base_SetConfig+0x8a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a30      	ldr	r2, [pc, #192]	; (8004818 <TIM_Base_SetConfig+0x120>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d013      	beq.n	8004782 <TIM_Base_SetConfig+0x8a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a2f      	ldr	r2, [pc, #188]	; (800481c <TIM_Base_SetConfig+0x124>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00f      	beq.n	8004782 <TIM_Base_SetConfig+0x8a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a2e      	ldr	r2, [pc, #184]	; (8004820 <TIM_Base_SetConfig+0x128>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00b      	beq.n	8004782 <TIM_Base_SetConfig+0x8a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a2d      	ldr	r2, [pc, #180]	; (8004824 <TIM_Base_SetConfig+0x12c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d007      	beq.n	8004782 <TIM_Base_SetConfig+0x8a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a2c      	ldr	r2, [pc, #176]	; (8004828 <TIM_Base_SetConfig+0x130>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d003      	beq.n	8004782 <TIM_Base_SetConfig+0x8a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a2b      	ldr	r2, [pc, #172]	; (800482c <TIM_Base_SetConfig+0x134>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d108      	bne.n	8004794 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a16      	ldr	r2, [pc, #88]	; (8004814 <TIM_Base_SetConfig+0x11c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00f      	beq.n	80047e0 <TIM_Base_SetConfig+0xe8>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a17      	ldr	r2, [pc, #92]	; (8004820 <TIM_Base_SetConfig+0x128>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00b      	beq.n	80047e0 <TIM_Base_SetConfig+0xe8>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a16      	ldr	r2, [pc, #88]	; (8004824 <TIM_Base_SetConfig+0x12c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d007      	beq.n	80047e0 <TIM_Base_SetConfig+0xe8>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a15      	ldr	r2, [pc, #84]	; (8004828 <TIM_Base_SetConfig+0x130>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d003      	beq.n	80047e0 <TIM_Base_SetConfig+0xe8>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a14      	ldr	r2, [pc, #80]	; (800482c <TIM_Base_SetConfig+0x134>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d103      	bne.n	80047e8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d105      	bne.n	8004806 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	f023 0201 	bic.w	r2, r3, #1
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	611a      	str	r2, [r3, #16]
  }
}
 8004806:	bf00      	nop
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40012c00 	.word	0x40012c00
 8004818:	40000400 	.word	0x40000400
 800481c:	40000800 	.word	0x40000800
 8004820:	40013400 	.word	0x40013400
 8004824:	40014000 	.word	0x40014000
 8004828:	40014400 	.word	0x40014400
 800482c:	40014800 	.word	0x40014800

08004830 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	f023 0201 	bic.w	r2, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800485e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0303 	bic.w	r3, r3, #3
 800486a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f023 0302 	bic.w	r3, r3, #2
 800487c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	4313      	orrs	r3, r2
 8004886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a2c      	ldr	r2, [pc, #176]	; (800493c <TIM_OC1_SetConfig+0x10c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d00f      	beq.n	80048b0 <TIM_OC1_SetConfig+0x80>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a2b      	ldr	r2, [pc, #172]	; (8004940 <TIM_OC1_SetConfig+0x110>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d00b      	beq.n	80048b0 <TIM_OC1_SetConfig+0x80>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a2a      	ldr	r2, [pc, #168]	; (8004944 <TIM_OC1_SetConfig+0x114>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d007      	beq.n	80048b0 <TIM_OC1_SetConfig+0x80>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a29      	ldr	r2, [pc, #164]	; (8004948 <TIM_OC1_SetConfig+0x118>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d003      	beq.n	80048b0 <TIM_OC1_SetConfig+0x80>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a28      	ldr	r2, [pc, #160]	; (800494c <TIM_OC1_SetConfig+0x11c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d10c      	bne.n	80048ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f023 0308 	bic.w	r3, r3, #8
 80048b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f023 0304 	bic.w	r3, r3, #4
 80048c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a1b      	ldr	r2, [pc, #108]	; (800493c <TIM_OC1_SetConfig+0x10c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00f      	beq.n	80048f2 <TIM_OC1_SetConfig+0xc2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a1a      	ldr	r2, [pc, #104]	; (8004940 <TIM_OC1_SetConfig+0x110>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00b      	beq.n	80048f2 <TIM_OC1_SetConfig+0xc2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a19      	ldr	r2, [pc, #100]	; (8004944 <TIM_OC1_SetConfig+0x114>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d007      	beq.n	80048f2 <TIM_OC1_SetConfig+0xc2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a18      	ldr	r2, [pc, #96]	; (8004948 <TIM_OC1_SetConfig+0x118>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d003      	beq.n	80048f2 <TIM_OC1_SetConfig+0xc2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a17      	ldr	r2, [pc, #92]	; (800494c <TIM_OC1_SetConfig+0x11c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d111      	bne.n	8004916 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	621a      	str	r2, [r3, #32]
}
 8004930:	bf00      	nop
 8004932:	371c      	adds	r7, #28
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	40012c00 	.word	0x40012c00
 8004940:	40013400 	.word	0x40013400
 8004944:	40014000 	.word	0x40014000
 8004948:	40014400 	.word	0x40014400
 800494c:	40014800 	.word	0x40014800

08004950 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	f023 0210 	bic.w	r2, r3, #16
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800497e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	021b      	lsls	r3, r3, #8
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	4313      	orrs	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f023 0320 	bic.w	r3, r3, #32
 800499e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a28      	ldr	r2, [pc, #160]	; (8004a50 <TIM_OC2_SetConfig+0x100>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d003      	beq.n	80049bc <TIM_OC2_SetConfig+0x6c>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a27      	ldr	r2, [pc, #156]	; (8004a54 <TIM_OC2_SetConfig+0x104>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d10d      	bne.n	80049d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a1d      	ldr	r2, [pc, #116]	; (8004a50 <TIM_OC2_SetConfig+0x100>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00f      	beq.n	8004a00 <TIM_OC2_SetConfig+0xb0>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a1c      	ldr	r2, [pc, #112]	; (8004a54 <TIM_OC2_SetConfig+0x104>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d00b      	beq.n	8004a00 <TIM_OC2_SetConfig+0xb0>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a1b      	ldr	r2, [pc, #108]	; (8004a58 <TIM_OC2_SetConfig+0x108>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d007      	beq.n	8004a00 <TIM_OC2_SetConfig+0xb0>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a1a      	ldr	r2, [pc, #104]	; (8004a5c <TIM_OC2_SetConfig+0x10c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d003      	beq.n	8004a00 <TIM_OC2_SetConfig+0xb0>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a19      	ldr	r2, [pc, #100]	; (8004a60 <TIM_OC2_SetConfig+0x110>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d113      	bne.n	8004a28 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	621a      	str	r2, [r3, #32]
}
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40012c00 	.word	0x40012c00
 8004a54:	40013400 	.word	0x40013400
 8004a58:	40014000 	.word	0x40014000
 8004a5c:	40014400 	.word	0x40014400
 8004a60:	40014800 	.word	0x40014800

08004a64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0303 	bic.w	r3, r3, #3
 8004a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	021b      	lsls	r3, r3, #8
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a27      	ldr	r2, [pc, #156]	; (8004b60 <TIM_OC3_SetConfig+0xfc>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d003      	beq.n	8004ace <TIM_OC3_SetConfig+0x6a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a26      	ldr	r2, [pc, #152]	; (8004b64 <TIM_OC3_SetConfig+0x100>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d10d      	bne.n	8004aea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	021b      	lsls	r3, r3, #8
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a1c      	ldr	r2, [pc, #112]	; (8004b60 <TIM_OC3_SetConfig+0xfc>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d00f      	beq.n	8004b12 <TIM_OC3_SetConfig+0xae>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a1b      	ldr	r2, [pc, #108]	; (8004b64 <TIM_OC3_SetConfig+0x100>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00b      	beq.n	8004b12 <TIM_OC3_SetConfig+0xae>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a1a      	ldr	r2, [pc, #104]	; (8004b68 <TIM_OC3_SetConfig+0x104>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d007      	beq.n	8004b12 <TIM_OC3_SetConfig+0xae>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a19      	ldr	r2, [pc, #100]	; (8004b6c <TIM_OC3_SetConfig+0x108>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d003      	beq.n	8004b12 <TIM_OC3_SetConfig+0xae>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a18      	ldr	r2, [pc, #96]	; (8004b70 <TIM_OC3_SetConfig+0x10c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d113      	bne.n	8004b3a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	621a      	str	r2, [r3, #32]
}
 8004b54:	bf00      	nop
 8004b56:	371c      	adds	r7, #28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	40012c00 	.word	0x40012c00
 8004b64:	40013400 	.word	0x40013400
 8004b68:	40014000 	.word	0x40014000
 8004b6c:	40014400 	.word	0x40014400
 8004b70:	40014800 	.word	0x40014800

08004b74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b087      	sub	sp, #28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	021b      	lsls	r3, r3, #8
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	031b      	lsls	r3, r3, #12
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a28      	ldr	r2, [pc, #160]	; (8004c74 <TIM_OC4_SetConfig+0x100>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d003      	beq.n	8004be0 <TIM_OC4_SetConfig+0x6c>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a27      	ldr	r2, [pc, #156]	; (8004c78 <TIM_OC4_SetConfig+0x104>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d10d      	bne.n	8004bfc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	031b      	lsls	r3, r3, #12
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a1d      	ldr	r2, [pc, #116]	; (8004c74 <TIM_OC4_SetConfig+0x100>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d00f      	beq.n	8004c24 <TIM_OC4_SetConfig+0xb0>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a1c      	ldr	r2, [pc, #112]	; (8004c78 <TIM_OC4_SetConfig+0x104>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00b      	beq.n	8004c24 <TIM_OC4_SetConfig+0xb0>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a1b      	ldr	r2, [pc, #108]	; (8004c7c <TIM_OC4_SetConfig+0x108>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d007      	beq.n	8004c24 <TIM_OC4_SetConfig+0xb0>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a1a      	ldr	r2, [pc, #104]	; (8004c80 <TIM_OC4_SetConfig+0x10c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d003      	beq.n	8004c24 <TIM_OC4_SetConfig+0xb0>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a19      	ldr	r2, [pc, #100]	; (8004c84 <TIM_OC4_SetConfig+0x110>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d113      	bne.n	8004c4c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c2a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c32:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	019b      	lsls	r3, r3, #6
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	019b      	lsls	r3, r3, #6
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	621a      	str	r2, [r3, #32]
}
 8004c66:	bf00      	nop
 8004c68:	371c      	adds	r7, #28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40012c00 	.word	0x40012c00
 8004c78:	40013400 	.word	0x40013400
 8004c7c:	40014000 	.word	0x40014000
 8004c80:	40014400 	.word	0x40014400
 8004c84:	40014800 	.word	0x40014800

08004c88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ccc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	041b      	lsls	r3, r3, #16
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a17      	ldr	r2, [pc, #92]	; (8004d3c <TIM_OC5_SetConfig+0xb4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00f      	beq.n	8004d02 <TIM_OC5_SetConfig+0x7a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a16      	ldr	r2, [pc, #88]	; (8004d40 <TIM_OC5_SetConfig+0xb8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00b      	beq.n	8004d02 <TIM_OC5_SetConfig+0x7a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a15      	ldr	r2, [pc, #84]	; (8004d44 <TIM_OC5_SetConfig+0xbc>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d007      	beq.n	8004d02 <TIM_OC5_SetConfig+0x7a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a14      	ldr	r2, [pc, #80]	; (8004d48 <TIM_OC5_SetConfig+0xc0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d003      	beq.n	8004d02 <TIM_OC5_SetConfig+0x7a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a13      	ldr	r2, [pc, #76]	; (8004d4c <TIM_OC5_SetConfig+0xc4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d109      	bne.n	8004d16 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	021b      	lsls	r3, r3, #8
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	621a      	str	r2, [r3, #32]
}
 8004d30:	bf00      	nop
 8004d32:	371c      	adds	r7, #28
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	40012c00 	.word	0x40012c00
 8004d40:	40013400 	.word	0x40013400
 8004d44:	40014000 	.word	0x40014000
 8004d48:	40014400 	.word	0x40014400
 8004d4c:	40014800 	.word	0x40014800

08004d50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	051b      	lsls	r3, r3, #20
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a18      	ldr	r2, [pc, #96]	; (8004e08 <TIM_OC6_SetConfig+0xb8>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00f      	beq.n	8004dcc <TIM_OC6_SetConfig+0x7c>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a17      	ldr	r2, [pc, #92]	; (8004e0c <TIM_OC6_SetConfig+0xbc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00b      	beq.n	8004dcc <TIM_OC6_SetConfig+0x7c>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a16      	ldr	r2, [pc, #88]	; (8004e10 <TIM_OC6_SetConfig+0xc0>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d007      	beq.n	8004dcc <TIM_OC6_SetConfig+0x7c>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a15      	ldr	r2, [pc, #84]	; (8004e14 <TIM_OC6_SetConfig+0xc4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_OC6_SetConfig+0x7c>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a14      	ldr	r2, [pc, #80]	; (8004e18 <TIM_OC6_SetConfig+0xc8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d109      	bne.n	8004de0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	029b      	lsls	r3, r3, #10
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	621a      	str	r2, [r3, #32]
}
 8004dfa:	bf00      	nop
 8004dfc:	371c      	adds	r7, #28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40012c00 	.word	0x40012c00
 8004e0c:	40013400 	.word	0x40013400
 8004e10:	40014000 	.word	0x40014000
 8004e14:	40014400 	.word	0x40014400
 8004e18:	40014800 	.word	0x40014800

08004e1c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	f023 0201 	bic.w	r2, r3, #1
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4a24      	ldr	r2, [pc, #144]	; (8004ed8 <TIM_TI1_SetConfig+0xbc>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d013      	beq.n	8004e72 <TIM_TI1_SetConfig+0x56>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e50:	d00f      	beq.n	8004e72 <TIM_TI1_SetConfig+0x56>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4a21      	ldr	r2, [pc, #132]	; (8004edc <TIM_TI1_SetConfig+0xc0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00b      	beq.n	8004e72 <TIM_TI1_SetConfig+0x56>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4a20      	ldr	r2, [pc, #128]	; (8004ee0 <TIM_TI1_SetConfig+0xc4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d007      	beq.n	8004e72 <TIM_TI1_SetConfig+0x56>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4a1f      	ldr	r2, [pc, #124]	; (8004ee4 <TIM_TI1_SetConfig+0xc8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d003      	beq.n	8004e72 <TIM_TI1_SetConfig+0x56>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4a1e      	ldr	r2, [pc, #120]	; (8004ee8 <TIM_TI1_SetConfig+0xcc>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d101      	bne.n	8004e76 <TIM_TI1_SetConfig+0x5a>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <TIM_TI1_SetConfig+0x5c>
 8004e76:	2300      	movs	r3, #0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d008      	beq.n	8004e8e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f023 0303 	bic.w	r3, r3, #3
 8004e82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	e003      	b.n	8004e96 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f043 0301 	orr.w	r3, r3, #1
 8004e94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f023 030a 	bic.w	r3, r3, #10
 8004eb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f003 030a 	and.w	r3, r3, #10
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	621a      	str	r2, [r3, #32]
}
 8004eca:	bf00      	nop
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40012c00 	.word	0x40012c00
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40000800 	.word	0x40000800
 8004ee4:	40013400 	.word	0x40013400
 8004ee8:	40014000 	.word	0x40014000

08004eec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	f023 0201 	bic.w	r2, r3, #1
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f023 030a 	bic.w	r3, r3, #10
 8004f28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	621a      	str	r2, [r3, #32]
}
 8004f3e:	bf00      	nop
 8004f40:	371c      	adds	r7, #28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b087      	sub	sp, #28
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	607a      	str	r2, [r7, #4]
 8004f56:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	f023 0210 	bic.w	r2, r3, #16
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	021b      	lsls	r3, r3, #8
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	031b      	lsls	r3, r3, #12
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f9c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	621a      	str	r2, [r3, #32]
}
 8004fb8:	bf00      	nop
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	f023 0210 	bic.w	r2, r3, #16
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	031b      	lsls	r3, r3, #12
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005000:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	011b      	lsls	r3, r3, #4
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	621a      	str	r2, [r3, #32]
}
 8005018:	bf00      	nop
 800501a:	371c      	adds	r7, #28
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
 8005030:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f023 0303 	bic.w	r3, r3, #3
 8005050:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4313      	orrs	r3, r2
 8005058:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005060:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	b2db      	uxtb	r3, r3
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005074:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	021b      	lsls	r3, r3, #8
 800507a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	621a      	str	r2, [r3, #32]
}
 8005090:	bf00      	nop
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	021b      	lsls	r3, r3, #8
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050da:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	031b      	lsls	r3, r3, #12
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80050ee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	031b      	lsls	r3, r3, #12
 80050f4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005116:	b480      	push	{r7}
 8005118:	b085      	sub	sp, #20
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800512c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	f043 0307 	orr.w	r3, r3, #7
 800513c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	609a      	str	r2, [r3, #8]
}
 8005144:	bf00      	nop
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800516a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	021a      	lsls	r2, r3, #8
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	431a      	orrs	r2, r3
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4313      	orrs	r3, r2
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	609a      	str	r2, [r3, #8]
}
 8005184:	bf00      	nop
 8005186:	371c      	adds	r7, #28
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d101      	bne.n	80051a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051a4:	2302      	movs	r3, #2
 80051a6:	e065      	b.n	8005274 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a2c      	ldr	r2, [pc, #176]	; (8005280 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d004      	beq.n	80051dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a2b      	ldr	r2, [pc, #172]	; (8005284 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d108      	bne.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80051f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4313      	orrs	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a1b      	ldr	r2, [pc, #108]	; (8005280 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d018      	beq.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521e:	d013      	beq.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a18      	ldr	r2, [pc, #96]	; (8005288 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00e      	beq.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a17      	ldr	r2, [pc, #92]	; (800528c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d009      	beq.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a12      	ldr	r2, [pc, #72]	; (8005284 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d004      	beq.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a13      	ldr	r2, [pc, #76]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d10c      	bne.n	8005262 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800524e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	4313      	orrs	r3, r2
 8005258:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	40012c00 	.word	0x40012c00
 8005284:	40013400 	.word	0x40013400
 8005288:	40000400 	.word	0x40000400
 800528c:	40000800 	.word	0x40000800
 8005290:	40014000 	.word	0x40014000

08005294 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d101      	bne.n	80052b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052ac:	2302      	movs	r3, #2
 80052ae:	e073      	b.n	8005398 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	041b      	lsls	r3, r3, #16
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a19      	ldr	r2, [pc, #100]	; (80053a4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d004      	beq.n	800534c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a18      	ldr	r2, [pc, #96]	; (80053a8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d11c      	bne.n	8005386 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005356:	051b      	lsls	r3, r3, #20
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	40012c00 	.word	0x40012c00
 80053a8:	40013400 	.word	0x40013400

080053ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e042      	b.n	8005444 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d106      	bne.n	80053d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7fc fa0d 	bl	80017f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2224      	movs	r2, #36	; 0x24
 80053da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0201 	bic.w	r2, r2, #1
 80053ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fb82 	bl	8005b00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f8b3 	bl	8005568 <UART_SetConfig>
 8005402:	4603      	mov	r3, r0
 8005404:	2b01      	cmp	r3, #1
 8005406:	d101      	bne.n	800540c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e01b      	b.n	8005444 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800541a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800542a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fc01 	bl	8005c44 <UART_CheckIdleState>
 8005442:	4603      	mov	r3, r0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b08a      	sub	sp, #40	; 0x28
 8005450:	af02      	add	r7, sp, #8
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	603b      	str	r3, [r7, #0]
 8005458:	4613      	mov	r3, r2
 800545a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005462:	2b20      	cmp	r3, #32
 8005464:	d17b      	bne.n	800555e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <HAL_UART_Transmit+0x26>
 800546c:	88fb      	ldrh	r3, [r7, #6]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e074      	b.n	8005560 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2221      	movs	r2, #33	; 0x21
 8005482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005486:	f7fc fb9b 	bl	8001bc0 <HAL_GetTick>
 800548a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	88fa      	ldrh	r2, [r7, #6]
 8005490:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	88fa      	ldrh	r2, [r7, #6]
 8005498:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a4:	d108      	bne.n	80054b8 <HAL_UART_Transmit+0x6c>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d104      	bne.n	80054b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80054ae:	2300      	movs	r3, #0
 80054b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	61bb      	str	r3, [r7, #24]
 80054b6:	e003      	b.n	80054c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054bc:	2300      	movs	r3, #0
 80054be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054c0:	e030      	b.n	8005524 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2200      	movs	r2, #0
 80054ca:	2180      	movs	r1, #128	; 0x80
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 fc63 	bl	8005d98 <UART_WaitOnFlagUntilTimeout>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2220      	movs	r2, #32
 80054dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e03d      	b.n	8005560 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10b      	bne.n	8005502 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	3302      	adds	r3, #2
 80054fe:	61bb      	str	r3, [r7, #24]
 8005500:	e007      	b.n	8005512 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	781a      	ldrb	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	3301      	adds	r3, #1
 8005510:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005518:	b29b      	uxth	r3, r3
 800551a:	3b01      	subs	r3, #1
 800551c:	b29a      	uxth	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800552a:	b29b      	uxth	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1c8      	bne.n	80054c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	2200      	movs	r2, #0
 8005538:	2140      	movs	r1, #64	; 0x40
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 fc2c 	bl	8005d98 <UART_WaitOnFlagUntilTimeout>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d005      	beq.n	8005552 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2220      	movs	r2, #32
 800554a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e006      	b.n	8005560 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2220      	movs	r2, #32
 8005556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	e000      	b.n	8005560 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800555e:	2302      	movs	r3, #2
  }
}
 8005560:	4618      	mov	r0, r3
 8005562:	3720      	adds	r7, #32
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800556c:	b08c      	sub	sp, #48	; 0x30
 800556e:	af00      	add	r7, sp, #0
 8005570:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	431a      	orrs	r2, r3
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	431a      	orrs	r2, r3
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	4313      	orrs	r3, r2
 800558e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	4bab      	ldr	r3, [pc, #684]	; (8005844 <UART_SetConfig+0x2dc>)
 8005598:	4013      	ands	r3, r2
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	6812      	ldr	r2, [r2, #0]
 800559e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055a0:	430b      	orrs	r3, r1
 80055a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4aa0      	ldr	r2, [pc, #640]	; (8005848 <UART_SetConfig+0x2e0>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d004      	beq.n	80055d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055d0:	4313      	orrs	r3, r2
 80055d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80055de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	6812      	ldr	r2, [r2, #0]
 80055e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055e8:	430b      	orrs	r3, r1
 80055ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f2:	f023 010f 	bic.w	r1, r3, #15
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a91      	ldr	r2, [pc, #580]	; (800584c <UART_SetConfig+0x2e4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d125      	bne.n	8005658 <UART_SetConfig+0xf0>
 800560c:	4b90      	ldr	r3, [pc, #576]	; (8005850 <UART_SetConfig+0x2e8>)
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	2b03      	cmp	r3, #3
 8005618:	d81a      	bhi.n	8005650 <UART_SetConfig+0xe8>
 800561a:	a201      	add	r2, pc, #4	; (adr r2, 8005620 <UART_SetConfig+0xb8>)
 800561c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005620:	08005631 	.word	0x08005631
 8005624:	08005641 	.word	0x08005641
 8005628:	08005639 	.word	0x08005639
 800562c:	08005649 	.word	0x08005649
 8005630:	2301      	movs	r3, #1
 8005632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005636:	e0d6      	b.n	80057e6 <UART_SetConfig+0x27e>
 8005638:	2302      	movs	r3, #2
 800563a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800563e:	e0d2      	b.n	80057e6 <UART_SetConfig+0x27e>
 8005640:	2304      	movs	r3, #4
 8005642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005646:	e0ce      	b.n	80057e6 <UART_SetConfig+0x27e>
 8005648:	2308      	movs	r3, #8
 800564a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800564e:	e0ca      	b.n	80057e6 <UART_SetConfig+0x27e>
 8005650:	2310      	movs	r3, #16
 8005652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005656:	e0c6      	b.n	80057e6 <UART_SetConfig+0x27e>
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a7d      	ldr	r2, [pc, #500]	; (8005854 <UART_SetConfig+0x2ec>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d138      	bne.n	80056d4 <UART_SetConfig+0x16c>
 8005662:	4b7b      	ldr	r3, [pc, #492]	; (8005850 <UART_SetConfig+0x2e8>)
 8005664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005668:	f003 030c 	and.w	r3, r3, #12
 800566c:	2b0c      	cmp	r3, #12
 800566e:	d82d      	bhi.n	80056cc <UART_SetConfig+0x164>
 8005670:	a201      	add	r2, pc, #4	; (adr r2, 8005678 <UART_SetConfig+0x110>)
 8005672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005676:	bf00      	nop
 8005678:	080056ad 	.word	0x080056ad
 800567c:	080056cd 	.word	0x080056cd
 8005680:	080056cd 	.word	0x080056cd
 8005684:	080056cd 	.word	0x080056cd
 8005688:	080056bd 	.word	0x080056bd
 800568c:	080056cd 	.word	0x080056cd
 8005690:	080056cd 	.word	0x080056cd
 8005694:	080056cd 	.word	0x080056cd
 8005698:	080056b5 	.word	0x080056b5
 800569c:	080056cd 	.word	0x080056cd
 80056a0:	080056cd 	.word	0x080056cd
 80056a4:	080056cd 	.word	0x080056cd
 80056a8:	080056c5 	.word	0x080056c5
 80056ac:	2300      	movs	r3, #0
 80056ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056b2:	e098      	b.n	80057e6 <UART_SetConfig+0x27e>
 80056b4:	2302      	movs	r3, #2
 80056b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ba:	e094      	b.n	80057e6 <UART_SetConfig+0x27e>
 80056bc:	2304      	movs	r3, #4
 80056be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056c2:	e090      	b.n	80057e6 <UART_SetConfig+0x27e>
 80056c4:	2308      	movs	r3, #8
 80056c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ca:	e08c      	b.n	80057e6 <UART_SetConfig+0x27e>
 80056cc:	2310      	movs	r3, #16
 80056ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056d2:	e088      	b.n	80057e6 <UART_SetConfig+0x27e>
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a5f      	ldr	r2, [pc, #380]	; (8005858 <UART_SetConfig+0x2f0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d125      	bne.n	800572a <UART_SetConfig+0x1c2>
 80056de:	4b5c      	ldr	r3, [pc, #368]	; (8005850 <UART_SetConfig+0x2e8>)
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056e8:	2b30      	cmp	r3, #48	; 0x30
 80056ea:	d016      	beq.n	800571a <UART_SetConfig+0x1b2>
 80056ec:	2b30      	cmp	r3, #48	; 0x30
 80056ee:	d818      	bhi.n	8005722 <UART_SetConfig+0x1ba>
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d00a      	beq.n	800570a <UART_SetConfig+0x1a2>
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	d814      	bhi.n	8005722 <UART_SetConfig+0x1ba>
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <UART_SetConfig+0x19a>
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	d008      	beq.n	8005712 <UART_SetConfig+0x1aa>
 8005700:	e00f      	b.n	8005722 <UART_SetConfig+0x1ba>
 8005702:	2300      	movs	r3, #0
 8005704:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005708:	e06d      	b.n	80057e6 <UART_SetConfig+0x27e>
 800570a:	2302      	movs	r3, #2
 800570c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005710:	e069      	b.n	80057e6 <UART_SetConfig+0x27e>
 8005712:	2304      	movs	r3, #4
 8005714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005718:	e065      	b.n	80057e6 <UART_SetConfig+0x27e>
 800571a:	2308      	movs	r3, #8
 800571c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005720:	e061      	b.n	80057e6 <UART_SetConfig+0x27e>
 8005722:	2310      	movs	r3, #16
 8005724:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005728:	e05d      	b.n	80057e6 <UART_SetConfig+0x27e>
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a4b      	ldr	r2, [pc, #300]	; (800585c <UART_SetConfig+0x2f4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d125      	bne.n	8005780 <UART_SetConfig+0x218>
 8005734:	4b46      	ldr	r3, [pc, #280]	; (8005850 <UART_SetConfig+0x2e8>)
 8005736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800573e:	2bc0      	cmp	r3, #192	; 0xc0
 8005740:	d016      	beq.n	8005770 <UART_SetConfig+0x208>
 8005742:	2bc0      	cmp	r3, #192	; 0xc0
 8005744:	d818      	bhi.n	8005778 <UART_SetConfig+0x210>
 8005746:	2b80      	cmp	r3, #128	; 0x80
 8005748:	d00a      	beq.n	8005760 <UART_SetConfig+0x1f8>
 800574a:	2b80      	cmp	r3, #128	; 0x80
 800574c:	d814      	bhi.n	8005778 <UART_SetConfig+0x210>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <UART_SetConfig+0x1f0>
 8005752:	2b40      	cmp	r3, #64	; 0x40
 8005754:	d008      	beq.n	8005768 <UART_SetConfig+0x200>
 8005756:	e00f      	b.n	8005778 <UART_SetConfig+0x210>
 8005758:	2300      	movs	r3, #0
 800575a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800575e:	e042      	b.n	80057e6 <UART_SetConfig+0x27e>
 8005760:	2302      	movs	r3, #2
 8005762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005766:	e03e      	b.n	80057e6 <UART_SetConfig+0x27e>
 8005768:	2304      	movs	r3, #4
 800576a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800576e:	e03a      	b.n	80057e6 <UART_SetConfig+0x27e>
 8005770:	2308      	movs	r3, #8
 8005772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005776:	e036      	b.n	80057e6 <UART_SetConfig+0x27e>
 8005778:	2310      	movs	r3, #16
 800577a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800577e:	e032      	b.n	80057e6 <UART_SetConfig+0x27e>
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a30      	ldr	r2, [pc, #192]	; (8005848 <UART_SetConfig+0x2e0>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d12a      	bne.n	80057e0 <UART_SetConfig+0x278>
 800578a:	4b31      	ldr	r3, [pc, #196]	; (8005850 <UART_SetConfig+0x2e8>)
 800578c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005790:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005794:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005798:	d01a      	beq.n	80057d0 <UART_SetConfig+0x268>
 800579a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800579e:	d81b      	bhi.n	80057d8 <UART_SetConfig+0x270>
 80057a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057a4:	d00c      	beq.n	80057c0 <UART_SetConfig+0x258>
 80057a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057aa:	d815      	bhi.n	80057d8 <UART_SetConfig+0x270>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <UART_SetConfig+0x250>
 80057b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b4:	d008      	beq.n	80057c8 <UART_SetConfig+0x260>
 80057b6:	e00f      	b.n	80057d8 <UART_SetConfig+0x270>
 80057b8:	2300      	movs	r3, #0
 80057ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057be:	e012      	b.n	80057e6 <UART_SetConfig+0x27e>
 80057c0:	2302      	movs	r3, #2
 80057c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057c6:	e00e      	b.n	80057e6 <UART_SetConfig+0x27e>
 80057c8:	2304      	movs	r3, #4
 80057ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ce:	e00a      	b.n	80057e6 <UART_SetConfig+0x27e>
 80057d0:	2308      	movs	r3, #8
 80057d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057d6:	e006      	b.n	80057e6 <UART_SetConfig+0x27e>
 80057d8:	2310      	movs	r3, #16
 80057da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057de:	e002      	b.n	80057e6 <UART_SetConfig+0x27e>
 80057e0:	2310      	movs	r3, #16
 80057e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a17      	ldr	r2, [pc, #92]	; (8005848 <UART_SetConfig+0x2e0>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	f040 80a8 	bne.w	8005942 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057f6:	2b08      	cmp	r3, #8
 80057f8:	d834      	bhi.n	8005864 <UART_SetConfig+0x2fc>
 80057fa:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <UART_SetConfig+0x298>)
 80057fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005800:	08005825 	.word	0x08005825
 8005804:	08005865 	.word	0x08005865
 8005808:	0800582d 	.word	0x0800582d
 800580c:	08005865 	.word	0x08005865
 8005810:	08005833 	.word	0x08005833
 8005814:	08005865 	.word	0x08005865
 8005818:	08005865 	.word	0x08005865
 800581c:	08005865 	.word	0x08005865
 8005820:	0800583b 	.word	0x0800583b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005824:	f7fe f94c 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 8005828:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800582a:	e021      	b.n	8005870 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800582c:	4b0c      	ldr	r3, [pc, #48]	; (8005860 <UART_SetConfig+0x2f8>)
 800582e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005830:	e01e      	b.n	8005870 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005832:	f7fe f8d7 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8005836:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005838:	e01a      	b.n	8005870 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800583a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800583e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005840:	e016      	b.n	8005870 <UART_SetConfig+0x308>
 8005842:	bf00      	nop
 8005844:	cfff69f3 	.word	0xcfff69f3
 8005848:	40008000 	.word	0x40008000
 800584c:	40013800 	.word	0x40013800
 8005850:	40021000 	.word	0x40021000
 8005854:	40004400 	.word	0x40004400
 8005858:	40004800 	.word	0x40004800
 800585c:	40004c00 	.word	0x40004c00
 8005860:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800586e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 812a 	beq.w	8005acc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	4a9e      	ldr	r2, [pc, #632]	; (8005af8 <UART_SetConfig+0x590>)
 800587e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005882:	461a      	mov	r2, r3
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	fbb3 f3f2 	udiv	r3, r3, r2
 800588a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	4613      	mov	r3, r2
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	4413      	add	r3, r2
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	429a      	cmp	r2, r3
 800589a:	d305      	bcc.n	80058a8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d903      	bls.n	80058b0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058ae:	e10d      	b.n	8005acc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	2200      	movs	r2, #0
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	60fa      	str	r2, [r7, #12]
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	4a8e      	ldr	r2, [pc, #568]	; (8005af8 <UART_SetConfig+0x590>)
 80058be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	2200      	movs	r2, #0
 80058c6:	603b      	str	r3, [r7, #0]
 80058c8:	607a      	str	r2, [r7, #4]
 80058ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80058d2:	f7fb f991 	bl	8000bf8 <__aeabi_uldivmod>
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	4610      	mov	r0, r2
 80058dc:	4619      	mov	r1, r3
 80058de:	f04f 0200 	mov.w	r2, #0
 80058e2:	f04f 0300 	mov.w	r3, #0
 80058e6:	020b      	lsls	r3, r1, #8
 80058e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80058ec:	0202      	lsls	r2, r0, #8
 80058ee:	6979      	ldr	r1, [r7, #20]
 80058f0:	6849      	ldr	r1, [r1, #4]
 80058f2:	0849      	lsrs	r1, r1, #1
 80058f4:	2000      	movs	r0, #0
 80058f6:	460c      	mov	r4, r1
 80058f8:	4605      	mov	r5, r0
 80058fa:	eb12 0804 	adds.w	r8, r2, r4
 80058fe:	eb43 0905 	adc.w	r9, r3, r5
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	469a      	mov	sl, r3
 800590a:	4693      	mov	fp, r2
 800590c:	4652      	mov	r2, sl
 800590e:	465b      	mov	r3, fp
 8005910:	4640      	mov	r0, r8
 8005912:	4649      	mov	r1, r9
 8005914:	f7fb f970 	bl	8000bf8 <__aeabi_uldivmod>
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	4613      	mov	r3, r2
 800591e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005926:	d308      	bcc.n	800593a <UART_SetConfig+0x3d2>
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800592e:	d204      	bcs.n	800593a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6a3a      	ldr	r2, [r7, #32]
 8005936:	60da      	str	r2, [r3, #12]
 8005938:	e0c8      	b.n	8005acc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005940:	e0c4      	b.n	8005acc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800594a:	d167      	bne.n	8005a1c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800594c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005950:	2b08      	cmp	r3, #8
 8005952:	d828      	bhi.n	80059a6 <UART_SetConfig+0x43e>
 8005954:	a201      	add	r2, pc, #4	; (adr r2, 800595c <UART_SetConfig+0x3f4>)
 8005956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595a:	bf00      	nop
 800595c:	08005981 	.word	0x08005981
 8005960:	08005989 	.word	0x08005989
 8005964:	08005991 	.word	0x08005991
 8005968:	080059a7 	.word	0x080059a7
 800596c:	08005997 	.word	0x08005997
 8005970:	080059a7 	.word	0x080059a7
 8005974:	080059a7 	.word	0x080059a7
 8005978:	080059a7 	.word	0x080059a7
 800597c:	0800599f 	.word	0x0800599f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005980:	f7fe f89e 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 8005984:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005986:	e014      	b.n	80059b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005988:	f7fe f8b0 	bl	8003aec <HAL_RCC_GetPCLK2Freq>
 800598c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800598e:	e010      	b.n	80059b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005990:	4b5a      	ldr	r3, [pc, #360]	; (8005afc <UART_SetConfig+0x594>)
 8005992:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005994:	e00d      	b.n	80059b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005996:	f7fe f825 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 800599a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800599c:	e009      	b.n	80059b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800599e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059a4:	e005      	b.n	80059b2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80059b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 8089 	beq.w	8005acc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	4a4e      	ldr	r2, [pc, #312]	; (8005af8 <UART_SetConfig+0x590>)
 80059c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059c4:	461a      	mov	r2, r3
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80059cc:	005a      	lsls	r2, r3, #1
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	085b      	lsrs	r3, r3, #1
 80059d4:	441a      	add	r2, r3
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	fbb2 f3f3 	udiv	r3, r2, r3
 80059de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	2b0f      	cmp	r3, #15
 80059e4:	d916      	bls.n	8005a14 <UART_SetConfig+0x4ac>
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ec:	d212      	bcs.n	8005a14 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	f023 030f 	bic.w	r3, r3, #15
 80059f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	085b      	lsrs	r3, r3, #1
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	8bfb      	ldrh	r3, [r7, #30]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	8bfa      	ldrh	r2, [r7, #30]
 8005a10:	60da      	str	r2, [r3, #12]
 8005a12:	e05b      	b.n	8005acc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a1a:	e057      	b.n	8005acc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d828      	bhi.n	8005a76 <UART_SetConfig+0x50e>
 8005a24:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <UART_SetConfig+0x4c4>)
 8005a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2a:	bf00      	nop
 8005a2c:	08005a51 	.word	0x08005a51
 8005a30:	08005a59 	.word	0x08005a59
 8005a34:	08005a61 	.word	0x08005a61
 8005a38:	08005a77 	.word	0x08005a77
 8005a3c:	08005a67 	.word	0x08005a67
 8005a40:	08005a77 	.word	0x08005a77
 8005a44:	08005a77 	.word	0x08005a77
 8005a48:	08005a77 	.word	0x08005a77
 8005a4c:	08005a6f 	.word	0x08005a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a50:	f7fe f836 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 8005a54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a56:	e014      	b.n	8005a82 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a58:	f7fe f848 	bl	8003aec <HAL_RCC_GetPCLK2Freq>
 8005a5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a5e:	e010      	b.n	8005a82 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a60:	4b26      	ldr	r3, [pc, #152]	; (8005afc <UART_SetConfig+0x594>)
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a64:	e00d      	b.n	8005a82 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a66:	f7fd ffbd 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8005a6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a6c:	e009      	b.n	8005a82 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a74:	e005      	b.n	8005a82 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a80:	bf00      	nop
    }

    if (pclk != 0U)
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d021      	beq.n	8005acc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	4a1a      	ldr	r2, [pc, #104]	; (8005af8 <UART_SetConfig+0x590>)
 8005a8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a92:	461a      	mov	r2, r3
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	085b      	lsrs	r3, r3, #1
 8005aa0:	441a      	add	r2, r3
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aaa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	2b0f      	cmp	r3, #15
 8005ab0:	d909      	bls.n	8005ac6 <UART_SetConfig+0x55e>
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab8:	d205      	bcs.n	8005ac6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	60da      	str	r2, [r3, #12]
 8005ac4:	e002      	b.n	8005acc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005ae8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3730      	adds	r7, #48	; 0x30
 8005af0:	46bd      	mov	sp, r7
 8005af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005af6:	bf00      	nop
 8005af8:	08008b40 	.word	0x08008b40
 8005afc:	00f42400 	.word	0x00f42400

08005b00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0c:	f003 0308 	and.w	r3, r3, #8
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00a      	beq.n	8005b6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b72:	f003 0304 	and.w	r3, r3, #4
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b94:	f003 0310 	and.w	r3, r3, #16
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00a      	beq.n	8005bb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb6:	f003 0320 	and.w	r3, r3, #32
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d01a      	beq.n	8005c16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bfe:	d10a      	bne.n	8005c16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	605a      	str	r2, [r3, #4]
  }
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b098      	sub	sp, #96	; 0x60
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c54:	f7fb ffb4 	bl	8001bc0 <HAL_GetTick>
 8005c58:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0308 	and.w	r3, r3, #8
 8005c64:	2b08      	cmp	r3, #8
 8005c66:	d12f      	bne.n	8005cc8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c70:	2200      	movs	r2, #0
 8005c72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f88e 	bl	8005d98 <UART_WaitOnFlagUntilTimeout>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d022      	beq.n	8005cc8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8a:	e853 3f00 	ldrex	r3, [r3]
 8005c8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c96:	653b      	str	r3, [r7, #80]	; 0x50
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ca2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ca6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ca8:	e841 2300 	strex	r3, r2, [r1]
 8005cac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e6      	bne.n	8005c82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e063      	b.n	8005d90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0304 	and.w	r3, r3, #4
 8005cd2:	2b04      	cmp	r3, #4
 8005cd4:	d149      	bne.n	8005d6a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f857 	bl	8005d98 <UART_WaitOnFlagUntilTimeout>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d03c      	beq.n	8005d6a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	e853 3f00 	ldrex	r3, [r3]
 8005cfc:	623b      	str	r3, [r7, #32]
   return(result);
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d0e:	633b      	str	r3, [r7, #48]	; 0x30
 8005d10:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d16:	e841 2300 	strex	r3, r2, [r1]
 8005d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1e6      	bne.n	8005cf0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3308      	adds	r3, #8
 8005d28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f023 0301 	bic.w	r3, r3, #1
 8005d38:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3308      	adds	r3, #8
 8005d40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d42:	61fa      	str	r2, [r7, #28]
 8005d44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	69b9      	ldr	r1, [r7, #24]
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	617b      	str	r3, [r7, #20]
   return(result);
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e5      	bne.n	8005d22 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e012      	b.n	8005d90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3758      	adds	r7, #88	; 0x58
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	603b      	str	r3, [r7, #0]
 8005da4:	4613      	mov	r3, r2
 8005da6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005da8:	e04f      	b.n	8005e4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db0:	d04b      	beq.n	8005e4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005db2:	f7fb ff05 	bl	8001bc0 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d302      	bcc.n	8005dc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d101      	bne.n	8005dcc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e04e      	b.n	8005e6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0304 	and.w	r3, r3, #4
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d037      	beq.n	8005e4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2b80      	cmp	r3, #128	; 0x80
 8005dde:	d034      	beq.n	8005e4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	2b40      	cmp	r3, #64	; 0x40
 8005de4:	d031      	beq.n	8005e4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	f003 0308 	and.w	r3, r3, #8
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	d110      	bne.n	8005e16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2208      	movs	r2, #8
 8005dfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 f838 	bl	8005e72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2208      	movs	r2, #8
 8005e06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e029      	b.n	8005e6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e24:	d111      	bne.n	8005e4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 f81e 	bl	8005e72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e00f      	b.n	8005e6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69da      	ldr	r2, [r3, #28]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4013      	ands	r3, r2
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	bf0c      	ite	eq
 8005e5a:	2301      	moveq	r3, #1
 8005e5c:	2300      	movne	r3, #0
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	79fb      	ldrb	r3, [r7, #7]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d0a0      	beq.n	8005daa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b095      	sub	sp, #84	; 0x54
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e82:	e853 3f00 	ldrex	r3, [r3]
 8005e86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	461a      	mov	r2, r3
 8005e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e98:	643b      	str	r3, [r7, #64]	; 0x40
 8005e9a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ea0:	e841 2300 	strex	r3, r2, [r1]
 8005ea4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e6      	bne.n	8005e7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	e853 3f00 	ldrex	r3, [r3]
 8005eba:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ec2:	f023 0301 	bic.w	r3, r3, #1
 8005ec6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3308      	adds	r3, #8
 8005ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ed0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ed8:	e841 2300 	strex	r3, r2, [r1]
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e3      	bne.n	8005eac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d118      	bne.n	8005f1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	e853 3f00 	ldrex	r3, [r3]
 8005ef8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	f023 0310 	bic.w	r3, r3, #16
 8005f00:	647b      	str	r3, [r7, #68]	; 0x44
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f0a:	61bb      	str	r3, [r7, #24]
 8005f0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	6979      	ldr	r1, [r7, #20]
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	613b      	str	r3, [r7, #16]
   return(result);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e6      	bne.n	8005eec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005f32:	bf00      	nop
 8005f34:	3754      	adds	r7, #84	; 0x54
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b085      	sub	sp, #20
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_UARTEx_DisableFifoMode+0x16>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e027      	b.n	8005fa4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2224      	movs	r2, #36	; 0x24
 8005f60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0201 	bic.w	r2, r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2220      	movs	r2, #32
 8005f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d101      	bne.n	8005fc8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e02d      	b.n	8006024 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2224      	movs	r2, #36	; 0x24
 8005fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0201 	bic.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f84f 	bl	80060a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2220      	movs	r2, #32
 8006016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006040:	2302      	movs	r3, #2
 8006042:	e02d      	b.n	80060a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2224      	movs	r2, #36	; 0x24
 8006050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0201 	bic.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f811 	bl	80060a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2220      	movs	r2, #32
 8006092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d108      	bne.n	80060ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80060c8:	e031      	b.n	800612e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80060ca:	2308      	movs	r3, #8
 80060cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80060ce:	2308      	movs	r3, #8
 80060d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	0e5b      	lsrs	r3, r3, #25
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	f003 0307 	and.w	r3, r3, #7
 80060e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	0f5b      	lsrs	r3, r3, #29
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	f003 0307 	and.w	r3, r3, #7
 80060f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060f2:	7bbb      	ldrb	r3, [r7, #14]
 80060f4:	7b3a      	ldrb	r2, [r7, #12]
 80060f6:	4911      	ldr	r1, [pc, #68]	; (800613c <UARTEx_SetNbDataToProcess+0x94>)
 80060f8:	5c8a      	ldrb	r2, [r1, r2]
 80060fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80060fe:	7b3a      	ldrb	r2, [r7, #12]
 8006100:	490f      	ldr	r1, [pc, #60]	; (8006140 <UARTEx_SetNbDataToProcess+0x98>)
 8006102:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006104:	fb93 f3f2 	sdiv	r3, r3, r2
 8006108:	b29a      	uxth	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	7b7a      	ldrb	r2, [r7, #13]
 8006114:	4909      	ldr	r1, [pc, #36]	; (800613c <UARTEx_SetNbDataToProcess+0x94>)
 8006116:	5c8a      	ldrb	r2, [r1, r2]
 8006118:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800611c:	7b7a      	ldrb	r2, [r7, #13]
 800611e:	4908      	ldr	r1, [pc, #32]	; (8006140 <UARTEx_SetNbDataToProcess+0x98>)
 8006120:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006122:	fb93 f3f2 	sdiv	r3, r3, r2
 8006126:	b29a      	uxth	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800612e:	bf00      	nop
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	08008b58 	.word	0x08008b58
 8006140:	08008b60 	.word	0x08008b60

08006144 <__cvt>:
 8006144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006148:	ec55 4b10 	vmov	r4, r5, d0
 800614c:	2d00      	cmp	r5, #0
 800614e:	460e      	mov	r6, r1
 8006150:	4619      	mov	r1, r3
 8006152:	462b      	mov	r3, r5
 8006154:	bfbb      	ittet	lt
 8006156:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800615a:	461d      	movlt	r5, r3
 800615c:	2300      	movge	r3, #0
 800615e:	232d      	movlt	r3, #45	; 0x2d
 8006160:	700b      	strb	r3, [r1, #0]
 8006162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006164:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006168:	4691      	mov	r9, r2
 800616a:	f023 0820 	bic.w	r8, r3, #32
 800616e:	bfbc      	itt	lt
 8006170:	4622      	movlt	r2, r4
 8006172:	4614      	movlt	r4, r2
 8006174:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006178:	d005      	beq.n	8006186 <__cvt+0x42>
 800617a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800617e:	d100      	bne.n	8006182 <__cvt+0x3e>
 8006180:	3601      	adds	r6, #1
 8006182:	2102      	movs	r1, #2
 8006184:	e000      	b.n	8006188 <__cvt+0x44>
 8006186:	2103      	movs	r1, #3
 8006188:	ab03      	add	r3, sp, #12
 800618a:	9301      	str	r3, [sp, #4]
 800618c:	ab02      	add	r3, sp, #8
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	ec45 4b10 	vmov	d0, r4, r5
 8006194:	4653      	mov	r3, sl
 8006196:	4632      	mov	r2, r6
 8006198:	f000 fe56 	bl	8006e48 <_dtoa_r>
 800619c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80061a0:	4607      	mov	r7, r0
 80061a2:	d102      	bne.n	80061aa <__cvt+0x66>
 80061a4:	f019 0f01 	tst.w	r9, #1
 80061a8:	d022      	beq.n	80061f0 <__cvt+0xac>
 80061aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061ae:	eb07 0906 	add.w	r9, r7, r6
 80061b2:	d110      	bne.n	80061d6 <__cvt+0x92>
 80061b4:	783b      	ldrb	r3, [r7, #0]
 80061b6:	2b30      	cmp	r3, #48	; 0x30
 80061b8:	d10a      	bne.n	80061d0 <__cvt+0x8c>
 80061ba:	2200      	movs	r2, #0
 80061bc:	2300      	movs	r3, #0
 80061be:	4620      	mov	r0, r4
 80061c0:	4629      	mov	r1, r5
 80061c2:	f7fa fca9 	bl	8000b18 <__aeabi_dcmpeq>
 80061c6:	b918      	cbnz	r0, 80061d0 <__cvt+0x8c>
 80061c8:	f1c6 0601 	rsb	r6, r6, #1
 80061cc:	f8ca 6000 	str.w	r6, [sl]
 80061d0:	f8da 3000 	ldr.w	r3, [sl]
 80061d4:	4499      	add	r9, r3
 80061d6:	2200      	movs	r2, #0
 80061d8:	2300      	movs	r3, #0
 80061da:	4620      	mov	r0, r4
 80061dc:	4629      	mov	r1, r5
 80061de:	f7fa fc9b 	bl	8000b18 <__aeabi_dcmpeq>
 80061e2:	b108      	cbz	r0, 80061e8 <__cvt+0xa4>
 80061e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80061e8:	2230      	movs	r2, #48	; 0x30
 80061ea:	9b03      	ldr	r3, [sp, #12]
 80061ec:	454b      	cmp	r3, r9
 80061ee:	d307      	bcc.n	8006200 <__cvt+0xbc>
 80061f0:	9b03      	ldr	r3, [sp, #12]
 80061f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061f4:	1bdb      	subs	r3, r3, r7
 80061f6:	4638      	mov	r0, r7
 80061f8:	6013      	str	r3, [r2, #0]
 80061fa:	b004      	add	sp, #16
 80061fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006200:	1c59      	adds	r1, r3, #1
 8006202:	9103      	str	r1, [sp, #12]
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	e7f0      	b.n	80061ea <__cvt+0xa6>

08006208 <__exponent>:
 8006208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800620a:	4603      	mov	r3, r0
 800620c:	2900      	cmp	r1, #0
 800620e:	bfb8      	it	lt
 8006210:	4249      	neglt	r1, r1
 8006212:	f803 2b02 	strb.w	r2, [r3], #2
 8006216:	bfb4      	ite	lt
 8006218:	222d      	movlt	r2, #45	; 0x2d
 800621a:	222b      	movge	r2, #43	; 0x2b
 800621c:	2909      	cmp	r1, #9
 800621e:	7042      	strb	r2, [r0, #1]
 8006220:	dd2a      	ble.n	8006278 <__exponent+0x70>
 8006222:	f10d 0207 	add.w	r2, sp, #7
 8006226:	4617      	mov	r7, r2
 8006228:	260a      	movs	r6, #10
 800622a:	4694      	mov	ip, r2
 800622c:	fb91 f5f6 	sdiv	r5, r1, r6
 8006230:	fb06 1415 	mls	r4, r6, r5, r1
 8006234:	3430      	adds	r4, #48	; 0x30
 8006236:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800623a:	460c      	mov	r4, r1
 800623c:	2c63      	cmp	r4, #99	; 0x63
 800623e:	f102 32ff 	add.w	r2, r2, #4294967295
 8006242:	4629      	mov	r1, r5
 8006244:	dcf1      	bgt.n	800622a <__exponent+0x22>
 8006246:	3130      	adds	r1, #48	; 0x30
 8006248:	f1ac 0402 	sub.w	r4, ip, #2
 800624c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006250:	1c41      	adds	r1, r0, #1
 8006252:	4622      	mov	r2, r4
 8006254:	42ba      	cmp	r2, r7
 8006256:	d30a      	bcc.n	800626e <__exponent+0x66>
 8006258:	f10d 0209 	add.w	r2, sp, #9
 800625c:	eba2 020c 	sub.w	r2, r2, ip
 8006260:	42bc      	cmp	r4, r7
 8006262:	bf88      	it	hi
 8006264:	2200      	movhi	r2, #0
 8006266:	4413      	add	r3, r2
 8006268:	1a18      	subs	r0, r3, r0
 800626a:	b003      	add	sp, #12
 800626c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800626e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006272:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006276:	e7ed      	b.n	8006254 <__exponent+0x4c>
 8006278:	2330      	movs	r3, #48	; 0x30
 800627a:	3130      	adds	r1, #48	; 0x30
 800627c:	7083      	strb	r3, [r0, #2]
 800627e:	70c1      	strb	r1, [r0, #3]
 8006280:	1d03      	adds	r3, r0, #4
 8006282:	e7f1      	b.n	8006268 <__exponent+0x60>

08006284 <_printf_float>:
 8006284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006288:	ed2d 8b02 	vpush	{d8}
 800628c:	b08d      	sub	sp, #52	; 0x34
 800628e:	460c      	mov	r4, r1
 8006290:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006294:	4616      	mov	r6, r2
 8006296:	461f      	mov	r7, r3
 8006298:	4605      	mov	r5, r0
 800629a:	f000 fcc7 	bl	8006c2c <_localeconv_r>
 800629e:	f8d0 a000 	ldr.w	sl, [r0]
 80062a2:	4650      	mov	r0, sl
 80062a4:	f7fa f80c 	bl	80002c0 <strlen>
 80062a8:	2300      	movs	r3, #0
 80062aa:	930a      	str	r3, [sp, #40]	; 0x28
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	9305      	str	r3, [sp, #20]
 80062b0:	f8d8 3000 	ldr.w	r3, [r8]
 80062b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80062b8:	3307      	adds	r3, #7
 80062ba:	f023 0307 	bic.w	r3, r3, #7
 80062be:	f103 0208 	add.w	r2, r3, #8
 80062c2:	f8c8 2000 	str.w	r2, [r8]
 80062c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80062ce:	9307      	str	r3, [sp, #28]
 80062d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80062d4:	ee08 0a10 	vmov	s16, r0
 80062d8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80062dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062e0:	4b9e      	ldr	r3, [pc, #632]	; (800655c <_printf_float+0x2d8>)
 80062e2:	f04f 32ff 	mov.w	r2, #4294967295
 80062e6:	f7fa fc49 	bl	8000b7c <__aeabi_dcmpun>
 80062ea:	bb88      	cbnz	r0, 8006350 <_printf_float+0xcc>
 80062ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062f0:	4b9a      	ldr	r3, [pc, #616]	; (800655c <_printf_float+0x2d8>)
 80062f2:	f04f 32ff 	mov.w	r2, #4294967295
 80062f6:	f7fa fc23 	bl	8000b40 <__aeabi_dcmple>
 80062fa:	bb48      	cbnz	r0, 8006350 <_printf_float+0xcc>
 80062fc:	2200      	movs	r2, #0
 80062fe:	2300      	movs	r3, #0
 8006300:	4640      	mov	r0, r8
 8006302:	4649      	mov	r1, r9
 8006304:	f7fa fc12 	bl	8000b2c <__aeabi_dcmplt>
 8006308:	b110      	cbz	r0, 8006310 <_printf_float+0x8c>
 800630a:	232d      	movs	r3, #45	; 0x2d
 800630c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006310:	4a93      	ldr	r2, [pc, #588]	; (8006560 <_printf_float+0x2dc>)
 8006312:	4b94      	ldr	r3, [pc, #592]	; (8006564 <_printf_float+0x2e0>)
 8006314:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006318:	bf94      	ite	ls
 800631a:	4690      	movls	r8, r2
 800631c:	4698      	movhi	r8, r3
 800631e:	2303      	movs	r3, #3
 8006320:	6123      	str	r3, [r4, #16]
 8006322:	9b05      	ldr	r3, [sp, #20]
 8006324:	f023 0304 	bic.w	r3, r3, #4
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	f04f 0900 	mov.w	r9, #0
 800632e:	9700      	str	r7, [sp, #0]
 8006330:	4633      	mov	r3, r6
 8006332:	aa0b      	add	r2, sp, #44	; 0x2c
 8006334:	4621      	mov	r1, r4
 8006336:	4628      	mov	r0, r5
 8006338:	f000 f9da 	bl	80066f0 <_printf_common>
 800633c:	3001      	adds	r0, #1
 800633e:	f040 8090 	bne.w	8006462 <_printf_float+0x1de>
 8006342:	f04f 30ff 	mov.w	r0, #4294967295
 8006346:	b00d      	add	sp, #52	; 0x34
 8006348:	ecbd 8b02 	vpop	{d8}
 800634c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006350:	4642      	mov	r2, r8
 8006352:	464b      	mov	r3, r9
 8006354:	4640      	mov	r0, r8
 8006356:	4649      	mov	r1, r9
 8006358:	f7fa fc10 	bl	8000b7c <__aeabi_dcmpun>
 800635c:	b140      	cbz	r0, 8006370 <_printf_float+0xec>
 800635e:	464b      	mov	r3, r9
 8006360:	2b00      	cmp	r3, #0
 8006362:	bfbc      	itt	lt
 8006364:	232d      	movlt	r3, #45	; 0x2d
 8006366:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800636a:	4a7f      	ldr	r2, [pc, #508]	; (8006568 <_printf_float+0x2e4>)
 800636c:	4b7f      	ldr	r3, [pc, #508]	; (800656c <_printf_float+0x2e8>)
 800636e:	e7d1      	b.n	8006314 <_printf_float+0x90>
 8006370:	6863      	ldr	r3, [r4, #4]
 8006372:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006376:	9206      	str	r2, [sp, #24]
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	d13f      	bne.n	80063fc <_printf_float+0x178>
 800637c:	2306      	movs	r3, #6
 800637e:	6063      	str	r3, [r4, #4]
 8006380:	9b05      	ldr	r3, [sp, #20]
 8006382:	6861      	ldr	r1, [r4, #4]
 8006384:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006388:	2300      	movs	r3, #0
 800638a:	9303      	str	r3, [sp, #12]
 800638c:	ab0a      	add	r3, sp, #40	; 0x28
 800638e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006392:	ab09      	add	r3, sp, #36	; 0x24
 8006394:	ec49 8b10 	vmov	d0, r8, r9
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	6022      	str	r2, [r4, #0]
 800639c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80063a0:	4628      	mov	r0, r5
 80063a2:	f7ff fecf 	bl	8006144 <__cvt>
 80063a6:	9b06      	ldr	r3, [sp, #24]
 80063a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063aa:	2b47      	cmp	r3, #71	; 0x47
 80063ac:	4680      	mov	r8, r0
 80063ae:	d108      	bne.n	80063c2 <_printf_float+0x13e>
 80063b0:	1cc8      	adds	r0, r1, #3
 80063b2:	db02      	blt.n	80063ba <_printf_float+0x136>
 80063b4:	6863      	ldr	r3, [r4, #4]
 80063b6:	4299      	cmp	r1, r3
 80063b8:	dd41      	ble.n	800643e <_printf_float+0x1ba>
 80063ba:	f1ab 0302 	sub.w	r3, fp, #2
 80063be:	fa5f fb83 	uxtb.w	fp, r3
 80063c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80063c6:	d820      	bhi.n	800640a <_printf_float+0x186>
 80063c8:	3901      	subs	r1, #1
 80063ca:	465a      	mov	r2, fp
 80063cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80063d0:	9109      	str	r1, [sp, #36]	; 0x24
 80063d2:	f7ff ff19 	bl	8006208 <__exponent>
 80063d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063d8:	1813      	adds	r3, r2, r0
 80063da:	2a01      	cmp	r2, #1
 80063dc:	4681      	mov	r9, r0
 80063de:	6123      	str	r3, [r4, #16]
 80063e0:	dc02      	bgt.n	80063e8 <_printf_float+0x164>
 80063e2:	6822      	ldr	r2, [r4, #0]
 80063e4:	07d2      	lsls	r2, r2, #31
 80063e6:	d501      	bpl.n	80063ec <_printf_float+0x168>
 80063e8:	3301      	adds	r3, #1
 80063ea:	6123      	str	r3, [r4, #16]
 80063ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d09c      	beq.n	800632e <_printf_float+0xaa>
 80063f4:	232d      	movs	r3, #45	; 0x2d
 80063f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063fa:	e798      	b.n	800632e <_printf_float+0xaa>
 80063fc:	9a06      	ldr	r2, [sp, #24]
 80063fe:	2a47      	cmp	r2, #71	; 0x47
 8006400:	d1be      	bne.n	8006380 <_printf_float+0xfc>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1bc      	bne.n	8006380 <_printf_float+0xfc>
 8006406:	2301      	movs	r3, #1
 8006408:	e7b9      	b.n	800637e <_printf_float+0xfa>
 800640a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800640e:	d118      	bne.n	8006442 <_printf_float+0x1be>
 8006410:	2900      	cmp	r1, #0
 8006412:	6863      	ldr	r3, [r4, #4]
 8006414:	dd0b      	ble.n	800642e <_printf_float+0x1aa>
 8006416:	6121      	str	r1, [r4, #16]
 8006418:	b913      	cbnz	r3, 8006420 <_printf_float+0x19c>
 800641a:	6822      	ldr	r2, [r4, #0]
 800641c:	07d0      	lsls	r0, r2, #31
 800641e:	d502      	bpl.n	8006426 <_printf_float+0x1a2>
 8006420:	3301      	adds	r3, #1
 8006422:	440b      	add	r3, r1
 8006424:	6123      	str	r3, [r4, #16]
 8006426:	65a1      	str	r1, [r4, #88]	; 0x58
 8006428:	f04f 0900 	mov.w	r9, #0
 800642c:	e7de      	b.n	80063ec <_printf_float+0x168>
 800642e:	b913      	cbnz	r3, 8006436 <_printf_float+0x1b2>
 8006430:	6822      	ldr	r2, [r4, #0]
 8006432:	07d2      	lsls	r2, r2, #31
 8006434:	d501      	bpl.n	800643a <_printf_float+0x1b6>
 8006436:	3302      	adds	r3, #2
 8006438:	e7f4      	b.n	8006424 <_printf_float+0x1a0>
 800643a:	2301      	movs	r3, #1
 800643c:	e7f2      	b.n	8006424 <_printf_float+0x1a0>
 800643e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006444:	4299      	cmp	r1, r3
 8006446:	db05      	blt.n	8006454 <_printf_float+0x1d0>
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	6121      	str	r1, [r4, #16]
 800644c:	07d8      	lsls	r0, r3, #31
 800644e:	d5ea      	bpl.n	8006426 <_printf_float+0x1a2>
 8006450:	1c4b      	adds	r3, r1, #1
 8006452:	e7e7      	b.n	8006424 <_printf_float+0x1a0>
 8006454:	2900      	cmp	r1, #0
 8006456:	bfd4      	ite	le
 8006458:	f1c1 0202 	rsble	r2, r1, #2
 800645c:	2201      	movgt	r2, #1
 800645e:	4413      	add	r3, r2
 8006460:	e7e0      	b.n	8006424 <_printf_float+0x1a0>
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	055a      	lsls	r2, r3, #21
 8006466:	d407      	bmi.n	8006478 <_printf_float+0x1f4>
 8006468:	6923      	ldr	r3, [r4, #16]
 800646a:	4642      	mov	r2, r8
 800646c:	4631      	mov	r1, r6
 800646e:	4628      	mov	r0, r5
 8006470:	47b8      	blx	r7
 8006472:	3001      	adds	r0, #1
 8006474:	d12c      	bne.n	80064d0 <_printf_float+0x24c>
 8006476:	e764      	b.n	8006342 <_printf_float+0xbe>
 8006478:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800647c:	f240 80e0 	bls.w	8006640 <_printf_float+0x3bc>
 8006480:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006484:	2200      	movs	r2, #0
 8006486:	2300      	movs	r3, #0
 8006488:	f7fa fb46 	bl	8000b18 <__aeabi_dcmpeq>
 800648c:	2800      	cmp	r0, #0
 800648e:	d034      	beq.n	80064fa <_printf_float+0x276>
 8006490:	4a37      	ldr	r2, [pc, #220]	; (8006570 <_printf_float+0x2ec>)
 8006492:	2301      	movs	r3, #1
 8006494:	4631      	mov	r1, r6
 8006496:	4628      	mov	r0, r5
 8006498:	47b8      	blx	r7
 800649a:	3001      	adds	r0, #1
 800649c:	f43f af51 	beq.w	8006342 <_printf_float+0xbe>
 80064a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064a4:	429a      	cmp	r2, r3
 80064a6:	db02      	blt.n	80064ae <_printf_float+0x22a>
 80064a8:	6823      	ldr	r3, [r4, #0]
 80064aa:	07d8      	lsls	r0, r3, #31
 80064ac:	d510      	bpl.n	80064d0 <_printf_float+0x24c>
 80064ae:	ee18 3a10 	vmov	r3, s16
 80064b2:	4652      	mov	r2, sl
 80064b4:	4631      	mov	r1, r6
 80064b6:	4628      	mov	r0, r5
 80064b8:	47b8      	blx	r7
 80064ba:	3001      	adds	r0, #1
 80064bc:	f43f af41 	beq.w	8006342 <_printf_float+0xbe>
 80064c0:	f04f 0800 	mov.w	r8, #0
 80064c4:	f104 091a 	add.w	r9, r4, #26
 80064c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ca:	3b01      	subs	r3, #1
 80064cc:	4543      	cmp	r3, r8
 80064ce:	dc09      	bgt.n	80064e4 <_printf_float+0x260>
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	079b      	lsls	r3, r3, #30
 80064d4:	f100 8107 	bmi.w	80066e6 <_printf_float+0x462>
 80064d8:	68e0      	ldr	r0, [r4, #12]
 80064da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064dc:	4298      	cmp	r0, r3
 80064de:	bfb8      	it	lt
 80064e0:	4618      	movlt	r0, r3
 80064e2:	e730      	b.n	8006346 <_printf_float+0xc2>
 80064e4:	2301      	movs	r3, #1
 80064e6:	464a      	mov	r2, r9
 80064e8:	4631      	mov	r1, r6
 80064ea:	4628      	mov	r0, r5
 80064ec:	47b8      	blx	r7
 80064ee:	3001      	adds	r0, #1
 80064f0:	f43f af27 	beq.w	8006342 <_printf_float+0xbe>
 80064f4:	f108 0801 	add.w	r8, r8, #1
 80064f8:	e7e6      	b.n	80064c8 <_printf_float+0x244>
 80064fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	dc39      	bgt.n	8006574 <_printf_float+0x2f0>
 8006500:	4a1b      	ldr	r2, [pc, #108]	; (8006570 <_printf_float+0x2ec>)
 8006502:	2301      	movs	r3, #1
 8006504:	4631      	mov	r1, r6
 8006506:	4628      	mov	r0, r5
 8006508:	47b8      	blx	r7
 800650a:	3001      	adds	r0, #1
 800650c:	f43f af19 	beq.w	8006342 <_printf_float+0xbe>
 8006510:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006514:	4313      	orrs	r3, r2
 8006516:	d102      	bne.n	800651e <_printf_float+0x29a>
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	07d9      	lsls	r1, r3, #31
 800651c:	d5d8      	bpl.n	80064d0 <_printf_float+0x24c>
 800651e:	ee18 3a10 	vmov	r3, s16
 8006522:	4652      	mov	r2, sl
 8006524:	4631      	mov	r1, r6
 8006526:	4628      	mov	r0, r5
 8006528:	47b8      	blx	r7
 800652a:	3001      	adds	r0, #1
 800652c:	f43f af09 	beq.w	8006342 <_printf_float+0xbe>
 8006530:	f04f 0900 	mov.w	r9, #0
 8006534:	f104 0a1a 	add.w	sl, r4, #26
 8006538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800653a:	425b      	negs	r3, r3
 800653c:	454b      	cmp	r3, r9
 800653e:	dc01      	bgt.n	8006544 <_printf_float+0x2c0>
 8006540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006542:	e792      	b.n	800646a <_printf_float+0x1e6>
 8006544:	2301      	movs	r3, #1
 8006546:	4652      	mov	r2, sl
 8006548:	4631      	mov	r1, r6
 800654a:	4628      	mov	r0, r5
 800654c:	47b8      	blx	r7
 800654e:	3001      	adds	r0, #1
 8006550:	f43f aef7 	beq.w	8006342 <_printf_float+0xbe>
 8006554:	f109 0901 	add.w	r9, r9, #1
 8006558:	e7ee      	b.n	8006538 <_printf_float+0x2b4>
 800655a:	bf00      	nop
 800655c:	7fefffff 	.word	0x7fefffff
 8006560:	08008b68 	.word	0x08008b68
 8006564:	08008b6c 	.word	0x08008b6c
 8006568:	08008b70 	.word	0x08008b70
 800656c:	08008b74 	.word	0x08008b74
 8006570:	08008b78 	.word	0x08008b78
 8006574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006576:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006578:	429a      	cmp	r2, r3
 800657a:	bfa8      	it	ge
 800657c:	461a      	movge	r2, r3
 800657e:	2a00      	cmp	r2, #0
 8006580:	4691      	mov	r9, r2
 8006582:	dc37      	bgt.n	80065f4 <_printf_float+0x370>
 8006584:	f04f 0b00 	mov.w	fp, #0
 8006588:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800658c:	f104 021a 	add.w	r2, r4, #26
 8006590:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006592:	9305      	str	r3, [sp, #20]
 8006594:	eba3 0309 	sub.w	r3, r3, r9
 8006598:	455b      	cmp	r3, fp
 800659a:	dc33      	bgt.n	8006604 <_printf_float+0x380>
 800659c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065a0:	429a      	cmp	r2, r3
 80065a2:	db3b      	blt.n	800661c <_printf_float+0x398>
 80065a4:	6823      	ldr	r3, [r4, #0]
 80065a6:	07da      	lsls	r2, r3, #31
 80065a8:	d438      	bmi.n	800661c <_printf_float+0x398>
 80065aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80065ae:	eba2 0903 	sub.w	r9, r2, r3
 80065b2:	9b05      	ldr	r3, [sp, #20]
 80065b4:	1ad2      	subs	r2, r2, r3
 80065b6:	4591      	cmp	r9, r2
 80065b8:	bfa8      	it	ge
 80065ba:	4691      	movge	r9, r2
 80065bc:	f1b9 0f00 	cmp.w	r9, #0
 80065c0:	dc35      	bgt.n	800662e <_printf_float+0x3aa>
 80065c2:	f04f 0800 	mov.w	r8, #0
 80065c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065ca:	f104 0a1a 	add.w	sl, r4, #26
 80065ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065d2:	1a9b      	subs	r3, r3, r2
 80065d4:	eba3 0309 	sub.w	r3, r3, r9
 80065d8:	4543      	cmp	r3, r8
 80065da:	f77f af79 	ble.w	80064d0 <_printf_float+0x24c>
 80065de:	2301      	movs	r3, #1
 80065e0:	4652      	mov	r2, sl
 80065e2:	4631      	mov	r1, r6
 80065e4:	4628      	mov	r0, r5
 80065e6:	47b8      	blx	r7
 80065e8:	3001      	adds	r0, #1
 80065ea:	f43f aeaa 	beq.w	8006342 <_printf_float+0xbe>
 80065ee:	f108 0801 	add.w	r8, r8, #1
 80065f2:	e7ec      	b.n	80065ce <_printf_float+0x34a>
 80065f4:	4613      	mov	r3, r2
 80065f6:	4631      	mov	r1, r6
 80065f8:	4642      	mov	r2, r8
 80065fa:	4628      	mov	r0, r5
 80065fc:	47b8      	blx	r7
 80065fe:	3001      	adds	r0, #1
 8006600:	d1c0      	bne.n	8006584 <_printf_float+0x300>
 8006602:	e69e      	b.n	8006342 <_printf_float+0xbe>
 8006604:	2301      	movs	r3, #1
 8006606:	4631      	mov	r1, r6
 8006608:	4628      	mov	r0, r5
 800660a:	9205      	str	r2, [sp, #20]
 800660c:	47b8      	blx	r7
 800660e:	3001      	adds	r0, #1
 8006610:	f43f ae97 	beq.w	8006342 <_printf_float+0xbe>
 8006614:	9a05      	ldr	r2, [sp, #20]
 8006616:	f10b 0b01 	add.w	fp, fp, #1
 800661a:	e7b9      	b.n	8006590 <_printf_float+0x30c>
 800661c:	ee18 3a10 	vmov	r3, s16
 8006620:	4652      	mov	r2, sl
 8006622:	4631      	mov	r1, r6
 8006624:	4628      	mov	r0, r5
 8006626:	47b8      	blx	r7
 8006628:	3001      	adds	r0, #1
 800662a:	d1be      	bne.n	80065aa <_printf_float+0x326>
 800662c:	e689      	b.n	8006342 <_printf_float+0xbe>
 800662e:	9a05      	ldr	r2, [sp, #20]
 8006630:	464b      	mov	r3, r9
 8006632:	4442      	add	r2, r8
 8006634:	4631      	mov	r1, r6
 8006636:	4628      	mov	r0, r5
 8006638:	47b8      	blx	r7
 800663a:	3001      	adds	r0, #1
 800663c:	d1c1      	bne.n	80065c2 <_printf_float+0x33e>
 800663e:	e680      	b.n	8006342 <_printf_float+0xbe>
 8006640:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006642:	2a01      	cmp	r2, #1
 8006644:	dc01      	bgt.n	800664a <_printf_float+0x3c6>
 8006646:	07db      	lsls	r3, r3, #31
 8006648:	d53a      	bpl.n	80066c0 <_printf_float+0x43c>
 800664a:	2301      	movs	r3, #1
 800664c:	4642      	mov	r2, r8
 800664e:	4631      	mov	r1, r6
 8006650:	4628      	mov	r0, r5
 8006652:	47b8      	blx	r7
 8006654:	3001      	adds	r0, #1
 8006656:	f43f ae74 	beq.w	8006342 <_printf_float+0xbe>
 800665a:	ee18 3a10 	vmov	r3, s16
 800665e:	4652      	mov	r2, sl
 8006660:	4631      	mov	r1, r6
 8006662:	4628      	mov	r0, r5
 8006664:	47b8      	blx	r7
 8006666:	3001      	adds	r0, #1
 8006668:	f43f ae6b 	beq.w	8006342 <_printf_float+0xbe>
 800666c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006670:	2200      	movs	r2, #0
 8006672:	2300      	movs	r3, #0
 8006674:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006678:	f7fa fa4e 	bl	8000b18 <__aeabi_dcmpeq>
 800667c:	b9d8      	cbnz	r0, 80066b6 <_printf_float+0x432>
 800667e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006682:	f108 0201 	add.w	r2, r8, #1
 8006686:	4631      	mov	r1, r6
 8006688:	4628      	mov	r0, r5
 800668a:	47b8      	blx	r7
 800668c:	3001      	adds	r0, #1
 800668e:	d10e      	bne.n	80066ae <_printf_float+0x42a>
 8006690:	e657      	b.n	8006342 <_printf_float+0xbe>
 8006692:	2301      	movs	r3, #1
 8006694:	4652      	mov	r2, sl
 8006696:	4631      	mov	r1, r6
 8006698:	4628      	mov	r0, r5
 800669a:	47b8      	blx	r7
 800669c:	3001      	adds	r0, #1
 800669e:	f43f ae50 	beq.w	8006342 <_printf_float+0xbe>
 80066a2:	f108 0801 	add.w	r8, r8, #1
 80066a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066a8:	3b01      	subs	r3, #1
 80066aa:	4543      	cmp	r3, r8
 80066ac:	dcf1      	bgt.n	8006692 <_printf_float+0x40e>
 80066ae:	464b      	mov	r3, r9
 80066b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80066b4:	e6da      	b.n	800646c <_printf_float+0x1e8>
 80066b6:	f04f 0800 	mov.w	r8, #0
 80066ba:	f104 0a1a 	add.w	sl, r4, #26
 80066be:	e7f2      	b.n	80066a6 <_printf_float+0x422>
 80066c0:	2301      	movs	r3, #1
 80066c2:	4642      	mov	r2, r8
 80066c4:	e7df      	b.n	8006686 <_printf_float+0x402>
 80066c6:	2301      	movs	r3, #1
 80066c8:	464a      	mov	r2, r9
 80066ca:	4631      	mov	r1, r6
 80066cc:	4628      	mov	r0, r5
 80066ce:	47b8      	blx	r7
 80066d0:	3001      	adds	r0, #1
 80066d2:	f43f ae36 	beq.w	8006342 <_printf_float+0xbe>
 80066d6:	f108 0801 	add.w	r8, r8, #1
 80066da:	68e3      	ldr	r3, [r4, #12]
 80066dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066de:	1a5b      	subs	r3, r3, r1
 80066e0:	4543      	cmp	r3, r8
 80066e2:	dcf0      	bgt.n	80066c6 <_printf_float+0x442>
 80066e4:	e6f8      	b.n	80064d8 <_printf_float+0x254>
 80066e6:	f04f 0800 	mov.w	r8, #0
 80066ea:	f104 0919 	add.w	r9, r4, #25
 80066ee:	e7f4      	b.n	80066da <_printf_float+0x456>

080066f0 <_printf_common>:
 80066f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f4:	4616      	mov	r6, r2
 80066f6:	4699      	mov	r9, r3
 80066f8:	688a      	ldr	r2, [r1, #8]
 80066fa:	690b      	ldr	r3, [r1, #16]
 80066fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006700:	4293      	cmp	r3, r2
 8006702:	bfb8      	it	lt
 8006704:	4613      	movlt	r3, r2
 8006706:	6033      	str	r3, [r6, #0]
 8006708:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800670c:	4607      	mov	r7, r0
 800670e:	460c      	mov	r4, r1
 8006710:	b10a      	cbz	r2, 8006716 <_printf_common+0x26>
 8006712:	3301      	adds	r3, #1
 8006714:	6033      	str	r3, [r6, #0]
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	0699      	lsls	r1, r3, #26
 800671a:	bf42      	ittt	mi
 800671c:	6833      	ldrmi	r3, [r6, #0]
 800671e:	3302      	addmi	r3, #2
 8006720:	6033      	strmi	r3, [r6, #0]
 8006722:	6825      	ldr	r5, [r4, #0]
 8006724:	f015 0506 	ands.w	r5, r5, #6
 8006728:	d106      	bne.n	8006738 <_printf_common+0x48>
 800672a:	f104 0a19 	add.w	sl, r4, #25
 800672e:	68e3      	ldr	r3, [r4, #12]
 8006730:	6832      	ldr	r2, [r6, #0]
 8006732:	1a9b      	subs	r3, r3, r2
 8006734:	42ab      	cmp	r3, r5
 8006736:	dc26      	bgt.n	8006786 <_printf_common+0x96>
 8006738:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800673c:	1e13      	subs	r3, r2, #0
 800673e:	6822      	ldr	r2, [r4, #0]
 8006740:	bf18      	it	ne
 8006742:	2301      	movne	r3, #1
 8006744:	0692      	lsls	r2, r2, #26
 8006746:	d42b      	bmi.n	80067a0 <_printf_common+0xb0>
 8006748:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800674c:	4649      	mov	r1, r9
 800674e:	4638      	mov	r0, r7
 8006750:	47c0      	blx	r8
 8006752:	3001      	adds	r0, #1
 8006754:	d01e      	beq.n	8006794 <_printf_common+0xa4>
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	6922      	ldr	r2, [r4, #16]
 800675a:	f003 0306 	and.w	r3, r3, #6
 800675e:	2b04      	cmp	r3, #4
 8006760:	bf02      	ittt	eq
 8006762:	68e5      	ldreq	r5, [r4, #12]
 8006764:	6833      	ldreq	r3, [r6, #0]
 8006766:	1aed      	subeq	r5, r5, r3
 8006768:	68a3      	ldr	r3, [r4, #8]
 800676a:	bf0c      	ite	eq
 800676c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006770:	2500      	movne	r5, #0
 8006772:	4293      	cmp	r3, r2
 8006774:	bfc4      	itt	gt
 8006776:	1a9b      	subgt	r3, r3, r2
 8006778:	18ed      	addgt	r5, r5, r3
 800677a:	2600      	movs	r6, #0
 800677c:	341a      	adds	r4, #26
 800677e:	42b5      	cmp	r5, r6
 8006780:	d11a      	bne.n	80067b8 <_printf_common+0xc8>
 8006782:	2000      	movs	r0, #0
 8006784:	e008      	b.n	8006798 <_printf_common+0xa8>
 8006786:	2301      	movs	r3, #1
 8006788:	4652      	mov	r2, sl
 800678a:	4649      	mov	r1, r9
 800678c:	4638      	mov	r0, r7
 800678e:	47c0      	blx	r8
 8006790:	3001      	adds	r0, #1
 8006792:	d103      	bne.n	800679c <_printf_common+0xac>
 8006794:	f04f 30ff 	mov.w	r0, #4294967295
 8006798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800679c:	3501      	adds	r5, #1
 800679e:	e7c6      	b.n	800672e <_printf_common+0x3e>
 80067a0:	18e1      	adds	r1, r4, r3
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	2030      	movs	r0, #48	; 0x30
 80067a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067aa:	4422      	add	r2, r4
 80067ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067b4:	3302      	adds	r3, #2
 80067b6:	e7c7      	b.n	8006748 <_printf_common+0x58>
 80067b8:	2301      	movs	r3, #1
 80067ba:	4622      	mov	r2, r4
 80067bc:	4649      	mov	r1, r9
 80067be:	4638      	mov	r0, r7
 80067c0:	47c0      	blx	r8
 80067c2:	3001      	adds	r0, #1
 80067c4:	d0e6      	beq.n	8006794 <_printf_common+0xa4>
 80067c6:	3601      	adds	r6, #1
 80067c8:	e7d9      	b.n	800677e <_printf_common+0x8e>
	...

080067cc <_printf_i>:
 80067cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067d0:	7e0f      	ldrb	r7, [r1, #24]
 80067d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067d4:	2f78      	cmp	r7, #120	; 0x78
 80067d6:	4691      	mov	r9, r2
 80067d8:	4680      	mov	r8, r0
 80067da:	460c      	mov	r4, r1
 80067dc:	469a      	mov	sl, r3
 80067de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067e2:	d807      	bhi.n	80067f4 <_printf_i+0x28>
 80067e4:	2f62      	cmp	r7, #98	; 0x62
 80067e6:	d80a      	bhi.n	80067fe <_printf_i+0x32>
 80067e8:	2f00      	cmp	r7, #0
 80067ea:	f000 80d4 	beq.w	8006996 <_printf_i+0x1ca>
 80067ee:	2f58      	cmp	r7, #88	; 0x58
 80067f0:	f000 80c0 	beq.w	8006974 <_printf_i+0x1a8>
 80067f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067fc:	e03a      	b.n	8006874 <_printf_i+0xa8>
 80067fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006802:	2b15      	cmp	r3, #21
 8006804:	d8f6      	bhi.n	80067f4 <_printf_i+0x28>
 8006806:	a101      	add	r1, pc, #4	; (adr r1, 800680c <_printf_i+0x40>)
 8006808:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800680c:	08006865 	.word	0x08006865
 8006810:	08006879 	.word	0x08006879
 8006814:	080067f5 	.word	0x080067f5
 8006818:	080067f5 	.word	0x080067f5
 800681c:	080067f5 	.word	0x080067f5
 8006820:	080067f5 	.word	0x080067f5
 8006824:	08006879 	.word	0x08006879
 8006828:	080067f5 	.word	0x080067f5
 800682c:	080067f5 	.word	0x080067f5
 8006830:	080067f5 	.word	0x080067f5
 8006834:	080067f5 	.word	0x080067f5
 8006838:	0800697d 	.word	0x0800697d
 800683c:	080068a5 	.word	0x080068a5
 8006840:	08006937 	.word	0x08006937
 8006844:	080067f5 	.word	0x080067f5
 8006848:	080067f5 	.word	0x080067f5
 800684c:	0800699f 	.word	0x0800699f
 8006850:	080067f5 	.word	0x080067f5
 8006854:	080068a5 	.word	0x080068a5
 8006858:	080067f5 	.word	0x080067f5
 800685c:	080067f5 	.word	0x080067f5
 8006860:	0800693f 	.word	0x0800693f
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	1d1a      	adds	r2, r3, #4
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	602a      	str	r2, [r5, #0]
 800686c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006870:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006874:	2301      	movs	r3, #1
 8006876:	e09f      	b.n	80069b8 <_printf_i+0x1ec>
 8006878:	6820      	ldr	r0, [r4, #0]
 800687a:	682b      	ldr	r3, [r5, #0]
 800687c:	0607      	lsls	r7, r0, #24
 800687e:	f103 0104 	add.w	r1, r3, #4
 8006882:	6029      	str	r1, [r5, #0]
 8006884:	d501      	bpl.n	800688a <_printf_i+0xbe>
 8006886:	681e      	ldr	r6, [r3, #0]
 8006888:	e003      	b.n	8006892 <_printf_i+0xc6>
 800688a:	0646      	lsls	r6, r0, #25
 800688c:	d5fb      	bpl.n	8006886 <_printf_i+0xba>
 800688e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006892:	2e00      	cmp	r6, #0
 8006894:	da03      	bge.n	800689e <_printf_i+0xd2>
 8006896:	232d      	movs	r3, #45	; 0x2d
 8006898:	4276      	negs	r6, r6
 800689a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800689e:	485a      	ldr	r0, [pc, #360]	; (8006a08 <_printf_i+0x23c>)
 80068a0:	230a      	movs	r3, #10
 80068a2:	e012      	b.n	80068ca <_printf_i+0xfe>
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	6820      	ldr	r0, [r4, #0]
 80068a8:	1d19      	adds	r1, r3, #4
 80068aa:	6029      	str	r1, [r5, #0]
 80068ac:	0605      	lsls	r5, r0, #24
 80068ae:	d501      	bpl.n	80068b4 <_printf_i+0xe8>
 80068b0:	681e      	ldr	r6, [r3, #0]
 80068b2:	e002      	b.n	80068ba <_printf_i+0xee>
 80068b4:	0641      	lsls	r1, r0, #25
 80068b6:	d5fb      	bpl.n	80068b0 <_printf_i+0xe4>
 80068b8:	881e      	ldrh	r6, [r3, #0]
 80068ba:	4853      	ldr	r0, [pc, #332]	; (8006a08 <_printf_i+0x23c>)
 80068bc:	2f6f      	cmp	r7, #111	; 0x6f
 80068be:	bf0c      	ite	eq
 80068c0:	2308      	moveq	r3, #8
 80068c2:	230a      	movne	r3, #10
 80068c4:	2100      	movs	r1, #0
 80068c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068ca:	6865      	ldr	r5, [r4, #4]
 80068cc:	60a5      	str	r5, [r4, #8]
 80068ce:	2d00      	cmp	r5, #0
 80068d0:	bfa2      	ittt	ge
 80068d2:	6821      	ldrge	r1, [r4, #0]
 80068d4:	f021 0104 	bicge.w	r1, r1, #4
 80068d8:	6021      	strge	r1, [r4, #0]
 80068da:	b90e      	cbnz	r6, 80068e0 <_printf_i+0x114>
 80068dc:	2d00      	cmp	r5, #0
 80068de:	d04b      	beq.n	8006978 <_printf_i+0x1ac>
 80068e0:	4615      	mov	r5, r2
 80068e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80068e6:	fb03 6711 	mls	r7, r3, r1, r6
 80068ea:	5dc7      	ldrb	r7, [r0, r7]
 80068ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068f0:	4637      	mov	r7, r6
 80068f2:	42bb      	cmp	r3, r7
 80068f4:	460e      	mov	r6, r1
 80068f6:	d9f4      	bls.n	80068e2 <_printf_i+0x116>
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d10b      	bne.n	8006914 <_printf_i+0x148>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	07de      	lsls	r6, r3, #31
 8006900:	d508      	bpl.n	8006914 <_printf_i+0x148>
 8006902:	6923      	ldr	r3, [r4, #16]
 8006904:	6861      	ldr	r1, [r4, #4]
 8006906:	4299      	cmp	r1, r3
 8006908:	bfde      	ittt	le
 800690a:	2330      	movle	r3, #48	; 0x30
 800690c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006910:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006914:	1b52      	subs	r2, r2, r5
 8006916:	6122      	str	r2, [r4, #16]
 8006918:	f8cd a000 	str.w	sl, [sp]
 800691c:	464b      	mov	r3, r9
 800691e:	aa03      	add	r2, sp, #12
 8006920:	4621      	mov	r1, r4
 8006922:	4640      	mov	r0, r8
 8006924:	f7ff fee4 	bl	80066f0 <_printf_common>
 8006928:	3001      	adds	r0, #1
 800692a:	d14a      	bne.n	80069c2 <_printf_i+0x1f6>
 800692c:	f04f 30ff 	mov.w	r0, #4294967295
 8006930:	b004      	add	sp, #16
 8006932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	f043 0320 	orr.w	r3, r3, #32
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	4833      	ldr	r0, [pc, #204]	; (8006a0c <_printf_i+0x240>)
 8006940:	2778      	movs	r7, #120	; 0x78
 8006942:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	6829      	ldr	r1, [r5, #0]
 800694a:	061f      	lsls	r7, r3, #24
 800694c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006950:	d402      	bmi.n	8006958 <_printf_i+0x18c>
 8006952:	065f      	lsls	r7, r3, #25
 8006954:	bf48      	it	mi
 8006956:	b2b6      	uxthmi	r6, r6
 8006958:	07df      	lsls	r7, r3, #31
 800695a:	bf48      	it	mi
 800695c:	f043 0320 	orrmi.w	r3, r3, #32
 8006960:	6029      	str	r1, [r5, #0]
 8006962:	bf48      	it	mi
 8006964:	6023      	strmi	r3, [r4, #0]
 8006966:	b91e      	cbnz	r6, 8006970 <_printf_i+0x1a4>
 8006968:	6823      	ldr	r3, [r4, #0]
 800696a:	f023 0320 	bic.w	r3, r3, #32
 800696e:	6023      	str	r3, [r4, #0]
 8006970:	2310      	movs	r3, #16
 8006972:	e7a7      	b.n	80068c4 <_printf_i+0xf8>
 8006974:	4824      	ldr	r0, [pc, #144]	; (8006a08 <_printf_i+0x23c>)
 8006976:	e7e4      	b.n	8006942 <_printf_i+0x176>
 8006978:	4615      	mov	r5, r2
 800697a:	e7bd      	b.n	80068f8 <_printf_i+0x12c>
 800697c:	682b      	ldr	r3, [r5, #0]
 800697e:	6826      	ldr	r6, [r4, #0]
 8006980:	6961      	ldr	r1, [r4, #20]
 8006982:	1d18      	adds	r0, r3, #4
 8006984:	6028      	str	r0, [r5, #0]
 8006986:	0635      	lsls	r5, r6, #24
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	d501      	bpl.n	8006990 <_printf_i+0x1c4>
 800698c:	6019      	str	r1, [r3, #0]
 800698e:	e002      	b.n	8006996 <_printf_i+0x1ca>
 8006990:	0670      	lsls	r0, r6, #25
 8006992:	d5fb      	bpl.n	800698c <_printf_i+0x1c0>
 8006994:	8019      	strh	r1, [r3, #0]
 8006996:	2300      	movs	r3, #0
 8006998:	6123      	str	r3, [r4, #16]
 800699a:	4615      	mov	r5, r2
 800699c:	e7bc      	b.n	8006918 <_printf_i+0x14c>
 800699e:	682b      	ldr	r3, [r5, #0]
 80069a0:	1d1a      	adds	r2, r3, #4
 80069a2:	602a      	str	r2, [r5, #0]
 80069a4:	681d      	ldr	r5, [r3, #0]
 80069a6:	6862      	ldr	r2, [r4, #4]
 80069a8:	2100      	movs	r1, #0
 80069aa:	4628      	mov	r0, r5
 80069ac:	f7f9 fc38 	bl	8000220 <memchr>
 80069b0:	b108      	cbz	r0, 80069b6 <_printf_i+0x1ea>
 80069b2:	1b40      	subs	r0, r0, r5
 80069b4:	6060      	str	r0, [r4, #4]
 80069b6:	6863      	ldr	r3, [r4, #4]
 80069b8:	6123      	str	r3, [r4, #16]
 80069ba:	2300      	movs	r3, #0
 80069bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c0:	e7aa      	b.n	8006918 <_printf_i+0x14c>
 80069c2:	6923      	ldr	r3, [r4, #16]
 80069c4:	462a      	mov	r2, r5
 80069c6:	4649      	mov	r1, r9
 80069c8:	4640      	mov	r0, r8
 80069ca:	47d0      	blx	sl
 80069cc:	3001      	adds	r0, #1
 80069ce:	d0ad      	beq.n	800692c <_printf_i+0x160>
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	079b      	lsls	r3, r3, #30
 80069d4:	d413      	bmi.n	80069fe <_printf_i+0x232>
 80069d6:	68e0      	ldr	r0, [r4, #12]
 80069d8:	9b03      	ldr	r3, [sp, #12]
 80069da:	4298      	cmp	r0, r3
 80069dc:	bfb8      	it	lt
 80069de:	4618      	movlt	r0, r3
 80069e0:	e7a6      	b.n	8006930 <_printf_i+0x164>
 80069e2:	2301      	movs	r3, #1
 80069e4:	4632      	mov	r2, r6
 80069e6:	4649      	mov	r1, r9
 80069e8:	4640      	mov	r0, r8
 80069ea:	47d0      	blx	sl
 80069ec:	3001      	adds	r0, #1
 80069ee:	d09d      	beq.n	800692c <_printf_i+0x160>
 80069f0:	3501      	adds	r5, #1
 80069f2:	68e3      	ldr	r3, [r4, #12]
 80069f4:	9903      	ldr	r1, [sp, #12]
 80069f6:	1a5b      	subs	r3, r3, r1
 80069f8:	42ab      	cmp	r3, r5
 80069fa:	dcf2      	bgt.n	80069e2 <_printf_i+0x216>
 80069fc:	e7eb      	b.n	80069d6 <_printf_i+0x20a>
 80069fe:	2500      	movs	r5, #0
 8006a00:	f104 0619 	add.w	r6, r4, #25
 8006a04:	e7f5      	b.n	80069f2 <_printf_i+0x226>
 8006a06:	bf00      	nop
 8006a08:	08008b7a 	.word	0x08008b7a
 8006a0c:	08008b8b 	.word	0x08008b8b

08006a10 <std>:
 8006a10:	2300      	movs	r3, #0
 8006a12:	b510      	push	{r4, lr}
 8006a14:	4604      	mov	r4, r0
 8006a16:	e9c0 3300 	strd	r3, r3, [r0]
 8006a1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a1e:	6083      	str	r3, [r0, #8]
 8006a20:	8181      	strh	r1, [r0, #12]
 8006a22:	6643      	str	r3, [r0, #100]	; 0x64
 8006a24:	81c2      	strh	r2, [r0, #14]
 8006a26:	6183      	str	r3, [r0, #24]
 8006a28:	4619      	mov	r1, r3
 8006a2a:	2208      	movs	r2, #8
 8006a2c:	305c      	adds	r0, #92	; 0x5c
 8006a2e:	f000 f8f4 	bl	8006c1a <memset>
 8006a32:	4b0d      	ldr	r3, [pc, #52]	; (8006a68 <std+0x58>)
 8006a34:	6263      	str	r3, [r4, #36]	; 0x24
 8006a36:	4b0d      	ldr	r3, [pc, #52]	; (8006a6c <std+0x5c>)
 8006a38:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a3a:	4b0d      	ldr	r3, [pc, #52]	; (8006a70 <std+0x60>)
 8006a3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a3e:	4b0d      	ldr	r3, [pc, #52]	; (8006a74 <std+0x64>)
 8006a40:	6323      	str	r3, [r4, #48]	; 0x30
 8006a42:	4b0d      	ldr	r3, [pc, #52]	; (8006a78 <std+0x68>)
 8006a44:	6224      	str	r4, [r4, #32]
 8006a46:	429c      	cmp	r4, r3
 8006a48:	d006      	beq.n	8006a58 <std+0x48>
 8006a4a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006a4e:	4294      	cmp	r4, r2
 8006a50:	d002      	beq.n	8006a58 <std+0x48>
 8006a52:	33d0      	adds	r3, #208	; 0xd0
 8006a54:	429c      	cmp	r4, r3
 8006a56:	d105      	bne.n	8006a64 <std+0x54>
 8006a58:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a60:	f000 b958 	b.w	8006d14 <__retarget_lock_init_recursive>
 8006a64:	bd10      	pop	{r4, pc}
 8006a66:	bf00      	nop
 8006a68:	08006b95 	.word	0x08006b95
 8006a6c:	08006bb7 	.word	0x08006bb7
 8006a70:	08006bef 	.word	0x08006bef
 8006a74:	08006c13 	.word	0x08006c13
 8006a78:	20000390 	.word	0x20000390

08006a7c <stdio_exit_handler>:
 8006a7c:	4a02      	ldr	r2, [pc, #8]	; (8006a88 <stdio_exit_handler+0xc>)
 8006a7e:	4903      	ldr	r1, [pc, #12]	; (8006a8c <stdio_exit_handler+0x10>)
 8006a80:	4803      	ldr	r0, [pc, #12]	; (8006a90 <stdio_exit_handler+0x14>)
 8006a82:	f000 b869 	b.w	8006b58 <_fwalk_sglue>
 8006a86:	bf00      	nop
 8006a88:	2000000c 	.word	0x2000000c
 8006a8c:	08008431 	.word	0x08008431
 8006a90:	20000018 	.word	0x20000018

08006a94 <cleanup_stdio>:
 8006a94:	6841      	ldr	r1, [r0, #4]
 8006a96:	4b0c      	ldr	r3, [pc, #48]	; (8006ac8 <cleanup_stdio+0x34>)
 8006a98:	4299      	cmp	r1, r3
 8006a9a:	b510      	push	{r4, lr}
 8006a9c:	4604      	mov	r4, r0
 8006a9e:	d001      	beq.n	8006aa4 <cleanup_stdio+0x10>
 8006aa0:	f001 fcc6 	bl	8008430 <_fflush_r>
 8006aa4:	68a1      	ldr	r1, [r4, #8]
 8006aa6:	4b09      	ldr	r3, [pc, #36]	; (8006acc <cleanup_stdio+0x38>)
 8006aa8:	4299      	cmp	r1, r3
 8006aaa:	d002      	beq.n	8006ab2 <cleanup_stdio+0x1e>
 8006aac:	4620      	mov	r0, r4
 8006aae:	f001 fcbf 	bl	8008430 <_fflush_r>
 8006ab2:	68e1      	ldr	r1, [r4, #12]
 8006ab4:	4b06      	ldr	r3, [pc, #24]	; (8006ad0 <cleanup_stdio+0x3c>)
 8006ab6:	4299      	cmp	r1, r3
 8006ab8:	d004      	beq.n	8006ac4 <cleanup_stdio+0x30>
 8006aba:	4620      	mov	r0, r4
 8006abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ac0:	f001 bcb6 	b.w	8008430 <_fflush_r>
 8006ac4:	bd10      	pop	{r4, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20000390 	.word	0x20000390
 8006acc:	200003f8 	.word	0x200003f8
 8006ad0:	20000460 	.word	0x20000460

08006ad4 <global_stdio_init.part.0>:
 8006ad4:	b510      	push	{r4, lr}
 8006ad6:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <global_stdio_init.part.0+0x30>)
 8006ad8:	4c0b      	ldr	r4, [pc, #44]	; (8006b08 <global_stdio_init.part.0+0x34>)
 8006ada:	4a0c      	ldr	r2, [pc, #48]	; (8006b0c <global_stdio_init.part.0+0x38>)
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	4620      	mov	r0, r4
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2104      	movs	r1, #4
 8006ae4:	f7ff ff94 	bl	8006a10 <std>
 8006ae8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006aec:	2201      	movs	r2, #1
 8006aee:	2109      	movs	r1, #9
 8006af0:	f7ff ff8e 	bl	8006a10 <std>
 8006af4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006af8:	2202      	movs	r2, #2
 8006afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006afe:	2112      	movs	r1, #18
 8006b00:	f7ff bf86 	b.w	8006a10 <std>
 8006b04:	200004c8 	.word	0x200004c8
 8006b08:	20000390 	.word	0x20000390
 8006b0c:	08006a7d 	.word	0x08006a7d

08006b10 <__sfp_lock_acquire>:
 8006b10:	4801      	ldr	r0, [pc, #4]	; (8006b18 <__sfp_lock_acquire+0x8>)
 8006b12:	f000 b900 	b.w	8006d16 <__retarget_lock_acquire_recursive>
 8006b16:	bf00      	nop
 8006b18:	200004d1 	.word	0x200004d1

08006b1c <__sfp_lock_release>:
 8006b1c:	4801      	ldr	r0, [pc, #4]	; (8006b24 <__sfp_lock_release+0x8>)
 8006b1e:	f000 b8fb 	b.w	8006d18 <__retarget_lock_release_recursive>
 8006b22:	bf00      	nop
 8006b24:	200004d1 	.word	0x200004d1

08006b28 <__sinit>:
 8006b28:	b510      	push	{r4, lr}
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	f7ff fff0 	bl	8006b10 <__sfp_lock_acquire>
 8006b30:	6a23      	ldr	r3, [r4, #32]
 8006b32:	b11b      	cbz	r3, 8006b3c <__sinit+0x14>
 8006b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b38:	f7ff bff0 	b.w	8006b1c <__sfp_lock_release>
 8006b3c:	4b04      	ldr	r3, [pc, #16]	; (8006b50 <__sinit+0x28>)
 8006b3e:	6223      	str	r3, [r4, #32]
 8006b40:	4b04      	ldr	r3, [pc, #16]	; (8006b54 <__sinit+0x2c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1f5      	bne.n	8006b34 <__sinit+0xc>
 8006b48:	f7ff ffc4 	bl	8006ad4 <global_stdio_init.part.0>
 8006b4c:	e7f2      	b.n	8006b34 <__sinit+0xc>
 8006b4e:	bf00      	nop
 8006b50:	08006a95 	.word	0x08006a95
 8006b54:	200004c8 	.word	0x200004c8

08006b58 <_fwalk_sglue>:
 8006b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b5c:	4607      	mov	r7, r0
 8006b5e:	4688      	mov	r8, r1
 8006b60:	4614      	mov	r4, r2
 8006b62:	2600      	movs	r6, #0
 8006b64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b68:	f1b9 0901 	subs.w	r9, r9, #1
 8006b6c:	d505      	bpl.n	8006b7a <_fwalk_sglue+0x22>
 8006b6e:	6824      	ldr	r4, [r4, #0]
 8006b70:	2c00      	cmp	r4, #0
 8006b72:	d1f7      	bne.n	8006b64 <_fwalk_sglue+0xc>
 8006b74:	4630      	mov	r0, r6
 8006b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b7a:	89ab      	ldrh	r3, [r5, #12]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d907      	bls.n	8006b90 <_fwalk_sglue+0x38>
 8006b80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b84:	3301      	adds	r3, #1
 8006b86:	d003      	beq.n	8006b90 <_fwalk_sglue+0x38>
 8006b88:	4629      	mov	r1, r5
 8006b8a:	4638      	mov	r0, r7
 8006b8c:	47c0      	blx	r8
 8006b8e:	4306      	orrs	r6, r0
 8006b90:	3568      	adds	r5, #104	; 0x68
 8006b92:	e7e9      	b.n	8006b68 <_fwalk_sglue+0x10>

08006b94 <__sread>:
 8006b94:	b510      	push	{r4, lr}
 8006b96:	460c      	mov	r4, r1
 8006b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b9c:	f000 f86c 	bl	8006c78 <_read_r>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	bfab      	itete	ge
 8006ba4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ba6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ba8:	181b      	addge	r3, r3, r0
 8006baa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bae:	bfac      	ite	ge
 8006bb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bb2:	81a3      	strhlt	r3, [r4, #12]
 8006bb4:	bd10      	pop	{r4, pc}

08006bb6 <__swrite>:
 8006bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bba:	461f      	mov	r7, r3
 8006bbc:	898b      	ldrh	r3, [r1, #12]
 8006bbe:	05db      	lsls	r3, r3, #23
 8006bc0:	4605      	mov	r5, r0
 8006bc2:	460c      	mov	r4, r1
 8006bc4:	4616      	mov	r6, r2
 8006bc6:	d505      	bpl.n	8006bd4 <__swrite+0x1e>
 8006bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bcc:	2302      	movs	r3, #2
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f000 f840 	bl	8006c54 <_lseek_r>
 8006bd4:	89a3      	ldrh	r3, [r4, #12]
 8006bd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bde:	81a3      	strh	r3, [r4, #12]
 8006be0:	4632      	mov	r2, r6
 8006be2:	463b      	mov	r3, r7
 8006be4:	4628      	mov	r0, r5
 8006be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bea:	f000 b857 	b.w	8006c9c <_write_r>

08006bee <__sseek>:
 8006bee:	b510      	push	{r4, lr}
 8006bf0:	460c      	mov	r4, r1
 8006bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bf6:	f000 f82d 	bl	8006c54 <_lseek_r>
 8006bfa:	1c43      	adds	r3, r0, #1
 8006bfc:	89a3      	ldrh	r3, [r4, #12]
 8006bfe:	bf15      	itete	ne
 8006c00:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c0a:	81a3      	strheq	r3, [r4, #12]
 8006c0c:	bf18      	it	ne
 8006c0e:	81a3      	strhne	r3, [r4, #12]
 8006c10:	bd10      	pop	{r4, pc}

08006c12 <__sclose>:
 8006c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c16:	f000 b80d 	b.w	8006c34 <_close_r>

08006c1a <memset>:
 8006c1a:	4402      	add	r2, r0
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d100      	bne.n	8006c24 <memset+0xa>
 8006c22:	4770      	bx	lr
 8006c24:	f803 1b01 	strb.w	r1, [r3], #1
 8006c28:	e7f9      	b.n	8006c1e <memset+0x4>
	...

08006c2c <_localeconv_r>:
 8006c2c:	4800      	ldr	r0, [pc, #0]	; (8006c30 <_localeconv_r+0x4>)
 8006c2e:	4770      	bx	lr
 8006c30:	20000158 	.word	0x20000158

08006c34 <_close_r>:
 8006c34:	b538      	push	{r3, r4, r5, lr}
 8006c36:	4d06      	ldr	r5, [pc, #24]	; (8006c50 <_close_r+0x1c>)
 8006c38:	2300      	movs	r3, #0
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	4608      	mov	r0, r1
 8006c3e:	602b      	str	r3, [r5, #0]
 8006c40:	f7fa feb3 	bl	80019aa <_close>
 8006c44:	1c43      	adds	r3, r0, #1
 8006c46:	d102      	bne.n	8006c4e <_close_r+0x1a>
 8006c48:	682b      	ldr	r3, [r5, #0]
 8006c4a:	b103      	cbz	r3, 8006c4e <_close_r+0x1a>
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	bd38      	pop	{r3, r4, r5, pc}
 8006c50:	200004cc 	.word	0x200004cc

08006c54 <_lseek_r>:
 8006c54:	b538      	push	{r3, r4, r5, lr}
 8006c56:	4d07      	ldr	r5, [pc, #28]	; (8006c74 <_lseek_r+0x20>)
 8006c58:	4604      	mov	r4, r0
 8006c5a:	4608      	mov	r0, r1
 8006c5c:	4611      	mov	r1, r2
 8006c5e:	2200      	movs	r2, #0
 8006c60:	602a      	str	r2, [r5, #0]
 8006c62:	461a      	mov	r2, r3
 8006c64:	f7fa fec8 	bl	80019f8 <_lseek>
 8006c68:	1c43      	adds	r3, r0, #1
 8006c6a:	d102      	bne.n	8006c72 <_lseek_r+0x1e>
 8006c6c:	682b      	ldr	r3, [r5, #0]
 8006c6e:	b103      	cbz	r3, 8006c72 <_lseek_r+0x1e>
 8006c70:	6023      	str	r3, [r4, #0]
 8006c72:	bd38      	pop	{r3, r4, r5, pc}
 8006c74:	200004cc 	.word	0x200004cc

08006c78 <_read_r>:
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	4d07      	ldr	r5, [pc, #28]	; (8006c98 <_read_r+0x20>)
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	4608      	mov	r0, r1
 8006c80:	4611      	mov	r1, r2
 8006c82:	2200      	movs	r2, #0
 8006c84:	602a      	str	r2, [r5, #0]
 8006c86:	461a      	mov	r2, r3
 8006c88:	f7fa fe56 	bl	8001938 <_read>
 8006c8c:	1c43      	adds	r3, r0, #1
 8006c8e:	d102      	bne.n	8006c96 <_read_r+0x1e>
 8006c90:	682b      	ldr	r3, [r5, #0]
 8006c92:	b103      	cbz	r3, 8006c96 <_read_r+0x1e>
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	bd38      	pop	{r3, r4, r5, pc}
 8006c98:	200004cc 	.word	0x200004cc

08006c9c <_write_r>:
 8006c9c:	b538      	push	{r3, r4, r5, lr}
 8006c9e:	4d07      	ldr	r5, [pc, #28]	; (8006cbc <_write_r+0x20>)
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	4608      	mov	r0, r1
 8006ca4:	4611      	mov	r1, r2
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	602a      	str	r2, [r5, #0]
 8006caa:	461a      	mov	r2, r3
 8006cac:	f7fa fe61 	bl	8001972 <_write>
 8006cb0:	1c43      	adds	r3, r0, #1
 8006cb2:	d102      	bne.n	8006cba <_write_r+0x1e>
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	b103      	cbz	r3, 8006cba <_write_r+0x1e>
 8006cb8:	6023      	str	r3, [r4, #0]
 8006cba:	bd38      	pop	{r3, r4, r5, pc}
 8006cbc:	200004cc 	.word	0x200004cc

08006cc0 <__errno>:
 8006cc0:	4b01      	ldr	r3, [pc, #4]	; (8006cc8 <__errno+0x8>)
 8006cc2:	6818      	ldr	r0, [r3, #0]
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	20000064 	.word	0x20000064

08006ccc <__libc_init_array>:
 8006ccc:	b570      	push	{r4, r5, r6, lr}
 8006cce:	4d0d      	ldr	r5, [pc, #52]	; (8006d04 <__libc_init_array+0x38>)
 8006cd0:	4c0d      	ldr	r4, [pc, #52]	; (8006d08 <__libc_init_array+0x3c>)
 8006cd2:	1b64      	subs	r4, r4, r5
 8006cd4:	10a4      	asrs	r4, r4, #2
 8006cd6:	2600      	movs	r6, #0
 8006cd8:	42a6      	cmp	r6, r4
 8006cda:	d109      	bne.n	8006cf0 <__libc_init_array+0x24>
 8006cdc:	4d0b      	ldr	r5, [pc, #44]	; (8006d0c <__libc_init_array+0x40>)
 8006cde:	4c0c      	ldr	r4, [pc, #48]	; (8006d10 <__libc_init_array+0x44>)
 8006ce0:	f001 feec 	bl	8008abc <_init>
 8006ce4:	1b64      	subs	r4, r4, r5
 8006ce6:	10a4      	asrs	r4, r4, #2
 8006ce8:	2600      	movs	r6, #0
 8006cea:	42a6      	cmp	r6, r4
 8006cec:	d105      	bne.n	8006cfa <__libc_init_array+0x2e>
 8006cee:	bd70      	pop	{r4, r5, r6, pc}
 8006cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cf4:	4798      	blx	r3
 8006cf6:	3601      	adds	r6, #1
 8006cf8:	e7ee      	b.n	8006cd8 <__libc_init_array+0xc>
 8006cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cfe:	4798      	blx	r3
 8006d00:	3601      	adds	r6, #1
 8006d02:	e7f2      	b.n	8006cea <__libc_init_array+0x1e>
 8006d04:	08008ee4 	.word	0x08008ee4
 8006d08:	08008ee4 	.word	0x08008ee4
 8006d0c:	08008ee4 	.word	0x08008ee4
 8006d10:	08008ee8 	.word	0x08008ee8

08006d14 <__retarget_lock_init_recursive>:
 8006d14:	4770      	bx	lr

08006d16 <__retarget_lock_acquire_recursive>:
 8006d16:	4770      	bx	lr

08006d18 <__retarget_lock_release_recursive>:
 8006d18:	4770      	bx	lr

08006d1a <memcpy>:
 8006d1a:	440a      	add	r2, r1
 8006d1c:	4291      	cmp	r1, r2
 8006d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d22:	d100      	bne.n	8006d26 <memcpy+0xc>
 8006d24:	4770      	bx	lr
 8006d26:	b510      	push	{r4, lr}
 8006d28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d30:	4291      	cmp	r1, r2
 8006d32:	d1f9      	bne.n	8006d28 <memcpy+0xe>
 8006d34:	bd10      	pop	{r4, pc}

08006d36 <quorem>:
 8006d36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3a:	6903      	ldr	r3, [r0, #16]
 8006d3c:	690c      	ldr	r4, [r1, #16]
 8006d3e:	42a3      	cmp	r3, r4
 8006d40:	4607      	mov	r7, r0
 8006d42:	db7e      	blt.n	8006e42 <quorem+0x10c>
 8006d44:	3c01      	subs	r4, #1
 8006d46:	f101 0814 	add.w	r8, r1, #20
 8006d4a:	f100 0514 	add.w	r5, r0, #20
 8006d4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d52:	9301      	str	r3, [sp, #4]
 8006d54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d68:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d6c:	d331      	bcc.n	8006dd2 <quorem+0x9c>
 8006d6e:	f04f 0e00 	mov.w	lr, #0
 8006d72:	4640      	mov	r0, r8
 8006d74:	46ac      	mov	ip, r5
 8006d76:	46f2      	mov	sl, lr
 8006d78:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d7c:	b293      	uxth	r3, r2
 8006d7e:	fb06 e303 	mla	r3, r6, r3, lr
 8006d82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d86:	0c1a      	lsrs	r2, r3, #16
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	ebaa 0303 	sub.w	r3, sl, r3
 8006d8e:	f8dc a000 	ldr.w	sl, [ip]
 8006d92:	fa13 f38a 	uxtah	r3, r3, sl
 8006d96:	fb06 220e 	mla	r2, r6, lr, r2
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	9b00      	ldr	r3, [sp, #0]
 8006d9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006da2:	b292      	uxth	r2, r2
 8006da4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006da8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006dac:	f8bd 3000 	ldrh.w	r3, [sp]
 8006db0:	4581      	cmp	r9, r0
 8006db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006db6:	f84c 3b04 	str.w	r3, [ip], #4
 8006dba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006dbe:	d2db      	bcs.n	8006d78 <quorem+0x42>
 8006dc0:	f855 300b 	ldr.w	r3, [r5, fp]
 8006dc4:	b92b      	cbnz	r3, 8006dd2 <quorem+0x9c>
 8006dc6:	9b01      	ldr	r3, [sp, #4]
 8006dc8:	3b04      	subs	r3, #4
 8006dca:	429d      	cmp	r5, r3
 8006dcc:	461a      	mov	r2, r3
 8006dce:	d32c      	bcc.n	8006e2a <quorem+0xf4>
 8006dd0:	613c      	str	r4, [r7, #16]
 8006dd2:	4638      	mov	r0, r7
 8006dd4:	f001 f9a6 	bl	8008124 <__mcmp>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	db22      	blt.n	8006e22 <quorem+0xec>
 8006ddc:	3601      	adds	r6, #1
 8006dde:	4629      	mov	r1, r5
 8006de0:	2000      	movs	r0, #0
 8006de2:	f858 2b04 	ldr.w	r2, [r8], #4
 8006de6:	f8d1 c000 	ldr.w	ip, [r1]
 8006dea:	b293      	uxth	r3, r2
 8006dec:	1ac3      	subs	r3, r0, r3
 8006dee:	0c12      	lsrs	r2, r2, #16
 8006df0:	fa13 f38c 	uxtah	r3, r3, ip
 8006df4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006df8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e02:	45c1      	cmp	r9, r8
 8006e04:	f841 3b04 	str.w	r3, [r1], #4
 8006e08:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e0c:	d2e9      	bcs.n	8006de2 <quorem+0xac>
 8006e0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e16:	b922      	cbnz	r2, 8006e22 <quorem+0xec>
 8006e18:	3b04      	subs	r3, #4
 8006e1a:	429d      	cmp	r5, r3
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	d30a      	bcc.n	8006e36 <quorem+0x100>
 8006e20:	613c      	str	r4, [r7, #16]
 8006e22:	4630      	mov	r0, r6
 8006e24:	b003      	add	sp, #12
 8006e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e2a:	6812      	ldr	r2, [r2, #0]
 8006e2c:	3b04      	subs	r3, #4
 8006e2e:	2a00      	cmp	r2, #0
 8006e30:	d1ce      	bne.n	8006dd0 <quorem+0x9a>
 8006e32:	3c01      	subs	r4, #1
 8006e34:	e7c9      	b.n	8006dca <quorem+0x94>
 8006e36:	6812      	ldr	r2, [r2, #0]
 8006e38:	3b04      	subs	r3, #4
 8006e3a:	2a00      	cmp	r2, #0
 8006e3c:	d1f0      	bne.n	8006e20 <quorem+0xea>
 8006e3e:	3c01      	subs	r4, #1
 8006e40:	e7eb      	b.n	8006e1a <quorem+0xe4>
 8006e42:	2000      	movs	r0, #0
 8006e44:	e7ee      	b.n	8006e24 <quorem+0xee>
	...

08006e48 <_dtoa_r>:
 8006e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4c:	ed2d 8b04 	vpush	{d8-d9}
 8006e50:	69c5      	ldr	r5, [r0, #28]
 8006e52:	b093      	sub	sp, #76	; 0x4c
 8006e54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006e58:	ec57 6b10 	vmov	r6, r7, d0
 8006e5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006e60:	9107      	str	r1, [sp, #28]
 8006e62:	4604      	mov	r4, r0
 8006e64:	920a      	str	r2, [sp, #40]	; 0x28
 8006e66:	930d      	str	r3, [sp, #52]	; 0x34
 8006e68:	b975      	cbnz	r5, 8006e88 <_dtoa_r+0x40>
 8006e6a:	2010      	movs	r0, #16
 8006e6c:	f000 fe2a 	bl	8007ac4 <malloc>
 8006e70:	4602      	mov	r2, r0
 8006e72:	61e0      	str	r0, [r4, #28]
 8006e74:	b920      	cbnz	r0, 8006e80 <_dtoa_r+0x38>
 8006e76:	4bae      	ldr	r3, [pc, #696]	; (8007130 <_dtoa_r+0x2e8>)
 8006e78:	21ef      	movs	r1, #239	; 0xef
 8006e7a:	48ae      	ldr	r0, [pc, #696]	; (8007134 <_dtoa_r+0x2ec>)
 8006e7c:	f001 fb10 	bl	80084a0 <__assert_func>
 8006e80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006e84:	6005      	str	r5, [r0, #0]
 8006e86:	60c5      	str	r5, [r0, #12]
 8006e88:	69e3      	ldr	r3, [r4, #28]
 8006e8a:	6819      	ldr	r1, [r3, #0]
 8006e8c:	b151      	cbz	r1, 8006ea4 <_dtoa_r+0x5c>
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	604a      	str	r2, [r1, #4]
 8006e92:	2301      	movs	r3, #1
 8006e94:	4093      	lsls	r3, r2
 8006e96:	608b      	str	r3, [r1, #8]
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f000 ff07 	bl	8007cac <_Bfree>
 8006e9e:	69e3      	ldr	r3, [r4, #28]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	1e3b      	subs	r3, r7, #0
 8006ea6:	bfbb      	ittet	lt
 8006ea8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006eac:	9303      	strlt	r3, [sp, #12]
 8006eae:	2300      	movge	r3, #0
 8006eb0:	2201      	movlt	r2, #1
 8006eb2:	bfac      	ite	ge
 8006eb4:	f8c8 3000 	strge.w	r3, [r8]
 8006eb8:	f8c8 2000 	strlt.w	r2, [r8]
 8006ebc:	4b9e      	ldr	r3, [pc, #632]	; (8007138 <_dtoa_r+0x2f0>)
 8006ebe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006ec2:	ea33 0308 	bics.w	r3, r3, r8
 8006ec6:	d11b      	bne.n	8006f00 <_dtoa_r+0xb8>
 8006ec8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006eca:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006ed4:	4333      	orrs	r3, r6
 8006ed6:	f000 8593 	beq.w	8007a00 <_dtoa_r+0xbb8>
 8006eda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006edc:	b963      	cbnz	r3, 8006ef8 <_dtoa_r+0xb0>
 8006ede:	4b97      	ldr	r3, [pc, #604]	; (800713c <_dtoa_r+0x2f4>)
 8006ee0:	e027      	b.n	8006f32 <_dtoa_r+0xea>
 8006ee2:	4b97      	ldr	r3, [pc, #604]	; (8007140 <_dtoa_r+0x2f8>)
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	3308      	adds	r3, #8
 8006ee8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	9800      	ldr	r0, [sp, #0]
 8006eee:	b013      	add	sp, #76	; 0x4c
 8006ef0:	ecbd 8b04 	vpop	{d8-d9}
 8006ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef8:	4b90      	ldr	r3, [pc, #576]	; (800713c <_dtoa_r+0x2f4>)
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	3303      	adds	r3, #3
 8006efe:	e7f3      	b.n	8006ee8 <_dtoa_r+0xa0>
 8006f00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f04:	2200      	movs	r2, #0
 8006f06:	ec51 0b17 	vmov	r0, r1, d7
 8006f0a:	eeb0 8a47 	vmov.f32	s16, s14
 8006f0e:	eef0 8a67 	vmov.f32	s17, s15
 8006f12:	2300      	movs	r3, #0
 8006f14:	f7f9 fe00 	bl	8000b18 <__aeabi_dcmpeq>
 8006f18:	4681      	mov	r9, r0
 8006f1a:	b160      	cbz	r0, 8006f36 <_dtoa_r+0xee>
 8006f1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f1e:	2301      	movs	r3, #1
 8006f20:	6013      	str	r3, [r2, #0]
 8006f22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 8568 	beq.w	80079fa <_dtoa_r+0xbb2>
 8006f2a:	4b86      	ldr	r3, [pc, #536]	; (8007144 <_dtoa_r+0x2fc>)
 8006f2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	3b01      	subs	r3, #1
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	e7da      	b.n	8006eec <_dtoa_r+0xa4>
 8006f36:	aa10      	add	r2, sp, #64	; 0x40
 8006f38:	a911      	add	r1, sp, #68	; 0x44
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	eeb0 0a48 	vmov.f32	s0, s16
 8006f40:	eef0 0a68 	vmov.f32	s1, s17
 8006f44:	f001 f994 	bl	8008270 <__d2b>
 8006f48:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006f4c:	4682      	mov	sl, r0
 8006f4e:	2d00      	cmp	r5, #0
 8006f50:	d07f      	beq.n	8007052 <_dtoa_r+0x20a>
 8006f52:	ee18 3a90 	vmov	r3, s17
 8006f56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f5a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006f5e:	ec51 0b18 	vmov	r0, r1, d8
 8006f62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006f66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006f6a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006f6e:	4619      	mov	r1, r3
 8006f70:	2200      	movs	r2, #0
 8006f72:	4b75      	ldr	r3, [pc, #468]	; (8007148 <_dtoa_r+0x300>)
 8006f74:	f7f9 f9b0 	bl	80002d8 <__aeabi_dsub>
 8006f78:	a367      	add	r3, pc, #412	; (adr r3, 8007118 <_dtoa_r+0x2d0>)
 8006f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7e:	f7f9 fb63 	bl	8000648 <__aeabi_dmul>
 8006f82:	a367      	add	r3, pc, #412	; (adr r3, 8007120 <_dtoa_r+0x2d8>)
 8006f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f88:	f7f9 f9a8 	bl	80002dc <__adddf3>
 8006f8c:	4606      	mov	r6, r0
 8006f8e:	4628      	mov	r0, r5
 8006f90:	460f      	mov	r7, r1
 8006f92:	f7f9 faef 	bl	8000574 <__aeabi_i2d>
 8006f96:	a364      	add	r3, pc, #400	; (adr r3, 8007128 <_dtoa_r+0x2e0>)
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	f7f9 fb54 	bl	8000648 <__aeabi_dmul>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4630      	mov	r0, r6
 8006fa6:	4639      	mov	r1, r7
 8006fa8:	f7f9 f998 	bl	80002dc <__adddf3>
 8006fac:	4606      	mov	r6, r0
 8006fae:	460f      	mov	r7, r1
 8006fb0:	f7f9 fdfa 	bl	8000ba8 <__aeabi_d2iz>
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	4683      	mov	fp, r0
 8006fb8:	2300      	movs	r3, #0
 8006fba:	4630      	mov	r0, r6
 8006fbc:	4639      	mov	r1, r7
 8006fbe:	f7f9 fdb5 	bl	8000b2c <__aeabi_dcmplt>
 8006fc2:	b148      	cbz	r0, 8006fd8 <_dtoa_r+0x190>
 8006fc4:	4658      	mov	r0, fp
 8006fc6:	f7f9 fad5 	bl	8000574 <__aeabi_i2d>
 8006fca:	4632      	mov	r2, r6
 8006fcc:	463b      	mov	r3, r7
 8006fce:	f7f9 fda3 	bl	8000b18 <__aeabi_dcmpeq>
 8006fd2:	b908      	cbnz	r0, 8006fd8 <_dtoa_r+0x190>
 8006fd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006fd8:	f1bb 0f16 	cmp.w	fp, #22
 8006fdc:	d857      	bhi.n	800708e <_dtoa_r+0x246>
 8006fde:	4b5b      	ldr	r3, [pc, #364]	; (800714c <_dtoa_r+0x304>)
 8006fe0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe8:	ec51 0b18 	vmov	r0, r1, d8
 8006fec:	f7f9 fd9e 	bl	8000b2c <__aeabi_dcmplt>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	d04e      	beq.n	8007092 <_dtoa_r+0x24a>
 8006ff4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	930c      	str	r3, [sp, #48]	; 0x30
 8006ffc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ffe:	1b5b      	subs	r3, r3, r5
 8007000:	1e5a      	subs	r2, r3, #1
 8007002:	bf45      	ittet	mi
 8007004:	f1c3 0301 	rsbmi	r3, r3, #1
 8007008:	9305      	strmi	r3, [sp, #20]
 800700a:	2300      	movpl	r3, #0
 800700c:	2300      	movmi	r3, #0
 800700e:	9206      	str	r2, [sp, #24]
 8007010:	bf54      	ite	pl
 8007012:	9305      	strpl	r3, [sp, #20]
 8007014:	9306      	strmi	r3, [sp, #24]
 8007016:	f1bb 0f00 	cmp.w	fp, #0
 800701a:	db3c      	blt.n	8007096 <_dtoa_r+0x24e>
 800701c:	9b06      	ldr	r3, [sp, #24]
 800701e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007022:	445b      	add	r3, fp
 8007024:	9306      	str	r3, [sp, #24]
 8007026:	2300      	movs	r3, #0
 8007028:	9308      	str	r3, [sp, #32]
 800702a:	9b07      	ldr	r3, [sp, #28]
 800702c:	2b09      	cmp	r3, #9
 800702e:	d868      	bhi.n	8007102 <_dtoa_r+0x2ba>
 8007030:	2b05      	cmp	r3, #5
 8007032:	bfc4      	itt	gt
 8007034:	3b04      	subgt	r3, #4
 8007036:	9307      	strgt	r3, [sp, #28]
 8007038:	9b07      	ldr	r3, [sp, #28]
 800703a:	f1a3 0302 	sub.w	r3, r3, #2
 800703e:	bfcc      	ite	gt
 8007040:	2500      	movgt	r5, #0
 8007042:	2501      	movle	r5, #1
 8007044:	2b03      	cmp	r3, #3
 8007046:	f200 8085 	bhi.w	8007154 <_dtoa_r+0x30c>
 800704a:	e8df f003 	tbb	[pc, r3]
 800704e:	3b2e      	.short	0x3b2e
 8007050:	5839      	.short	0x5839
 8007052:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007056:	441d      	add	r5, r3
 8007058:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800705c:	2b20      	cmp	r3, #32
 800705e:	bfc1      	itttt	gt
 8007060:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007064:	fa08 f803 	lslgt.w	r8, r8, r3
 8007068:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800706c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007070:	bfd6      	itet	le
 8007072:	f1c3 0320 	rsble	r3, r3, #32
 8007076:	ea48 0003 	orrgt.w	r0, r8, r3
 800707a:	fa06 f003 	lslle.w	r0, r6, r3
 800707e:	f7f9 fa69 	bl	8000554 <__aeabi_ui2d>
 8007082:	2201      	movs	r2, #1
 8007084:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007088:	3d01      	subs	r5, #1
 800708a:	920e      	str	r2, [sp, #56]	; 0x38
 800708c:	e76f      	b.n	8006f6e <_dtoa_r+0x126>
 800708e:	2301      	movs	r3, #1
 8007090:	e7b3      	b.n	8006ffa <_dtoa_r+0x1b2>
 8007092:	900c      	str	r0, [sp, #48]	; 0x30
 8007094:	e7b2      	b.n	8006ffc <_dtoa_r+0x1b4>
 8007096:	9b05      	ldr	r3, [sp, #20]
 8007098:	eba3 030b 	sub.w	r3, r3, fp
 800709c:	9305      	str	r3, [sp, #20]
 800709e:	f1cb 0300 	rsb	r3, fp, #0
 80070a2:	9308      	str	r3, [sp, #32]
 80070a4:	2300      	movs	r3, #0
 80070a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80070a8:	e7bf      	b.n	800702a <_dtoa_r+0x1e2>
 80070aa:	2300      	movs	r3, #0
 80070ac:	9309      	str	r3, [sp, #36]	; 0x24
 80070ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	dc52      	bgt.n	800715a <_dtoa_r+0x312>
 80070b4:	2301      	movs	r3, #1
 80070b6:	9301      	str	r3, [sp, #4]
 80070b8:	9304      	str	r3, [sp, #16]
 80070ba:	461a      	mov	r2, r3
 80070bc:	920a      	str	r2, [sp, #40]	; 0x28
 80070be:	e00b      	b.n	80070d8 <_dtoa_r+0x290>
 80070c0:	2301      	movs	r3, #1
 80070c2:	e7f3      	b.n	80070ac <_dtoa_r+0x264>
 80070c4:	2300      	movs	r3, #0
 80070c6:	9309      	str	r3, [sp, #36]	; 0x24
 80070c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ca:	445b      	add	r3, fp
 80070cc:	9301      	str	r3, [sp, #4]
 80070ce:	3301      	adds	r3, #1
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	9304      	str	r3, [sp, #16]
 80070d4:	bfb8      	it	lt
 80070d6:	2301      	movlt	r3, #1
 80070d8:	69e0      	ldr	r0, [r4, #28]
 80070da:	2100      	movs	r1, #0
 80070dc:	2204      	movs	r2, #4
 80070de:	f102 0614 	add.w	r6, r2, #20
 80070e2:	429e      	cmp	r6, r3
 80070e4:	d93d      	bls.n	8007162 <_dtoa_r+0x31a>
 80070e6:	6041      	str	r1, [r0, #4]
 80070e8:	4620      	mov	r0, r4
 80070ea:	f000 fd9f 	bl	8007c2c <_Balloc>
 80070ee:	9000      	str	r0, [sp, #0]
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d139      	bne.n	8007168 <_dtoa_r+0x320>
 80070f4:	4b16      	ldr	r3, [pc, #88]	; (8007150 <_dtoa_r+0x308>)
 80070f6:	4602      	mov	r2, r0
 80070f8:	f240 11af 	movw	r1, #431	; 0x1af
 80070fc:	e6bd      	b.n	8006e7a <_dtoa_r+0x32>
 80070fe:	2301      	movs	r3, #1
 8007100:	e7e1      	b.n	80070c6 <_dtoa_r+0x27e>
 8007102:	2501      	movs	r5, #1
 8007104:	2300      	movs	r3, #0
 8007106:	9307      	str	r3, [sp, #28]
 8007108:	9509      	str	r5, [sp, #36]	; 0x24
 800710a:	f04f 33ff 	mov.w	r3, #4294967295
 800710e:	9301      	str	r3, [sp, #4]
 8007110:	9304      	str	r3, [sp, #16]
 8007112:	2200      	movs	r2, #0
 8007114:	2312      	movs	r3, #18
 8007116:	e7d1      	b.n	80070bc <_dtoa_r+0x274>
 8007118:	636f4361 	.word	0x636f4361
 800711c:	3fd287a7 	.word	0x3fd287a7
 8007120:	8b60c8b3 	.word	0x8b60c8b3
 8007124:	3fc68a28 	.word	0x3fc68a28
 8007128:	509f79fb 	.word	0x509f79fb
 800712c:	3fd34413 	.word	0x3fd34413
 8007130:	08008ba9 	.word	0x08008ba9
 8007134:	08008bc0 	.word	0x08008bc0
 8007138:	7ff00000 	.word	0x7ff00000
 800713c:	08008ba5 	.word	0x08008ba5
 8007140:	08008b9c 	.word	0x08008b9c
 8007144:	08008b79 	.word	0x08008b79
 8007148:	3ff80000 	.word	0x3ff80000
 800714c:	08008cb0 	.word	0x08008cb0
 8007150:	08008c18 	.word	0x08008c18
 8007154:	2301      	movs	r3, #1
 8007156:	9309      	str	r3, [sp, #36]	; 0x24
 8007158:	e7d7      	b.n	800710a <_dtoa_r+0x2c2>
 800715a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800715c:	9301      	str	r3, [sp, #4]
 800715e:	9304      	str	r3, [sp, #16]
 8007160:	e7ba      	b.n	80070d8 <_dtoa_r+0x290>
 8007162:	3101      	adds	r1, #1
 8007164:	0052      	lsls	r2, r2, #1
 8007166:	e7ba      	b.n	80070de <_dtoa_r+0x296>
 8007168:	69e3      	ldr	r3, [r4, #28]
 800716a:	9a00      	ldr	r2, [sp, #0]
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	9b04      	ldr	r3, [sp, #16]
 8007170:	2b0e      	cmp	r3, #14
 8007172:	f200 80a8 	bhi.w	80072c6 <_dtoa_r+0x47e>
 8007176:	2d00      	cmp	r5, #0
 8007178:	f000 80a5 	beq.w	80072c6 <_dtoa_r+0x47e>
 800717c:	f1bb 0f00 	cmp.w	fp, #0
 8007180:	dd38      	ble.n	80071f4 <_dtoa_r+0x3ac>
 8007182:	4bc0      	ldr	r3, [pc, #768]	; (8007484 <_dtoa_r+0x63c>)
 8007184:	f00b 020f 	and.w	r2, fp, #15
 8007188:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800718c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007190:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007194:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007198:	d019      	beq.n	80071ce <_dtoa_r+0x386>
 800719a:	4bbb      	ldr	r3, [pc, #748]	; (8007488 <_dtoa_r+0x640>)
 800719c:	ec51 0b18 	vmov	r0, r1, d8
 80071a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071a4:	f7f9 fb7a 	bl	800089c <__aeabi_ddiv>
 80071a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071ac:	f008 080f 	and.w	r8, r8, #15
 80071b0:	2503      	movs	r5, #3
 80071b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007488 <_dtoa_r+0x640>
 80071b6:	f1b8 0f00 	cmp.w	r8, #0
 80071ba:	d10a      	bne.n	80071d2 <_dtoa_r+0x38a>
 80071bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071c0:	4632      	mov	r2, r6
 80071c2:	463b      	mov	r3, r7
 80071c4:	f7f9 fb6a 	bl	800089c <__aeabi_ddiv>
 80071c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071cc:	e02b      	b.n	8007226 <_dtoa_r+0x3de>
 80071ce:	2502      	movs	r5, #2
 80071d0:	e7ef      	b.n	80071b2 <_dtoa_r+0x36a>
 80071d2:	f018 0f01 	tst.w	r8, #1
 80071d6:	d008      	beq.n	80071ea <_dtoa_r+0x3a2>
 80071d8:	4630      	mov	r0, r6
 80071da:	4639      	mov	r1, r7
 80071dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80071e0:	f7f9 fa32 	bl	8000648 <__aeabi_dmul>
 80071e4:	3501      	adds	r5, #1
 80071e6:	4606      	mov	r6, r0
 80071e8:	460f      	mov	r7, r1
 80071ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80071ee:	f109 0908 	add.w	r9, r9, #8
 80071f2:	e7e0      	b.n	80071b6 <_dtoa_r+0x36e>
 80071f4:	f000 809f 	beq.w	8007336 <_dtoa_r+0x4ee>
 80071f8:	f1cb 0600 	rsb	r6, fp, #0
 80071fc:	4ba1      	ldr	r3, [pc, #644]	; (8007484 <_dtoa_r+0x63c>)
 80071fe:	4fa2      	ldr	r7, [pc, #648]	; (8007488 <_dtoa_r+0x640>)
 8007200:	f006 020f 	and.w	r2, r6, #15
 8007204:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	ec51 0b18 	vmov	r0, r1, d8
 8007210:	f7f9 fa1a 	bl	8000648 <__aeabi_dmul>
 8007214:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007218:	1136      	asrs	r6, r6, #4
 800721a:	2300      	movs	r3, #0
 800721c:	2502      	movs	r5, #2
 800721e:	2e00      	cmp	r6, #0
 8007220:	d17e      	bne.n	8007320 <_dtoa_r+0x4d8>
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1d0      	bne.n	80071c8 <_dtoa_r+0x380>
 8007226:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007228:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 8084 	beq.w	800733a <_dtoa_r+0x4f2>
 8007232:	4b96      	ldr	r3, [pc, #600]	; (800748c <_dtoa_r+0x644>)
 8007234:	2200      	movs	r2, #0
 8007236:	4640      	mov	r0, r8
 8007238:	4649      	mov	r1, r9
 800723a:	f7f9 fc77 	bl	8000b2c <__aeabi_dcmplt>
 800723e:	2800      	cmp	r0, #0
 8007240:	d07b      	beq.n	800733a <_dtoa_r+0x4f2>
 8007242:	9b04      	ldr	r3, [sp, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d078      	beq.n	800733a <_dtoa_r+0x4f2>
 8007248:	9b01      	ldr	r3, [sp, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	dd39      	ble.n	80072c2 <_dtoa_r+0x47a>
 800724e:	4b90      	ldr	r3, [pc, #576]	; (8007490 <_dtoa_r+0x648>)
 8007250:	2200      	movs	r2, #0
 8007252:	4640      	mov	r0, r8
 8007254:	4649      	mov	r1, r9
 8007256:	f7f9 f9f7 	bl	8000648 <__aeabi_dmul>
 800725a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800725e:	9e01      	ldr	r6, [sp, #4]
 8007260:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007264:	3501      	adds	r5, #1
 8007266:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800726a:	4628      	mov	r0, r5
 800726c:	f7f9 f982 	bl	8000574 <__aeabi_i2d>
 8007270:	4642      	mov	r2, r8
 8007272:	464b      	mov	r3, r9
 8007274:	f7f9 f9e8 	bl	8000648 <__aeabi_dmul>
 8007278:	4b86      	ldr	r3, [pc, #536]	; (8007494 <_dtoa_r+0x64c>)
 800727a:	2200      	movs	r2, #0
 800727c:	f7f9 f82e 	bl	80002dc <__adddf3>
 8007280:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007288:	9303      	str	r3, [sp, #12]
 800728a:	2e00      	cmp	r6, #0
 800728c:	d158      	bne.n	8007340 <_dtoa_r+0x4f8>
 800728e:	4b82      	ldr	r3, [pc, #520]	; (8007498 <_dtoa_r+0x650>)
 8007290:	2200      	movs	r2, #0
 8007292:	4640      	mov	r0, r8
 8007294:	4649      	mov	r1, r9
 8007296:	f7f9 f81f 	bl	80002d8 <__aeabi_dsub>
 800729a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800729e:	4680      	mov	r8, r0
 80072a0:	4689      	mov	r9, r1
 80072a2:	f7f9 fc61 	bl	8000b68 <__aeabi_dcmpgt>
 80072a6:	2800      	cmp	r0, #0
 80072a8:	f040 8296 	bne.w	80077d8 <_dtoa_r+0x990>
 80072ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80072b0:	4640      	mov	r0, r8
 80072b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072b6:	4649      	mov	r1, r9
 80072b8:	f7f9 fc38 	bl	8000b2c <__aeabi_dcmplt>
 80072bc:	2800      	cmp	r0, #0
 80072be:	f040 8289 	bne.w	80077d4 <_dtoa_r+0x98c>
 80072c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80072c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f2c0 814e 	blt.w	800756a <_dtoa_r+0x722>
 80072ce:	f1bb 0f0e 	cmp.w	fp, #14
 80072d2:	f300 814a 	bgt.w	800756a <_dtoa_r+0x722>
 80072d6:	4b6b      	ldr	r3, [pc, #428]	; (8007484 <_dtoa_r+0x63c>)
 80072d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80072dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80072e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f280 80dc 	bge.w	80074a0 <_dtoa_r+0x658>
 80072e8:	9b04      	ldr	r3, [sp, #16]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f300 80d8 	bgt.w	80074a0 <_dtoa_r+0x658>
 80072f0:	f040 826f 	bne.w	80077d2 <_dtoa_r+0x98a>
 80072f4:	4b68      	ldr	r3, [pc, #416]	; (8007498 <_dtoa_r+0x650>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	4640      	mov	r0, r8
 80072fa:	4649      	mov	r1, r9
 80072fc:	f7f9 f9a4 	bl	8000648 <__aeabi_dmul>
 8007300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007304:	f7f9 fc26 	bl	8000b54 <__aeabi_dcmpge>
 8007308:	9e04      	ldr	r6, [sp, #16]
 800730a:	4637      	mov	r7, r6
 800730c:	2800      	cmp	r0, #0
 800730e:	f040 8245 	bne.w	800779c <_dtoa_r+0x954>
 8007312:	9d00      	ldr	r5, [sp, #0]
 8007314:	2331      	movs	r3, #49	; 0x31
 8007316:	f805 3b01 	strb.w	r3, [r5], #1
 800731a:	f10b 0b01 	add.w	fp, fp, #1
 800731e:	e241      	b.n	80077a4 <_dtoa_r+0x95c>
 8007320:	07f2      	lsls	r2, r6, #31
 8007322:	d505      	bpl.n	8007330 <_dtoa_r+0x4e8>
 8007324:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007328:	f7f9 f98e 	bl	8000648 <__aeabi_dmul>
 800732c:	3501      	adds	r5, #1
 800732e:	2301      	movs	r3, #1
 8007330:	1076      	asrs	r6, r6, #1
 8007332:	3708      	adds	r7, #8
 8007334:	e773      	b.n	800721e <_dtoa_r+0x3d6>
 8007336:	2502      	movs	r5, #2
 8007338:	e775      	b.n	8007226 <_dtoa_r+0x3de>
 800733a:	9e04      	ldr	r6, [sp, #16]
 800733c:	465f      	mov	r7, fp
 800733e:	e792      	b.n	8007266 <_dtoa_r+0x41e>
 8007340:	9900      	ldr	r1, [sp, #0]
 8007342:	4b50      	ldr	r3, [pc, #320]	; (8007484 <_dtoa_r+0x63c>)
 8007344:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007348:	4431      	add	r1, r6
 800734a:	9102      	str	r1, [sp, #8]
 800734c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800734e:	eeb0 9a47 	vmov.f32	s18, s14
 8007352:	eef0 9a67 	vmov.f32	s19, s15
 8007356:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800735a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800735e:	2900      	cmp	r1, #0
 8007360:	d044      	beq.n	80073ec <_dtoa_r+0x5a4>
 8007362:	494e      	ldr	r1, [pc, #312]	; (800749c <_dtoa_r+0x654>)
 8007364:	2000      	movs	r0, #0
 8007366:	f7f9 fa99 	bl	800089c <__aeabi_ddiv>
 800736a:	ec53 2b19 	vmov	r2, r3, d9
 800736e:	f7f8 ffb3 	bl	80002d8 <__aeabi_dsub>
 8007372:	9d00      	ldr	r5, [sp, #0]
 8007374:	ec41 0b19 	vmov	d9, r0, r1
 8007378:	4649      	mov	r1, r9
 800737a:	4640      	mov	r0, r8
 800737c:	f7f9 fc14 	bl	8000ba8 <__aeabi_d2iz>
 8007380:	4606      	mov	r6, r0
 8007382:	f7f9 f8f7 	bl	8000574 <__aeabi_i2d>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	4640      	mov	r0, r8
 800738c:	4649      	mov	r1, r9
 800738e:	f7f8 ffa3 	bl	80002d8 <__aeabi_dsub>
 8007392:	3630      	adds	r6, #48	; 0x30
 8007394:	f805 6b01 	strb.w	r6, [r5], #1
 8007398:	ec53 2b19 	vmov	r2, r3, d9
 800739c:	4680      	mov	r8, r0
 800739e:	4689      	mov	r9, r1
 80073a0:	f7f9 fbc4 	bl	8000b2c <__aeabi_dcmplt>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d164      	bne.n	8007472 <_dtoa_r+0x62a>
 80073a8:	4642      	mov	r2, r8
 80073aa:	464b      	mov	r3, r9
 80073ac:	4937      	ldr	r1, [pc, #220]	; (800748c <_dtoa_r+0x644>)
 80073ae:	2000      	movs	r0, #0
 80073b0:	f7f8 ff92 	bl	80002d8 <__aeabi_dsub>
 80073b4:	ec53 2b19 	vmov	r2, r3, d9
 80073b8:	f7f9 fbb8 	bl	8000b2c <__aeabi_dcmplt>
 80073bc:	2800      	cmp	r0, #0
 80073be:	f040 80b6 	bne.w	800752e <_dtoa_r+0x6e6>
 80073c2:	9b02      	ldr	r3, [sp, #8]
 80073c4:	429d      	cmp	r5, r3
 80073c6:	f43f af7c 	beq.w	80072c2 <_dtoa_r+0x47a>
 80073ca:	4b31      	ldr	r3, [pc, #196]	; (8007490 <_dtoa_r+0x648>)
 80073cc:	ec51 0b19 	vmov	r0, r1, d9
 80073d0:	2200      	movs	r2, #0
 80073d2:	f7f9 f939 	bl	8000648 <__aeabi_dmul>
 80073d6:	4b2e      	ldr	r3, [pc, #184]	; (8007490 <_dtoa_r+0x648>)
 80073d8:	ec41 0b19 	vmov	d9, r0, r1
 80073dc:	2200      	movs	r2, #0
 80073de:	4640      	mov	r0, r8
 80073e0:	4649      	mov	r1, r9
 80073e2:	f7f9 f931 	bl	8000648 <__aeabi_dmul>
 80073e6:	4680      	mov	r8, r0
 80073e8:	4689      	mov	r9, r1
 80073ea:	e7c5      	b.n	8007378 <_dtoa_r+0x530>
 80073ec:	ec51 0b17 	vmov	r0, r1, d7
 80073f0:	f7f9 f92a 	bl	8000648 <__aeabi_dmul>
 80073f4:	9b02      	ldr	r3, [sp, #8]
 80073f6:	9d00      	ldr	r5, [sp, #0]
 80073f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80073fa:	ec41 0b19 	vmov	d9, r0, r1
 80073fe:	4649      	mov	r1, r9
 8007400:	4640      	mov	r0, r8
 8007402:	f7f9 fbd1 	bl	8000ba8 <__aeabi_d2iz>
 8007406:	4606      	mov	r6, r0
 8007408:	f7f9 f8b4 	bl	8000574 <__aeabi_i2d>
 800740c:	3630      	adds	r6, #48	; 0x30
 800740e:	4602      	mov	r2, r0
 8007410:	460b      	mov	r3, r1
 8007412:	4640      	mov	r0, r8
 8007414:	4649      	mov	r1, r9
 8007416:	f7f8 ff5f 	bl	80002d8 <__aeabi_dsub>
 800741a:	f805 6b01 	strb.w	r6, [r5], #1
 800741e:	9b02      	ldr	r3, [sp, #8]
 8007420:	429d      	cmp	r5, r3
 8007422:	4680      	mov	r8, r0
 8007424:	4689      	mov	r9, r1
 8007426:	f04f 0200 	mov.w	r2, #0
 800742a:	d124      	bne.n	8007476 <_dtoa_r+0x62e>
 800742c:	4b1b      	ldr	r3, [pc, #108]	; (800749c <_dtoa_r+0x654>)
 800742e:	ec51 0b19 	vmov	r0, r1, d9
 8007432:	f7f8 ff53 	bl	80002dc <__adddf3>
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	4640      	mov	r0, r8
 800743c:	4649      	mov	r1, r9
 800743e:	f7f9 fb93 	bl	8000b68 <__aeabi_dcmpgt>
 8007442:	2800      	cmp	r0, #0
 8007444:	d173      	bne.n	800752e <_dtoa_r+0x6e6>
 8007446:	ec53 2b19 	vmov	r2, r3, d9
 800744a:	4914      	ldr	r1, [pc, #80]	; (800749c <_dtoa_r+0x654>)
 800744c:	2000      	movs	r0, #0
 800744e:	f7f8 ff43 	bl	80002d8 <__aeabi_dsub>
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	4640      	mov	r0, r8
 8007458:	4649      	mov	r1, r9
 800745a:	f7f9 fb67 	bl	8000b2c <__aeabi_dcmplt>
 800745e:	2800      	cmp	r0, #0
 8007460:	f43f af2f 	beq.w	80072c2 <_dtoa_r+0x47a>
 8007464:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007466:	1e6b      	subs	r3, r5, #1
 8007468:	930f      	str	r3, [sp, #60]	; 0x3c
 800746a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800746e:	2b30      	cmp	r3, #48	; 0x30
 8007470:	d0f8      	beq.n	8007464 <_dtoa_r+0x61c>
 8007472:	46bb      	mov	fp, r7
 8007474:	e04a      	b.n	800750c <_dtoa_r+0x6c4>
 8007476:	4b06      	ldr	r3, [pc, #24]	; (8007490 <_dtoa_r+0x648>)
 8007478:	f7f9 f8e6 	bl	8000648 <__aeabi_dmul>
 800747c:	4680      	mov	r8, r0
 800747e:	4689      	mov	r9, r1
 8007480:	e7bd      	b.n	80073fe <_dtoa_r+0x5b6>
 8007482:	bf00      	nop
 8007484:	08008cb0 	.word	0x08008cb0
 8007488:	08008c88 	.word	0x08008c88
 800748c:	3ff00000 	.word	0x3ff00000
 8007490:	40240000 	.word	0x40240000
 8007494:	401c0000 	.word	0x401c0000
 8007498:	40140000 	.word	0x40140000
 800749c:	3fe00000 	.word	0x3fe00000
 80074a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80074a4:	9d00      	ldr	r5, [sp, #0]
 80074a6:	4642      	mov	r2, r8
 80074a8:	464b      	mov	r3, r9
 80074aa:	4630      	mov	r0, r6
 80074ac:	4639      	mov	r1, r7
 80074ae:	f7f9 f9f5 	bl	800089c <__aeabi_ddiv>
 80074b2:	f7f9 fb79 	bl	8000ba8 <__aeabi_d2iz>
 80074b6:	9001      	str	r0, [sp, #4]
 80074b8:	f7f9 f85c 	bl	8000574 <__aeabi_i2d>
 80074bc:	4642      	mov	r2, r8
 80074be:	464b      	mov	r3, r9
 80074c0:	f7f9 f8c2 	bl	8000648 <__aeabi_dmul>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	4630      	mov	r0, r6
 80074ca:	4639      	mov	r1, r7
 80074cc:	f7f8 ff04 	bl	80002d8 <__aeabi_dsub>
 80074d0:	9e01      	ldr	r6, [sp, #4]
 80074d2:	9f04      	ldr	r7, [sp, #16]
 80074d4:	3630      	adds	r6, #48	; 0x30
 80074d6:	f805 6b01 	strb.w	r6, [r5], #1
 80074da:	9e00      	ldr	r6, [sp, #0]
 80074dc:	1bae      	subs	r6, r5, r6
 80074de:	42b7      	cmp	r7, r6
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	d134      	bne.n	8007550 <_dtoa_r+0x708>
 80074e6:	f7f8 fef9 	bl	80002dc <__adddf3>
 80074ea:	4642      	mov	r2, r8
 80074ec:	464b      	mov	r3, r9
 80074ee:	4606      	mov	r6, r0
 80074f0:	460f      	mov	r7, r1
 80074f2:	f7f9 fb39 	bl	8000b68 <__aeabi_dcmpgt>
 80074f6:	b9c8      	cbnz	r0, 800752c <_dtoa_r+0x6e4>
 80074f8:	4642      	mov	r2, r8
 80074fa:	464b      	mov	r3, r9
 80074fc:	4630      	mov	r0, r6
 80074fe:	4639      	mov	r1, r7
 8007500:	f7f9 fb0a 	bl	8000b18 <__aeabi_dcmpeq>
 8007504:	b110      	cbz	r0, 800750c <_dtoa_r+0x6c4>
 8007506:	9b01      	ldr	r3, [sp, #4]
 8007508:	07db      	lsls	r3, r3, #31
 800750a:	d40f      	bmi.n	800752c <_dtoa_r+0x6e4>
 800750c:	4651      	mov	r1, sl
 800750e:	4620      	mov	r0, r4
 8007510:	f000 fbcc 	bl	8007cac <_Bfree>
 8007514:	2300      	movs	r3, #0
 8007516:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007518:	702b      	strb	r3, [r5, #0]
 800751a:	f10b 0301 	add.w	r3, fp, #1
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007522:	2b00      	cmp	r3, #0
 8007524:	f43f ace2 	beq.w	8006eec <_dtoa_r+0xa4>
 8007528:	601d      	str	r5, [r3, #0]
 800752a:	e4df      	b.n	8006eec <_dtoa_r+0xa4>
 800752c:	465f      	mov	r7, fp
 800752e:	462b      	mov	r3, r5
 8007530:	461d      	mov	r5, r3
 8007532:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007536:	2a39      	cmp	r2, #57	; 0x39
 8007538:	d106      	bne.n	8007548 <_dtoa_r+0x700>
 800753a:	9a00      	ldr	r2, [sp, #0]
 800753c:	429a      	cmp	r2, r3
 800753e:	d1f7      	bne.n	8007530 <_dtoa_r+0x6e8>
 8007540:	9900      	ldr	r1, [sp, #0]
 8007542:	2230      	movs	r2, #48	; 0x30
 8007544:	3701      	adds	r7, #1
 8007546:	700a      	strb	r2, [r1, #0]
 8007548:	781a      	ldrb	r2, [r3, #0]
 800754a:	3201      	adds	r2, #1
 800754c:	701a      	strb	r2, [r3, #0]
 800754e:	e790      	b.n	8007472 <_dtoa_r+0x62a>
 8007550:	4ba3      	ldr	r3, [pc, #652]	; (80077e0 <_dtoa_r+0x998>)
 8007552:	2200      	movs	r2, #0
 8007554:	f7f9 f878 	bl	8000648 <__aeabi_dmul>
 8007558:	2200      	movs	r2, #0
 800755a:	2300      	movs	r3, #0
 800755c:	4606      	mov	r6, r0
 800755e:	460f      	mov	r7, r1
 8007560:	f7f9 fada 	bl	8000b18 <__aeabi_dcmpeq>
 8007564:	2800      	cmp	r0, #0
 8007566:	d09e      	beq.n	80074a6 <_dtoa_r+0x65e>
 8007568:	e7d0      	b.n	800750c <_dtoa_r+0x6c4>
 800756a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800756c:	2a00      	cmp	r2, #0
 800756e:	f000 80ca 	beq.w	8007706 <_dtoa_r+0x8be>
 8007572:	9a07      	ldr	r2, [sp, #28]
 8007574:	2a01      	cmp	r2, #1
 8007576:	f300 80ad 	bgt.w	80076d4 <_dtoa_r+0x88c>
 800757a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800757c:	2a00      	cmp	r2, #0
 800757e:	f000 80a5 	beq.w	80076cc <_dtoa_r+0x884>
 8007582:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007586:	9e08      	ldr	r6, [sp, #32]
 8007588:	9d05      	ldr	r5, [sp, #20]
 800758a:	9a05      	ldr	r2, [sp, #20]
 800758c:	441a      	add	r2, r3
 800758e:	9205      	str	r2, [sp, #20]
 8007590:	9a06      	ldr	r2, [sp, #24]
 8007592:	2101      	movs	r1, #1
 8007594:	441a      	add	r2, r3
 8007596:	4620      	mov	r0, r4
 8007598:	9206      	str	r2, [sp, #24]
 800759a:	f000 fc3d 	bl	8007e18 <__i2b>
 800759e:	4607      	mov	r7, r0
 80075a0:	b165      	cbz	r5, 80075bc <_dtoa_r+0x774>
 80075a2:	9b06      	ldr	r3, [sp, #24]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	dd09      	ble.n	80075bc <_dtoa_r+0x774>
 80075a8:	42ab      	cmp	r3, r5
 80075aa:	9a05      	ldr	r2, [sp, #20]
 80075ac:	bfa8      	it	ge
 80075ae:	462b      	movge	r3, r5
 80075b0:	1ad2      	subs	r2, r2, r3
 80075b2:	9205      	str	r2, [sp, #20]
 80075b4:	9a06      	ldr	r2, [sp, #24]
 80075b6:	1aed      	subs	r5, r5, r3
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	9306      	str	r3, [sp, #24]
 80075bc:	9b08      	ldr	r3, [sp, #32]
 80075be:	b1f3      	cbz	r3, 80075fe <_dtoa_r+0x7b6>
 80075c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 80a3 	beq.w	800770e <_dtoa_r+0x8c6>
 80075c8:	2e00      	cmp	r6, #0
 80075ca:	dd10      	ble.n	80075ee <_dtoa_r+0x7a6>
 80075cc:	4639      	mov	r1, r7
 80075ce:	4632      	mov	r2, r6
 80075d0:	4620      	mov	r0, r4
 80075d2:	f000 fce1 	bl	8007f98 <__pow5mult>
 80075d6:	4652      	mov	r2, sl
 80075d8:	4601      	mov	r1, r0
 80075da:	4607      	mov	r7, r0
 80075dc:	4620      	mov	r0, r4
 80075de:	f000 fc31 	bl	8007e44 <__multiply>
 80075e2:	4651      	mov	r1, sl
 80075e4:	4680      	mov	r8, r0
 80075e6:	4620      	mov	r0, r4
 80075e8:	f000 fb60 	bl	8007cac <_Bfree>
 80075ec:	46c2      	mov	sl, r8
 80075ee:	9b08      	ldr	r3, [sp, #32]
 80075f0:	1b9a      	subs	r2, r3, r6
 80075f2:	d004      	beq.n	80075fe <_dtoa_r+0x7b6>
 80075f4:	4651      	mov	r1, sl
 80075f6:	4620      	mov	r0, r4
 80075f8:	f000 fcce 	bl	8007f98 <__pow5mult>
 80075fc:	4682      	mov	sl, r0
 80075fe:	2101      	movs	r1, #1
 8007600:	4620      	mov	r0, r4
 8007602:	f000 fc09 	bl	8007e18 <__i2b>
 8007606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007608:	2b00      	cmp	r3, #0
 800760a:	4606      	mov	r6, r0
 800760c:	f340 8081 	ble.w	8007712 <_dtoa_r+0x8ca>
 8007610:	461a      	mov	r2, r3
 8007612:	4601      	mov	r1, r0
 8007614:	4620      	mov	r0, r4
 8007616:	f000 fcbf 	bl	8007f98 <__pow5mult>
 800761a:	9b07      	ldr	r3, [sp, #28]
 800761c:	2b01      	cmp	r3, #1
 800761e:	4606      	mov	r6, r0
 8007620:	dd7a      	ble.n	8007718 <_dtoa_r+0x8d0>
 8007622:	f04f 0800 	mov.w	r8, #0
 8007626:	6933      	ldr	r3, [r6, #16]
 8007628:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800762c:	6918      	ldr	r0, [r3, #16]
 800762e:	f000 fba5 	bl	8007d7c <__hi0bits>
 8007632:	f1c0 0020 	rsb	r0, r0, #32
 8007636:	9b06      	ldr	r3, [sp, #24]
 8007638:	4418      	add	r0, r3
 800763a:	f010 001f 	ands.w	r0, r0, #31
 800763e:	f000 8094 	beq.w	800776a <_dtoa_r+0x922>
 8007642:	f1c0 0320 	rsb	r3, r0, #32
 8007646:	2b04      	cmp	r3, #4
 8007648:	f340 8085 	ble.w	8007756 <_dtoa_r+0x90e>
 800764c:	9b05      	ldr	r3, [sp, #20]
 800764e:	f1c0 001c 	rsb	r0, r0, #28
 8007652:	4403      	add	r3, r0
 8007654:	9305      	str	r3, [sp, #20]
 8007656:	9b06      	ldr	r3, [sp, #24]
 8007658:	4403      	add	r3, r0
 800765a:	4405      	add	r5, r0
 800765c:	9306      	str	r3, [sp, #24]
 800765e:	9b05      	ldr	r3, [sp, #20]
 8007660:	2b00      	cmp	r3, #0
 8007662:	dd05      	ble.n	8007670 <_dtoa_r+0x828>
 8007664:	4651      	mov	r1, sl
 8007666:	461a      	mov	r2, r3
 8007668:	4620      	mov	r0, r4
 800766a:	f000 fcef 	bl	800804c <__lshift>
 800766e:	4682      	mov	sl, r0
 8007670:	9b06      	ldr	r3, [sp, #24]
 8007672:	2b00      	cmp	r3, #0
 8007674:	dd05      	ble.n	8007682 <_dtoa_r+0x83a>
 8007676:	4631      	mov	r1, r6
 8007678:	461a      	mov	r2, r3
 800767a:	4620      	mov	r0, r4
 800767c:	f000 fce6 	bl	800804c <__lshift>
 8007680:	4606      	mov	r6, r0
 8007682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007684:	2b00      	cmp	r3, #0
 8007686:	d072      	beq.n	800776e <_dtoa_r+0x926>
 8007688:	4631      	mov	r1, r6
 800768a:	4650      	mov	r0, sl
 800768c:	f000 fd4a 	bl	8008124 <__mcmp>
 8007690:	2800      	cmp	r0, #0
 8007692:	da6c      	bge.n	800776e <_dtoa_r+0x926>
 8007694:	2300      	movs	r3, #0
 8007696:	4651      	mov	r1, sl
 8007698:	220a      	movs	r2, #10
 800769a:	4620      	mov	r0, r4
 800769c:	f000 fb28 	bl	8007cf0 <__multadd>
 80076a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80076a6:	4682      	mov	sl, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 81b0 	beq.w	8007a0e <_dtoa_r+0xbc6>
 80076ae:	2300      	movs	r3, #0
 80076b0:	4639      	mov	r1, r7
 80076b2:	220a      	movs	r2, #10
 80076b4:	4620      	mov	r0, r4
 80076b6:	f000 fb1b 	bl	8007cf0 <__multadd>
 80076ba:	9b01      	ldr	r3, [sp, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	4607      	mov	r7, r0
 80076c0:	f300 8096 	bgt.w	80077f0 <_dtoa_r+0x9a8>
 80076c4:	9b07      	ldr	r3, [sp, #28]
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	dc59      	bgt.n	800777e <_dtoa_r+0x936>
 80076ca:	e091      	b.n	80077f0 <_dtoa_r+0x9a8>
 80076cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80076d2:	e758      	b.n	8007586 <_dtoa_r+0x73e>
 80076d4:	9b04      	ldr	r3, [sp, #16]
 80076d6:	1e5e      	subs	r6, r3, #1
 80076d8:	9b08      	ldr	r3, [sp, #32]
 80076da:	42b3      	cmp	r3, r6
 80076dc:	bfbf      	itttt	lt
 80076de:	9b08      	ldrlt	r3, [sp, #32]
 80076e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80076e2:	9608      	strlt	r6, [sp, #32]
 80076e4:	1af3      	sublt	r3, r6, r3
 80076e6:	bfb4      	ite	lt
 80076e8:	18d2      	addlt	r2, r2, r3
 80076ea:	1b9e      	subge	r6, r3, r6
 80076ec:	9b04      	ldr	r3, [sp, #16]
 80076ee:	bfbc      	itt	lt
 80076f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80076f2:	2600      	movlt	r6, #0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	bfb7      	itett	lt
 80076f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80076fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007700:	1a9d      	sublt	r5, r3, r2
 8007702:	2300      	movlt	r3, #0
 8007704:	e741      	b.n	800758a <_dtoa_r+0x742>
 8007706:	9e08      	ldr	r6, [sp, #32]
 8007708:	9d05      	ldr	r5, [sp, #20]
 800770a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800770c:	e748      	b.n	80075a0 <_dtoa_r+0x758>
 800770e:	9a08      	ldr	r2, [sp, #32]
 8007710:	e770      	b.n	80075f4 <_dtoa_r+0x7ac>
 8007712:	9b07      	ldr	r3, [sp, #28]
 8007714:	2b01      	cmp	r3, #1
 8007716:	dc19      	bgt.n	800774c <_dtoa_r+0x904>
 8007718:	9b02      	ldr	r3, [sp, #8]
 800771a:	b9bb      	cbnz	r3, 800774c <_dtoa_r+0x904>
 800771c:	9b03      	ldr	r3, [sp, #12]
 800771e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007722:	b99b      	cbnz	r3, 800774c <_dtoa_r+0x904>
 8007724:	9b03      	ldr	r3, [sp, #12]
 8007726:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800772a:	0d1b      	lsrs	r3, r3, #20
 800772c:	051b      	lsls	r3, r3, #20
 800772e:	b183      	cbz	r3, 8007752 <_dtoa_r+0x90a>
 8007730:	9b05      	ldr	r3, [sp, #20]
 8007732:	3301      	adds	r3, #1
 8007734:	9305      	str	r3, [sp, #20]
 8007736:	9b06      	ldr	r3, [sp, #24]
 8007738:	3301      	adds	r3, #1
 800773a:	9306      	str	r3, [sp, #24]
 800773c:	f04f 0801 	mov.w	r8, #1
 8007740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007742:	2b00      	cmp	r3, #0
 8007744:	f47f af6f 	bne.w	8007626 <_dtoa_r+0x7de>
 8007748:	2001      	movs	r0, #1
 800774a:	e774      	b.n	8007636 <_dtoa_r+0x7ee>
 800774c:	f04f 0800 	mov.w	r8, #0
 8007750:	e7f6      	b.n	8007740 <_dtoa_r+0x8f8>
 8007752:	4698      	mov	r8, r3
 8007754:	e7f4      	b.n	8007740 <_dtoa_r+0x8f8>
 8007756:	d082      	beq.n	800765e <_dtoa_r+0x816>
 8007758:	9a05      	ldr	r2, [sp, #20]
 800775a:	331c      	adds	r3, #28
 800775c:	441a      	add	r2, r3
 800775e:	9205      	str	r2, [sp, #20]
 8007760:	9a06      	ldr	r2, [sp, #24]
 8007762:	441a      	add	r2, r3
 8007764:	441d      	add	r5, r3
 8007766:	9206      	str	r2, [sp, #24]
 8007768:	e779      	b.n	800765e <_dtoa_r+0x816>
 800776a:	4603      	mov	r3, r0
 800776c:	e7f4      	b.n	8007758 <_dtoa_r+0x910>
 800776e:	9b04      	ldr	r3, [sp, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	dc37      	bgt.n	80077e4 <_dtoa_r+0x99c>
 8007774:	9b07      	ldr	r3, [sp, #28]
 8007776:	2b02      	cmp	r3, #2
 8007778:	dd34      	ble.n	80077e4 <_dtoa_r+0x99c>
 800777a:	9b04      	ldr	r3, [sp, #16]
 800777c:	9301      	str	r3, [sp, #4]
 800777e:	9b01      	ldr	r3, [sp, #4]
 8007780:	b963      	cbnz	r3, 800779c <_dtoa_r+0x954>
 8007782:	4631      	mov	r1, r6
 8007784:	2205      	movs	r2, #5
 8007786:	4620      	mov	r0, r4
 8007788:	f000 fab2 	bl	8007cf0 <__multadd>
 800778c:	4601      	mov	r1, r0
 800778e:	4606      	mov	r6, r0
 8007790:	4650      	mov	r0, sl
 8007792:	f000 fcc7 	bl	8008124 <__mcmp>
 8007796:	2800      	cmp	r0, #0
 8007798:	f73f adbb 	bgt.w	8007312 <_dtoa_r+0x4ca>
 800779c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800779e:	9d00      	ldr	r5, [sp, #0]
 80077a0:	ea6f 0b03 	mvn.w	fp, r3
 80077a4:	f04f 0800 	mov.w	r8, #0
 80077a8:	4631      	mov	r1, r6
 80077aa:	4620      	mov	r0, r4
 80077ac:	f000 fa7e 	bl	8007cac <_Bfree>
 80077b0:	2f00      	cmp	r7, #0
 80077b2:	f43f aeab 	beq.w	800750c <_dtoa_r+0x6c4>
 80077b6:	f1b8 0f00 	cmp.w	r8, #0
 80077ba:	d005      	beq.n	80077c8 <_dtoa_r+0x980>
 80077bc:	45b8      	cmp	r8, r7
 80077be:	d003      	beq.n	80077c8 <_dtoa_r+0x980>
 80077c0:	4641      	mov	r1, r8
 80077c2:	4620      	mov	r0, r4
 80077c4:	f000 fa72 	bl	8007cac <_Bfree>
 80077c8:	4639      	mov	r1, r7
 80077ca:	4620      	mov	r0, r4
 80077cc:	f000 fa6e 	bl	8007cac <_Bfree>
 80077d0:	e69c      	b.n	800750c <_dtoa_r+0x6c4>
 80077d2:	2600      	movs	r6, #0
 80077d4:	4637      	mov	r7, r6
 80077d6:	e7e1      	b.n	800779c <_dtoa_r+0x954>
 80077d8:	46bb      	mov	fp, r7
 80077da:	4637      	mov	r7, r6
 80077dc:	e599      	b.n	8007312 <_dtoa_r+0x4ca>
 80077de:	bf00      	nop
 80077e0:	40240000 	.word	0x40240000
 80077e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 80c8 	beq.w	800797c <_dtoa_r+0xb34>
 80077ec:	9b04      	ldr	r3, [sp, #16]
 80077ee:	9301      	str	r3, [sp, #4]
 80077f0:	2d00      	cmp	r5, #0
 80077f2:	dd05      	ble.n	8007800 <_dtoa_r+0x9b8>
 80077f4:	4639      	mov	r1, r7
 80077f6:	462a      	mov	r2, r5
 80077f8:	4620      	mov	r0, r4
 80077fa:	f000 fc27 	bl	800804c <__lshift>
 80077fe:	4607      	mov	r7, r0
 8007800:	f1b8 0f00 	cmp.w	r8, #0
 8007804:	d05b      	beq.n	80078be <_dtoa_r+0xa76>
 8007806:	6879      	ldr	r1, [r7, #4]
 8007808:	4620      	mov	r0, r4
 800780a:	f000 fa0f 	bl	8007c2c <_Balloc>
 800780e:	4605      	mov	r5, r0
 8007810:	b928      	cbnz	r0, 800781e <_dtoa_r+0x9d6>
 8007812:	4b83      	ldr	r3, [pc, #524]	; (8007a20 <_dtoa_r+0xbd8>)
 8007814:	4602      	mov	r2, r0
 8007816:	f240 21ef 	movw	r1, #751	; 0x2ef
 800781a:	f7ff bb2e 	b.w	8006e7a <_dtoa_r+0x32>
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	3202      	adds	r2, #2
 8007822:	0092      	lsls	r2, r2, #2
 8007824:	f107 010c 	add.w	r1, r7, #12
 8007828:	300c      	adds	r0, #12
 800782a:	f7ff fa76 	bl	8006d1a <memcpy>
 800782e:	2201      	movs	r2, #1
 8007830:	4629      	mov	r1, r5
 8007832:	4620      	mov	r0, r4
 8007834:	f000 fc0a 	bl	800804c <__lshift>
 8007838:	9b00      	ldr	r3, [sp, #0]
 800783a:	3301      	adds	r3, #1
 800783c:	9304      	str	r3, [sp, #16]
 800783e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007842:	4413      	add	r3, r2
 8007844:	9308      	str	r3, [sp, #32]
 8007846:	9b02      	ldr	r3, [sp, #8]
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	46b8      	mov	r8, r7
 800784e:	9306      	str	r3, [sp, #24]
 8007850:	4607      	mov	r7, r0
 8007852:	9b04      	ldr	r3, [sp, #16]
 8007854:	4631      	mov	r1, r6
 8007856:	3b01      	subs	r3, #1
 8007858:	4650      	mov	r0, sl
 800785a:	9301      	str	r3, [sp, #4]
 800785c:	f7ff fa6b 	bl	8006d36 <quorem>
 8007860:	4641      	mov	r1, r8
 8007862:	9002      	str	r0, [sp, #8]
 8007864:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007868:	4650      	mov	r0, sl
 800786a:	f000 fc5b 	bl	8008124 <__mcmp>
 800786e:	463a      	mov	r2, r7
 8007870:	9005      	str	r0, [sp, #20]
 8007872:	4631      	mov	r1, r6
 8007874:	4620      	mov	r0, r4
 8007876:	f000 fc71 	bl	800815c <__mdiff>
 800787a:	68c2      	ldr	r2, [r0, #12]
 800787c:	4605      	mov	r5, r0
 800787e:	bb02      	cbnz	r2, 80078c2 <_dtoa_r+0xa7a>
 8007880:	4601      	mov	r1, r0
 8007882:	4650      	mov	r0, sl
 8007884:	f000 fc4e 	bl	8008124 <__mcmp>
 8007888:	4602      	mov	r2, r0
 800788a:	4629      	mov	r1, r5
 800788c:	4620      	mov	r0, r4
 800788e:	9209      	str	r2, [sp, #36]	; 0x24
 8007890:	f000 fa0c 	bl	8007cac <_Bfree>
 8007894:	9b07      	ldr	r3, [sp, #28]
 8007896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007898:	9d04      	ldr	r5, [sp, #16]
 800789a:	ea43 0102 	orr.w	r1, r3, r2
 800789e:	9b06      	ldr	r3, [sp, #24]
 80078a0:	4319      	orrs	r1, r3
 80078a2:	d110      	bne.n	80078c6 <_dtoa_r+0xa7e>
 80078a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80078a8:	d029      	beq.n	80078fe <_dtoa_r+0xab6>
 80078aa:	9b05      	ldr	r3, [sp, #20]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	dd02      	ble.n	80078b6 <_dtoa_r+0xa6e>
 80078b0:	9b02      	ldr	r3, [sp, #8]
 80078b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80078b6:	9b01      	ldr	r3, [sp, #4]
 80078b8:	f883 9000 	strb.w	r9, [r3]
 80078bc:	e774      	b.n	80077a8 <_dtoa_r+0x960>
 80078be:	4638      	mov	r0, r7
 80078c0:	e7ba      	b.n	8007838 <_dtoa_r+0x9f0>
 80078c2:	2201      	movs	r2, #1
 80078c4:	e7e1      	b.n	800788a <_dtoa_r+0xa42>
 80078c6:	9b05      	ldr	r3, [sp, #20]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	db04      	blt.n	80078d6 <_dtoa_r+0xa8e>
 80078cc:	9907      	ldr	r1, [sp, #28]
 80078ce:	430b      	orrs	r3, r1
 80078d0:	9906      	ldr	r1, [sp, #24]
 80078d2:	430b      	orrs	r3, r1
 80078d4:	d120      	bne.n	8007918 <_dtoa_r+0xad0>
 80078d6:	2a00      	cmp	r2, #0
 80078d8:	dded      	ble.n	80078b6 <_dtoa_r+0xa6e>
 80078da:	4651      	mov	r1, sl
 80078dc:	2201      	movs	r2, #1
 80078de:	4620      	mov	r0, r4
 80078e0:	f000 fbb4 	bl	800804c <__lshift>
 80078e4:	4631      	mov	r1, r6
 80078e6:	4682      	mov	sl, r0
 80078e8:	f000 fc1c 	bl	8008124 <__mcmp>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	dc03      	bgt.n	80078f8 <_dtoa_r+0xab0>
 80078f0:	d1e1      	bne.n	80078b6 <_dtoa_r+0xa6e>
 80078f2:	f019 0f01 	tst.w	r9, #1
 80078f6:	d0de      	beq.n	80078b6 <_dtoa_r+0xa6e>
 80078f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80078fc:	d1d8      	bne.n	80078b0 <_dtoa_r+0xa68>
 80078fe:	9a01      	ldr	r2, [sp, #4]
 8007900:	2339      	movs	r3, #57	; 0x39
 8007902:	7013      	strb	r3, [r2, #0]
 8007904:	462b      	mov	r3, r5
 8007906:	461d      	mov	r5, r3
 8007908:	3b01      	subs	r3, #1
 800790a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800790e:	2a39      	cmp	r2, #57	; 0x39
 8007910:	d06c      	beq.n	80079ec <_dtoa_r+0xba4>
 8007912:	3201      	adds	r2, #1
 8007914:	701a      	strb	r2, [r3, #0]
 8007916:	e747      	b.n	80077a8 <_dtoa_r+0x960>
 8007918:	2a00      	cmp	r2, #0
 800791a:	dd07      	ble.n	800792c <_dtoa_r+0xae4>
 800791c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007920:	d0ed      	beq.n	80078fe <_dtoa_r+0xab6>
 8007922:	9a01      	ldr	r2, [sp, #4]
 8007924:	f109 0301 	add.w	r3, r9, #1
 8007928:	7013      	strb	r3, [r2, #0]
 800792a:	e73d      	b.n	80077a8 <_dtoa_r+0x960>
 800792c:	9b04      	ldr	r3, [sp, #16]
 800792e:	9a08      	ldr	r2, [sp, #32]
 8007930:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007934:	4293      	cmp	r3, r2
 8007936:	d043      	beq.n	80079c0 <_dtoa_r+0xb78>
 8007938:	4651      	mov	r1, sl
 800793a:	2300      	movs	r3, #0
 800793c:	220a      	movs	r2, #10
 800793e:	4620      	mov	r0, r4
 8007940:	f000 f9d6 	bl	8007cf0 <__multadd>
 8007944:	45b8      	cmp	r8, r7
 8007946:	4682      	mov	sl, r0
 8007948:	f04f 0300 	mov.w	r3, #0
 800794c:	f04f 020a 	mov.w	r2, #10
 8007950:	4641      	mov	r1, r8
 8007952:	4620      	mov	r0, r4
 8007954:	d107      	bne.n	8007966 <_dtoa_r+0xb1e>
 8007956:	f000 f9cb 	bl	8007cf0 <__multadd>
 800795a:	4680      	mov	r8, r0
 800795c:	4607      	mov	r7, r0
 800795e:	9b04      	ldr	r3, [sp, #16]
 8007960:	3301      	adds	r3, #1
 8007962:	9304      	str	r3, [sp, #16]
 8007964:	e775      	b.n	8007852 <_dtoa_r+0xa0a>
 8007966:	f000 f9c3 	bl	8007cf0 <__multadd>
 800796a:	4639      	mov	r1, r7
 800796c:	4680      	mov	r8, r0
 800796e:	2300      	movs	r3, #0
 8007970:	220a      	movs	r2, #10
 8007972:	4620      	mov	r0, r4
 8007974:	f000 f9bc 	bl	8007cf0 <__multadd>
 8007978:	4607      	mov	r7, r0
 800797a:	e7f0      	b.n	800795e <_dtoa_r+0xb16>
 800797c:	9b04      	ldr	r3, [sp, #16]
 800797e:	9301      	str	r3, [sp, #4]
 8007980:	9d00      	ldr	r5, [sp, #0]
 8007982:	4631      	mov	r1, r6
 8007984:	4650      	mov	r0, sl
 8007986:	f7ff f9d6 	bl	8006d36 <quorem>
 800798a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800798e:	9b00      	ldr	r3, [sp, #0]
 8007990:	f805 9b01 	strb.w	r9, [r5], #1
 8007994:	1aea      	subs	r2, r5, r3
 8007996:	9b01      	ldr	r3, [sp, #4]
 8007998:	4293      	cmp	r3, r2
 800799a:	dd07      	ble.n	80079ac <_dtoa_r+0xb64>
 800799c:	4651      	mov	r1, sl
 800799e:	2300      	movs	r3, #0
 80079a0:	220a      	movs	r2, #10
 80079a2:	4620      	mov	r0, r4
 80079a4:	f000 f9a4 	bl	8007cf0 <__multadd>
 80079a8:	4682      	mov	sl, r0
 80079aa:	e7ea      	b.n	8007982 <_dtoa_r+0xb3a>
 80079ac:	9b01      	ldr	r3, [sp, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	bfc8      	it	gt
 80079b2:	461d      	movgt	r5, r3
 80079b4:	9b00      	ldr	r3, [sp, #0]
 80079b6:	bfd8      	it	le
 80079b8:	2501      	movle	r5, #1
 80079ba:	441d      	add	r5, r3
 80079bc:	f04f 0800 	mov.w	r8, #0
 80079c0:	4651      	mov	r1, sl
 80079c2:	2201      	movs	r2, #1
 80079c4:	4620      	mov	r0, r4
 80079c6:	f000 fb41 	bl	800804c <__lshift>
 80079ca:	4631      	mov	r1, r6
 80079cc:	4682      	mov	sl, r0
 80079ce:	f000 fba9 	bl	8008124 <__mcmp>
 80079d2:	2800      	cmp	r0, #0
 80079d4:	dc96      	bgt.n	8007904 <_dtoa_r+0xabc>
 80079d6:	d102      	bne.n	80079de <_dtoa_r+0xb96>
 80079d8:	f019 0f01 	tst.w	r9, #1
 80079dc:	d192      	bne.n	8007904 <_dtoa_r+0xabc>
 80079de:	462b      	mov	r3, r5
 80079e0:	461d      	mov	r5, r3
 80079e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079e6:	2a30      	cmp	r2, #48	; 0x30
 80079e8:	d0fa      	beq.n	80079e0 <_dtoa_r+0xb98>
 80079ea:	e6dd      	b.n	80077a8 <_dtoa_r+0x960>
 80079ec:	9a00      	ldr	r2, [sp, #0]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d189      	bne.n	8007906 <_dtoa_r+0xabe>
 80079f2:	f10b 0b01 	add.w	fp, fp, #1
 80079f6:	2331      	movs	r3, #49	; 0x31
 80079f8:	e796      	b.n	8007928 <_dtoa_r+0xae0>
 80079fa:	4b0a      	ldr	r3, [pc, #40]	; (8007a24 <_dtoa_r+0xbdc>)
 80079fc:	f7ff ba99 	b.w	8006f32 <_dtoa_r+0xea>
 8007a00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f47f aa6d 	bne.w	8006ee2 <_dtoa_r+0x9a>
 8007a08:	4b07      	ldr	r3, [pc, #28]	; (8007a28 <_dtoa_r+0xbe0>)
 8007a0a:	f7ff ba92 	b.w	8006f32 <_dtoa_r+0xea>
 8007a0e:	9b01      	ldr	r3, [sp, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	dcb5      	bgt.n	8007980 <_dtoa_r+0xb38>
 8007a14:	9b07      	ldr	r3, [sp, #28]
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	f73f aeb1 	bgt.w	800777e <_dtoa_r+0x936>
 8007a1c:	e7b0      	b.n	8007980 <_dtoa_r+0xb38>
 8007a1e:	bf00      	nop
 8007a20:	08008c18 	.word	0x08008c18
 8007a24:	08008b78 	.word	0x08008b78
 8007a28:	08008b9c 	.word	0x08008b9c

08007a2c <_free_r>:
 8007a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a2e:	2900      	cmp	r1, #0
 8007a30:	d044      	beq.n	8007abc <_free_r+0x90>
 8007a32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a36:	9001      	str	r0, [sp, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f1a1 0404 	sub.w	r4, r1, #4
 8007a3e:	bfb8      	it	lt
 8007a40:	18e4      	addlt	r4, r4, r3
 8007a42:	f000 f8e7 	bl	8007c14 <__malloc_lock>
 8007a46:	4a1e      	ldr	r2, [pc, #120]	; (8007ac0 <_free_r+0x94>)
 8007a48:	9801      	ldr	r0, [sp, #4]
 8007a4a:	6813      	ldr	r3, [r2, #0]
 8007a4c:	b933      	cbnz	r3, 8007a5c <_free_r+0x30>
 8007a4e:	6063      	str	r3, [r4, #4]
 8007a50:	6014      	str	r4, [r2, #0]
 8007a52:	b003      	add	sp, #12
 8007a54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a58:	f000 b8e2 	b.w	8007c20 <__malloc_unlock>
 8007a5c:	42a3      	cmp	r3, r4
 8007a5e:	d908      	bls.n	8007a72 <_free_r+0x46>
 8007a60:	6825      	ldr	r5, [r4, #0]
 8007a62:	1961      	adds	r1, r4, r5
 8007a64:	428b      	cmp	r3, r1
 8007a66:	bf01      	itttt	eq
 8007a68:	6819      	ldreq	r1, [r3, #0]
 8007a6a:	685b      	ldreq	r3, [r3, #4]
 8007a6c:	1949      	addeq	r1, r1, r5
 8007a6e:	6021      	streq	r1, [r4, #0]
 8007a70:	e7ed      	b.n	8007a4e <_free_r+0x22>
 8007a72:	461a      	mov	r2, r3
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	b10b      	cbz	r3, 8007a7c <_free_r+0x50>
 8007a78:	42a3      	cmp	r3, r4
 8007a7a:	d9fa      	bls.n	8007a72 <_free_r+0x46>
 8007a7c:	6811      	ldr	r1, [r2, #0]
 8007a7e:	1855      	adds	r5, r2, r1
 8007a80:	42a5      	cmp	r5, r4
 8007a82:	d10b      	bne.n	8007a9c <_free_r+0x70>
 8007a84:	6824      	ldr	r4, [r4, #0]
 8007a86:	4421      	add	r1, r4
 8007a88:	1854      	adds	r4, r2, r1
 8007a8a:	42a3      	cmp	r3, r4
 8007a8c:	6011      	str	r1, [r2, #0]
 8007a8e:	d1e0      	bne.n	8007a52 <_free_r+0x26>
 8007a90:	681c      	ldr	r4, [r3, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	6053      	str	r3, [r2, #4]
 8007a96:	440c      	add	r4, r1
 8007a98:	6014      	str	r4, [r2, #0]
 8007a9a:	e7da      	b.n	8007a52 <_free_r+0x26>
 8007a9c:	d902      	bls.n	8007aa4 <_free_r+0x78>
 8007a9e:	230c      	movs	r3, #12
 8007aa0:	6003      	str	r3, [r0, #0]
 8007aa2:	e7d6      	b.n	8007a52 <_free_r+0x26>
 8007aa4:	6825      	ldr	r5, [r4, #0]
 8007aa6:	1961      	adds	r1, r4, r5
 8007aa8:	428b      	cmp	r3, r1
 8007aaa:	bf04      	itt	eq
 8007aac:	6819      	ldreq	r1, [r3, #0]
 8007aae:	685b      	ldreq	r3, [r3, #4]
 8007ab0:	6063      	str	r3, [r4, #4]
 8007ab2:	bf04      	itt	eq
 8007ab4:	1949      	addeq	r1, r1, r5
 8007ab6:	6021      	streq	r1, [r4, #0]
 8007ab8:	6054      	str	r4, [r2, #4]
 8007aba:	e7ca      	b.n	8007a52 <_free_r+0x26>
 8007abc:	b003      	add	sp, #12
 8007abe:	bd30      	pop	{r4, r5, pc}
 8007ac0:	200004d4 	.word	0x200004d4

08007ac4 <malloc>:
 8007ac4:	4b02      	ldr	r3, [pc, #8]	; (8007ad0 <malloc+0xc>)
 8007ac6:	4601      	mov	r1, r0
 8007ac8:	6818      	ldr	r0, [r3, #0]
 8007aca:	f000 b823 	b.w	8007b14 <_malloc_r>
 8007ace:	bf00      	nop
 8007ad0:	20000064 	.word	0x20000064

08007ad4 <sbrk_aligned>:
 8007ad4:	b570      	push	{r4, r5, r6, lr}
 8007ad6:	4e0e      	ldr	r6, [pc, #56]	; (8007b10 <sbrk_aligned+0x3c>)
 8007ad8:	460c      	mov	r4, r1
 8007ada:	6831      	ldr	r1, [r6, #0]
 8007adc:	4605      	mov	r5, r0
 8007ade:	b911      	cbnz	r1, 8007ae6 <sbrk_aligned+0x12>
 8007ae0:	f000 fcce 	bl	8008480 <_sbrk_r>
 8007ae4:	6030      	str	r0, [r6, #0]
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	4628      	mov	r0, r5
 8007aea:	f000 fcc9 	bl	8008480 <_sbrk_r>
 8007aee:	1c43      	adds	r3, r0, #1
 8007af0:	d00a      	beq.n	8007b08 <sbrk_aligned+0x34>
 8007af2:	1cc4      	adds	r4, r0, #3
 8007af4:	f024 0403 	bic.w	r4, r4, #3
 8007af8:	42a0      	cmp	r0, r4
 8007afa:	d007      	beq.n	8007b0c <sbrk_aligned+0x38>
 8007afc:	1a21      	subs	r1, r4, r0
 8007afe:	4628      	mov	r0, r5
 8007b00:	f000 fcbe 	bl	8008480 <_sbrk_r>
 8007b04:	3001      	adds	r0, #1
 8007b06:	d101      	bne.n	8007b0c <sbrk_aligned+0x38>
 8007b08:	f04f 34ff 	mov.w	r4, #4294967295
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	bd70      	pop	{r4, r5, r6, pc}
 8007b10:	200004d8 	.word	0x200004d8

08007b14 <_malloc_r>:
 8007b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b18:	1ccd      	adds	r5, r1, #3
 8007b1a:	f025 0503 	bic.w	r5, r5, #3
 8007b1e:	3508      	adds	r5, #8
 8007b20:	2d0c      	cmp	r5, #12
 8007b22:	bf38      	it	cc
 8007b24:	250c      	movcc	r5, #12
 8007b26:	2d00      	cmp	r5, #0
 8007b28:	4607      	mov	r7, r0
 8007b2a:	db01      	blt.n	8007b30 <_malloc_r+0x1c>
 8007b2c:	42a9      	cmp	r1, r5
 8007b2e:	d905      	bls.n	8007b3c <_malloc_r+0x28>
 8007b30:	230c      	movs	r3, #12
 8007b32:	603b      	str	r3, [r7, #0]
 8007b34:	2600      	movs	r6, #0
 8007b36:	4630      	mov	r0, r6
 8007b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007c10 <_malloc_r+0xfc>
 8007b40:	f000 f868 	bl	8007c14 <__malloc_lock>
 8007b44:	f8d8 3000 	ldr.w	r3, [r8]
 8007b48:	461c      	mov	r4, r3
 8007b4a:	bb5c      	cbnz	r4, 8007ba4 <_malloc_r+0x90>
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	4638      	mov	r0, r7
 8007b50:	f7ff ffc0 	bl	8007ad4 <sbrk_aligned>
 8007b54:	1c43      	adds	r3, r0, #1
 8007b56:	4604      	mov	r4, r0
 8007b58:	d155      	bne.n	8007c06 <_malloc_r+0xf2>
 8007b5a:	f8d8 4000 	ldr.w	r4, [r8]
 8007b5e:	4626      	mov	r6, r4
 8007b60:	2e00      	cmp	r6, #0
 8007b62:	d145      	bne.n	8007bf0 <_malloc_r+0xdc>
 8007b64:	2c00      	cmp	r4, #0
 8007b66:	d048      	beq.n	8007bfa <_malloc_r+0xe6>
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	4638      	mov	r0, r7
 8007b6e:	eb04 0903 	add.w	r9, r4, r3
 8007b72:	f000 fc85 	bl	8008480 <_sbrk_r>
 8007b76:	4581      	cmp	r9, r0
 8007b78:	d13f      	bne.n	8007bfa <_malloc_r+0xe6>
 8007b7a:	6821      	ldr	r1, [r4, #0]
 8007b7c:	1a6d      	subs	r5, r5, r1
 8007b7e:	4629      	mov	r1, r5
 8007b80:	4638      	mov	r0, r7
 8007b82:	f7ff ffa7 	bl	8007ad4 <sbrk_aligned>
 8007b86:	3001      	adds	r0, #1
 8007b88:	d037      	beq.n	8007bfa <_malloc_r+0xe6>
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	442b      	add	r3, r5
 8007b8e:	6023      	str	r3, [r4, #0]
 8007b90:	f8d8 3000 	ldr.w	r3, [r8]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d038      	beq.n	8007c0a <_malloc_r+0xf6>
 8007b98:	685a      	ldr	r2, [r3, #4]
 8007b9a:	42a2      	cmp	r2, r4
 8007b9c:	d12b      	bne.n	8007bf6 <_malloc_r+0xe2>
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	605a      	str	r2, [r3, #4]
 8007ba2:	e00f      	b.n	8007bc4 <_malloc_r+0xb0>
 8007ba4:	6822      	ldr	r2, [r4, #0]
 8007ba6:	1b52      	subs	r2, r2, r5
 8007ba8:	d41f      	bmi.n	8007bea <_malloc_r+0xd6>
 8007baa:	2a0b      	cmp	r2, #11
 8007bac:	d917      	bls.n	8007bde <_malloc_r+0xca>
 8007bae:	1961      	adds	r1, r4, r5
 8007bb0:	42a3      	cmp	r3, r4
 8007bb2:	6025      	str	r5, [r4, #0]
 8007bb4:	bf18      	it	ne
 8007bb6:	6059      	strne	r1, [r3, #4]
 8007bb8:	6863      	ldr	r3, [r4, #4]
 8007bba:	bf08      	it	eq
 8007bbc:	f8c8 1000 	streq.w	r1, [r8]
 8007bc0:	5162      	str	r2, [r4, r5]
 8007bc2:	604b      	str	r3, [r1, #4]
 8007bc4:	4638      	mov	r0, r7
 8007bc6:	f104 060b 	add.w	r6, r4, #11
 8007bca:	f000 f829 	bl	8007c20 <__malloc_unlock>
 8007bce:	f026 0607 	bic.w	r6, r6, #7
 8007bd2:	1d23      	adds	r3, r4, #4
 8007bd4:	1af2      	subs	r2, r6, r3
 8007bd6:	d0ae      	beq.n	8007b36 <_malloc_r+0x22>
 8007bd8:	1b9b      	subs	r3, r3, r6
 8007bda:	50a3      	str	r3, [r4, r2]
 8007bdc:	e7ab      	b.n	8007b36 <_malloc_r+0x22>
 8007bde:	42a3      	cmp	r3, r4
 8007be0:	6862      	ldr	r2, [r4, #4]
 8007be2:	d1dd      	bne.n	8007ba0 <_malloc_r+0x8c>
 8007be4:	f8c8 2000 	str.w	r2, [r8]
 8007be8:	e7ec      	b.n	8007bc4 <_malloc_r+0xb0>
 8007bea:	4623      	mov	r3, r4
 8007bec:	6864      	ldr	r4, [r4, #4]
 8007bee:	e7ac      	b.n	8007b4a <_malloc_r+0x36>
 8007bf0:	4634      	mov	r4, r6
 8007bf2:	6876      	ldr	r6, [r6, #4]
 8007bf4:	e7b4      	b.n	8007b60 <_malloc_r+0x4c>
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	e7cc      	b.n	8007b94 <_malloc_r+0x80>
 8007bfa:	230c      	movs	r3, #12
 8007bfc:	603b      	str	r3, [r7, #0]
 8007bfe:	4638      	mov	r0, r7
 8007c00:	f000 f80e 	bl	8007c20 <__malloc_unlock>
 8007c04:	e797      	b.n	8007b36 <_malloc_r+0x22>
 8007c06:	6025      	str	r5, [r4, #0]
 8007c08:	e7dc      	b.n	8007bc4 <_malloc_r+0xb0>
 8007c0a:	605b      	str	r3, [r3, #4]
 8007c0c:	deff      	udf	#255	; 0xff
 8007c0e:	bf00      	nop
 8007c10:	200004d4 	.word	0x200004d4

08007c14 <__malloc_lock>:
 8007c14:	4801      	ldr	r0, [pc, #4]	; (8007c1c <__malloc_lock+0x8>)
 8007c16:	f7ff b87e 	b.w	8006d16 <__retarget_lock_acquire_recursive>
 8007c1a:	bf00      	nop
 8007c1c:	200004d0 	.word	0x200004d0

08007c20 <__malloc_unlock>:
 8007c20:	4801      	ldr	r0, [pc, #4]	; (8007c28 <__malloc_unlock+0x8>)
 8007c22:	f7ff b879 	b.w	8006d18 <__retarget_lock_release_recursive>
 8007c26:	bf00      	nop
 8007c28:	200004d0 	.word	0x200004d0

08007c2c <_Balloc>:
 8007c2c:	b570      	push	{r4, r5, r6, lr}
 8007c2e:	69c6      	ldr	r6, [r0, #28]
 8007c30:	4604      	mov	r4, r0
 8007c32:	460d      	mov	r5, r1
 8007c34:	b976      	cbnz	r6, 8007c54 <_Balloc+0x28>
 8007c36:	2010      	movs	r0, #16
 8007c38:	f7ff ff44 	bl	8007ac4 <malloc>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	61e0      	str	r0, [r4, #28]
 8007c40:	b920      	cbnz	r0, 8007c4c <_Balloc+0x20>
 8007c42:	4b18      	ldr	r3, [pc, #96]	; (8007ca4 <_Balloc+0x78>)
 8007c44:	4818      	ldr	r0, [pc, #96]	; (8007ca8 <_Balloc+0x7c>)
 8007c46:	216b      	movs	r1, #107	; 0x6b
 8007c48:	f000 fc2a 	bl	80084a0 <__assert_func>
 8007c4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c50:	6006      	str	r6, [r0, #0]
 8007c52:	60c6      	str	r6, [r0, #12]
 8007c54:	69e6      	ldr	r6, [r4, #28]
 8007c56:	68f3      	ldr	r3, [r6, #12]
 8007c58:	b183      	cbz	r3, 8007c7c <_Balloc+0x50>
 8007c5a:	69e3      	ldr	r3, [r4, #28]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c62:	b9b8      	cbnz	r0, 8007c94 <_Balloc+0x68>
 8007c64:	2101      	movs	r1, #1
 8007c66:	fa01 f605 	lsl.w	r6, r1, r5
 8007c6a:	1d72      	adds	r2, r6, #5
 8007c6c:	0092      	lsls	r2, r2, #2
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f000 fc34 	bl	80084dc <_calloc_r>
 8007c74:	b160      	cbz	r0, 8007c90 <_Balloc+0x64>
 8007c76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c7a:	e00e      	b.n	8007c9a <_Balloc+0x6e>
 8007c7c:	2221      	movs	r2, #33	; 0x21
 8007c7e:	2104      	movs	r1, #4
 8007c80:	4620      	mov	r0, r4
 8007c82:	f000 fc2b 	bl	80084dc <_calloc_r>
 8007c86:	69e3      	ldr	r3, [r4, #28]
 8007c88:	60f0      	str	r0, [r6, #12]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1e4      	bne.n	8007c5a <_Balloc+0x2e>
 8007c90:	2000      	movs	r0, #0
 8007c92:	bd70      	pop	{r4, r5, r6, pc}
 8007c94:	6802      	ldr	r2, [r0, #0]
 8007c96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ca0:	e7f7      	b.n	8007c92 <_Balloc+0x66>
 8007ca2:	bf00      	nop
 8007ca4:	08008ba9 	.word	0x08008ba9
 8007ca8:	08008c29 	.word	0x08008c29

08007cac <_Bfree>:
 8007cac:	b570      	push	{r4, r5, r6, lr}
 8007cae:	69c6      	ldr	r6, [r0, #28]
 8007cb0:	4605      	mov	r5, r0
 8007cb2:	460c      	mov	r4, r1
 8007cb4:	b976      	cbnz	r6, 8007cd4 <_Bfree+0x28>
 8007cb6:	2010      	movs	r0, #16
 8007cb8:	f7ff ff04 	bl	8007ac4 <malloc>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	61e8      	str	r0, [r5, #28]
 8007cc0:	b920      	cbnz	r0, 8007ccc <_Bfree+0x20>
 8007cc2:	4b09      	ldr	r3, [pc, #36]	; (8007ce8 <_Bfree+0x3c>)
 8007cc4:	4809      	ldr	r0, [pc, #36]	; (8007cec <_Bfree+0x40>)
 8007cc6:	218f      	movs	r1, #143	; 0x8f
 8007cc8:	f000 fbea 	bl	80084a0 <__assert_func>
 8007ccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cd0:	6006      	str	r6, [r0, #0]
 8007cd2:	60c6      	str	r6, [r0, #12]
 8007cd4:	b13c      	cbz	r4, 8007ce6 <_Bfree+0x3a>
 8007cd6:	69eb      	ldr	r3, [r5, #28]
 8007cd8:	6862      	ldr	r2, [r4, #4]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ce0:	6021      	str	r1, [r4, #0]
 8007ce2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ce6:	bd70      	pop	{r4, r5, r6, pc}
 8007ce8:	08008ba9 	.word	0x08008ba9
 8007cec:	08008c29 	.word	0x08008c29

08007cf0 <__multadd>:
 8007cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf4:	690d      	ldr	r5, [r1, #16]
 8007cf6:	4607      	mov	r7, r0
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	461e      	mov	r6, r3
 8007cfc:	f101 0c14 	add.w	ip, r1, #20
 8007d00:	2000      	movs	r0, #0
 8007d02:	f8dc 3000 	ldr.w	r3, [ip]
 8007d06:	b299      	uxth	r1, r3
 8007d08:	fb02 6101 	mla	r1, r2, r1, r6
 8007d0c:	0c1e      	lsrs	r6, r3, #16
 8007d0e:	0c0b      	lsrs	r3, r1, #16
 8007d10:	fb02 3306 	mla	r3, r2, r6, r3
 8007d14:	b289      	uxth	r1, r1
 8007d16:	3001      	adds	r0, #1
 8007d18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d1c:	4285      	cmp	r5, r0
 8007d1e:	f84c 1b04 	str.w	r1, [ip], #4
 8007d22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d26:	dcec      	bgt.n	8007d02 <__multadd+0x12>
 8007d28:	b30e      	cbz	r6, 8007d6e <__multadd+0x7e>
 8007d2a:	68a3      	ldr	r3, [r4, #8]
 8007d2c:	42ab      	cmp	r3, r5
 8007d2e:	dc19      	bgt.n	8007d64 <__multadd+0x74>
 8007d30:	6861      	ldr	r1, [r4, #4]
 8007d32:	4638      	mov	r0, r7
 8007d34:	3101      	adds	r1, #1
 8007d36:	f7ff ff79 	bl	8007c2c <_Balloc>
 8007d3a:	4680      	mov	r8, r0
 8007d3c:	b928      	cbnz	r0, 8007d4a <__multadd+0x5a>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	4b0c      	ldr	r3, [pc, #48]	; (8007d74 <__multadd+0x84>)
 8007d42:	480d      	ldr	r0, [pc, #52]	; (8007d78 <__multadd+0x88>)
 8007d44:	21ba      	movs	r1, #186	; 0xba
 8007d46:	f000 fbab 	bl	80084a0 <__assert_func>
 8007d4a:	6922      	ldr	r2, [r4, #16]
 8007d4c:	3202      	adds	r2, #2
 8007d4e:	f104 010c 	add.w	r1, r4, #12
 8007d52:	0092      	lsls	r2, r2, #2
 8007d54:	300c      	adds	r0, #12
 8007d56:	f7fe ffe0 	bl	8006d1a <memcpy>
 8007d5a:	4621      	mov	r1, r4
 8007d5c:	4638      	mov	r0, r7
 8007d5e:	f7ff ffa5 	bl	8007cac <_Bfree>
 8007d62:	4644      	mov	r4, r8
 8007d64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d68:	3501      	adds	r5, #1
 8007d6a:	615e      	str	r6, [r3, #20]
 8007d6c:	6125      	str	r5, [r4, #16]
 8007d6e:	4620      	mov	r0, r4
 8007d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d74:	08008c18 	.word	0x08008c18
 8007d78:	08008c29 	.word	0x08008c29

08007d7c <__hi0bits>:
 8007d7c:	0c03      	lsrs	r3, r0, #16
 8007d7e:	041b      	lsls	r3, r3, #16
 8007d80:	b9d3      	cbnz	r3, 8007db8 <__hi0bits+0x3c>
 8007d82:	0400      	lsls	r0, r0, #16
 8007d84:	2310      	movs	r3, #16
 8007d86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007d8a:	bf04      	itt	eq
 8007d8c:	0200      	lsleq	r0, r0, #8
 8007d8e:	3308      	addeq	r3, #8
 8007d90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007d94:	bf04      	itt	eq
 8007d96:	0100      	lsleq	r0, r0, #4
 8007d98:	3304      	addeq	r3, #4
 8007d9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007d9e:	bf04      	itt	eq
 8007da0:	0080      	lsleq	r0, r0, #2
 8007da2:	3302      	addeq	r3, #2
 8007da4:	2800      	cmp	r0, #0
 8007da6:	db05      	blt.n	8007db4 <__hi0bits+0x38>
 8007da8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007dac:	f103 0301 	add.w	r3, r3, #1
 8007db0:	bf08      	it	eq
 8007db2:	2320      	moveq	r3, #32
 8007db4:	4618      	mov	r0, r3
 8007db6:	4770      	bx	lr
 8007db8:	2300      	movs	r3, #0
 8007dba:	e7e4      	b.n	8007d86 <__hi0bits+0xa>

08007dbc <__lo0bits>:
 8007dbc:	6803      	ldr	r3, [r0, #0]
 8007dbe:	f013 0207 	ands.w	r2, r3, #7
 8007dc2:	d00c      	beq.n	8007dde <__lo0bits+0x22>
 8007dc4:	07d9      	lsls	r1, r3, #31
 8007dc6:	d422      	bmi.n	8007e0e <__lo0bits+0x52>
 8007dc8:	079a      	lsls	r2, r3, #30
 8007dca:	bf49      	itett	mi
 8007dcc:	085b      	lsrmi	r3, r3, #1
 8007dce:	089b      	lsrpl	r3, r3, #2
 8007dd0:	6003      	strmi	r3, [r0, #0]
 8007dd2:	2201      	movmi	r2, #1
 8007dd4:	bf5c      	itt	pl
 8007dd6:	6003      	strpl	r3, [r0, #0]
 8007dd8:	2202      	movpl	r2, #2
 8007dda:	4610      	mov	r0, r2
 8007ddc:	4770      	bx	lr
 8007dde:	b299      	uxth	r1, r3
 8007de0:	b909      	cbnz	r1, 8007de6 <__lo0bits+0x2a>
 8007de2:	0c1b      	lsrs	r3, r3, #16
 8007de4:	2210      	movs	r2, #16
 8007de6:	b2d9      	uxtb	r1, r3
 8007de8:	b909      	cbnz	r1, 8007dee <__lo0bits+0x32>
 8007dea:	3208      	adds	r2, #8
 8007dec:	0a1b      	lsrs	r3, r3, #8
 8007dee:	0719      	lsls	r1, r3, #28
 8007df0:	bf04      	itt	eq
 8007df2:	091b      	lsreq	r3, r3, #4
 8007df4:	3204      	addeq	r2, #4
 8007df6:	0799      	lsls	r1, r3, #30
 8007df8:	bf04      	itt	eq
 8007dfa:	089b      	lsreq	r3, r3, #2
 8007dfc:	3202      	addeq	r2, #2
 8007dfe:	07d9      	lsls	r1, r3, #31
 8007e00:	d403      	bmi.n	8007e0a <__lo0bits+0x4e>
 8007e02:	085b      	lsrs	r3, r3, #1
 8007e04:	f102 0201 	add.w	r2, r2, #1
 8007e08:	d003      	beq.n	8007e12 <__lo0bits+0x56>
 8007e0a:	6003      	str	r3, [r0, #0]
 8007e0c:	e7e5      	b.n	8007dda <__lo0bits+0x1e>
 8007e0e:	2200      	movs	r2, #0
 8007e10:	e7e3      	b.n	8007dda <__lo0bits+0x1e>
 8007e12:	2220      	movs	r2, #32
 8007e14:	e7e1      	b.n	8007dda <__lo0bits+0x1e>
	...

08007e18 <__i2b>:
 8007e18:	b510      	push	{r4, lr}
 8007e1a:	460c      	mov	r4, r1
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	f7ff ff05 	bl	8007c2c <_Balloc>
 8007e22:	4602      	mov	r2, r0
 8007e24:	b928      	cbnz	r0, 8007e32 <__i2b+0x1a>
 8007e26:	4b05      	ldr	r3, [pc, #20]	; (8007e3c <__i2b+0x24>)
 8007e28:	4805      	ldr	r0, [pc, #20]	; (8007e40 <__i2b+0x28>)
 8007e2a:	f240 1145 	movw	r1, #325	; 0x145
 8007e2e:	f000 fb37 	bl	80084a0 <__assert_func>
 8007e32:	2301      	movs	r3, #1
 8007e34:	6144      	str	r4, [r0, #20]
 8007e36:	6103      	str	r3, [r0, #16]
 8007e38:	bd10      	pop	{r4, pc}
 8007e3a:	bf00      	nop
 8007e3c:	08008c18 	.word	0x08008c18
 8007e40:	08008c29 	.word	0x08008c29

08007e44 <__multiply>:
 8007e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e48:	4691      	mov	r9, r2
 8007e4a:	690a      	ldr	r2, [r1, #16]
 8007e4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	bfb8      	it	lt
 8007e54:	460b      	movlt	r3, r1
 8007e56:	460c      	mov	r4, r1
 8007e58:	bfbc      	itt	lt
 8007e5a:	464c      	movlt	r4, r9
 8007e5c:	4699      	movlt	r9, r3
 8007e5e:	6927      	ldr	r7, [r4, #16]
 8007e60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e64:	68a3      	ldr	r3, [r4, #8]
 8007e66:	6861      	ldr	r1, [r4, #4]
 8007e68:	eb07 060a 	add.w	r6, r7, sl
 8007e6c:	42b3      	cmp	r3, r6
 8007e6e:	b085      	sub	sp, #20
 8007e70:	bfb8      	it	lt
 8007e72:	3101      	addlt	r1, #1
 8007e74:	f7ff feda 	bl	8007c2c <_Balloc>
 8007e78:	b930      	cbnz	r0, 8007e88 <__multiply+0x44>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	4b44      	ldr	r3, [pc, #272]	; (8007f90 <__multiply+0x14c>)
 8007e7e:	4845      	ldr	r0, [pc, #276]	; (8007f94 <__multiply+0x150>)
 8007e80:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007e84:	f000 fb0c 	bl	80084a0 <__assert_func>
 8007e88:	f100 0514 	add.w	r5, r0, #20
 8007e8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e90:	462b      	mov	r3, r5
 8007e92:	2200      	movs	r2, #0
 8007e94:	4543      	cmp	r3, r8
 8007e96:	d321      	bcc.n	8007edc <__multiply+0x98>
 8007e98:	f104 0314 	add.w	r3, r4, #20
 8007e9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ea0:	f109 0314 	add.w	r3, r9, #20
 8007ea4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ea8:	9202      	str	r2, [sp, #8]
 8007eaa:	1b3a      	subs	r2, r7, r4
 8007eac:	3a15      	subs	r2, #21
 8007eae:	f022 0203 	bic.w	r2, r2, #3
 8007eb2:	3204      	adds	r2, #4
 8007eb4:	f104 0115 	add.w	r1, r4, #21
 8007eb8:	428f      	cmp	r7, r1
 8007eba:	bf38      	it	cc
 8007ebc:	2204      	movcc	r2, #4
 8007ebe:	9201      	str	r2, [sp, #4]
 8007ec0:	9a02      	ldr	r2, [sp, #8]
 8007ec2:	9303      	str	r3, [sp, #12]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d80c      	bhi.n	8007ee2 <__multiply+0x9e>
 8007ec8:	2e00      	cmp	r6, #0
 8007eca:	dd03      	ble.n	8007ed4 <__multiply+0x90>
 8007ecc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d05b      	beq.n	8007f8c <__multiply+0x148>
 8007ed4:	6106      	str	r6, [r0, #16]
 8007ed6:	b005      	add	sp, #20
 8007ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007edc:	f843 2b04 	str.w	r2, [r3], #4
 8007ee0:	e7d8      	b.n	8007e94 <__multiply+0x50>
 8007ee2:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ee6:	f1ba 0f00 	cmp.w	sl, #0
 8007eea:	d024      	beq.n	8007f36 <__multiply+0xf2>
 8007eec:	f104 0e14 	add.w	lr, r4, #20
 8007ef0:	46a9      	mov	r9, r5
 8007ef2:	f04f 0c00 	mov.w	ip, #0
 8007ef6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007efa:	f8d9 1000 	ldr.w	r1, [r9]
 8007efe:	fa1f fb82 	uxth.w	fp, r2
 8007f02:	b289      	uxth	r1, r1
 8007f04:	fb0a 110b 	mla	r1, sl, fp, r1
 8007f08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007f0c:	f8d9 2000 	ldr.w	r2, [r9]
 8007f10:	4461      	add	r1, ip
 8007f12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f16:	fb0a c20b 	mla	r2, sl, fp, ip
 8007f1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f1e:	b289      	uxth	r1, r1
 8007f20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f24:	4577      	cmp	r7, lr
 8007f26:	f849 1b04 	str.w	r1, [r9], #4
 8007f2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f2e:	d8e2      	bhi.n	8007ef6 <__multiply+0xb2>
 8007f30:	9a01      	ldr	r2, [sp, #4]
 8007f32:	f845 c002 	str.w	ip, [r5, r2]
 8007f36:	9a03      	ldr	r2, [sp, #12]
 8007f38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f3c:	3304      	adds	r3, #4
 8007f3e:	f1b9 0f00 	cmp.w	r9, #0
 8007f42:	d021      	beq.n	8007f88 <__multiply+0x144>
 8007f44:	6829      	ldr	r1, [r5, #0]
 8007f46:	f104 0c14 	add.w	ip, r4, #20
 8007f4a:	46ae      	mov	lr, r5
 8007f4c:	f04f 0a00 	mov.w	sl, #0
 8007f50:	f8bc b000 	ldrh.w	fp, [ip]
 8007f54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007f58:	fb09 220b 	mla	r2, r9, fp, r2
 8007f5c:	4452      	add	r2, sl
 8007f5e:	b289      	uxth	r1, r1
 8007f60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f64:	f84e 1b04 	str.w	r1, [lr], #4
 8007f68:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007f6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f70:	f8be 1000 	ldrh.w	r1, [lr]
 8007f74:	fb09 110a 	mla	r1, r9, sl, r1
 8007f78:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007f7c:	4567      	cmp	r7, ip
 8007f7e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f82:	d8e5      	bhi.n	8007f50 <__multiply+0x10c>
 8007f84:	9a01      	ldr	r2, [sp, #4]
 8007f86:	50a9      	str	r1, [r5, r2]
 8007f88:	3504      	adds	r5, #4
 8007f8a:	e799      	b.n	8007ec0 <__multiply+0x7c>
 8007f8c:	3e01      	subs	r6, #1
 8007f8e:	e79b      	b.n	8007ec8 <__multiply+0x84>
 8007f90:	08008c18 	.word	0x08008c18
 8007f94:	08008c29 	.word	0x08008c29

08007f98 <__pow5mult>:
 8007f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f9c:	4615      	mov	r5, r2
 8007f9e:	f012 0203 	ands.w	r2, r2, #3
 8007fa2:	4606      	mov	r6, r0
 8007fa4:	460f      	mov	r7, r1
 8007fa6:	d007      	beq.n	8007fb8 <__pow5mult+0x20>
 8007fa8:	4c25      	ldr	r4, [pc, #148]	; (8008040 <__pow5mult+0xa8>)
 8007faa:	3a01      	subs	r2, #1
 8007fac:	2300      	movs	r3, #0
 8007fae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fb2:	f7ff fe9d 	bl	8007cf0 <__multadd>
 8007fb6:	4607      	mov	r7, r0
 8007fb8:	10ad      	asrs	r5, r5, #2
 8007fba:	d03d      	beq.n	8008038 <__pow5mult+0xa0>
 8007fbc:	69f4      	ldr	r4, [r6, #28]
 8007fbe:	b97c      	cbnz	r4, 8007fe0 <__pow5mult+0x48>
 8007fc0:	2010      	movs	r0, #16
 8007fc2:	f7ff fd7f 	bl	8007ac4 <malloc>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	61f0      	str	r0, [r6, #28]
 8007fca:	b928      	cbnz	r0, 8007fd8 <__pow5mult+0x40>
 8007fcc:	4b1d      	ldr	r3, [pc, #116]	; (8008044 <__pow5mult+0xac>)
 8007fce:	481e      	ldr	r0, [pc, #120]	; (8008048 <__pow5mult+0xb0>)
 8007fd0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007fd4:	f000 fa64 	bl	80084a0 <__assert_func>
 8007fd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fdc:	6004      	str	r4, [r0, #0]
 8007fde:	60c4      	str	r4, [r0, #12]
 8007fe0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007fe4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fe8:	b94c      	cbnz	r4, 8007ffe <__pow5mult+0x66>
 8007fea:	f240 2171 	movw	r1, #625	; 0x271
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f7ff ff12 	bl	8007e18 <__i2b>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	6003      	str	r3, [r0, #0]
 8007ffe:	f04f 0900 	mov.w	r9, #0
 8008002:	07eb      	lsls	r3, r5, #31
 8008004:	d50a      	bpl.n	800801c <__pow5mult+0x84>
 8008006:	4639      	mov	r1, r7
 8008008:	4622      	mov	r2, r4
 800800a:	4630      	mov	r0, r6
 800800c:	f7ff ff1a 	bl	8007e44 <__multiply>
 8008010:	4639      	mov	r1, r7
 8008012:	4680      	mov	r8, r0
 8008014:	4630      	mov	r0, r6
 8008016:	f7ff fe49 	bl	8007cac <_Bfree>
 800801a:	4647      	mov	r7, r8
 800801c:	106d      	asrs	r5, r5, #1
 800801e:	d00b      	beq.n	8008038 <__pow5mult+0xa0>
 8008020:	6820      	ldr	r0, [r4, #0]
 8008022:	b938      	cbnz	r0, 8008034 <__pow5mult+0x9c>
 8008024:	4622      	mov	r2, r4
 8008026:	4621      	mov	r1, r4
 8008028:	4630      	mov	r0, r6
 800802a:	f7ff ff0b 	bl	8007e44 <__multiply>
 800802e:	6020      	str	r0, [r4, #0]
 8008030:	f8c0 9000 	str.w	r9, [r0]
 8008034:	4604      	mov	r4, r0
 8008036:	e7e4      	b.n	8008002 <__pow5mult+0x6a>
 8008038:	4638      	mov	r0, r7
 800803a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800803e:	bf00      	nop
 8008040:	08008d78 	.word	0x08008d78
 8008044:	08008ba9 	.word	0x08008ba9
 8008048:	08008c29 	.word	0x08008c29

0800804c <__lshift>:
 800804c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008050:	460c      	mov	r4, r1
 8008052:	6849      	ldr	r1, [r1, #4]
 8008054:	6923      	ldr	r3, [r4, #16]
 8008056:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800805a:	68a3      	ldr	r3, [r4, #8]
 800805c:	4607      	mov	r7, r0
 800805e:	4691      	mov	r9, r2
 8008060:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008064:	f108 0601 	add.w	r6, r8, #1
 8008068:	42b3      	cmp	r3, r6
 800806a:	db0b      	blt.n	8008084 <__lshift+0x38>
 800806c:	4638      	mov	r0, r7
 800806e:	f7ff fddd 	bl	8007c2c <_Balloc>
 8008072:	4605      	mov	r5, r0
 8008074:	b948      	cbnz	r0, 800808a <__lshift+0x3e>
 8008076:	4602      	mov	r2, r0
 8008078:	4b28      	ldr	r3, [pc, #160]	; (800811c <__lshift+0xd0>)
 800807a:	4829      	ldr	r0, [pc, #164]	; (8008120 <__lshift+0xd4>)
 800807c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008080:	f000 fa0e 	bl	80084a0 <__assert_func>
 8008084:	3101      	adds	r1, #1
 8008086:	005b      	lsls	r3, r3, #1
 8008088:	e7ee      	b.n	8008068 <__lshift+0x1c>
 800808a:	2300      	movs	r3, #0
 800808c:	f100 0114 	add.w	r1, r0, #20
 8008090:	f100 0210 	add.w	r2, r0, #16
 8008094:	4618      	mov	r0, r3
 8008096:	4553      	cmp	r3, sl
 8008098:	db33      	blt.n	8008102 <__lshift+0xb6>
 800809a:	6920      	ldr	r0, [r4, #16]
 800809c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080a0:	f104 0314 	add.w	r3, r4, #20
 80080a4:	f019 091f 	ands.w	r9, r9, #31
 80080a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80080b0:	d02b      	beq.n	800810a <__lshift+0xbe>
 80080b2:	f1c9 0e20 	rsb	lr, r9, #32
 80080b6:	468a      	mov	sl, r1
 80080b8:	2200      	movs	r2, #0
 80080ba:	6818      	ldr	r0, [r3, #0]
 80080bc:	fa00 f009 	lsl.w	r0, r0, r9
 80080c0:	4310      	orrs	r0, r2
 80080c2:	f84a 0b04 	str.w	r0, [sl], #4
 80080c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ca:	459c      	cmp	ip, r3
 80080cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80080d0:	d8f3      	bhi.n	80080ba <__lshift+0x6e>
 80080d2:	ebac 0304 	sub.w	r3, ip, r4
 80080d6:	3b15      	subs	r3, #21
 80080d8:	f023 0303 	bic.w	r3, r3, #3
 80080dc:	3304      	adds	r3, #4
 80080de:	f104 0015 	add.w	r0, r4, #21
 80080e2:	4584      	cmp	ip, r0
 80080e4:	bf38      	it	cc
 80080e6:	2304      	movcc	r3, #4
 80080e8:	50ca      	str	r2, [r1, r3]
 80080ea:	b10a      	cbz	r2, 80080f0 <__lshift+0xa4>
 80080ec:	f108 0602 	add.w	r6, r8, #2
 80080f0:	3e01      	subs	r6, #1
 80080f2:	4638      	mov	r0, r7
 80080f4:	612e      	str	r6, [r5, #16]
 80080f6:	4621      	mov	r1, r4
 80080f8:	f7ff fdd8 	bl	8007cac <_Bfree>
 80080fc:	4628      	mov	r0, r5
 80080fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008102:	f842 0f04 	str.w	r0, [r2, #4]!
 8008106:	3301      	adds	r3, #1
 8008108:	e7c5      	b.n	8008096 <__lshift+0x4a>
 800810a:	3904      	subs	r1, #4
 800810c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008110:	f841 2f04 	str.w	r2, [r1, #4]!
 8008114:	459c      	cmp	ip, r3
 8008116:	d8f9      	bhi.n	800810c <__lshift+0xc0>
 8008118:	e7ea      	b.n	80080f0 <__lshift+0xa4>
 800811a:	bf00      	nop
 800811c:	08008c18 	.word	0x08008c18
 8008120:	08008c29 	.word	0x08008c29

08008124 <__mcmp>:
 8008124:	b530      	push	{r4, r5, lr}
 8008126:	6902      	ldr	r2, [r0, #16]
 8008128:	690c      	ldr	r4, [r1, #16]
 800812a:	1b12      	subs	r2, r2, r4
 800812c:	d10e      	bne.n	800814c <__mcmp+0x28>
 800812e:	f100 0314 	add.w	r3, r0, #20
 8008132:	3114      	adds	r1, #20
 8008134:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008138:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800813c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008140:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008144:	42a5      	cmp	r5, r4
 8008146:	d003      	beq.n	8008150 <__mcmp+0x2c>
 8008148:	d305      	bcc.n	8008156 <__mcmp+0x32>
 800814a:	2201      	movs	r2, #1
 800814c:	4610      	mov	r0, r2
 800814e:	bd30      	pop	{r4, r5, pc}
 8008150:	4283      	cmp	r3, r0
 8008152:	d3f3      	bcc.n	800813c <__mcmp+0x18>
 8008154:	e7fa      	b.n	800814c <__mcmp+0x28>
 8008156:	f04f 32ff 	mov.w	r2, #4294967295
 800815a:	e7f7      	b.n	800814c <__mcmp+0x28>

0800815c <__mdiff>:
 800815c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008160:	460c      	mov	r4, r1
 8008162:	4606      	mov	r6, r0
 8008164:	4611      	mov	r1, r2
 8008166:	4620      	mov	r0, r4
 8008168:	4690      	mov	r8, r2
 800816a:	f7ff ffdb 	bl	8008124 <__mcmp>
 800816e:	1e05      	subs	r5, r0, #0
 8008170:	d110      	bne.n	8008194 <__mdiff+0x38>
 8008172:	4629      	mov	r1, r5
 8008174:	4630      	mov	r0, r6
 8008176:	f7ff fd59 	bl	8007c2c <_Balloc>
 800817a:	b930      	cbnz	r0, 800818a <__mdiff+0x2e>
 800817c:	4b3a      	ldr	r3, [pc, #232]	; (8008268 <__mdiff+0x10c>)
 800817e:	4602      	mov	r2, r0
 8008180:	f240 2137 	movw	r1, #567	; 0x237
 8008184:	4839      	ldr	r0, [pc, #228]	; (800826c <__mdiff+0x110>)
 8008186:	f000 f98b 	bl	80084a0 <__assert_func>
 800818a:	2301      	movs	r3, #1
 800818c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008190:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008194:	bfa4      	itt	ge
 8008196:	4643      	movge	r3, r8
 8008198:	46a0      	movge	r8, r4
 800819a:	4630      	mov	r0, r6
 800819c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80081a0:	bfa6      	itte	ge
 80081a2:	461c      	movge	r4, r3
 80081a4:	2500      	movge	r5, #0
 80081a6:	2501      	movlt	r5, #1
 80081a8:	f7ff fd40 	bl	8007c2c <_Balloc>
 80081ac:	b920      	cbnz	r0, 80081b8 <__mdiff+0x5c>
 80081ae:	4b2e      	ldr	r3, [pc, #184]	; (8008268 <__mdiff+0x10c>)
 80081b0:	4602      	mov	r2, r0
 80081b2:	f240 2145 	movw	r1, #581	; 0x245
 80081b6:	e7e5      	b.n	8008184 <__mdiff+0x28>
 80081b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80081bc:	6926      	ldr	r6, [r4, #16]
 80081be:	60c5      	str	r5, [r0, #12]
 80081c0:	f104 0914 	add.w	r9, r4, #20
 80081c4:	f108 0514 	add.w	r5, r8, #20
 80081c8:	f100 0e14 	add.w	lr, r0, #20
 80081cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80081d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80081d4:	f108 0210 	add.w	r2, r8, #16
 80081d8:	46f2      	mov	sl, lr
 80081da:	2100      	movs	r1, #0
 80081dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80081e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80081e4:	fa11 f88b 	uxtah	r8, r1, fp
 80081e8:	b299      	uxth	r1, r3
 80081ea:	0c1b      	lsrs	r3, r3, #16
 80081ec:	eba8 0801 	sub.w	r8, r8, r1
 80081f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80081f4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80081f8:	fa1f f888 	uxth.w	r8, r8
 80081fc:	1419      	asrs	r1, r3, #16
 80081fe:	454e      	cmp	r6, r9
 8008200:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008204:	f84a 3b04 	str.w	r3, [sl], #4
 8008208:	d8e8      	bhi.n	80081dc <__mdiff+0x80>
 800820a:	1b33      	subs	r3, r6, r4
 800820c:	3b15      	subs	r3, #21
 800820e:	f023 0303 	bic.w	r3, r3, #3
 8008212:	3304      	adds	r3, #4
 8008214:	3415      	adds	r4, #21
 8008216:	42a6      	cmp	r6, r4
 8008218:	bf38      	it	cc
 800821a:	2304      	movcc	r3, #4
 800821c:	441d      	add	r5, r3
 800821e:	4473      	add	r3, lr
 8008220:	469e      	mov	lr, r3
 8008222:	462e      	mov	r6, r5
 8008224:	4566      	cmp	r6, ip
 8008226:	d30e      	bcc.n	8008246 <__mdiff+0xea>
 8008228:	f10c 0203 	add.w	r2, ip, #3
 800822c:	1b52      	subs	r2, r2, r5
 800822e:	f022 0203 	bic.w	r2, r2, #3
 8008232:	3d03      	subs	r5, #3
 8008234:	45ac      	cmp	ip, r5
 8008236:	bf38      	it	cc
 8008238:	2200      	movcc	r2, #0
 800823a:	4413      	add	r3, r2
 800823c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008240:	b17a      	cbz	r2, 8008262 <__mdiff+0x106>
 8008242:	6107      	str	r7, [r0, #16]
 8008244:	e7a4      	b.n	8008190 <__mdiff+0x34>
 8008246:	f856 8b04 	ldr.w	r8, [r6], #4
 800824a:	fa11 f288 	uxtah	r2, r1, r8
 800824e:	1414      	asrs	r4, r2, #16
 8008250:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008254:	b292      	uxth	r2, r2
 8008256:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800825a:	f84e 2b04 	str.w	r2, [lr], #4
 800825e:	1421      	asrs	r1, r4, #16
 8008260:	e7e0      	b.n	8008224 <__mdiff+0xc8>
 8008262:	3f01      	subs	r7, #1
 8008264:	e7ea      	b.n	800823c <__mdiff+0xe0>
 8008266:	bf00      	nop
 8008268:	08008c18 	.word	0x08008c18
 800826c:	08008c29 	.word	0x08008c29

08008270 <__d2b>:
 8008270:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008274:	460f      	mov	r7, r1
 8008276:	2101      	movs	r1, #1
 8008278:	ec59 8b10 	vmov	r8, r9, d0
 800827c:	4616      	mov	r6, r2
 800827e:	f7ff fcd5 	bl	8007c2c <_Balloc>
 8008282:	4604      	mov	r4, r0
 8008284:	b930      	cbnz	r0, 8008294 <__d2b+0x24>
 8008286:	4602      	mov	r2, r0
 8008288:	4b24      	ldr	r3, [pc, #144]	; (800831c <__d2b+0xac>)
 800828a:	4825      	ldr	r0, [pc, #148]	; (8008320 <__d2b+0xb0>)
 800828c:	f240 310f 	movw	r1, #783	; 0x30f
 8008290:	f000 f906 	bl	80084a0 <__assert_func>
 8008294:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008298:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800829c:	bb2d      	cbnz	r5, 80082ea <__d2b+0x7a>
 800829e:	9301      	str	r3, [sp, #4]
 80082a0:	f1b8 0300 	subs.w	r3, r8, #0
 80082a4:	d026      	beq.n	80082f4 <__d2b+0x84>
 80082a6:	4668      	mov	r0, sp
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	f7ff fd87 	bl	8007dbc <__lo0bits>
 80082ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80082b2:	b1e8      	cbz	r0, 80082f0 <__d2b+0x80>
 80082b4:	f1c0 0320 	rsb	r3, r0, #32
 80082b8:	fa02 f303 	lsl.w	r3, r2, r3
 80082bc:	430b      	orrs	r3, r1
 80082be:	40c2      	lsrs	r2, r0
 80082c0:	6163      	str	r3, [r4, #20]
 80082c2:	9201      	str	r2, [sp, #4]
 80082c4:	9b01      	ldr	r3, [sp, #4]
 80082c6:	61a3      	str	r3, [r4, #24]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	bf14      	ite	ne
 80082cc:	2202      	movne	r2, #2
 80082ce:	2201      	moveq	r2, #1
 80082d0:	6122      	str	r2, [r4, #16]
 80082d2:	b1bd      	cbz	r5, 8008304 <__d2b+0x94>
 80082d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80082d8:	4405      	add	r5, r0
 80082da:	603d      	str	r5, [r7, #0]
 80082dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80082e0:	6030      	str	r0, [r6, #0]
 80082e2:	4620      	mov	r0, r4
 80082e4:	b003      	add	sp, #12
 80082e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082ee:	e7d6      	b.n	800829e <__d2b+0x2e>
 80082f0:	6161      	str	r1, [r4, #20]
 80082f2:	e7e7      	b.n	80082c4 <__d2b+0x54>
 80082f4:	a801      	add	r0, sp, #4
 80082f6:	f7ff fd61 	bl	8007dbc <__lo0bits>
 80082fa:	9b01      	ldr	r3, [sp, #4]
 80082fc:	6163      	str	r3, [r4, #20]
 80082fe:	3020      	adds	r0, #32
 8008300:	2201      	movs	r2, #1
 8008302:	e7e5      	b.n	80082d0 <__d2b+0x60>
 8008304:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008308:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800830c:	6038      	str	r0, [r7, #0]
 800830e:	6918      	ldr	r0, [r3, #16]
 8008310:	f7ff fd34 	bl	8007d7c <__hi0bits>
 8008314:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008318:	e7e2      	b.n	80082e0 <__d2b+0x70>
 800831a:	bf00      	nop
 800831c:	08008c18 	.word	0x08008c18
 8008320:	08008c29 	.word	0x08008c29

08008324 <__sflush_r>:
 8008324:	898a      	ldrh	r2, [r1, #12]
 8008326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800832a:	4605      	mov	r5, r0
 800832c:	0710      	lsls	r0, r2, #28
 800832e:	460c      	mov	r4, r1
 8008330:	d458      	bmi.n	80083e4 <__sflush_r+0xc0>
 8008332:	684b      	ldr	r3, [r1, #4]
 8008334:	2b00      	cmp	r3, #0
 8008336:	dc05      	bgt.n	8008344 <__sflush_r+0x20>
 8008338:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800833a:	2b00      	cmp	r3, #0
 800833c:	dc02      	bgt.n	8008344 <__sflush_r+0x20>
 800833e:	2000      	movs	r0, #0
 8008340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008344:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008346:	2e00      	cmp	r6, #0
 8008348:	d0f9      	beq.n	800833e <__sflush_r+0x1a>
 800834a:	2300      	movs	r3, #0
 800834c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008350:	682f      	ldr	r7, [r5, #0]
 8008352:	6a21      	ldr	r1, [r4, #32]
 8008354:	602b      	str	r3, [r5, #0]
 8008356:	d032      	beq.n	80083be <__sflush_r+0x9a>
 8008358:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800835a:	89a3      	ldrh	r3, [r4, #12]
 800835c:	075a      	lsls	r2, r3, #29
 800835e:	d505      	bpl.n	800836c <__sflush_r+0x48>
 8008360:	6863      	ldr	r3, [r4, #4]
 8008362:	1ac0      	subs	r0, r0, r3
 8008364:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008366:	b10b      	cbz	r3, 800836c <__sflush_r+0x48>
 8008368:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800836a:	1ac0      	subs	r0, r0, r3
 800836c:	2300      	movs	r3, #0
 800836e:	4602      	mov	r2, r0
 8008370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008372:	6a21      	ldr	r1, [r4, #32]
 8008374:	4628      	mov	r0, r5
 8008376:	47b0      	blx	r6
 8008378:	1c43      	adds	r3, r0, #1
 800837a:	89a3      	ldrh	r3, [r4, #12]
 800837c:	d106      	bne.n	800838c <__sflush_r+0x68>
 800837e:	6829      	ldr	r1, [r5, #0]
 8008380:	291d      	cmp	r1, #29
 8008382:	d82b      	bhi.n	80083dc <__sflush_r+0xb8>
 8008384:	4a29      	ldr	r2, [pc, #164]	; (800842c <__sflush_r+0x108>)
 8008386:	410a      	asrs	r2, r1
 8008388:	07d6      	lsls	r6, r2, #31
 800838a:	d427      	bmi.n	80083dc <__sflush_r+0xb8>
 800838c:	2200      	movs	r2, #0
 800838e:	6062      	str	r2, [r4, #4]
 8008390:	04d9      	lsls	r1, r3, #19
 8008392:	6922      	ldr	r2, [r4, #16]
 8008394:	6022      	str	r2, [r4, #0]
 8008396:	d504      	bpl.n	80083a2 <__sflush_r+0x7e>
 8008398:	1c42      	adds	r2, r0, #1
 800839a:	d101      	bne.n	80083a0 <__sflush_r+0x7c>
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	b903      	cbnz	r3, 80083a2 <__sflush_r+0x7e>
 80083a0:	6560      	str	r0, [r4, #84]	; 0x54
 80083a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083a4:	602f      	str	r7, [r5, #0]
 80083a6:	2900      	cmp	r1, #0
 80083a8:	d0c9      	beq.n	800833e <__sflush_r+0x1a>
 80083aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083ae:	4299      	cmp	r1, r3
 80083b0:	d002      	beq.n	80083b8 <__sflush_r+0x94>
 80083b2:	4628      	mov	r0, r5
 80083b4:	f7ff fb3a 	bl	8007a2c <_free_r>
 80083b8:	2000      	movs	r0, #0
 80083ba:	6360      	str	r0, [r4, #52]	; 0x34
 80083bc:	e7c0      	b.n	8008340 <__sflush_r+0x1c>
 80083be:	2301      	movs	r3, #1
 80083c0:	4628      	mov	r0, r5
 80083c2:	47b0      	blx	r6
 80083c4:	1c41      	adds	r1, r0, #1
 80083c6:	d1c8      	bne.n	800835a <__sflush_r+0x36>
 80083c8:	682b      	ldr	r3, [r5, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d0c5      	beq.n	800835a <__sflush_r+0x36>
 80083ce:	2b1d      	cmp	r3, #29
 80083d0:	d001      	beq.n	80083d6 <__sflush_r+0xb2>
 80083d2:	2b16      	cmp	r3, #22
 80083d4:	d101      	bne.n	80083da <__sflush_r+0xb6>
 80083d6:	602f      	str	r7, [r5, #0]
 80083d8:	e7b1      	b.n	800833e <__sflush_r+0x1a>
 80083da:	89a3      	ldrh	r3, [r4, #12]
 80083dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083e0:	81a3      	strh	r3, [r4, #12]
 80083e2:	e7ad      	b.n	8008340 <__sflush_r+0x1c>
 80083e4:	690f      	ldr	r7, [r1, #16]
 80083e6:	2f00      	cmp	r7, #0
 80083e8:	d0a9      	beq.n	800833e <__sflush_r+0x1a>
 80083ea:	0793      	lsls	r3, r2, #30
 80083ec:	680e      	ldr	r6, [r1, #0]
 80083ee:	bf08      	it	eq
 80083f0:	694b      	ldreq	r3, [r1, #20]
 80083f2:	600f      	str	r7, [r1, #0]
 80083f4:	bf18      	it	ne
 80083f6:	2300      	movne	r3, #0
 80083f8:	eba6 0807 	sub.w	r8, r6, r7
 80083fc:	608b      	str	r3, [r1, #8]
 80083fe:	f1b8 0f00 	cmp.w	r8, #0
 8008402:	dd9c      	ble.n	800833e <__sflush_r+0x1a>
 8008404:	6a21      	ldr	r1, [r4, #32]
 8008406:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008408:	4643      	mov	r3, r8
 800840a:	463a      	mov	r2, r7
 800840c:	4628      	mov	r0, r5
 800840e:	47b0      	blx	r6
 8008410:	2800      	cmp	r0, #0
 8008412:	dc06      	bgt.n	8008422 <__sflush_r+0xfe>
 8008414:	89a3      	ldrh	r3, [r4, #12]
 8008416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800841a:	81a3      	strh	r3, [r4, #12]
 800841c:	f04f 30ff 	mov.w	r0, #4294967295
 8008420:	e78e      	b.n	8008340 <__sflush_r+0x1c>
 8008422:	4407      	add	r7, r0
 8008424:	eba8 0800 	sub.w	r8, r8, r0
 8008428:	e7e9      	b.n	80083fe <__sflush_r+0xda>
 800842a:	bf00      	nop
 800842c:	dfbffffe 	.word	0xdfbffffe

08008430 <_fflush_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	690b      	ldr	r3, [r1, #16]
 8008434:	4605      	mov	r5, r0
 8008436:	460c      	mov	r4, r1
 8008438:	b913      	cbnz	r3, 8008440 <_fflush_r+0x10>
 800843a:	2500      	movs	r5, #0
 800843c:	4628      	mov	r0, r5
 800843e:	bd38      	pop	{r3, r4, r5, pc}
 8008440:	b118      	cbz	r0, 800844a <_fflush_r+0x1a>
 8008442:	6a03      	ldr	r3, [r0, #32]
 8008444:	b90b      	cbnz	r3, 800844a <_fflush_r+0x1a>
 8008446:	f7fe fb6f 	bl	8006b28 <__sinit>
 800844a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d0f3      	beq.n	800843a <_fflush_r+0xa>
 8008452:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008454:	07d0      	lsls	r0, r2, #31
 8008456:	d404      	bmi.n	8008462 <_fflush_r+0x32>
 8008458:	0599      	lsls	r1, r3, #22
 800845a:	d402      	bmi.n	8008462 <_fflush_r+0x32>
 800845c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800845e:	f7fe fc5a 	bl	8006d16 <__retarget_lock_acquire_recursive>
 8008462:	4628      	mov	r0, r5
 8008464:	4621      	mov	r1, r4
 8008466:	f7ff ff5d 	bl	8008324 <__sflush_r>
 800846a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800846c:	07da      	lsls	r2, r3, #31
 800846e:	4605      	mov	r5, r0
 8008470:	d4e4      	bmi.n	800843c <_fflush_r+0xc>
 8008472:	89a3      	ldrh	r3, [r4, #12]
 8008474:	059b      	lsls	r3, r3, #22
 8008476:	d4e1      	bmi.n	800843c <_fflush_r+0xc>
 8008478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800847a:	f7fe fc4d 	bl	8006d18 <__retarget_lock_release_recursive>
 800847e:	e7dd      	b.n	800843c <_fflush_r+0xc>

08008480 <_sbrk_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	4d06      	ldr	r5, [pc, #24]	; (800849c <_sbrk_r+0x1c>)
 8008484:	2300      	movs	r3, #0
 8008486:	4604      	mov	r4, r0
 8008488:	4608      	mov	r0, r1
 800848a:	602b      	str	r3, [r5, #0]
 800848c:	f7f9 fac2 	bl	8001a14 <_sbrk>
 8008490:	1c43      	adds	r3, r0, #1
 8008492:	d102      	bne.n	800849a <_sbrk_r+0x1a>
 8008494:	682b      	ldr	r3, [r5, #0]
 8008496:	b103      	cbz	r3, 800849a <_sbrk_r+0x1a>
 8008498:	6023      	str	r3, [r4, #0]
 800849a:	bd38      	pop	{r3, r4, r5, pc}
 800849c:	200004cc 	.word	0x200004cc

080084a0 <__assert_func>:
 80084a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084a2:	4614      	mov	r4, r2
 80084a4:	461a      	mov	r2, r3
 80084a6:	4b09      	ldr	r3, [pc, #36]	; (80084cc <__assert_func+0x2c>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4605      	mov	r5, r0
 80084ac:	68d8      	ldr	r0, [r3, #12]
 80084ae:	b14c      	cbz	r4, 80084c4 <__assert_func+0x24>
 80084b0:	4b07      	ldr	r3, [pc, #28]	; (80084d0 <__assert_func+0x30>)
 80084b2:	9100      	str	r1, [sp, #0]
 80084b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084b8:	4906      	ldr	r1, [pc, #24]	; (80084d4 <__assert_func+0x34>)
 80084ba:	462b      	mov	r3, r5
 80084bc:	f000 f844 	bl	8008548 <fiprintf>
 80084c0:	f000 f854 	bl	800856c <abort>
 80084c4:	4b04      	ldr	r3, [pc, #16]	; (80084d8 <__assert_func+0x38>)
 80084c6:	461c      	mov	r4, r3
 80084c8:	e7f3      	b.n	80084b2 <__assert_func+0x12>
 80084ca:	bf00      	nop
 80084cc:	20000064 	.word	0x20000064
 80084d0:	08008d8e 	.word	0x08008d8e
 80084d4:	08008d9b 	.word	0x08008d9b
 80084d8:	08008dc9 	.word	0x08008dc9

080084dc <_calloc_r>:
 80084dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084de:	fba1 2402 	umull	r2, r4, r1, r2
 80084e2:	b94c      	cbnz	r4, 80084f8 <_calloc_r+0x1c>
 80084e4:	4611      	mov	r1, r2
 80084e6:	9201      	str	r2, [sp, #4]
 80084e8:	f7ff fb14 	bl	8007b14 <_malloc_r>
 80084ec:	9a01      	ldr	r2, [sp, #4]
 80084ee:	4605      	mov	r5, r0
 80084f0:	b930      	cbnz	r0, 8008500 <_calloc_r+0x24>
 80084f2:	4628      	mov	r0, r5
 80084f4:	b003      	add	sp, #12
 80084f6:	bd30      	pop	{r4, r5, pc}
 80084f8:	220c      	movs	r2, #12
 80084fa:	6002      	str	r2, [r0, #0]
 80084fc:	2500      	movs	r5, #0
 80084fe:	e7f8      	b.n	80084f2 <_calloc_r+0x16>
 8008500:	4621      	mov	r1, r4
 8008502:	f7fe fb8a 	bl	8006c1a <memset>
 8008506:	e7f4      	b.n	80084f2 <_calloc_r+0x16>

08008508 <__ascii_mbtowc>:
 8008508:	b082      	sub	sp, #8
 800850a:	b901      	cbnz	r1, 800850e <__ascii_mbtowc+0x6>
 800850c:	a901      	add	r1, sp, #4
 800850e:	b142      	cbz	r2, 8008522 <__ascii_mbtowc+0x1a>
 8008510:	b14b      	cbz	r3, 8008526 <__ascii_mbtowc+0x1e>
 8008512:	7813      	ldrb	r3, [r2, #0]
 8008514:	600b      	str	r3, [r1, #0]
 8008516:	7812      	ldrb	r2, [r2, #0]
 8008518:	1e10      	subs	r0, r2, #0
 800851a:	bf18      	it	ne
 800851c:	2001      	movne	r0, #1
 800851e:	b002      	add	sp, #8
 8008520:	4770      	bx	lr
 8008522:	4610      	mov	r0, r2
 8008524:	e7fb      	b.n	800851e <__ascii_mbtowc+0x16>
 8008526:	f06f 0001 	mvn.w	r0, #1
 800852a:	e7f8      	b.n	800851e <__ascii_mbtowc+0x16>

0800852c <__ascii_wctomb>:
 800852c:	b149      	cbz	r1, 8008542 <__ascii_wctomb+0x16>
 800852e:	2aff      	cmp	r2, #255	; 0xff
 8008530:	bf85      	ittet	hi
 8008532:	238a      	movhi	r3, #138	; 0x8a
 8008534:	6003      	strhi	r3, [r0, #0]
 8008536:	700a      	strbls	r2, [r1, #0]
 8008538:	f04f 30ff 	movhi.w	r0, #4294967295
 800853c:	bf98      	it	ls
 800853e:	2001      	movls	r0, #1
 8008540:	4770      	bx	lr
 8008542:	4608      	mov	r0, r1
 8008544:	4770      	bx	lr
	...

08008548 <fiprintf>:
 8008548:	b40e      	push	{r1, r2, r3}
 800854a:	b503      	push	{r0, r1, lr}
 800854c:	4601      	mov	r1, r0
 800854e:	ab03      	add	r3, sp, #12
 8008550:	4805      	ldr	r0, [pc, #20]	; (8008568 <fiprintf+0x20>)
 8008552:	f853 2b04 	ldr.w	r2, [r3], #4
 8008556:	6800      	ldr	r0, [r0, #0]
 8008558:	9301      	str	r3, [sp, #4]
 800855a:	f000 f837 	bl	80085cc <_vfiprintf_r>
 800855e:	b002      	add	sp, #8
 8008560:	f85d eb04 	ldr.w	lr, [sp], #4
 8008564:	b003      	add	sp, #12
 8008566:	4770      	bx	lr
 8008568:	20000064 	.word	0x20000064

0800856c <abort>:
 800856c:	b508      	push	{r3, lr}
 800856e:	2006      	movs	r0, #6
 8008570:	f000 fa04 	bl	800897c <raise>
 8008574:	2001      	movs	r0, #1
 8008576:	f7f9 f9d5 	bl	8001924 <_exit>

0800857a <__sfputc_r>:
 800857a:	6893      	ldr	r3, [r2, #8]
 800857c:	3b01      	subs	r3, #1
 800857e:	2b00      	cmp	r3, #0
 8008580:	b410      	push	{r4}
 8008582:	6093      	str	r3, [r2, #8]
 8008584:	da08      	bge.n	8008598 <__sfputc_r+0x1e>
 8008586:	6994      	ldr	r4, [r2, #24]
 8008588:	42a3      	cmp	r3, r4
 800858a:	db01      	blt.n	8008590 <__sfputc_r+0x16>
 800858c:	290a      	cmp	r1, #10
 800858e:	d103      	bne.n	8008598 <__sfputc_r+0x1e>
 8008590:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008594:	f000 b934 	b.w	8008800 <__swbuf_r>
 8008598:	6813      	ldr	r3, [r2, #0]
 800859a:	1c58      	adds	r0, r3, #1
 800859c:	6010      	str	r0, [r2, #0]
 800859e:	7019      	strb	r1, [r3, #0]
 80085a0:	4608      	mov	r0, r1
 80085a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <__sfputs_r>:
 80085a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085aa:	4606      	mov	r6, r0
 80085ac:	460f      	mov	r7, r1
 80085ae:	4614      	mov	r4, r2
 80085b0:	18d5      	adds	r5, r2, r3
 80085b2:	42ac      	cmp	r4, r5
 80085b4:	d101      	bne.n	80085ba <__sfputs_r+0x12>
 80085b6:	2000      	movs	r0, #0
 80085b8:	e007      	b.n	80085ca <__sfputs_r+0x22>
 80085ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085be:	463a      	mov	r2, r7
 80085c0:	4630      	mov	r0, r6
 80085c2:	f7ff ffda 	bl	800857a <__sfputc_r>
 80085c6:	1c43      	adds	r3, r0, #1
 80085c8:	d1f3      	bne.n	80085b2 <__sfputs_r+0xa>
 80085ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080085cc <_vfiprintf_r>:
 80085cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d0:	460d      	mov	r5, r1
 80085d2:	b09d      	sub	sp, #116	; 0x74
 80085d4:	4614      	mov	r4, r2
 80085d6:	4698      	mov	r8, r3
 80085d8:	4606      	mov	r6, r0
 80085da:	b118      	cbz	r0, 80085e4 <_vfiprintf_r+0x18>
 80085dc:	6a03      	ldr	r3, [r0, #32]
 80085de:	b90b      	cbnz	r3, 80085e4 <_vfiprintf_r+0x18>
 80085e0:	f7fe faa2 	bl	8006b28 <__sinit>
 80085e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085e6:	07d9      	lsls	r1, r3, #31
 80085e8:	d405      	bmi.n	80085f6 <_vfiprintf_r+0x2a>
 80085ea:	89ab      	ldrh	r3, [r5, #12]
 80085ec:	059a      	lsls	r2, r3, #22
 80085ee:	d402      	bmi.n	80085f6 <_vfiprintf_r+0x2a>
 80085f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085f2:	f7fe fb90 	bl	8006d16 <__retarget_lock_acquire_recursive>
 80085f6:	89ab      	ldrh	r3, [r5, #12]
 80085f8:	071b      	lsls	r3, r3, #28
 80085fa:	d501      	bpl.n	8008600 <_vfiprintf_r+0x34>
 80085fc:	692b      	ldr	r3, [r5, #16]
 80085fe:	b99b      	cbnz	r3, 8008628 <_vfiprintf_r+0x5c>
 8008600:	4629      	mov	r1, r5
 8008602:	4630      	mov	r0, r6
 8008604:	f000 f93a 	bl	800887c <__swsetup_r>
 8008608:	b170      	cbz	r0, 8008628 <_vfiprintf_r+0x5c>
 800860a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800860c:	07dc      	lsls	r4, r3, #31
 800860e:	d504      	bpl.n	800861a <_vfiprintf_r+0x4e>
 8008610:	f04f 30ff 	mov.w	r0, #4294967295
 8008614:	b01d      	add	sp, #116	; 0x74
 8008616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800861a:	89ab      	ldrh	r3, [r5, #12]
 800861c:	0598      	lsls	r0, r3, #22
 800861e:	d4f7      	bmi.n	8008610 <_vfiprintf_r+0x44>
 8008620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008622:	f7fe fb79 	bl	8006d18 <__retarget_lock_release_recursive>
 8008626:	e7f3      	b.n	8008610 <_vfiprintf_r+0x44>
 8008628:	2300      	movs	r3, #0
 800862a:	9309      	str	r3, [sp, #36]	; 0x24
 800862c:	2320      	movs	r3, #32
 800862e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008632:	f8cd 800c 	str.w	r8, [sp, #12]
 8008636:	2330      	movs	r3, #48	; 0x30
 8008638:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80087ec <_vfiprintf_r+0x220>
 800863c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008640:	f04f 0901 	mov.w	r9, #1
 8008644:	4623      	mov	r3, r4
 8008646:	469a      	mov	sl, r3
 8008648:	f813 2b01 	ldrb.w	r2, [r3], #1
 800864c:	b10a      	cbz	r2, 8008652 <_vfiprintf_r+0x86>
 800864e:	2a25      	cmp	r2, #37	; 0x25
 8008650:	d1f9      	bne.n	8008646 <_vfiprintf_r+0x7a>
 8008652:	ebba 0b04 	subs.w	fp, sl, r4
 8008656:	d00b      	beq.n	8008670 <_vfiprintf_r+0xa4>
 8008658:	465b      	mov	r3, fp
 800865a:	4622      	mov	r2, r4
 800865c:	4629      	mov	r1, r5
 800865e:	4630      	mov	r0, r6
 8008660:	f7ff ffa2 	bl	80085a8 <__sfputs_r>
 8008664:	3001      	adds	r0, #1
 8008666:	f000 80a9 	beq.w	80087bc <_vfiprintf_r+0x1f0>
 800866a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800866c:	445a      	add	r2, fp
 800866e:	9209      	str	r2, [sp, #36]	; 0x24
 8008670:	f89a 3000 	ldrb.w	r3, [sl]
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 80a1 	beq.w	80087bc <_vfiprintf_r+0x1f0>
 800867a:	2300      	movs	r3, #0
 800867c:	f04f 32ff 	mov.w	r2, #4294967295
 8008680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008684:	f10a 0a01 	add.w	sl, sl, #1
 8008688:	9304      	str	r3, [sp, #16]
 800868a:	9307      	str	r3, [sp, #28]
 800868c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008690:	931a      	str	r3, [sp, #104]	; 0x68
 8008692:	4654      	mov	r4, sl
 8008694:	2205      	movs	r2, #5
 8008696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800869a:	4854      	ldr	r0, [pc, #336]	; (80087ec <_vfiprintf_r+0x220>)
 800869c:	f7f7 fdc0 	bl	8000220 <memchr>
 80086a0:	9a04      	ldr	r2, [sp, #16]
 80086a2:	b9d8      	cbnz	r0, 80086dc <_vfiprintf_r+0x110>
 80086a4:	06d1      	lsls	r1, r2, #27
 80086a6:	bf44      	itt	mi
 80086a8:	2320      	movmi	r3, #32
 80086aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086ae:	0713      	lsls	r3, r2, #28
 80086b0:	bf44      	itt	mi
 80086b2:	232b      	movmi	r3, #43	; 0x2b
 80086b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086b8:	f89a 3000 	ldrb.w	r3, [sl]
 80086bc:	2b2a      	cmp	r3, #42	; 0x2a
 80086be:	d015      	beq.n	80086ec <_vfiprintf_r+0x120>
 80086c0:	9a07      	ldr	r2, [sp, #28]
 80086c2:	4654      	mov	r4, sl
 80086c4:	2000      	movs	r0, #0
 80086c6:	f04f 0c0a 	mov.w	ip, #10
 80086ca:	4621      	mov	r1, r4
 80086cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086d0:	3b30      	subs	r3, #48	; 0x30
 80086d2:	2b09      	cmp	r3, #9
 80086d4:	d94d      	bls.n	8008772 <_vfiprintf_r+0x1a6>
 80086d6:	b1b0      	cbz	r0, 8008706 <_vfiprintf_r+0x13a>
 80086d8:	9207      	str	r2, [sp, #28]
 80086da:	e014      	b.n	8008706 <_vfiprintf_r+0x13a>
 80086dc:	eba0 0308 	sub.w	r3, r0, r8
 80086e0:	fa09 f303 	lsl.w	r3, r9, r3
 80086e4:	4313      	orrs	r3, r2
 80086e6:	9304      	str	r3, [sp, #16]
 80086e8:	46a2      	mov	sl, r4
 80086ea:	e7d2      	b.n	8008692 <_vfiprintf_r+0xc6>
 80086ec:	9b03      	ldr	r3, [sp, #12]
 80086ee:	1d19      	adds	r1, r3, #4
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	9103      	str	r1, [sp, #12]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	bfbb      	ittet	lt
 80086f8:	425b      	neglt	r3, r3
 80086fa:	f042 0202 	orrlt.w	r2, r2, #2
 80086fe:	9307      	strge	r3, [sp, #28]
 8008700:	9307      	strlt	r3, [sp, #28]
 8008702:	bfb8      	it	lt
 8008704:	9204      	strlt	r2, [sp, #16]
 8008706:	7823      	ldrb	r3, [r4, #0]
 8008708:	2b2e      	cmp	r3, #46	; 0x2e
 800870a:	d10c      	bne.n	8008726 <_vfiprintf_r+0x15a>
 800870c:	7863      	ldrb	r3, [r4, #1]
 800870e:	2b2a      	cmp	r3, #42	; 0x2a
 8008710:	d134      	bne.n	800877c <_vfiprintf_r+0x1b0>
 8008712:	9b03      	ldr	r3, [sp, #12]
 8008714:	1d1a      	adds	r2, r3, #4
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	9203      	str	r2, [sp, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	bfb8      	it	lt
 800871e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008722:	3402      	adds	r4, #2
 8008724:	9305      	str	r3, [sp, #20]
 8008726:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80087fc <_vfiprintf_r+0x230>
 800872a:	7821      	ldrb	r1, [r4, #0]
 800872c:	2203      	movs	r2, #3
 800872e:	4650      	mov	r0, sl
 8008730:	f7f7 fd76 	bl	8000220 <memchr>
 8008734:	b138      	cbz	r0, 8008746 <_vfiprintf_r+0x17a>
 8008736:	9b04      	ldr	r3, [sp, #16]
 8008738:	eba0 000a 	sub.w	r0, r0, sl
 800873c:	2240      	movs	r2, #64	; 0x40
 800873e:	4082      	lsls	r2, r0
 8008740:	4313      	orrs	r3, r2
 8008742:	3401      	adds	r4, #1
 8008744:	9304      	str	r3, [sp, #16]
 8008746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800874a:	4829      	ldr	r0, [pc, #164]	; (80087f0 <_vfiprintf_r+0x224>)
 800874c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008750:	2206      	movs	r2, #6
 8008752:	f7f7 fd65 	bl	8000220 <memchr>
 8008756:	2800      	cmp	r0, #0
 8008758:	d03f      	beq.n	80087da <_vfiprintf_r+0x20e>
 800875a:	4b26      	ldr	r3, [pc, #152]	; (80087f4 <_vfiprintf_r+0x228>)
 800875c:	bb1b      	cbnz	r3, 80087a6 <_vfiprintf_r+0x1da>
 800875e:	9b03      	ldr	r3, [sp, #12]
 8008760:	3307      	adds	r3, #7
 8008762:	f023 0307 	bic.w	r3, r3, #7
 8008766:	3308      	adds	r3, #8
 8008768:	9303      	str	r3, [sp, #12]
 800876a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800876c:	443b      	add	r3, r7
 800876e:	9309      	str	r3, [sp, #36]	; 0x24
 8008770:	e768      	b.n	8008644 <_vfiprintf_r+0x78>
 8008772:	fb0c 3202 	mla	r2, ip, r2, r3
 8008776:	460c      	mov	r4, r1
 8008778:	2001      	movs	r0, #1
 800877a:	e7a6      	b.n	80086ca <_vfiprintf_r+0xfe>
 800877c:	2300      	movs	r3, #0
 800877e:	3401      	adds	r4, #1
 8008780:	9305      	str	r3, [sp, #20]
 8008782:	4619      	mov	r1, r3
 8008784:	f04f 0c0a 	mov.w	ip, #10
 8008788:	4620      	mov	r0, r4
 800878a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800878e:	3a30      	subs	r2, #48	; 0x30
 8008790:	2a09      	cmp	r2, #9
 8008792:	d903      	bls.n	800879c <_vfiprintf_r+0x1d0>
 8008794:	2b00      	cmp	r3, #0
 8008796:	d0c6      	beq.n	8008726 <_vfiprintf_r+0x15a>
 8008798:	9105      	str	r1, [sp, #20]
 800879a:	e7c4      	b.n	8008726 <_vfiprintf_r+0x15a>
 800879c:	fb0c 2101 	mla	r1, ip, r1, r2
 80087a0:	4604      	mov	r4, r0
 80087a2:	2301      	movs	r3, #1
 80087a4:	e7f0      	b.n	8008788 <_vfiprintf_r+0x1bc>
 80087a6:	ab03      	add	r3, sp, #12
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	462a      	mov	r2, r5
 80087ac:	4b12      	ldr	r3, [pc, #72]	; (80087f8 <_vfiprintf_r+0x22c>)
 80087ae:	a904      	add	r1, sp, #16
 80087b0:	4630      	mov	r0, r6
 80087b2:	f7fd fd67 	bl	8006284 <_printf_float>
 80087b6:	4607      	mov	r7, r0
 80087b8:	1c78      	adds	r0, r7, #1
 80087ba:	d1d6      	bne.n	800876a <_vfiprintf_r+0x19e>
 80087bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087be:	07d9      	lsls	r1, r3, #31
 80087c0:	d405      	bmi.n	80087ce <_vfiprintf_r+0x202>
 80087c2:	89ab      	ldrh	r3, [r5, #12]
 80087c4:	059a      	lsls	r2, r3, #22
 80087c6:	d402      	bmi.n	80087ce <_vfiprintf_r+0x202>
 80087c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087ca:	f7fe faa5 	bl	8006d18 <__retarget_lock_release_recursive>
 80087ce:	89ab      	ldrh	r3, [r5, #12]
 80087d0:	065b      	lsls	r3, r3, #25
 80087d2:	f53f af1d 	bmi.w	8008610 <_vfiprintf_r+0x44>
 80087d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087d8:	e71c      	b.n	8008614 <_vfiprintf_r+0x48>
 80087da:	ab03      	add	r3, sp, #12
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	462a      	mov	r2, r5
 80087e0:	4b05      	ldr	r3, [pc, #20]	; (80087f8 <_vfiprintf_r+0x22c>)
 80087e2:	a904      	add	r1, sp, #16
 80087e4:	4630      	mov	r0, r6
 80087e6:	f7fd fff1 	bl	80067cc <_printf_i>
 80087ea:	e7e4      	b.n	80087b6 <_vfiprintf_r+0x1ea>
 80087ec:	08008ecb 	.word	0x08008ecb
 80087f0:	08008ed5 	.word	0x08008ed5
 80087f4:	08006285 	.word	0x08006285
 80087f8:	080085a9 	.word	0x080085a9
 80087fc:	08008ed1 	.word	0x08008ed1

08008800 <__swbuf_r>:
 8008800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008802:	460e      	mov	r6, r1
 8008804:	4614      	mov	r4, r2
 8008806:	4605      	mov	r5, r0
 8008808:	b118      	cbz	r0, 8008812 <__swbuf_r+0x12>
 800880a:	6a03      	ldr	r3, [r0, #32]
 800880c:	b90b      	cbnz	r3, 8008812 <__swbuf_r+0x12>
 800880e:	f7fe f98b 	bl	8006b28 <__sinit>
 8008812:	69a3      	ldr	r3, [r4, #24]
 8008814:	60a3      	str	r3, [r4, #8]
 8008816:	89a3      	ldrh	r3, [r4, #12]
 8008818:	071a      	lsls	r2, r3, #28
 800881a:	d525      	bpl.n	8008868 <__swbuf_r+0x68>
 800881c:	6923      	ldr	r3, [r4, #16]
 800881e:	b31b      	cbz	r3, 8008868 <__swbuf_r+0x68>
 8008820:	6823      	ldr	r3, [r4, #0]
 8008822:	6922      	ldr	r2, [r4, #16]
 8008824:	1a98      	subs	r0, r3, r2
 8008826:	6963      	ldr	r3, [r4, #20]
 8008828:	b2f6      	uxtb	r6, r6
 800882a:	4283      	cmp	r3, r0
 800882c:	4637      	mov	r7, r6
 800882e:	dc04      	bgt.n	800883a <__swbuf_r+0x3a>
 8008830:	4621      	mov	r1, r4
 8008832:	4628      	mov	r0, r5
 8008834:	f7ff fdfc 	bl	8008430 <_fflush_r>
 8008838:	b9e0      	cbnz	r0, 8008874 <__swbuf_r+0x74>
 800883a:	68a3      	ldr	r3, [r4, #8]
 800883c:	3b01      	subs	r3, #1
 800883e:	60a3      	str	r3, [r4, #8]
 8008840:	6823      	ldr	r3, [r4, #0]
 8008842:	1c5a      	adds	r2, r3, #1
 8008844:	6022      	str	r2, [r4, #0]
 8008846:	701e      	strb	r6, [r3, #0]
 8008848:	6962      	ldr	r2, [r4, #20]
 800884a:	1c43      	adds	r3, r0, #1
 800884c:	429a      	cmp	r2, r3
 800884e:	d004      	beq.n	800885a <__swbuf_r+0x5a>
 8008850:	89a3      	ldrh	r3, [r4, #12]
 8008852:	07db      	lsls	r3, r3, #31
 8008854:	d506      	bpl.n	8008864 <__swbuf_r+0x64>
 8008856:	2e0a      	cmp	r6, #10
 8008858:	d104      	bne.n	8008864 <__swbuf_r+0x64>
 800885a:	4621      	mov	r1, r4
 800885c:	4628      	mov	r0, r5
 800885e:	f7ff fde7 	bl	8008430 <_fflush_r>
 8008862:	b938      	cbnz	r0, 8008874 <__swbuf_r+0x74>
 8008864:	4638      	mov	r0, r7
 8008866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008868:	4621      	mov	r1, r4
 800886a:	4628      	mov	r0, r5
 800886c:	f000 f806 	bl	800887c <__swsetup_r>
 8008870:	2800      	cmp	r0, #0
 8008872:	d0d5      	beq.n	8008820 <__swbuf_r+0x20>
 8008874:	f04f 37ff 	mov.w	r7, #4294967295
 8008878:	e7f4      	b.n	8008864 <__swbuf_r+0x64>
	...

0800887c <__swsetup_r>:
 800887c:	b538      	push	{r3, r4, r5, lr}
 800887e:	4b2a      	ldr	r3, [pc, #168]	; (8008928 <__swsetup_r+0xac>)
 8008880:	4605      	mov	r5, r0
 8008882:	6818      	ldr	r0, [r3, #0]
 8008884:	460c      	mov	r4, r1
 8008886:	b118      	cbz	r0, 8008890 <__swsetup_r+0x14>
 8008888:	6a03      	ldr	r3, [r0, #32]
 800888a:	b90b      	cbnz	r3, 8008890 <__swsetup_r+0x14>
 800888c:	f7fe f94c 	bl	8006b28 <__sinit>
 8008890:	89a3      	ldrh	r3, [r4, #12]
 8008892:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008896:	0718      	lsls	r0, r3, #28
 8008898:	d422      	bmi.n	80088e0 <__swsetup_r+0x64>
 800889a:	06d9      	lsls	r1, r3, #27
 800889c:	d407      	bmi.n	80088ae <__swsetup_r+0x32>
 800889e:	2309      	movs	r3, #9
 80088a0:	602b      	str	r3, [r5, #0]
 80088a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088a6:	81a3      	strh	r3, [r4, #12]
 80088a8:	f04f 30ff 	mov.w	r0, #4294967295
 80088ac:	e034      	b.n	8008918 <__swsetup_r+0x9c>
 80088ae:	0758      	lsls	r0, r3, #29
 80088b0:	d512      	bpl.n	80088d8 <__swsetup_r+0x5c>
 80088b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088b4:	b141      	cbz	r1, 80088c8 <__swsetup_r+0x4c>
 80088b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088ba:	4299      	cmp	r1, r3
 80088bc:	d002      	beq.n	80088c4 <__swsetup_r+0x48>
 80088be:	4628      	mov	r0, r5
 80088c0:	f7ff f8b4 	bl	8007a2c <_free_r>
 80088c4:	2300      	movs	r3, #0
 80088c6:	6363      	str	r3, [r4, #52]	; 0x34
 80088c8:	89a3      	ldrh	r3, [r4, #12]
 80088ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088ce:	81a3      	strh	r3, [r4, #12]
 80088d0:	2300      	movs	r3, #0
 80088d2:	6063      	str	r3, [r4, #4]
 80088d4:	6923      	ldr	r3, [r4, #16]
 80088d6:	6023      	str	r3, [r4, #0]
 80088d8:	89a3      	ldrh	r3, [r4, #12]
 80088da:	f043 0308 	orr.w	r3, r3, #8
 80088de:	81a3      	strh	r3, [r4, #12]
 80088e0:	6923      	ldr	r3, [r4, #16]
 80088e2:	b94b      	cbnz	r3, 80088f8 <__swsetup_r+0x7c>
 80088e4:	89a3      	ldrh	r3, [r4, #12]
 80088e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088ee:	d003      	beq.n	80088f8 <__swsetup_r+0x7c>
 80088f0:	4621      	mov	r1, r4
 80088f2:	4628      	mov	r0, r5
 80088f4:	f000 f884 	bl	8008a00 <__smakebuf_r>
 80088f8:	89a0      	ldrh	r0, [r4, #12]
 80088fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088fe:	f010 0301 	ands.w	r3, r0, #1
 8008902:	d00a      	beq.n	800891a <__swsetup_r+0x9e>
 8008904:	2300      	movs	r3, #0
 8008906:	60a3      	str	r3, [r4, #8]
 8008908:	6963      	ldr	r3, [r4, #20]
 800890a:	425b      	negs	r3, r3
 800890c:	61a3      	str	r3, [r4, #24]
 800890e:	6923      	ldr	r3, [r4, #16]
 8008910:	b943      	cbnz	r3, 8008924 <__swsetup_r+0xa8>
 8008912:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008916:	d1c4      	bne.n	80088a2 <__swsetup_r+0x26>
 8008918:	bd38      	pop	{r3, r4, r5, pc}
 800891a:	0781      	lsls	r1, r0, #30
 800891c:	bf58      	it	pl
 800891e:	6963      	ldrpl	r3, [r4, #20]
 8008920:	60a3      	str	r3, [r4, #8]
 8008922:	e7f4      	b.n	800890e <__swsetup_r+0x92>
 8008924:	2000      	movs	r0, #0
 8008926:	e7f7      	b.n	8008918 <__swsetup_r+0x9c>
 8008928:	20000064 	.word	0x20000064

0800892c <_raise_r>:
 800892c:	291f      	cmp	r1, #31
 800892e:	b538      	push	{r3, r4, r5, lr}
 8008930:	4604      	mov	r4, r0
 8008932:	460d      	mov	r5, r1
 8008934:	d904      	bls.n	8008940 <_raise_r+0x14>
 8008936:	2316      	movs	r3, #22
 8008938:	6003      	str	r3, [r0, #0]
 800893a:	f04f 30ff 	mov.w	r0, #4294967295
 800893e:	bd38      	pop	{r3, r4, r5, pc}
 8008940:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008942:	b112      	cbz	r2, 800894a <_raise_r+0x1e>
 8008944:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008948:	b94b      	cbnz	r3, 800895e <_raise_r+0x32>
 800894a:	4620      	mov	r0, r4
 800894c:	f000 f830 	bl	80089b0 <_getpid_r>
 8008950:	462a      	mov	r2, r5
 8008952:	4601      	mov	r1, r0
 8008954:	4620      	mov	r0, r4
 8008956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800895a:	f000 b817 	b.w	800898c <_kill_r>
 800895e:	2b01      	cmp	r3, #1
 8008960:	d00a      	beq.n	8008978 <_raise_r+0x4c>
 8008962:	1c59      	adds	r1, r3, #1
 8008964:	d103      	bne.n	800896e <_raise_r+0x42>
 8008966:	2316      	movs	r3, #22
 8008968:	6003      	str	r3, [r0, #0]
 800896a:	2001      	movs	r0, #1
 800896c:	e7e7      	b.n	800893e <_raise_r+0x12>
 800896e:	2400      	movs	r4, #0
 8008970:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008974:	4628      	mov	r0, r5
 8008976:	4798      	blx	r3
 8008978:	2000      	movs	r0, #0
 800897a:	e7e0      	b.n	800893e <_raise_r+0x12>

0800897c <raise>:
 800897c:	4b02      	ldr	r3, [pc, #8]	; (8008988 <raise+0xc>)
 800897e:	4601      	mov	r1, r0
 8008980:	6818      	ldr	r0, [r3, #0]
 8008982:	f7ff bfd3 	b.w	800892c <_raise_r>
 8008986:	bf00      	nop
 8008988:	20000064 	.word	0x20000064

0800898c <_kill_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	4d07      	ldr	r5, [pc, #28]	; (80089ac <_kill_r+0x20>)
 8008990:	2300      	movs	r3, #0
 8008992:	4604      	mov	r4, r0
 8008994:	4608      	mov	r0, r1
 8008996:	4611      	mov	r1, r2
 8008998:	602b      	str	r3, [r5, #0]
 800899a:	f7f8 ffb3 	bl	8001904 <_kill>
 800899e:	1c43      	adds	r3, r0, #1
 80089a0:	d102      	bne.n	80089a8 <_kill_r+0x1c>
 80089a2:	682b      	ldr	r3, [r5, #0]
 80089a4:	b103      	cbz	r3, 80089a8 <_kill_r+0x1c>
 80089a6:	6023      	str	r3, [r4, #0]
 80089a8:	bd38      	pop	{r3, r4, r5, pc}
 80089aa:	bf00      	nop
 80089ac:	200004cc 	.word	0x200004cc

080089b0 <_getpid_r>:
 80089b0:	f7f8 bfa0 	b.w	80018f4 <_getpid>

080089b4 <__swhatbuf_r>:
 80089b4:	b570      	push	{r4, r5, r6, lr}
 80089b6:	460c      	mov	r4, r1
 80089b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089bc:	2900      	cmp	r1, #0
 80089be:	b096      	sub	sp, #88	; 0x58
 80089c0:	4615      	mov	r5, r2
 80089c2:	461e      	mov	r6, r3
 80089c4:	da0d      	bge.n	80089e2 <__swhatbuf_r+0x2e>
 80089c6:	89a3      	ldrh	r3, [r4, #12]
 80089c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80089cc:	f04f 0100 	mov.w	r1, #0
 80089d0:	bf0c      	ite	eq
 80089d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80089d6:	2340      	movne	r3, #64	; 0x40
 80089d8:	2000      	movs	r0, #0
 80089da:	6031      	str	r1, [r6, #0]
 80089dc:	602b      	str	r3, [r5, #0]
 80089de:	b016      	add	sp, #88	; 0x58
 80089e0:	bd70      	pop	{r4, r5, r6, pc}
 80089e2:	466a      	mov	r2, sp
 80089e4:	f000 f848 	bl	8008a78 <_fstat_r>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	dbec      	blt.n	80089c6 <__swhatbuf_r+0x12>
 80089ec:	9901      	ldr	r1, [sp, #4]
 80089ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80089f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80089f6:	4259      	negs	r1, r3
 80089f8:	4159      	adcs	r1, r3
 80089fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089fe:	e7eb      	b.n	80089d8 <__swhatbuf_r+0x24>

08008a00 <__smakebuf_r>:
 8008a00:	898b      	ldrh	r3, [r1, #12]
 8008a02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a04:	079d      	lsls	r5, r3, #30
 8008a06:	4606      	mov	r6, r0
 8008a08:	460c      	mov	r4, r1
 8008a0a:	d507      	bpl.n	8008a1c <__smakebuf_r+0x1c>
 8008a0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	6123      	str	r3, [r4, #16]
 8008a14:	2301      	movs	r3, #1
 8008a16:	6163      	str	r3, [r4, #20]
 8008a18:	b002      	add	sp, #8
 8008a1a:	bd70      	pop	{r4, r5, r6, pc}
 8008a1c:	ab01      	add	r3, sp, #4
 8008a1e:	466a      	mov	r2, sp
 8008a20:	f7ff ffc8 	bl	80089b4 <__swhatbuf_r>
 8008a24:	9900      	ldr	r1, [sp, #0]
 8008a26:	4605      	mov	r5, r0
 8008a28:	4630      	mov	r0, r6
 8008a2a:	f7ff f873 	bl	8007b14 <_malloc_r>
 8008a2e:	b948      	cbnz	r0, 8008a44 <__smakebuf_r+0x44>
 8008a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a34:	059a      	lsls	r2, r3, #22
 8008a36:	d4ef      	bmi.n	8008a18 <__smakebuf_r+0x18>
 8008a38:	f023 0303 	bic.w	r3, r3, #3
 8008a3c:	f043 0302 	orr.w	r3, r3, #2
 8008a40:	81a3      	strh	r3, [r4, #12]
 8008a42:	e7e3      	b.n	8008a0c <__smakebuf_r+0xc>
 8008a44:	89a3      	ldrh	r3, [r4, #12]
 8008a46:	6020      	str	r0, [r4, #0]
 8008a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a4c:	81a3      	strh	r3, [r4, #12]
 8008a4e:	9b00      	ldr	r3, [sp, #0]
 8008a50:	6163      	str	r3, [r4, #20]
 8008a52:	9b01      	ldr	r3, [sp, #4]
 8008a54:	6120      	str	r0, [r4, #16]
 8008a56:	b15b      	cbz	r3, 8008a70 <__smakebuf_r+0x70>
 8008a58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	f000 f81d 	bl	8008a9c <_isatty_r>
 8008a62:	b128      	cbz	r0, 8008a70 <__smakebuf_r+0x70>
 8008a64:	89a3      	ldrh	r3, [r4, #12]
 8008a66:	f023 0303 	bic.w	r3, r3, #3
 8008a6a:	f043 0301 	orr.w	r3, r3, #1
 8008a6e:	81a3      	strh	r3, [r4, #12]
 8008a70:	89a3      	ldrh	r3, [r4, #12]
 8008a72:	431d      	orrs	r5, r3
 8008a74:	81a5      	strh	r5, [r4, #12]
 8008a76:	e7cf      	b.n	8008a18 <__smakebuf_r+0x18>

08008a78 <_fstat_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4d07      	ldr	r5, [pc, #28]	; (8008a98 <_fstat_r+0x20>)
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	4604      	mov	r4, r0
 8008a80:	4608      	mov	r0, r1
 8008a82:	4611      	mov	r1, r2
 8008a84:	602b      	str	r3, [r5, #0]
 8008a86:	f7f8 ff9c 	bl	80019c2 <_fstat>
 8008a8a:	1c43      	adds	r3, r0, #1
 8008a8c:	d102      	bne.n	8008a94 <_fstat_r+0x1c>
 8008a8e:	682b      	ldr	r3, [r5, #0]
 8008a90:	b103      	cbz	r3, 8008a94 <_fstat_r+0x1c>
 8008a92:	6023      	str	r3, [r4, #0]
 8008a94:	bd38      	pop	{r3, r4, r5, pc}
 8008a96:	bf00      	nop
 8008a98:	200004cc 	.word	0x200004cc

08008a9c <_isatty_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4d06      	ldr	r5, [pc, #24]	; (8008ab8 <_isatty_r+0x1c>)
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	4608      	mov	r0, r1
 8008aa6:	602b      	str	r3, [r5, #0]
 8008aa8:	f7f8 ff9b 	bl	80019e2 <_isatty>
 8008aac:	1c43      	adds	r3, r0, #1
 8008aae:	d102      	bne.n	8008ab6 <_isatty_r+0x1a>
 8008ab0:	682b      	ldr	r3, [r5, #0]
 8008ab2:	b103      	cbz	r3, 8008ab6 <_isatty_r+0x1a>
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	bd38      	pop	{r3, r4, r5, pc}
 8008ab8:	200004cc 	.word	0x200004cc

08008abc <_init>:
 8008abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008abe:	bf00      	nop
 8008ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ac2:	bc08      	pop	{r3}
 8008ac4:	469e      	mov	lr, r3
 8008ac6:	4770      	bx	lr

08008ac8 <_fini>:
 8008ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aca:	bf00      	nop
 8008acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ace:	bc08      	pop	{r3}
 8008ad0:	469e      	mov	lr, r3
 8008ad2:	4770      	bx	lr
