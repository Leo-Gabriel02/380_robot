
380_robot_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a904  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  0800aae8  0800aae8  0000bae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afd8  0800afd8  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800afd8  0800afd8  0000bfd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afe0  0800afe0  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afe0  0800afe0  0000bfe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afe4  0800afe4  0000bfe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800afe8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  200001d8  0800b1c0  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000580  0800b1c0  0000c580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017eb5  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b77  00000000  00000000  000240bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  00026c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001157  00000000  00000000  00028250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ced  00000000  00000000  000293a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a19b  00000000  00000000  0004e094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9361  00000000  00000000  0006822f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00161590  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000717c  00000000  00000000  001615d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00168750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800aacc 	.word	0x0800aacc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800aacc 	.word	0x0800aacc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96a 	b.w	8000f24 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	460c      	mov	r4, r1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d14e      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c74:	4694      	mov	ip, r2
 8000c76:	458c      	cmp	ip, r1
 8000c78:	4686      	mov	lr, r0
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	d962      	bls.n	8000d46 <__udivmoddi4+0xde>
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0320 	rsb	r3, r2, #32
 8000c86:	4091      	lsls	r1, r2
 8000c88:	fa20 f303 	lsr.w	r3, r0, r3
 8000c8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c90:	4319      	orrs	r1, r3
 8000c92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f f68c 	uxth.w	r6, ip
 8000c9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb07 1114 	mls	r1, r7, r4, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb04 f106 	mul.w	r1, r4, r6
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cbe:	f080 8112 	bcs.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 810f 	bls.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc8:	3c02      	subs	r4, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a59      	subs	r1, r3, r1
 8000cce:	fa1f f38e 	uxth.w	r3, lr
 8000cd2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f606 	mul.w	r6, r0, r6
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x94>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cee:	f080 80fc 	bcs.w	8000eea <__udivmoddi4+0x282>
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	f240 80f9 	bls.w	8000eea <__udivmoddi4+0x282>
 8000cf8:	4463      	add	r3, ip
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d02:	2100      	movs	r1, #0
 8000d04:	b11d      	cbz	r5, 8000d0e <__udivmoddi4+0xa6>
 8000d06:	40d3      	lsrs	r3, r2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d905      	bls.n	8000d22 <__udivmoddi4+0xba>
 8000d16:	b10d      	cbz	r5, 8000d1c <__udivmoddi4+0xb4>
 8000d18:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e7f5      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d22:	fab3 f183 	clz	r1, r3
 8000d26:	2900      	cmp	r1, #0
 8000d28:	d146      	bne.n	8000db8 <__udivmoddi4+0x150>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d302      	bcc.n	8000d34 <__udivmoddi4+0xcc>
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	f0c0 80f0 	bcc.w	8000f14 <__udivmoddi4+0x2ac>
 8000d34:	1a86      	subs	r6, r0, r2
 8000d36:	eb64 0303 	sbc.w	r3, r4, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	2d00      	cmp	r5, #0
 8000d3e:	d0e6      	beq.n	8000d0e <__udivmoddi4+0xa6>
 8000d40:	e9c5 6300 	strd	r6, r3, [r5]
 8000d44:	e7e3      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	f040 8090 	bne.w	8000e6c <__udivmoddi4+0x204>
 8000d4c:	eba1 040c 	sub.w	r4, r1, ip
 8000d50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb08 4416 	mls	r4, r8, r6, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb07 f006 	mul.w	r0, r7, r6
 8000d6e:	4298      	cmp	r0, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x11c>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x11a>
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	f200 80cd 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d82:	4626      	mov	r6, r4
 8000d84:	1a1c      	subs	r4, r3, r0
 8000d86:	fa1f f38e 	uxth.w	r3, lr
 8000d8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d96:	fb00 f707 	mul.w	r7, r0, r7
 8000d9a:	429f      	cmp	r7, r3
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x148>
 8000d9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000da2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x146>
 8000da8:	429f      	cmp	r7, r3
 8000daa:	f200 80b0 	bhi.w	8000f0e <__udivmoddi4+0x2a6>
 8000dae:	4620      	mov	r0, r4
 8000db0:	1bdb      	subs	r3, r3, r7
 8000db2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db6:	e7a5      	b.n	8000d04 <__udivmoddi4+0x9c>
 8000db8:	f1c1 0620 	rsb	r6, r1, #32
 8000dbc:	408b      	lsls	r3, r1
 8000dbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dc8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dcc:	ea43 030c 	orr.w	r3, r3, ip
 8000dd0:	40f4      	lsrs	r4, r6
 8000dd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dd6:	0c38      	lsrs	r0, r7, #16
 8000dd8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ddc:	fbb4 fef0 	udiv	lr, r4, r0
 8000de0:	fa1f fc87 	uxth.w	ip, r7
 8000de4:	fb00 441e 	mls	r4, r0, lr, r4
 8000de8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dec:	fb0e f90c 	mul.w	r9, lr, ip
 8000df0:	45a1      	cmp	r9, r4
 8000df2:	fa02 f201 	lsl.w	r2, r2, r1
 8000df6:	d90a      	bls.n	8000e0e <__udivmoddi4+0x1a6>
 8000df8:	193c      	adds	r4, r7, r4
 8000dfa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dfe:	f080 8084 	bcs.w	8000f0a <__udivmoddi4+0x2a2>
 8000e02:	45a1      	cmp	r9, r4
 8000e04:	f240 8081 	bls.w	8000f0a <__udivmoddi4+0x2a2>
 8000e08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	eba4 0409 	sub.w	r4, r4, r9
 8000e12:	fa1f f983 	uxth.w	r9, r3
 8000e16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e26:	45a4      	cmp	ip, r4
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x1d2>
 8000e2a:	193c      	adds	r4, r7, r4
 8000e2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e30:	d267      	bcs.n	8000f02 <__udivmoddi4+0x29a>
 8000e32:	45a4      	cmp	ip, r4
 8000e34:	d965      	bls.n	8000f02 <__udivmoddi4+0x29a>
 8000e36:	3b02      	subs	r3, #2
 8000e38:	443c      	add	r4, r7
 8000e3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e42:	eba4 040c 	sub.w	r4, r4, ip
 8000e46:	429c      	cmp	r4, r3
 8000e48:	46ce      	mov	lr, r9
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	d351      	bcc.n	8000ef2 <__udivmoddi4+0x28a>
 8000e4e:	d04e      	beq.n	8000eee <__udivmoddi4+0x286>
 8000e50:	b155      	cbz	r5, 8000e68 <__udivmoddi4+0x200>
 8000e52:	ebb8 030e 	subs.w	r3, r8, lr
 8000e56:	eb64 040c 	sbc.w	r4, r4, ip
 8000e5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	431e      	orrs	r6, r3
 8000e62:	40cc      	lsrs	r4, r1
 8000e64:	e9c5 6400 	strd	r6, r4, [r5]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	e750      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f103 	lsr.w	r1, r0, r3
 8000e74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e78:	fa24 f303 	lsr.w	r3, r4, r3
 8000e7c:	4094      	lsls	r4, r2
 8000e7e:	430c      	orrs	r4, r1
 8000e80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e88:	fa1f f78c 	uxth.w	r7, ip
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3110 	mls	r1, r8, r0, r3
 8000e94:	0c23      	lsrs	r3, r4, #16
 8000e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9a:	fb00 f107 	mul.w	r1, r0, r7
 8000e9e:	4299      	cmp	r1, r3
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x24c>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eaa:	d22c      	bcs.n	8000f06 <__udivmoddi4+0x29e>
 8000eac:	4299      	cmp	r1, r3
 8000eae:	d92a      	bls.n	8000f06 <__udivmoddi4+0x29e>
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	1a5b      	subs	r3, r3, r1
 8000eb6:	b2a4      	uxth	r4, r4
 8000eb8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ebc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ec0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ec4:	fb01 f307 	mul.w	r3, r1, r7
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x276>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ed4:	d213      	bcs.n	8000efe <__udivmoddi4+0x296>
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	d911      	bls.n	8000efe <__udivmoddi4+0x296>
 8000eda:	3902      	subs	r1, #2
 8000edc:	4464      	add	r4, ip
 8000ede:	1ae4      	subs	r4, r4, r3
 8000ee0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ee4:	e739      	b.n	8000d5a <__udivmoddi4+0xf2>
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	e6f0      	b.n	8000ccc <__udivmoddi4+0x64>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e706      	b.n	8000cfc <__udivmoddi4+0x94>
 8000eee:	45c8      	cmp	r8, r9
 8000ef0:	d2ae      	bcs.n	8000e50 <__udivmoddi4+0x1e8>
 8000ef2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ef6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000efa:	3801      	subs	r0, #1
 8000efc:	e7a8      	b.n	8000e50 <__udivmoddi4+0x1e8>
 8000efe:	4631      	mov	r1, r6
 8000f00:	e7ed      	b.n	8000ede <__udivmoddi4+0x276>
 8000f02:	4603      	mov	r3, r0
 8000f04:	e799      	b.n	8000e3a <__udivmoddi4+0x1d2>
 8000f06:	4630      	mov	r0, r6
 8000f08:	e7d4      	b.n	8000eb4 <__udivmoddi4+0x24c>
 8000f0a:	46d6      	mov	lr, sl
 8000f0c:	e77f      	b.n	8000e0e <__udivmoddi4+0x1a6>
 8000f0e:	4463      	add	r3, ip
 8000f10:	3802      	subs	r0, #2
 8000f12:	e74d      	b.n	8000db0 <__udivmoddi4+0x148>
 8000f14:	4606      	mov	r6, r0
 8000f16:	4623      	mov	r3, r4
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e70f      	b.n	8000d3c <__udivmoddi4+0xd4>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	e730      	b.n	8000d84 <__udivmoddi4+0x11c>
 8000f22:	bf00      	nop

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <runMotors>:
const uint8_t SENSOR_REGS[3] = {0x80 | 0x16, 0x80 | 0x18, 0x80 | 0x1A};
const uint8_t SENSORS[2] = {0, 1};
uint8_t NUM_SENSORS = sizeof(SENSORS)/sizeof(SENSORS[0]);


void runMotors(uint8_t side, uint8_t dir, double duty) {
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	460a      	mov	r2, r1
 8000f32:	ed87 0b00 	vstr	d0, [r7]
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	73bb      	strb	r3, [r7, #14]

	if (duty < 0) {
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f48:	f7ff fdf0 	bl	8000b2c <__aeabi_dcmplt>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d015      	beq.n	8000f7e <runMotors+0x56>
		dir = !dir;
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	bf0c      	ite	eq
 8000f58:	2301      	moveq	r3, #1
 8000f5a:	2300      	movne	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	73bb      	strb	r3, [r7, #14]
		duty = abs(duty);
 8000f60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f64:	f7ff fe20 	bl	8000ba8 <__aeabi_d2iz>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	bfb8      	it	lt
 8000f6e:	425b      	neglt	r3, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff faff 	bl	8000574 <__aeabi_i2d>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	e9c7 2300 	strd	r2, r3, [r7]
	}
	duty = duty * 0.8;
 8000f7e:	a34c      	add	r3, pc, #304	@ (adr r3, 80010b0 <runMotors+0x188>)
 8000f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f88:	f7ff fb5e 	bl	8000648 <__aeabi_dmul>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	e9c7 2300 	strd	r2, r3, [r7]

	if (duty > 0.8) duty = 0.8;
 8000f94:	a346      	add	r3, pc, #280	@ (adr r3, 80010b0 <runMotors+0x188>)
 8000f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f9e:	f7ff fde3 	bl	8000b68 <__aeabi_dcmpgt>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d004      	beq.n	8000fb2 <runMotors+0x8a>
 8000fa8:	a341      	add	r3, pc, #260	@ (adr r3, 80010b0 <runMotors+0x188>)
 8000faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fae:	e9c7 2300 	strd	r2, r3, [r7]

	double duty_adj = dir == BWD ? (1-duty) : duty;
 8000fb2:	7bbb      	ldrb	r3, [r7, #14]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d109      	bne.n	8000fcc <runMotors+0xa4>
 8000fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4939      	ldr	r1, [pc, #228]	@ (80010a8 <runMotors+0x180>)
 8000fc2:	f7ff f989 	bl	80002d8 <__aeabi_dsub>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	e001      	b.n	8000fd0 <runMotors+0xa8>
 8000fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fd0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if (side == LEFT) {
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d130      	bne.n	800103c <runMotors+0x114>
		HAL_GPIO_WritePin(GPIOA, RS_DIR_Pin, dir == BWD ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000fda:	7bbb      	ldrb	r3, [r7, #14]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	bf0c      	ite	eq
 8000fe0:	2301      	moveq	r3, #1
 8000fe2:	2300      	movne	r3, #0
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	2102      	movs	r1, #2
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fee:	f002 fe03 	bl	8003bf8 <HAL_GPIO_WritePin>
		TIM1->CCR3 = duty_adj*TIM1->ARR;
 8000ff2:	4b2e      	ldr	r3, [pc, #184]	@ (80010ac <runMotors+0x184>)
 8000ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff faac 	bl	8000554 <__aeabi_ui2d>
 8000ffc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001000:	f7ff fb22 	bl	8000648 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4c28      	ldr	r4, [pc, #160]	@ (80010ac <runMotors+0x184>)
 800100a:	4610      	mov	r0, r2
 800100c:	4619      	mov	r1, r3
 800100e:	f7ff fdf3 	bl	8000bf8 <__aeabi_d2uiz>
 8001012:	4603      	mov	r3, r0
 8001014:	63e3      	str	r3, [r4, #60]	@ 0x3c
		TIM1->CCR4 = duty_adj*TIM1->ARR;
 8001016:	4b25      	ldr	r3, [pc, #148]	@ (80010ac <runMotors+0x184>)
 8001018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa9a 	bl	8000554 <__aeabi_ui2d>
 8001020:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001024:	f7ff fb10 	bl	8000648 <__aeabi_dmul>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4c1f      	ldr	r4, [pc, #124]	@ (80010ac <runMotors+0x184>)
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	f7ff fde1 	bl	8000bf8 <__aeabi_d2uiz>
 8001036:	4603      	mov	r3, r0
 8001038:	6423      	str	r3, [r4, #64]	@ 0x40
	} else {
		HAL_GPIO_WritePin(GPIOA, LS_DIR_Pin, dir == BWD ? GPIO_PIN_SET : GPIO_PIN_RESET);
		TIM1->CCR1 = duty_adj*TIM1->ARR;
		TIM1->CCR2 = duty_adj*TIM1->ARR;
	}
}
 800103a:	e02f      	b.n	800109c <runMotors+0x174>
		HAL_GPIO_WritePin(GPIOA, LS_DIR_Pin, dir == BWD ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800103c:	7bbb      	ldrb	r3, [r7, #14]
 800103e:	2b01      	cmp	r3, #1
 8001040:	bf0c      	ite	eq
 8001042:	2301      	moveq	r3, #1
 8001044:	2300      	movne	r3, #0
 8001046:	b2db      	uxtb	r3, r3
 8001048:	461a      	mov	r2, r3
 800104a:	2101      	movs	r1, #1
 800104c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001050:	f002 fdd2 	bl	8003bf8 <HAL_GPIO_WritePin>
		TIM1->CCR1 = duty_adj*TIM1->ARR;
 8001054:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <runMotors+0x184>)
 8001056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fa7b 	bl	8000554 <__aeabi_ui2d>
 800105e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001062:	f7ff faf1 	bl	8000648 <__aeabi_dmul>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4c10      	ldr	r4, [pc, #64]	@ (80010ac <runMotors+0x184>)
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f7ff fdc2 	bl	8000bf8 <__aeabi_d2uiz>
 8001074:	4603      	mov	r3, r0
 8001076:	6363      	str	r3, [r4, #52]	@ 0x34
		TIM1->CCR2 = duty_adj*TIM1->ARR;
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <runMotors+0x184>)
 800107a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa69 	bl	8000554 <__aeabi_ui2d>
 8001082:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001086:	f7ff fadf 	bl	8000648 <__aeabi_dmul>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	4c07      	ldr	r4, [pc, #28]	@ (80010ac <runMotors+0x184>)
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fdb0 	bl	8000bf8 <__aeabi_d2uiz>
 8001098:	4603      	mov	r3, r0
 800109a:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800109c:	bf00      	nop
 800109e:	371c      	adds	r7, #28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd90      	pop	{r4, r7, pc}
 80010a4:	f3af 8000 	nop.w
 80010a8:	3ff00000 	.word	0x3ff00000
 80010ac:	40012c00 	.word	0x40012c00
 80010b0:	9999999a 	.word	0x9999999a
 80010b4:	3fe99999 	.word	0x3fe99999

080010b8 <selectMuxAddr>:
	} else {
		GPIOA->ODR &= ~bitMask;
	}
}

uint8_t selectMuxAddr(uint8_t sensor) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0a0      	sub	sp, #128	@ 0x80
 80010bc:	af02      	add	r7, sp, #8
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  char b [100];

  if (sensor > 7) {
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b07      	cmp	r3, #7
 80010c6:	d914      	bls.n	80010f2 <selectMuxAddr+0x3a>
 		sprintf(b, "sensor index %d out of bounds\r\n", sensor);
 80010c8:	79fa      	ldrb	r2, [r7, #7]
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	4923      	ldr	r1, [pc, #140]	@ (800115c <selectMuxAddr+0xa4>)
 80010d0:	4618      	mov	r0, r3
 80010d2:	f007 fbcd 	bl	8008870 <siprintf>
 		HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f8f0 	bl	80002c0 <strlen>
 80010e0:	4603      	mov	r3, r0
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	f107 0110 	add.w	r1, r7, #16
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	481c      	ldr	r0, [pc, #112]	@ (8001160 <selectMuxAddr+0xa8>)
 80010ee:	f006 f829 	bl	8007144 <HAL_UART_Transmit>
  }

  uint8_t data[1] = {1 << sensor};
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	2201      	movs	r2, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	733b      	strb	r3, [r7, #12]

  ret = HAL_I2C_Master_Transmit(&hi2c1, MUX_ADDR, data, 1, HAL_MAX_DELAY);
 80010fe:	f107 020c 	add.w	r2, r7, #12
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	21e0      	movs	r1, #224	@ 0xe0
 800110c:	4815      	ldr	r0, [pc, #84]	@ (8001164 <selectMuxAddr+0xac>)
 800110e:	f002 fe27 	bl	8003d60 <HAL_I2C_Master_Transmit>
 8001112:	4603      	mov	r3, r0
 8001114:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  if ( ret != HAL_OK ) {
 8001118:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800111c:	2b00      	cmp	r3, #0
 800111e:	d017      	beq.n	8001150 <selectMuxAddr+0x98>
 		sprintf(b, "failed to connect to sensor %d - error code %d\r\n", sensor, ret);
 8001120:	79fa      	ldrb	r2, [r7, #7]
 8001122:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001126:	f107 0010 	add.w	r0, r7, #16
 800112a:	490f      	ldr	r1, [pc, #60]	@ (8001168 <selectMuxAddr+0xb0>)
 800112c:	f007 fba0 	bl	8008870 <siprintf>
 		HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f8c3 	bl	80002c0 <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	b29a      	uxth	r2, r3
 800113e:	f107 0110 	add.w	r1, r7, #16
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	4806      	ldr	r0, [pc, #24]	@ (8001160 <selectMuxAddr+0xa8>)
 8001148:	f005 fffc 	bl	8007144 <HAL_UART_Transmit>
 		return 0;
 800114c:	2300      	movs	r3, #0
 800114e:	e000      	b.n	8001152 <selectMuxAddr+0x9a>
 	} else {
// 		sprintf(b, "connected to sensor %d\r\n", sensor);
// 		HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 		return 1;
 8001150:	2301      	movs	r3, #1
 	}
}
 8001152:	4618      	mov	r0, r3
 8001154:	3778      	adds	r7, #120	@ 0x78
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	0800aae8 	.word	0x0800aae8
 8001160:	20000398 	.word	0x20000398
 8001164:	20000260 	.word	0x20000260
 8001168:	0800ab08 	.word	0x0800ab08

0800116c <readSensor>:

uint16_t readSensor(uint8_t sensor) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b0a6      	sub	sp, #152	@ 0x98
 8001170:	af04      	add	r7, sp, #16
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
	if (!selectMuxAddr(sensor)) {
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff9d 	bl	80010b8 <selectMuxAddr>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <readSensor+0x1c>
		return 0;
 8001184:	2300      	movs	r3, #0
 8001186:	e072      	b.n	800126e <readSensor+0x102>
  uint8_t buf16[2];
  char out [100];
  uint16_t val;
  uint16_t rgb[3];

	for (int i = 0; i < 3; i++) {
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800118e:	e049      	b.n	8001224 <readSensor+0xb8>
    ret = HAL_I2C_Mem_Read(&hi2c1, TCS_ADDR, SENSOR_REGS[i], I2C_MEMADD_SIZE_8BIT, buf16, 2, HAL_MAX_DELAY);
 8001190:	4a39      	ldr	r2, [pc, #228]	@ (8001278 <readSensor+0x10c>)
 8001192:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001196:	4413      	add	r3, r2
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	9302      	str	r3, [sp, #8]
 80011a2:	2302      	movs	r3, #2
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2301      	movs	r3, #1
 80011ae:	2152      	movs	r1, #82	@ 0x52
 80011b0:	4832      	ldr	r0, [pc, #200]	@ (800127c <readSensor+0x110>)
 80011b2:	f003 f801 	bl	80041b8 <HAL_I2C_Mem_Read>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b

    if ( ret != HAL_OK ) {
 80011bc:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d016      	beq.n	80011f2 <readSensor+0x86>
   		sprintf(out, "sensor read %d failed with error code %d\r\n", sensor, ret);
 80011c4:	79fa      	ldrb	r2, [r7, #7]
 80011c6:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80011ca:	f107 0010 	add.w	r0, r7, #16
 80011ce:	492c      	ldr	r1, [pc, #176]	@ (8001280 <readSensor+0x114>)
 80011d0:	f007 fb4e 	bl	8008870 <siprintf>
   		HAL_UART_Transmit(&huart2, (uint8_t*)out, strlen(out), HAL_MAX_DELAY);
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f871 	bl	80002c0 <strlen>
 80011de:	4603      	mov	r3, r0
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	f107 0110 	add.w	r1, r7, #16
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	4826      	ldr	r0, [pc, #152]	@ (8001284 <readSensor+0x118>)
 80011ec:	f005 ffaa 	bl	8007144 <HAL_UART_Transmit>
 80011f0:	e013      	b.n	800121a <readSensor+0xae>
   	} else {
      val = buf16[1] << 8 | buf16[0];
 80011f2:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b21b      	sxth	r3, r3
 8001204:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

//   		sprintf(b, "%d %d %d\r\n", buf16[1], buf16[0], val);
//   		HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

   		rgb[i] = val;
 8001208:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	3388      	adds	r3, #136	@ 0x88
 8001210:	443b      	add	r3, r7
 8001212:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8001216:	f823 2c80 	strh.w	r2, [r3, #-128]
	for (int i = 0; i < 3; i++) {
 800121a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800121e:	3301      	adds	r3, #1
 8001220:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001224:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001228:	2b02      	cmp	r3, #2
 800122a:	ddb1      	ble.n	8001190 <readSensor+0x24>
   	}
	}

	uint16_t r = rgb[0];
 800122c:	893b      	ldrh	r3, [r7, #8]
 800122e:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
	uint16_t g = rgb[1];
 8001232:	897b      	ldrh	r3, [r7, #10]
 8001234:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
	uint16_t b = rgb[2];
 8001238:	89bb      	ldrh	r3, [r7, #12]
 800123a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

	uint16_t val2 = r*1000 / (r + g + b) * 3;
 800123e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8001242:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001246:	fb03 f202 	mul.w	r2, r3, r2
 800124a:	f8b7 1082 	ldrh.w	r1, [r7, #130]	@ 0x82
 800124e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8001252:	4419      	add	r1, r3
 8001254:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001258:	440b      	add	r3, r1
 800125a:	fb92 f3f3 	sdiv	r3, r2, r3
 800125e:	b29b      	uxth	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	0052      	lsls	r2, r2, #1
 8001264:	4413      	add	r3, r2
 8001266:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c

//	sprintf(out, "sensor %d  r %d g %d b %d scaled %d\r\n", sensor, r, g, b, val2);
//	HAL_UART_Transmit(&huart2, (uint8_t*)out, strlen(out), HAL_MAX_DELAY);

	return val2;
 800126a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c


}
 800126e:	4618      	mov	r0, r3
 8001270:	3788      	adds	r7, #136	@ 0x88
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	0800ac20 	.word	0x0800ac20
 800127c:	20000260 	.word	0x20000260
 8001280:	0800ab3c 	.word	0x0800ab3c
 8001284:	20000398 	.word	0x20000398

08001288 <initSensors>:

void initSensors() {
 8001288:	b580      	push	{r7, lr}
 800128a:	b0a0      	sub	sp, #128	@ 0x80
 800128c:	af04      	add	r7, sp, #16
  uint8_t int_time;
  uint8_t gain;
  uint8_t enable;
  char b [100];

  int_time = 0xFF;
 800128e:	23ff      	movs	r3, #255	@ 0xff
 8001290:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
  gain = 0x03;
 8001294:	2303      	movs	r3, #3
 8001296:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
  enable = 0x01;
 800129a:	2301      	movs	r3, #1
 800129c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

	for (int i = 0; i < sizeof(SENSORS)/sizeof(SENSORS[0]); i++) {
 80012a0:	2300      	movs	r3, #0
 80012a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80012a4:	e0c4      	b.n	8001430 <initSensors+0x1a8>
		if (!selectMuxAddr(SENSORS[i])) {
 80012a6:	4a66      	ldr	r2, [pc, #408]	@ (8001440 <initSensors+0x1b8>)
 80012a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012aa:	4413      	add	r3, r2
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ff02 	bl	80010b8 <selectMuxAddr>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 80b6 	beq.w	8001428 <initSensors+0x1a0>
				continue;
		}

		// Write integration time
	  ret = HAL_I2C_Mem_Write(&hi2c1, TCS_ADDR, INT_REG, I2C_MEMADD_SIZE_8BIT, &int_time, 1, HAL_MAX_DELAY);
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
 80012c0:	9302      	str	r3, [sp, #8]
 80012c2:	2301      	movs	r3, #1
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	f107 036a 	add.w	r3, r7, #106	@ 0x6a
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2301      	movs	r3, #1
 80012ce:	2281      	movs	r2, #129	@ 0x81
 80012d0:	2152      	movs	r1, #82	@ 0x52
 80012d2:	485c      	ldr	r0, [pc, #368]	@ (8001444 <initSensors+0x1bc>)
 80012d4:	f002 fe5c 	bl	8003f90 <HAL_I2C_Mem_Write>
 80012d8:	4603      	mov	r3, r0
 80012da:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

	  if ( ret != HAL_OK ) {
 80012de:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d013      	beq.n	800130e <initSensors+0x86>
			sprintf(b, "fail 1 %d\r\n", ret);
 80012e6:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4956      	ldr	r1, [pc, #344]	@ (8001448 <initSensors+0x1c0>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f007 fabe 	bl	8008870 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7fe ffe2 	bl	80002c0 <strlen>
 80012fc:	4603      	mov	r3, r0
 80012fe:	b29a      	uxth	r2, r3
 8001300:	1d39      	adds	r1, r7, #4
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	4851      	ldr	r0, [pc, #324]	@ (800144c <initSensors+0x1c4>)
 8001308:	f005 ff1c 	bl	8007144 <HAL_UART_Transmit>
			return;
 800130c:	e094      	b.n	8001438 <initSensors+0x1b0>
		}

	  ret = HAL_I2C_Mem_Write(&hi2c1, TCS_ADDR, GAIN_REG, I2C_MEMADD_SIZE_8BIT, &gain, 1, HAL_MAX_DELAY);
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	9302      	str	r3, [sp, #8]
 8001314:	2301      	movs	r3, #1
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	f107 0369 	add.w	r3, r7, #105	@ 0x69
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	228f      	movs	r2, #143	@ 0x8f
 8001322:	2152      	movs	r1, #82	@ 0x52
 8001324:	4847      	ldr	r0, [pc, #284]	@ (8001444 <initSensors+0x1bc>)
 8001326:	f002 fe33 	bl	8003f90 <HAL_I2C_Mem_Write>
 800132a:	4603      	mov	r3, r0
 800132c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

	  if ( ret != HAL_OK ) {
 8001330:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001334:	2b00      	cmp	r3, #0
 8001336:	d013      	beq.n	8001360 <initSensors+0xd8>
			sprintf(b, "fail 2 %d\r\n", ret);
 8001338:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	4944      	ldr	r1, [pc, #272]	@ (8001450 <initSensors+0x1c8>)
 8001340:	4618      	mov	r0, r3
 8001342:	f007 fa95 	bl	8008870 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	4618      	mov	r0, r3
 800134a:	f7fe ffb9 	bl	80002c0 <strlen>
 800134e:	4603      	mov	r3, r0
 8001350:	b29a      	uxth	r2, r3
 8001352:	1d39      	adds	r1, r7, #4
 8001354:	f04f 33ff 	mov.w	r3, #4294967295
 8001358:	483c      	ldr	r0, [pc, #240]	@ (800144c <initSensors+0x1c4>)
 800135a:	f005 fef3 	bl	8007144 <HAL_UART_Transmit>
			return;
 800135e:	e06b      	b.n	8001438 <initSensors+0x1b0>
		}

	  HAL_Delay(3);
 8001360:	2003      	movs	r0, #3
 8001362:	f001 fa77 	bl	8002854 <HAL_Delay>

	  ret = HAL_I2C_Mem_Write(&hi2c1, TCS_ADDR, EN_REG, I2C_MEMADD_SIZE_8BIT, &enable, 1, HAL_MAX_DELAY);
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	9302      	str	r3, [sp, #8]
 800136c:	2301      	movs	r3, #1
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2301      	movs	r3, #1
 8001378:	2280      	movs	r2, #128	@ 0x80
 800137a:	2152      	movs	r1, #82	@ 0x52
 800137c:	4831      	ldr	r0, [pc, #196]	@ (8001444 <initSensors+0x1bc>)
 800137e:	f002 fe07 	bl	8003f90 <HAL_I2C_Mem_Write>
 8001382:	4603      	mov	r3, r0
 8001384:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

	  if ( ret != HAL_OK ) {
 8001388:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800138c:	2b00      	cmp	r3, #0
 800138e:	d013      	beq.n	80013b8 <initSensors+0x130>
			sprintf(b, "fail 1 %d\r\n", ret);
 8001390:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	492c      	ldr	r1, [pc, #176]	@ (8001448 <initSensors+0x1c0>)
 8001398:	4618      	mov	r0, r3
 800139a:	f007 fa69 	bl	8008870 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7fe ff8d 	bl	80002c0 <strlen>
 80013a6:	4603      	mov	r3, r0
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	1d39      	adds	r1, r7, #4
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
 80013b0:	4826      	ldr	r0, [pc, #152]	@ (800144c <initSensors+0x1c4>)
 80013b2:	f005 fec7 	bl	8007144 <HAL_UART_Transmit>
			return;
 80013b6:	e03f      	b.n	8001438 <initSensors+0x1b0>
		}

	  enable |= 0x02;
 80013b8:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

	  HAL_Delay(3);
 80013c6:	2003      	movs	r0, #3
 80013c8:	f001 fa44 	bl	8002854 <HAL_Delay>

	  ret = HAL_I2C_Mem_Write(&hi2c1, TCS_ADDR, EN_REG, I2C_MEMADD_SIZE_8BIT, &enable, 1, HAL_MAX_DELAY);
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295
 80013d0:	9302      	str	r3, [sp, #8]
 80013d2:	2301      	movs	r3, #1
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2301      	movs	r3, #1
 80013de:	2280      	movs	r2, #128	@ 0x80
 80013e0:	2152      	movs	r1, #82	@ 0x52
 80013e2:	4818      	ldr	r0, [pc, #96]	@ (8001444 <initSensors+0x1bc>)
 80013e4:	f002 fdd4 	bl	8003f90 <HAL_I2C_Mem_Write>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

	  if ( ret != HAL_OK ) {
 80013ee:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d013      	beq.n	800141e <initSensors+0x196>
			sprintf(b, "fail 1 %d\r\n", ret);
 80013f6:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	4912      	ldr	r1, [pc, #72]	@ (8001448 <initSensors+0x1c0>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f007 fa36 	bl	8008870 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	4618      	mov	r0, r3
 8001408:	f7fe ff5a 	bl	80002c0 <strlen>
 800140c:	4603      	mov	r3, r0
 800140e:	b29a      	uxth	r2, r3
 8001410:	1d39      	adds	r1, r7, #4
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	480d      	ldr	r0, [pc, #52]	@ (800144c <initSensors+0x1c4>)
 8001418:	f005 fe94 	bl	8007144 <HAL_UART_Transmit>
			return;
 800141c:	e00c      	b.n	8001438 <initSensors+0x1b0>
		}

	  HAL_Delay(300);
 800141e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001422:	f001 fa17 	bl	8002854 <HAL_Delay>
 8001426:	e000      	b.n	800142a <initSensors+0x1a2>
				continue;
 8001428:	bf00      	nop
	for (int i = 0; i < sizeof(SENSORS)/sizeof(SENSORS[0]); i++) {
 800142a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800142c:	3301      	adds	r3, #1
 800142e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001430:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001432:	2b01      	cmp	r3, #1
 8001434:	f67f af37 	bls.w	80012a6 <initSensors+0x1e>

	}
}
 8001438:	3770      	adds	r7, #112	@ 0x70
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	0800ac24 	.word	0x0800ac24
 8001444:	20000260 	.word	0x20000260
 8001448:	0800ab68 	.word	0x0800ab68
 800144c:	20000398 	.word	0x20000398
 8001450:	0800ab74 	.word	0x0800ab74
 8001454:	00000000 	.word	0x00000000

08001458 <calibrate>:

void calibrate(uint16_t* tape_val, uint16_t* wood_val) {
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b0a4      	sub	sp, #144	@ 0x90
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  char b [100];
	uint16_t tape = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
	uint16_t wood = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e

	uint32_t wood_sum = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	uint32_t tape_sum = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	uint16_t avg_reading = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82

	runMotors(LEFT, FWD, 0.4);
 8001480:	ed9f 0b8f 	vldr	d0, [pc, #572]	@ 80016c0 <calibrate+0x268>
 8001484:	2100      	movs	r1, #0
 8001486:	2000      	movs	r0, #0
 8001488:	f7ff fd4e 	bl	8000f28 <runMotors>
	runMotors(RIGHT, FWD, 0.4);
 800148c:	ed9f 0b8c 	vldr	d0, [pc, #560]	@ 80016c0 <calibrate+0x268>
 8001490:	2100      	movs	r1, #0
 8001492:	2001      	movs	r0, #1
 8001494:	f7ff fd48 	bl	8000f28 <runMotors>

	uint16_t count = 1;
 8001498:	2301      	movs	r3, #1
 800149a:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
	uint16_t tape_count = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

	for (int i = 0; i < NUM_SENSORS; i++) {
 80014a4:	2300      	movs	r3, #0
 80014a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80014a8:	e010      	b.n	80014cc <calibrate+0x74>
		wood_sum += readSensor(SENSORS[i]);
 80014aa:	4a89      	ldr	r2, [pc, #548]	@ (80016d0 <calibrate+0x278>)
 80014ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fe5a 	bl	800116c <readSensor>
 80014b8:	4603      	mov	r3, r0
 80014ba:	461a      	mov	r2, r3
 80014bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80014c0:	4413      	add	r3, r2
 80014c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	for (int i = 0; i < NUM_SENSORS; i++) {
 80014c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014c8:	3301      	adds	r3, #1
 80014ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80014cc:	4b81      	ldr	r3, [pc, #516]	@ (80016d4 <calibrate+0x27c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014d4:	4293      	cmp	r3, r2
 80014d6:	dbe8      	blt.n	80014aa <calibrate+0x52>
	}
	wood_sum /= NUM_SENSORS;
 80014d8:	4b7e      	ldr	r3, [pc, #504]	@ (80016d4 <calibrate+0x27c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80014e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80014e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	wood = wood_sum;
 80014ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80014ee:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e

	sprintf(b, "wood %d\r\n", wood);
 80014f2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	4977      	ldr	r1, [pc, #476]	@ (80016d8 <calibrate+0x280>)
 80014fc:	4618      	mov	r0, r3
 80014fe:	f007 f9b7 	bl	8008870 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	4618      	mov	r0, r3
 8001508:	f7fe feda 	bl	80002c0 <strlen>
 800150c:	4603      	mov	r3, r0
 800150e:	b29a      	uxth	r2, r3
 8001510:	f107 010c 	add.w	r1, r7, #12
 8001514:	f04f 33ff 	mov.w	r3, #4294967295
 8001518:	4870      	ldr	r0, [pc, #448]	@ (80016dc <calibrate+0x284>)
 800151a:	f005 fe13 	bl	8007144 <HAL_UART_Transmit>

	while (1) {
		count++;
 800151e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8001522:	3301      	adds	r3, #1
 8001524:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
		avg_reading = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82

		for (int i = 0; i < NUM_SENSORS; i++) {
 800152e:	2300      	movs	r3, #0
 8001530:	677b      	str	r3, [r7, #116]	@ 0x74
 8001532:	e010      	b.n	8001556 <calibrate+0xfe>
			avg_reading += readSensor(SENSORS[i]);
 8001534:	4a66      	ldr	r2, [pc, #408]	@ (80016d0 <calibrate+0x278>)
 8001536:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001538:	4413      	add	r3, r2
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fe15 	bl	800116c <readSensor>
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800154a:	4413      	add	r3, r2
 800154c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
		for (int i = 0; i < NUM_SENSORS; i++) {
 8001550:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001552:	3301      	adds	r3, #1
 8001554:	677b      	str	r3, [r7, #116]	@ 0x74
 8001556:	4b5f      	ldr	r3, [pc, #380]	@ (80016d4 <calibrate+0x27c>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800155e:	4293      	cmp	r3, r2
 8001560:	dbe8      	blt.n	8001534 <calibrate+0xdc>
		}
		avg_reading /= NUM_SENSORS;
 8001562:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8001566:	4a5b      	ldr	r2, [pc, #364]	@ (80016d4 <calibrate+0x27c>)
 8001568:	7812      	ldrb	r2, [r2, #0]
 800156a:	fb93 f3f2 	sdiv	r3, r3, r2
 800156e:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82

		if (abs(avg_reading - wood) <= wood*0.3) {
 8001572:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 8001576:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	bfb8      	it	lt
 8001580:	425b      	neglt	r3, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe fff6 	bl	8000574 <__aeabi_i2d>
 8001588:	4604      	mov	r4, r0
 800158a:	460d      	mov	r5, r1
 800158c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe ffef 	bl	8000574 <__aeabi_i2d>
 8001596:	a34c      	add	r3, pc, #304	@ (adr r3, 80016c8 <calibrate+0x270>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	f7ff f854 	bl	8000648 <__aeabi_dmul>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4620      	mov	r0, r4
 80015a6:	4629      	mov	r1, r5
 80015a8:	f7ff faca 	bl	8000b40 <__aeabi_dcmple>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d02f      	beq.n	8001612 <calibrate+0x1ba>

			wood_sum += avg_reading;
 80015b2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80015b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80015ba:	4413      	add	r3, r2
 80015bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			wood = wood_sum / count;
 80015c0:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 80015c4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80015c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015cc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e

			sprintf(b, "wood %d\r\n", wood);
 80015d0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	493f      	ldr	r1, [pc, #252]	@ (80016d8 <calibrate+0x280>)
 80015da:	4618      	mov	r0, r3
 80015dc:	f007 f948 	bl	8008870 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe fe6b 	bl	80002c0 <strlen>
 80015ea:	4603      	mov	r3, r0
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	f107 010c 	add.w	r1, r7, #12
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
 80015f6:	4839      	ldr	r0, [pc, #228]	@ (80016dc <calibrate+0x284>)
 80015f8:	f005 fda4 	bl	8007144 <HAL_UART_Transmit>

			if (tape_count > 0) {
 80015fc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001600:	2b00      	cmp	r3, #0
 8001602:	d02a      	beq.n	800165a <calibrate+0x202>
				tape_count = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
				tape_sum = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001610:	e023      	b.n	800165a <calibrate+0x202>
			}
		} else {
			sprintf(b, "tape? \r\n");
 8001612:	f107 030c 	add.w	r3, r7, #12
 8001616:	4932      	ldr	r1, [pc, #200]	@ (80016e0 <calibrate+0x288>)
 8001618:	4618      	mov	r0, r3
 800161a:	f007 f929 	bl	8008870 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe fe4c 	bl	80002c0 <strlen>
 8001628:	4603      	mov	r3, r0
 800162a:	b29a      	uxth	r2, r3
 800162c:	f107 010c 	add.w	r1, r7, #12
 8001630:	f04f 33ff 	mov.w	r3, #4294967295
 8001634:	4829      	ldr	r0, [pc, #164]	@ (80016dc <calibrate+0x284>)
 8001636:	f005 fd85 	bl	8007144 <HAL_UART_Transmit>

			tape_count++;
 800163a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800163e:	3301      	adds	r3, #1
 8001640:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
			if (tape_count > 10) {
 8001644:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001648:	2b0a      	cmp	r3, #10
 800164a:	d906      	bls.n	800165a <calibrate+0x202>
				tape_sum += avg_reading;
 800164c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8001650:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001654:	4413      	add	r3, r2
 8001656:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			}
		}

		if (tape_count >= 30) {
 800165a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800165e:	2b1d      	cmp	r3, #29
 8001660:	f67f af5d 	bls.w	800151e <calibrate+0xc6>
			tape = tape_sum / (tape_count-10);
 8001664:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001668:	3b0a      	subs	r3, #10
 800166a:	461a      	mov	r2, r3
 800166c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001670:	fbb3 f3f2 	udiv	r3, r3, r2
 8001674:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72

			sprintf(b, "found tape! %d\r\n", tape);
 8001678:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	4918      	ldr	r1, [pc, #96]	@ (80016e4 <calibrate+0x28c>)
 8001682:	4618      	mov	r0, r3
 8001684:	f007 f8f4 	bl	8008870 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe fe17 	bl	80002c0 <strlen>
 8001692:	4603      	mov	r3, r0
 8001694:	b29a      	uxth	r2, r3
 8001696:	f107 010c 	add.w	r1, r7, #12
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	480f      	ldr	r0, [pc, #60]	@ (80016dc <calibrate+0x284>)
 80016a0:	f005 fd50 	bl	8007144 <HAL_UART_Transmit>
			break;
 80016a4:	bf00      	nop
		}
	}


	*tape_val = tape;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 80016ac:	801a      	strh	r2, [r3, #0]
	*wood_val = wood;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80016b4:	801a      	strh	r2, [r3, #0]
//	runMotors(LEFT, FWD, 0);
//	runMotors(RIGHT, FWD, 0);
}
 80016b6:	bf00      	nop
 80016b8:	3790      	adds	r7, #144	@ 0x90
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bdb0      	pop	{r4, r5, r7, pc}
 80016be:	bf00      	nop
 80016c0:	9999999a 	.word	0x9999999a
 80016c4:	3fd99999 	.word	0x3fd99999
 80016c8:	33333333 	.word	0x33333333
 80016cc:	3fd33333 	.word	0x3fd33333
 80016d0:	0800ac24 	.word	0x0800ac24
 80016d4:	20000000 	.word	0x20000000
 80016d8:	0800ab80 	.word	0x0800ab80
 80016dc:	20000398 	.word	0x20000398
 80016e0:	0800ab8c 	.word	0x0800ab8c
 80016e4:	0800ab98 	.word	0x0800ab98

080016e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e8:	b5b0      	push	{r4, r5, r7, lr}
 80016ea:	b0a8      	sub	sp, #160	@ 0xa0
 80016ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ee:	f001 f840 	bl	8002772 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f2:	f000 f9a3 	bl	8001a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f6:	f000 fc6f 	bl	8001fd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016fa:	f000 fc21 	bl	8001f40 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80016fe:	f000 fa91 	bl	8001c24 <MX_TIM1_Init>
  MX_ADC2_Init();
 8001702:	f000 f9e9 	bl	8001ad8 <MX_ADC2_Init>
  MX_TIM3_Init();
 8001706:	f000 fbbb 	bl	8001e80 <MX_TIM3_Init>
  MX_TIM2_Init();
 800170a:	f000 fb5f 	bl	8001dcc <MX_TIM2_Init>
  MX_I2C1_Init();
 800170e:	f000 fa49 	bl	8001ba4 <MX_I2C1_Init>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);


  HAL_Delay(700);
 8001712:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001716:	f001 f89d 	bl	8002854 <HAL_Delay>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800171a:	2100      	movs	r1, #0
 800171c:	48be      	ldr	r0, [pc, #760]	@ (8001a18 <main+0x330>)
 800171e:	f004 fa3f 	bl	8005ba0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001722:	2104      	movs	r1, #4
 8001724:	48bc      	ldr	r0, [pc, #752]	@ (8001a18 <main+0x330>)
 8001726:	f004 fa3b 	bl	8005ba0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800172a:	2108      	movs	r1, #8
 800172c:	48ba      	ldr	r0, [pc, #744]	@ (8001a18 <main+0x330>)
 800172e:	f004 fa37 	bl	8005ba0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001732:	210c      	movs	r1, #12
 8001734:	48b8      	ldr	r0, [pc, #736]	@ (8001a18 <main+0x330>)
 8001736:	f004 fa33 	bl	8005ba0 <HAL_TIM_PWM_Start>

  // Make sure all motors are stopped
  TIM1->CCR1 = 0;
 800173a:	4bb8      	ldr	r3, [pc, #736]	@ (8001a1c <main+0x334>)
 800173c:	2200      	movs	r2, #0
 800173e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = 0;
 8001740:	4bb6      	ldr	r3, [pc, #728]	@ (8001a1c <main+0x334>)
 8001742:	2200      	movs	r2, #0
 8001744:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR3 = 0;
 8001746:	4bb5      	ldr	r3, [pc, #724]	@ (8001a1c <main+0x334>)
 8001748:	2200      	movs	r2, #0
 800174a:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM1->CCR4 = 0;
 800174c:	4bb3      	ldr	r3, [pc, #716]	@ (8001a1c <main+0x334>)
 800174e:	2200      	movs	r2, #0
 8001750:	641a      	str	r2, [r3, #64]	@ 0x40

  HAL_GPIO_WritePin(GPIOA, LS_DIR_Pin, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	2101      	movs	r1, #1
 8001756:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800175a:	f002 fa4d 	bl	8003bf8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, RS_DIR_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2102      	movs	r1, #2
 8001762:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001766:	f002 fa47 	bl	8003bf8 <HAL_GPIO_WritePin>

  char b [100];

  sprintf(b, "left sensor right sensor \r\n");
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	49ac      	ldr	r1, [pc, #688]	@ (8001a20 <main+0x338>)
 800176e:	4618      	mov	r0, r3
 8001770:	f007 f87e 	bl	8008870 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fda2 	bl	80002c0 <strlen>
 800177c:	4603      	mov	r3, r0
 800177e:	b29a      	uxth	r2, r3
 8001780:	1d39      	adds	r1, r7, #4
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	48a7      	ldr	r0, [pc, #668]	@ (8001a24 <main+0x33c>)
 8001788:	f005 fcdc 	bl	8007144 <HAL_UART_Transmit>

  initSensors();
 800178c:	f7ff fd7c 	bl	8001288 <initSensors>


  uint16_t tape_val;
  uint16_t wood_val;

  HAL_Delay(100);
 8001790:	2064      	movs	r0, #100	@ 0x64
 8001792:	f001 f85f 	bl	8002854 <HAL_Delay>

  calibrate(&tape_val, &wood_val);
 8001796:	463a      	mov	r2, r7
 8001798:	1cbb      	adds	r3, r7, #2
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fe5b 	bl	8001458 <calibrate>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  	uint16_t TARGET = (tape_val+wood_val)/2;
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	461a      	mov	r2, r3
 80017a6:	883b      	ldrh	r3, [r7, #0]
 80017a8:	4413      	add	r3, r2
 80017aa:	0fda      	lsrs	r2, r3, #31
 80017ac:	4413      	add	r3, r2
 80017ae:	105b      	asrs	r3, r3, #1
 80017b0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  	uint16_t READING_RANGE = TARGET - wood_val;
 80017b4:	883b      	ldrh	r3, [r7, #0]
 80017b6:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84

  	uint16_t right = readSensor(SENSORS[0]);
 80017c0:	2300      	movs	r3, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fcd2 	bl	800116c <readSensor>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
  	uint16_t left = readSensor(SENSORS[1]);
 80017ce:	2301      	movs	r3, #1
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fccb 	bl	800116c <readSensor>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80

  	sprintf(b, "left sensor %d right sensor %d\r\n", right, left);
 80017dc:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 80017e0:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 80017e4:	1d38      	adds	r0, r7, #4
 80017e6:	4990      	ldr	r1, [pc, #576]	@ (8001a28 <main+0x340>)
 80017e8:	f007 f842 	bl	8008870 <siprintf>
  	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe fd66 	bl	80002c0 <strlen>
 80017f4:	4603      	mov	r3, r0
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	1d39      	adds	r1, r7, #4
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
 80017fe:	4889      	ldr	r0, [pc, #548]	@ (8001a24 <main+0x33c>)
 8001800:	f005 fca0 	bl	8007144 <HAL_UART_Transmit>

  	int16_t error_r = right - TARGET;
 8001804:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 8001808:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	b29b      	uxth	r3, r3
 8001810:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
  	int16_t error_l = left - TARGET;
 8001814:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 8001818:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	b29b      	uxth	r3, r3
 8001820:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c

  	sprintf(b, "left %d right %d ", error_l, error_r);
 8001824:	f9b7 207c 	ldrsh.w	r2, [r7, #124]	@ 0x7c
 8001828:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 800182c:	1d38      	adds	r0, r7, #4
 800182e:	497f      	ldr	r1, [pc, #508]	@ (8001a2c <main+0x344>)
 8001830:	f007 f81e 	bl	8008870 <siprintf>
  	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fd42 	bl	80002c0 <strlen>
 800183c:	4603      	mov	r3, r0
 800183e:	b29a      	uxth	r2, r3
 8001840:	1d39      	adds	r1, r7, #4
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	4877      	ldr	r0, [pc, #476]	@ (8001a24 <main+0x33c>)
 8001848:	f005 fc7c 	bl	8007144 <HAL_UART_Transmit>
//  		duty_l = MAX_DUTY*0.75;
//  	} else if (right < wood_val*1.1 && left < 0.5*tape_val) {
//  		duty_l = -MAX_DUTY*0.75;
//  		duty_r = MAX_DUTY*0.75;
//  	} else {
  	  	double delta_r = (kp * error_r ) / READING_RANGE * DUTY_RANGE;
 800184c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fe8f 	bl	8000574 <__aeabi_i2d>
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	4b75      	ldr	r3, [pc, #468]	@ (8001a30 <main+0x348>)
 800185c:	f7fe fef4 	bl	8000648 <__aeabi_dmul>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4614      	mov	r4, r2
 8001866:	461d      	mov	r5, r3
 8001868:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fe81 	bl	8000574 <__aeabi_i2d>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4620      	mov	r0, r4
 8001878:	4629      	mov	r1, r5
 800187a:	f7ff f80f 	bl	800089c <__aeabi_ddiv>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	a35e      	add	r3, pc, #376	@ (adr r3, 8001a00 <main+0x318>)
 8001888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188c:	f7fe fedc 	bl	8000648 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  	  	double delta_l = (kp * error_l ) / READING_RANGE * DUTY_RANGE;
 8001898:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	@ 0x7c
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fe69 	bl	8000574 <__aeabi_i2d>
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	4b62      	ldr	r3, [pc, #392]	@ (8001a30 <main+0x348>)
 80018a8:	f7fe fece 	bl	8000648 <__aeabi_dmul>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4614      	mov	r4, r2
 80018b2:	461d      	mov	r5, r3
 80018b4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe5b 	bl	8000574 <__aeabi_i2d>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4620      	mov	r0, r4
 80018c4:	4629      	mov	r1, r5
 80018c6:	f7fe ffe9 	bl	800089c <__aeabi_ddiv>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	a34b      	add	r3, pc, #300	@ (adr r3, 8001a00 <main+0x318>)
 80018d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d8:	f7fe feb6 	bl	8000648 <__aeabi_dmul>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

  		duty_r = AVG_DUTY - delta_r;
 80018e4:	a148      	add	r1, pc, #288	@ (adr r1, 8001a08 <main+0x320>)
 80018e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80018ee:	f7fe fcf3 	bl	80002d8 <__aeabi_dsub>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
  		duty_l = AVG_DUTY - delta_l;
 80018fa:	a143      	add	r1, pc, #268	@ (adr r1, 8001a08 <main+0x320>)
 80018fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001900:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001904:	f7fe fce8 	bl	80002d8 <__aeabi_dsub>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88

  	    if (duty_l < MIN_DUTY) duty_l = MIN_DUTY;
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800191c:	f7ff f906 	bl	8000b2c <__aeabi_dcmplt>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <main+0x24a>
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
  	    if (duty_l > MAX_DUTY) duty_l = MAX_DUTY;
 8001932:	a337      	add	r3, pc, #220	@ (adr r3, 8001a10 <main+0x328>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800193c:	f7ff f914 	bl	8000b68 <__aeabi_dcmpgt>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d004      	beq.n	8001950 <main+0x268>
 8001946:	a332      	add	r3, pc, #200	@ (adr r3, 8001a10 <main+0x328>)
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
  	    if (duty_r < MIN_DUTY) duty_r = MIN_DUTY;
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800195c:	f7ff f8e6 	bl	8000b2c <__aeabi_dcmplt>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d005      	beq.n	8001972 <main+0x28a>
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
  	    if (duty_r > MAX_DUTY) duty_r = MAX_DUTY;
 8001972:	a327      	add	r3, pc, #156	@ (adr r3, 8001a10 <main+0x328>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800197c:	f7ff f8f4 	bl	8000b68 <__aeabi_dcmpgt>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d004      	beq.n	8001990 <main+0x2a8>
 8001986:	a322      	add	r3, pc, #136	@ (adr r3, 8001a10 <main+0x328>)
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
  //	}

  //	sprintf(b, "delta_r %f duty_r %f\r\n", delta_r, duty_r);
  //	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

  	sprintf(b, "left duty %f right duty %f\r\n", duty_l*100, duty_r*100);
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	4b27      	ldr	r3, [pc, #156]	@ (8001a34 <main+0x34c>)
 8001996:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800199a:	f7fe fe55 	bl	8000648 <__aeabi_dmul>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4614      	mov	r4, r2
 80019a4:	461d      	mov	r5, r3
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	4b22      	ldr	r3, [pc, #136]	@ (8001a34 <main+0x34c>)
 80019ac:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80019b0:	f7fe fe4a 	bl	8000648 <__aeabi_dmul>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	1d38      	adds	r0, r7, #4
 80019ba:	e9cd 2300 	strd	r2, r3, [sp]
 80019be:	4622      	mov	r2, r4
 80019c0:	462b      	mov	r3, r5
 80019c2:	491d      	ldr	r1, [pc, #116]	@ (8001a38 <main+0x350>)
 80019c4:	f006 ff54 	bl	8008870 <siprintf>
  	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fc78 	bl	80002c0 <strlen>
 80019d0:	4603      	mov	r3, r0
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	1d39      	adds	r1, r7, #4
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	4812      	ldr	r0, [pc, #72]	@ (8001a24 <main+0x33c>)
 80019dc:	f005 fbb2 	bl	8007144 <HAL_UART_Transmit>

  	runMotors(RIGHT, FWD, duty_r);
 80019e0:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 80019e4:	2100      	movs	r1, #0
 80019e6:	2001      	movs	r0, #1
 80019e8:	f7ff fa9e 	bl	8000f28 <runMotors>
  	runMotors(LEFT, FWD, duty_l);
 80019ec:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 80019f0:	2100      	movs	r1, #0
 80019f2:	2000      	movs	r0, #0
 80019f4:	f7ff fa98 	bl	8000f28 <runMotors>
  {
 80019f8:	e6d3      	b.n	80017a2 <main+0xba>
 80019fa:	bf00      	nop
 80019fc:	f3af 8000 	nop.w
 8001a00:	9999999a 	.word	0x9999999a
 8001a04:	3fc99999 	.word	0x3fc99999
 8001a08:	9999999a 	.word	0x9999999a
 8001a0c:	3fd99999 	.word	0x3fd99999
 8001a10:	33333333 	.word	0x33333333
 8001a14:	3fe33333 	.word	0x3fe33333
 8001a18:	200002b4 	.word	0x200002b4
 8001a1c:	40012c00 	.word	0x40012c00
 8001a20:	0800abac 	.word	0x0800abac
 8001a24:	20000398 	.word	0x20000398
 8001a28:	0800abc8 	.word	0x0800abc8
 8001a2c:	0800abec 	.word	0x0800abec
 8001a30:	3ff80000 	.word	0x3ff80000
 8001a34:	40590000 	.word	0x40590000
 8001a38:	0800ac00 	.word	0x0800ac00

08001a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b094      	sub	sp, #80	@ 0x50
 8001a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a42:	f107 0318 	add.w	r3, r7, #24
 8001a46:	2238      	movs	r2, #56	@ 0x38
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f006 ff73 	bl	8008936 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	60da      	str	r2, [r3, #12]
 8001a5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a5e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a62:	f003 f81d 	bl	8004aa0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a66:	2302      	movs	r3, #2
 8001a68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a70:	2340      	movs	r3, #64	@ 0x40
 8001a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a74:	2302      	movs	r3, #2
 8001a76:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 9;
 8001a80:	2309      	movs	r3, #9
 8001a82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a84:	2302      	movs	r3, #2
 8001a86:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a90:	f107 0318 	add.w	r3, r7, #24
 8001a94:	4618      	mov	r0, r3
 8001a96:	f003 f8b7 	bl	8004c08 <HAL_RCC_OscConfig>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001aa0:	f000 fafc 	bl	800209c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa4:	230f      	movs	r3, #15
 8001aa6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ab4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ab8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2102      	movs	r1, #2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 fbb4 	bl	800522c <HAL_RCC_ClockConfig>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001aca:	f000 fae7 	bl	800209c <Error_Handler>
  }
}
 8001ace:	bf00      	nop
 8001ad0:	3750      	adds	r7, #80	@ 0x50
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ade:	463b      	mov	r3, r7
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f006 ff26 	bl	8008936 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001aea:	4b2b      	ldr	r3, [pc, #172]	@ (8001b98 <MX_ADC2_Init+0xc0>)
 8001aec:	4a2b      	ldr	r2, [pc, #172]	@ (8001b9c <MX_ADC2_Init+0xc4>)
 8001aee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001af0:	4b29      	ldr	r3, [pc, #164]	@ (8001b98 <MX_ADC2_Init+0xc0>)
 8001af2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001af6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001af8:	4b27      	ldr	r3, [pc, #156]	@ (8001b98 <MX_ADC2_Init+0xc0>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001afe:	4b26      	ldr	r3, [pc, #152]	@ (8001b98 <MX_ADC2_Init+0xc0>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001b04:	4b24      	ldr	r3, [pc, #144]	@ (8001b98 <MX_ADC2_Init+0xc0>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b0a:	4b23      	ldr	r3, [pc, #140]	@ (8001b98 <MX_ADC2_Init+0xc0>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b10:	4b21      	ldr	r3, [pc, #132]	@ (8001b98 <MX_ADC2_Init+0xc0>)
 8001b12:	2204      	movs	r2, #4
 8001b14:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001b16:	4b20      	ldr	r3, [pc, #128]	@ (8001b98 <MX_ADC2_Init+0xc0>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b98 <MX_ADC2_Init+0xc0>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001b22:	4b1d      	ldr	r3, [pc, #116]	@ (8001b98 <MX_ADC2_Init+0xc0>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001b28:	4b1b      	ldr	r3, [pc, #108]	@ (8001b98 <MX_ADC2_Init+0xc0>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b30:	4b19      	ldr	r3, [pc, #100]	@ (8001b98 <MX_ADC2_Init+0xc0>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b36:	4b18      	ldr	r3, [pc, #96]	@ (8001b98 <MX_ADC2_Init+0xc0>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001b3c:	4b16      	ldr	r3, [pc, #88]	@ (8001b98 <MX_ADC2_Init+0xc0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b44:	4b14      	ldr	r3, [pc, #80]	@ (8001b98 <MX_ADC2_Init+0xc0>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001b4a:	4b13      	ldr	r3, [pc, #76]	@ (8001b98 <MX_ADC2_Init+0xc0>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001b52:	4811      	ldr	r0, [pc, #68]	@ (8001b98 <MX_ADC2_Init+0xc0>)
 8001b54:	f001 f876 	bl	8002c44 <HAL_ADC_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001b5e:	f000 fa9d 	bl	800209c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001b62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba0 <MX_ADC2_Init+0xc8>)
 8001b64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b66:	2306      	movs	r3, #6
 8001b68:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b6e:	237f      	movs	r3, #127	@ 0x7f
 8001b70:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b72:	2304      	movs	r3, #4
 8001b74:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4806      	ldr	r0, [pc, #24]	@ (8001b98 <MX_ADC2_Init+0xc0>)
 8001b80:	f001 f9e4 	bl	8002f4c <HAL_ADC_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001b8a:	f000 fa87 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	3720      	adds	r7, #32
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200001f4 	.word	0x200001f4
 8001b9c:	50000100 	.word	0x50000100
 8001ba0:	47520000 	.word	0x47520000

08001ba4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <MX_I2C1_Init+0x74>)
 8001baa:	4a1c      	ldr	r2, [pc, #112]	@ (8001c1c <MX_I2C1_Init+0x78>)
 8001bac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 8001bae:	4b1a      	ldr	r3, [pc, #104]	@ (8001c18 <MX_I2C1_Init+0x74>)
 8001bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8001c20 <MX_I2C1_Init+0x7c>)
 8001bb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001bb4:	4b18      	ldr	r3, [pc, #96]	@ (8001c18 <MX_I2C1_Init+0x74>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bba:	4b17      	ldr	r3, [pc, #92]	@ (8001c18 <MX_I2C1_Init+0x74>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bc0:	4b15      	ldr	r3, [pc, #84]	@ (8001c18 <MX_I2C1_Init+0x74>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001bc6:	4b14      	ldr	r3, [pc, #80]	@ (8001c18 <MX_I2C1_Init+0x74>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bcc:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <MX_I2C1_Init+0x74>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <MX_I2C1_Init+0x74>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c18 <MX_I2C1_Init+0x74>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bde:	480e      	ldr	r0, [pc, #56]	@ (8001c18 <MX_I2C1_Init+0x74>)
 8001be0:	f002 f822 	bl	8003c28 <HAL_I2C_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001bea:	f000 fa57 	bl	800209c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4809      	ldr	r0, [pc, #36]	@ (8001c18 <MX_I2C1_Init+0x74>)
 8001bf2:	f002 febd 	bl	8004970 <HAL_I2CEx_ConfigAnalogFilter>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001bfc:	f000 fa4e 	bl	800209c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c00:	2100      	movs	r1, #0
 8001c02:	4805      	ldr	r0, [pc, #20]	@ (8001c18 <MX_I2C1_Init+0x74>)
 8001c04:	f002 feff 	bl	8004a06 <HAL_I2CEx_ConfigDigitalFilter>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c0e:	f000 fa45 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000260 	.word	0x20000260
 8001c1c:	40005400 	.word	0x40005400
 8001c20:	10808dd3 	.word	0x10808dd3

08001c24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b09c      	sub	sp, #112	@ 0x70
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c2a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c44:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
 8001c54:	615a      	str	r2, [r3, #20]
 8001c56:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	2234      	movs	r2, #52	@ 0x34
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f006 fe69 	bl	8008936 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c64:	4b57      	ldr	r3, [pc, #348]	@ (8001dc4 <MX_TIM1_Init+0x1a0>)
 8001c66:	4a58      	ldr	r2, [pc, #352]	@ (8001dc8 <MX_TIM1_Init+0x1a4>)
 8001c68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001c6a:	4b56      	ldr	r3, [pc, #344]	@ (8001dc4 <MX_TIM1_Init+0x1a0>)
 8001c6c:	2247      	movs	r2, #71	@ 0x47
 8001c6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c70:	4b54      	ldr	r3, [pc, #336]	@ (8001dc4 <MX_TIM1_Init+0x1a0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001c76:	4b53      	ldr	r3, [pc, #332]	@ (8001dc4 <MX_TIM1_Init+0x1a0>)
 8001c78:	2263      	movs	r2, #99	@ 0x63
 8001c7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7c:	4b51      	ldr	r3, [pc, #324]	@ (8001dc4 <MX_TIM1_Init+0x1a0>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c82:	4b50      	ldr	r3, [pc, #320]	@ (8001dc4 <MX_TIM1_Init+0x1a0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c88:	4b4e      	ldr	r3, [pc, #312]	@ (8001dc4 <MX_TIM1_Init+0x1a0>)
 8001c8a:	2280      	movs	r2, #128	@ 0x80
 8001c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c8e:	484d      	ldr	r0, [pc, #308]	@ (8001dc4 <MX_TIM1_Init+0x1a0>)
 8001c90:	f003 fed8 	bl	8005a44 <HAL_TIM_Base_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001c9a:	f000 f9ff 	bl	800209c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ca2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ca4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4846      	ldr	r0, [pc, #280]	@ (8001dc4 <MX_TIM1_Init+0x1a0>)
 8001cac:	f004 fa80 	bl	80061b0 <HAL_TIM_ConfigClockSource>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001cb6:	f000 f9f1 	bl	800209c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cba:	4842      	ldr	r0, [pc, #264]	@ (8001dc4 <MX_TIM1_Init+0x1a0>)
 8001cbc:	f003 ff19 	bl	8005af2 <HAL_TIM_PWM_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001cc6:	f000 f9e9 	bl	800209c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cd6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4839      	ldr	r0, [pc, #228]	@ (8001dc4 <MX_TIM1_Init+0x1a0>)
 8001cde:	f005 f8d3 	bl	8006e88 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001ce8:	f000 f9d8 	bl	800209c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cec:	2360      	movs	r3, #96	@ 0x60
 8001cee:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d00:	2300      	movs	r3, #0
 8001d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d04:	2300      	movs	r3, #0
 8001d06:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d08:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	4619      	mov	r1, r3
 8001d10:	482c      	ldr	r0, [pc, #176]	@ (8001dc4 <MX_TIM1_Init+0x1a0>)
 8001d12:	f004 f939 	bl	8005f88 <HAL_TIM_PWM_ConfigChannel>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001d1c:	f000 f9be 	bl	800209c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d20:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d24:	2204      	movs	r2, #4
 8001d26:	4619      	mov	r1, r3
 8001d28:	4826      	ldr	r0, [pc, #152]	@ (8001dc4 <MX_TIM1_Init+0x1a0>)
 8001d2a:	f004 f92d 	bl	8005f88 <HAL_TIM_PWM_ConfigChannel>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001d34:	f000 f9b2 	bl	800209c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d38:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4820      	ldr	r0, [pc, #128]	@ (8001dc4 <MX_TIM1_Init+0x1a0>)
 8001d42:	f004 f921 	bl	8005f88 <HAL_TIM_PWM_ConfigChannel>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001d4c:	f000 f9a6 	bl	800209c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d50:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d54:	220c      	movs	r2, #12
 8001d56:	4619      	mov	r1, r3
 8001d58:	481a      	ldr	r0, [pc, #104]	@ (8001dc4 <MX_TIM1_Init+0x1a0>)
 8001d5a:	f004 f915 	bl	8005f88 <HAL_TIM_PWM_ConfigChannel>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001d64:	f000 f99a 	bl	800209c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d86:	2300      	movs	r3, #0
 8001d88:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d92:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	4619      	mov	r1, r3
 8001da4:	4807      	ldr	r0, [pc, #28]	@ (8001dc4 <MX_TIM1_Init+0x1a0>)
 8001da6:	f005 f8f1 	bl	8006f8c <HAL_TIMEx_ConfigBreakDeadTime>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8001db0:	f000 f974 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001db4:	4803      	ldr	r0, [pc, #12]	@ (8001dc4 <MX_TIM1_Init+0x1a0>)
 8001db6:	f000 fae7 	bl	8002388 <HAL_TIM_MspPostInit>

}
 8001dba:	bf00      	nop
 8001dbc:	3770      	adds	r7, #112	@ 0x70
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200002b4 	.word	0x200002b4
 8001dc8:	40012c00 	.word	0x40012c00

08001dcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08a      	sub	sp, #40	@ 0x28
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd2:	f107 031c 	add.w	r3, r7, #28
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dde:	463b      	mov	r3, r7
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
 8001dec:	615a      	str	r2, [r3, #20]
 8001dee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001df0:	4b22      	ldr	r3, [pc, #136]	@ (8001e7c <MX_TIM2_Init+0xb0>)
 8001df2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001df6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001df8:	4b20      	ldr	r3, [pc, #128]	@ (8001e7c <MX_TIM2_Init+0xb0>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8001e7c <MX_TIM2_Init+0xb0>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001e04:	4b1d      	ldr	r3, [pc, #116]	@ (8001e7c <MX_TIM2_Init+0xb0>)
 8001e06:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e7c <MX_TIM2_Init+0xb0>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e12:	4b1a      	ldr	r3, [pc, #104]	@ (8001e7c <MX_TIM2_Init+0xb0>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e18:	4818      	ldr	r0, [pc, #96]	@ (8001e7c <MX_TIM2_Init+0xb0>)
 8001e1a:	f003 fe6a 	bl	8005af2 <HAL_TIM_PWM_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001e24:	f000 f93a 	bl	800209c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	4619      	mov	r1, r3
 8001e36:	4811      	ldr	r0, [pc, #68]	@ (8001e7c <MX_TIM2_Init+0xb0>)
 8001e38:	f005 f826 	bl	8006e88 <HAL_TIMEx_MasterConfigSynchronization>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001e42:	f000 f92b 	bl	800209c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e46:	2360      	movs	r3, #96	@ 0x60
 8001e48:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e56:	463b      	mov	r3, r7
 8001e58:	2200      	movs	r2, #0
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4807      	ldr	r0, [pc, #28]	@ (8001e7c <MX_TIM2_Init+0xb0>)
 8001e5e:	f004 f893 	bl	8005f88 <HAL_TIM_PWM_ConfigChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001e68:	f000 f918 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e6c:	4803      	ldr	r0, [pc, #12]	@ (8001e7c <MX_TIM2_Init+0xb0>)
 8001e6e:	f000 fa8b 	bl	8002388 <HAL_TIM_MspPostInit>

}
 8001e72:	bf00      	nop
 8001e74:	3728      	adds	r7, #40	@ 0x28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000300 	.word	0x20000300

08001e80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e9e:	4b26      	ldr	r3, [pc, #152]	@ (8001f38 <MX_TIM3_Init+0xb8>)
 8001ea0:	4a26      	ldr	r2, [pc, #152]	@ (8001f3c <MX_TIM3_Init+0xbc>)
 8001ea2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ea4:	4b24      	ldr	r3, [pc, #144]	@ (8001f38 <MX_TIM3_Init+0xb8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eaa:	4b23      	ldr	r3, [pc, #140]	@ (8001f38 <MX_TIM3_Init+0xb8>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001eb0:	4b21      	ldr	r3, [pc, #132]	@ (8001f38 <MX_TIM3_Init+0xb8>)
 8001eb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f38 <MX_TIM3_Init+0xb8>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8001f38 <MX_TIM3_Init+0xb8>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001ec4:	481c      	ldr	r0, [pc, #112]	@ (8001f38 <MX_TIM3_Init+0xb8>)
 8001ec6:	f003 ff6b 	bl	8005da0 <HAL_TIM_IC_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001ed0:	f000 f8e4 	bl	800209c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4815      	ldr	r0, [pc, #84]	@ (8001f38 <MX_TIM3_Init+0xb8>)
 8001ee4:	f004 ffd0 	bl	8006e88 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001eee:	f000 f8d5 	bl	800209c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	2200      	movs	r2, #0
 8001f06:	4619      	mov	r1, r3
 8001f08:	480b      	ldr	r0, [pc, #44]	@ (8001f38 <MX_TIM3_Init+0xb8>)
 8001f0a:	f003 ffa0 	bl	8005e4e <HAL_TIM_IC_ConfigChannel>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001f14:	f000 f8c2 	bl	800209c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4806      	ldr	r0, [pc, #24]	@ (8001f38 <MX_TIM3_Init+0xb8>)
 8001f20:	f003 ff95 	bl	8005e4e <HAL_TIM_IC_ConfigChannel>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001f2a:	f000 f8b7 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f2e:	bf00      	nop
 8001f30:	3720      	adds	r7, #32
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	2000034c 	.word	0x2000034c
 8001f3c:	40000400 	.word	0x40000400

08001f40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f44:	4b22      	ldr	r3, [pc, #136]	@ (8001fd0 <MX_USART2_UART_Init+0x90>)
 8001f46:	4a23      	ldr	r2, [pc, #140]	@ (8001fd4 <MX_USART2_UART_Init+0x94>)
 8001f48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f4a:	4b21      	ldr	r3, [pc, #132]	@ (8001fd0 <MX_USART2_UART_Init+0x90>)
 8001f4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f52:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd0 <MX_USART2_UART_Init+0x90>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f58:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd0 <MX_USART2_UART_Init+0x90>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd0 <MX_USART2_UART_Init+0x90>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f64:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd0 <MX_USART2_UART_Init+0x90>)
 8001f66:	220c      	movs	r2, #12
 8001f68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f6a:	4b19      	ldr	r3, [pc, #100]	@ (8001fd0 <MX_USART2_UART_Init+0x90>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f70:	4b17      	ldr	r3, [pc, #92]	@ (8001fd0 <MX_USART2_UART_Init+0x90>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f76:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <MX_USART2_UART_Init+0x90>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f7c:	4b14      	ldr	r3, [pc, #80]	@ (8001fd0 <MX_USART2_UART_Init+0x90>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f82:	4b13      	ldr	r3, [pc, #76]	@ (8001fd0 <MX_USART2_UART_Init+0x90>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f88:	4811      	ldr	r0, [pc, #68]	@ (8001fd0 <MX_USART2_UART_Init+0x90>)
 8001f8a:	f005 f88b 	bl	80070a4 <HAL_UART_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001f94:	f000 f882 	bl	800209c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f98:	2100      	movs	r1, #0
 8001f9a:	480d      	ldr	r0, [pc, #52]	@ (8001fd0 <MX_USART2_UART_Init+0x90>)
 8001f9c:	f005 fe84 	bl	8007ca8 <HAL_UARTEx_SetTxFifoThreshold>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001fa6:	f000 f879 	bl	800209c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001faa:	2100      	movs	r1, #0
 8001fac:	4808      	ldr	r0, [pc, #32]	@ (8001fd0 <MX_USART2_UART_Init+0x90>)
 8001fae:	f005 feb9 	bl	8007d24 <HAL_UARTEx_SetRxFifoThreshold>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001fb8:	f000 f870 	bl	800209c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001fbc:	4804      	ldr	r0, [pc, #16]	@ (8001fd0 <MX_USART2_UART_Init+0x90>)
 8001fbe:	f005 fe3a 	bl	8007c36 <HAL_UARTEx_DisableFifoMode>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001fc8:	f000 f868 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000398 	.word	0x20000398
 8001fd4:	40004400 	.word	0x40004400

08001fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
 8001fea:	60da      	str	r2, [r3, #12]
 8001fec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fee:	4b29      	ldr	r3, [pc, #164]	@ (8002094 <MX_GPIO_Init+0xbc>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff2:	4a28      	ldr	r2, [pc, #160]	@ (8002094 <MX_GPIO_Init+0xbc>)
 8001ff4:	f043 0320 	orr.w	r3, r3, #32
 8001ff8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ffa:	4b26      	ldr	r3, [pc, #152]	@ (8002094 <MX_GPIO_Init+0xbc>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	4b23      	ldr	r3, [pc, #140]	@ (8002094 <MX_GPIO_Init+0xbc>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200a:	4a22      	ldr	r2, [pc, #136]	@ (8002094 <MX_GPIO_Init+0xbc>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002012:	4b20      	ldr	r3, [pc, #128]	@ (8002094 <MX_GPIO_Init+0xbc>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800201e:	4b1d      	ldr	r3, [pc, #116]	@ (8002094 <MX_GPIO_Init+0xbc>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002022:	4a1c      	ldr	r2, [pc, #112]	@ (8002094 <MX_GPIO_Init+0xbc>)
 8002024:	f043 0302 	orr.w	r3, r3, #2
 8002028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800202a:	4b1a      	ldr	r3, [pc, #104]	@ (8002094 <MX_GPIO_Init+0xbc>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LS_DIR_Pin|RS_DIR_Pin, GPIO_PIN_RESET);
 8002036:	2200      	movs	r2, #0
 8002038:	2103      	movs	r1, #3
 800203a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800203e:	f001 fddb 	bl	8003bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002042:	2200      	movs	r2, #0
 8002044:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002048:	4813      	ldr	r0, [pc, #76]	@ (8002098 <MX_GPIO_Init+0xc0>)
 800204a:	f001 fdd5 	bl	8003bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LS_DIR_Pin RS_DIR_Pin */
  GPIO_InitStruct.Pin = LS_DIR_Pin|RS_DIR_Pin;
 800204e:	2303      	movs	r3, #3
 8002050:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002052:	2301      	movs	r3, #1
 8002054:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 030c 	add.w	r3, r7, #12
 8002062:	4619      	mov	r1, r3
 8002064:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002068:	f001 fc44 	bl	80038f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800206c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002070:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002072:	2301      	movs	r3, #1
 8002074:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800207e:	f107 030c 	add.w	r3, r7, #12
 8002082:	4619      	mov	r1, r3
 8002084:	4804      	ldr	r0, [pc, #16]	@ (8002098 <MX_GPIO_Init+0xc0>)
 8002086:	f001 fc35 	bl	80038f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800208a:	bf00      	nop
 800208c:	3720      	adds	r7, #32
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	48000400 	.word	0x48000400

0800209c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020a0:	b672      	cpsid	i
}
 80020a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <Error_Handler+0x8>

080020a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ae:	4b0f      	ldr	r3, [pc, #60]	@ (80020ec <HAL_MspInit+0x44>)
 80020b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b2:	4a0e      	ldr	r2, [pc, #56]	@ (80020ec <HAL_MspInit+0x44>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80020ba:	4b0c      	ldr	r3, [pc, #48]	@ (80020ec <HAL_MspInit+0x44>)
 80020bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <HAL_MspInit+0x44>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ca:	4a08      	ldr	r2, [pc, #32]	@ (80020ec <HAL_MspInit+0x44>)
 80020cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80020d2:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <HAL_MspInit+0x44>)
 80020d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80020de:	f002 fd83 	bl	8004be8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000

080020f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b09a      	sub	sp, #104	@ 0x68
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	2244      	movs	r2, #68	@ 0x44
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f006 fc10 	bl	8008936 <memset>
  if(hadc->Instance==ADC2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a1e      	ldr	r2, [pc, #120]	@ (8002194 <HAL_ADC_MspInit+0xa4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d134      	bne.n	800218a <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002120:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002124:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002126:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800212a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800212c:	f107 0310 	add.w	r3, r7, #16
 8002130:	4618      	mov	r0, r3
 8002132:	f003 fa97 	bl	8005664 <HAL_RCCEx_PeriphCLKConfig>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800213c:	f7ff ffae 	bl	800209c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002140:	4b15      	ldr	r3, [pc, #84]	@ (8002198 <HAL_ADC_MspInit+0xa8>)
 8002142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002144:	4a14      	ldr	r2, [pc, #80]	@ (8002198 <HAL_ADC_MspInit+0xa8>)
 8002146:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800214a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800214c:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <HAL_ADC_MspInit+0xa8>)
 800214e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002150:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002158:	4b0f      	ldr	r3, [pc, #60]	@ (8002198 <HAL_ADC_MspInit+0xa8>)
 800215a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215c:	4a0e      	ldr	r2, [pc, #56]	@ (8002198 <HAL_ADC_MspInit+0xa8>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002164:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <HAL_ADC_MspInit+0xa8>)
 8002166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN17
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002170:	2310      	movs	r3, #16
 8002172:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002174:	2303      	movs	r3, #3
 8002176:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002180:	4619      	mov	r1, r3
 8002182:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002186:	f001 fbb5 	bl	80038f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800218a:	bf00      	nop
 800218c:	3768      	adds	r7, #104	@ 0x68
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	50000100 	.word	0x50000100
 8002198:	40021000 	.word	0x40021000

0800219c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b09c      	sub	sp, #112	@ 0x70
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021b4:	f107 0318 	add.w	r3, r7, #24
 80021b8:	2244      	movs	r2, #68	@ 0x44
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f006 fbba 	bl	8008936 <memset>
  if(hi2c->Instance==I2C1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a2d      	ldr	r2, [pc, #180]	@ (800227c <HAL_I2C_MspInit+0xe0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d153      	bne.n	8002274 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80021cc:	2340      	movs	r3, #64	@ 0x40
 80021ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80021d0:	2300      	movs	r3, #0
 80021d2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d4:	f107 0318 	add.w	r3, r7, #24
 80021d8:	4618      	mov	r0, r3
 80021da:	f003 fa43 	bl	8005664 <HAL_RCCEx_PeriphCLKConfig>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80021e4:	f7ff ff5a 	bl	800209c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e8:	4b25      	ldr	r3, [pc, #148]	@ (8002280 <HAL_I2C_MspInit+0xe4>)
 80021ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ec:	4a24      	ldr	r2, [pc, #144]	@ (8002280 <HAL_I2C_MspInit+0xe4>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021f4:	4b22      	ldr	r3, [pc, #136]	@ (8002280 <HAL_I2C_MspInit+0xe4>)
 80021f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002200:	4b1f      	ldr	r3, [pc, #124]	@ (8002280 <HAL_I2C_MspInit+0xe4>)
 8002202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002204:	4a1e      	ldr	r2, [pc, #120]	@ (8002280 <HAL_I2C_MspInit+0xe4>)
 8002206:	f043 0302 	orr.w	r3, r3, #2
 800220a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800220c:	4b1c      	ldr	r3, [pc, #112]	@ (8002280 <HAL_I2C_MspInit+0xe4>)
 800220e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002218:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800221c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800221e:	2312      	movs	r3, #18
 8002220:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002222:	2301      	movs	r3, #1
 8002224:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800222a:	2304      	movs	r3, #4
 800222c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002232:	4619      	mov	r1, r3
 8002234:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002238:	f001 fb5c 	bl	80038f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800223c:	2380      	movs	r3, #128	@ 0x80
 800223e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002240:	2312      	movs	r3, #18
 8002242:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002244:	2301      	movs	r3, #1
 8002246:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800224c:	2304      	movs	r3, #4
 800224e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002250:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002254:	4619      	mov	r1, r3
 8002256:	480b      	ldr	r0, [pc, #44]	@ (8002284 <HAL_I2C_MspInit+0xe8>)
 8002258:	f001 fb4c 	bl	80038f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800225c:	4b08      	ldr	r3, [pc, #32]	@ (8002280 <HAL_I2C_MspInit+0xe4>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002260:	4a07      	ldr	r2, [pc, #28]	@ (8002280 <HAL_I2C_MspInit+0xe4>)
 8002262:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002266:	6593      	str	r3, [r2, #88]	@ 0x58
 8002268:	4b05      	ldr	r3, [pc, #20]	@ (8002280 <HAL_I2C_MspInit+0xe4>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002274:	bf00      	nop
 8002276:	3770      	adds	r7, #112	@ 0x70
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40005400 	.word	0x40005400
 8002280:	40021000 	.word	0x40021000
 8002284:	48000400 	.word	0x48000400

08002288 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0a      	ldr	r2, [pc, #40]	@ (80022c0 <HAL_TIM_Base_MspInit+0x38>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d10b      	bne.n	80022b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800229a:	4b0a      	ldr	r3, [pc, #40]	@ (80022c4 <HAL_TIM_Base_MspInit+0x3c>)
 800229c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800229e:	4a09      	ldr	r2, [pc, #36]	@ (80022c4 <HAL_TIM_Base_MspInit+0x3c>)
 80022a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80022a6:	4b07      	ldr	r3, [pc, #28]	@ (80022c4 <HAL_TIM_Base_MspInit+0x3c>)
 80022a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40012c00 	.word	0x40012c00
 80022c4:	40021000 	.word	0x40021000

080022c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022d8:	d10b      	bne.n	80022f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022da:	4b09      	ldr	r3, [pc, #36]	@ (8002300 <HAL_TIM_PWM_MspInit+0x38>)
 80022dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022de:	4a08      	ldr	r2, [pc, #32]	@ (8002300 <HAL_TIM_PWM_MspInit+0x38>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80022e6:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <HAL_TIM_PWM_MspInit+0x38>)
 80022e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022f2:	bf00      	nop
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000

08002304 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	@ 0x28
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a17      	ldr	r2, [pc, #92]	@ (8002380 <HAL_TIM_IC_MspInit+0x7c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d128      	bne.n	8002378 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002326:	4b17      	ldr	r3, [pc, #92]	@ (8002384 <HAL_TIM_IC_MspInit+0x80>)
 8002328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232a:	4a16      	ldr	r2, [pc, #88]	@ (8002384 <HAL_TIM_IC_MspInit+0x80>)
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	6593      	str	r3, [r2, #88]	@ 0x58
 8002332:	4b14      	ldr	r3, [pc, #80]	@ (8002384 <HAL_TIM_IC_MspInit+0x80>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233e:	4b11      	ldr	r3, [pc, #68]	@ (8002384 <HAL_TIM_IC_MspInit+0x80>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002342:	4a10      	ldr	r2, [pc, #64]	@ (8002384 <HAL_TIM_IC_MspInit+0x80>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800234a:	4b0e      	ldr	r3, [pc, #56]	@ (8002384 <HAL_TIM_IC_MspInit+0x80>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_R_Pin|ENC_L_Pin;
 8002356:	23c0      	movs	r3, #192	@ 0xc0
 8002358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002366:	2302      	movs	r3, #2
 8002368:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	4619      	mov	r1, r3
 8002370:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002374:	f001 fabe 	bl	80038f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002378:	bf00      	nop
 800237a:	3728      	adds	r7, #40	@ 0x28
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40000400 	.word	0x40000400
 8002384:	40021000 	.word	0x40021000

08002388 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	@ 0x28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002458 <HAL_TIM_MspPostInit+0xd0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d130      	bne.n	800240c <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023aa:	4b2c      	ldr	r3, [pc, #176]	@ (800245c <HAL_TIM_MspPostInit+0xd4>)
 80023ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ae:	4a2b      	ldr	r2, [pc, #172]	@ (800245c <HAL_TIM_MspPostInit+0xd4>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023b6:	4b29      	ldr	r3, [pc, #164]	@ (800245c <HAL_TIM_MspPostInit+0xd4>)
 80023b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = RS_M2_Pin|RS_M1_Pin|LS_M2_Pin;
 80023c2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80023c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d0:	2300      	movs	r3, #0
 80023d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80023d4:	2306      	movs	r3, #6
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	4619      	mov	r1, r3
 80023de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023e2:	f001 fa87 	bl	80038f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LS_M1_Pin;
 80023e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80023ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ec:	2302      	movs	r3, #2
 80023ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f4:	2300      	movs	r3, #0
 80023f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 80023f8:	230b      	movs	r3, #11
 80023fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LS_M1_GPIO_Port, &GPIO_InitStruct);
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	4619      	mov	r1, r3
 8002402:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002406:	f001 fa75 	bl	80038f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800240a:	e021      	b.n	8002450 <HAL_TIM_MspPostInit+0xc8>
  else if(htim->Instance==TIM2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002414:	d11c      	bne.n	8002450 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002416:	4b11      	ldr	r3, [pc, #68]	@ (800245c <HAL_TIM_MspPostInit+0xd4>)
 8002418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800241a:	4a10      	ldr	r2, [pc, #64]	@ (800245c <HAL_TIM_MspPostInit+0xd4>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002422:	4b0e      	ldr	r3, [pc, #56]	@ (800245c <HAL_TIM_MspPostInit+0xd4>)
 8002424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_Pin;
 800242e:	2320      	movs	r3, #32
 8002430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002432:	2302      	movs	r3, #2
 8002434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800243e:	2301      	movs	r3, #1
 8002440:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8002442:	f107 0314 	add.w	r3, r7, #20
 8002446:	4619      	mov	r1, r3
 8002448:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800244c:	f001 fa52 	bl	80038f4 <HAL_GPIO_Init>
}
 8002450:	bf00      	nop
 8002452:	3728      	adds	r7, #40	@ 0x28
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40012c00 	.word	0x40012c00
 800245c:	40021000 	.word	0x40021000

08002460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b09a      	sub	sp, #104	@ 0x68
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002478:	f107 0310 	add.w	r3, r7, #16
 800247c:	2244      	movs	r2, #68	@ 0x44
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f006 fa58 	bl	8008936 <memset>
  if(huart->Instance==USART2)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a1f      	ldr	r2, [pc, #124]	@ (8002508 <HAL_UART_MspInit+0xa8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d136      	bne.n	80024fe <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002490:	2302      	movs	r3, #2
 8002492:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002494:	2300      	movs	r3, #0
 8002496:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	4618      	mov	r0, r3
 800249e:	f003 f8e1 	bl	8005664 <HAL_RCCEx_PeriphCLKConfig>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024a8:	f7ff fdf8 	bl	800209c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024ac:	4b17      	ldr	r3, [pc, #92]	@ (800250c <HAL_UART_MspInit+0xac>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b0:	4a16      	ldr	r2, [pc, #88]	@ (800250c <HAL_UART_MspInit+0xac>)
 80024b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80024b8:	4b14      	ldr	r3, [pc, #80]	@ (800250c <HAL_UART_MspInit+0xac>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c4:	4b11      	ldr	r3, [pc, #68]	@ (800250c <HAL_UART_MspInit+0xac>)
 80024c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c8:	4a10      	ldr	r2, [pc, #64]	@ (800250c <HAL_UART_MspInit+0xac>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024d0:	4b0e      	ldr	r3, [pc, #56]	@ (800250c <HAL_UART_MspInit+0xac>)
 80024d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80024dc:	230c      	movs	r3, #12
 80024de:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e8:	2300      	movs	r3, #0
 80024ea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024ec:	2307      	movs	r3, #7
 80024ee:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024f4:	4619      	mov	r1, r3
 80024f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024fa:	f001 f9fb 	bl	80038f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024fe:	bf00      	nop
 8002500:	3768      	adds	r7, #104	@ 0x68
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40004400 	.word	0x40004400
 800250c:	40021000 	.word	0x40021000

08002510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002514:	bf00      	nop
 8002516:	e7fd      	b.n	8002514 <NMI_Handler+0x4>

08002518 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800251c:	bf00      	nop
 800251e:	e7fd      	b.n	800251c <HardFault_Handler+0x4>

08002520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002524:	bf00      	nop
 8002526:	e7fd      	b.n	8002524 <MemManage_Handler+0x4>

08002528 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <BusFault_Handler+0x4>

08002530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <UsageFault_Handler+0x4>

08002538 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002566:	f000 f957 	bl	8002818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}

0800256e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0
  return 1;
 8002572:	2301      	movs	r3, #1
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <_kill>:

int _kill(int pid, int sig)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002588:	f006 fa28 	bl	80089dc <__errno>
 800258c:	4603      	mov	r3, r0
 800258e:	2216      	movs	r2, #22
 8002590:	601a      	str	r2, [r3, #0]
  return -1;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <_exit>:

void _exit (int status)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025a6:	f04f 31ff 	mov.w	r1, #4294967295
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ffe7 	bl	800257e <_kill>
  while (1) {}    /* Make sure we hang here */
 80025b0:	bf00      	nop
 80025b2:	e7fd      	b.n	80025b0 <_exit+0x12>

080025b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	e00a      	b.n	80025dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025c6:	f3af 8000 	nop.w
 80025ca:	4601      	mov	r1, r0
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	1c5a      	adds	r2, r3, #1
 80025d0:	60ba      	str	r2, [r7, #8]
 80025d2:	b2ca      	uxtb	r2, r1
 80025d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	3301      	adds	r3, #1
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	dbf0      	blt.n	80025c6 <_read+0x12>
  }

  return len;
 80025e4:	687b      	ldr	r3, [r7, #4]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b086      	sub	sp, #24
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	e009      	b.n	8002614 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	60ba      	str	r2, [r7, #8]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	3301      	adds	r3, #1
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	429a      	cmp	r2, r3
 800261a:	dbf1      	blt.n	8002600 <_write+0x12>
  }
  return len;
 800261c:	687b      	ldr	r3, [r7, #4]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <_close>:

int _close(int file)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800262e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800264e:	605a      	str	r2, [r3, #4]
  return 0;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <_isatty>:

int _isatty(int file)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002666:	2301      	movs	r3, #1
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002698:	4a14      	ldr	r2, [pc, #80]	@ (80026ec <_sbrk+0x5c>)
 800269a:	4b15      	ldr	r3, [pc, #84]	@ (80026f0 <_sbrk+0x60>)
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026a4:	4b13      	ldr	r3, [pc, #76]	@ (80026f4 <_sbrk+0x64>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d102      	bne.n	80026b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026ac:	4b11      	ldr	r3, [pc, #68]	@ (80026f4 <_sbrk+0x64>)
 80026ae:	4a12      	ldr	r2, [pc, #72]	@ (80026f8 <_sbrk+0x68>)
 80026b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026b2:	4b10      	ldr	r3, [pc, #64]	@ (80026f4 <_sbrk+0x64>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d207      	bcs.n	80026d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026c0:	f006 f98c 	bl	80089dc <__errno>
 80026c4:	4603      	mov	r3, r0
 80026c6:	220c      	movs	r2, #12
 80026c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ca:	f04f 33ff 	mov.w	r3, #4294967295
 80026ce:	e009      	b.n	80026e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026d0:	4b08      	ldr	r3, [pc, #32]	@ (80026f4 <_sbrk+0x64>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026d6:	4b07      	ldr	r3, [pc, #28]	@ (80026f4 <_sbrk+0x64>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	4a05      	ldr	r2, [pc, #20]	@ (80026f4 <_sbrk+0x64>)
 80026e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026e2:	68fb      	ldr	r3, [r7, #12]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20008000 	.word	0x20008000
 80026f0:	00000400 	.word	0x00000400
 80026f4:	2000042c 	.word	0x2000042c
 80026f8:	20000580 	.word	0x20000580

080026fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002700:	4b06      	ldr	r3, [pc, #24]	@ (800271c <SystemInit+0x20>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002706:	4a05      	ldr	r2, [pc, #20]	@ (800271c <SystemInit+0x20>)
 8002708:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800270c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002720:	480d      	ldr	r0, [pc, #52]	@ (8002758 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002722:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002724:	f7ff ffea 	bl	80026fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002728:	480c      	ldr	r0, [pc, #48]	@ (800275c <LoopForever+0x6>)
  ldr r1, =_edata
 800272a:	490d      	ldr	r1, [pc, #52]	@ (8002760 <LoopForever+0xa>)
  ldr r2, =_sidata
 800272c:	4a0d      	ldr	r2, [pc, #52]	@ (8002764 <LoopForever+0xe>)
  movs r3, #0
 800272e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002730:	e002      	b.n	8002738 <LoopCopyDataInit>

08002732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002736:	3304      	adds	r3, #4

08002738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800273c:	d3f9      	bcc.n	8002732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800273e:	4a0a      	ldr	r2, [pc, #40]	@ (8002768 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002740:	4c0a      	ldr	r4, [pc, #40]	@ (800276c <LoopForever+0x16>)
  movs r3, #0
 8002742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002744:	e001      	b.n	800274a <LoopFillZerobss>

08002746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002748:	3204      	adds	r2, #4

0800274a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800274c:	d3fb      	bcc.n	8002746 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800274e:	f006 f94b 	bl	80089e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002752:	f7fe ffc9 	bl	80016e8 <main>

08002756 <LoopForever>:

LoopForever:
    b LoopForever
 8002756:	e7fe      	b.n	8002756 <LoopForever>
  ldr   r0, =_estack
 8002758:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800275c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002760:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002764:	0800afe8 	.word	0x0800afe8
  ldr r2, =_sbss
 8002768:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800276c:	20000580 	.word	0x20000580

08002770 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002770:	e7fe      	b.n	8002770 <ADC1_2_IRQHandler>

08002772 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277c:	2003      	movs	r0, #3
 800277e:	f001 f887 	bl	8003890 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002782:	2000      	movs	r0, #0
 8002784:	f000 f80e 	bl	80027a4 <HAL_InitTick>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	71fb      	strb	r3, [r7, #7]
 8002792:	e001      	b.n	8002798 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002794:	f7ff fc88 	bl	80020a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002798:	79fb      	ldrb	r3, [r7, #7]

}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80027b0:	4b16      	ldr	r3, [pc, #88]	@ (800280c <HAL_InitTick+0x68>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d022      	beq.n	80027fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80027b8:	4b15      	ldr	r3, [pc, #84]	@ (8002810 <HAL_InitTick+0x6c>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b13      	ldr	r3, [pc, #76]	@ (800280c <HAL_InitTick+0x68>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80027c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80027c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027cc:	4618      	mov	r0, r3
 80027ce:	f001 f884 	bl	80038da <HAL_SYSTICK_Config>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10f      	bne.n	80027f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b0f      	cmp	r3, #15
 80027dc:	d809      	bhi.n	80027f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027de:	2200      	movs	r2, #0
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	f04f 30ff 	mov.w	r0, #4294967295
 80027e6:	f001 f85e 	bl	80038a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002814 <HAL_InitTick+0x70>)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	e007      	b.n	8002802 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
 80027f6:	e004      	b.n	8002802 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
 80027fc:	e001      	b.n	8002802 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002802:	7bfb      	ldrb	r3, [r7, #15]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	2000000c 	.word	0x2000000c
 8002810:	20000004 	.word	0x20000004
 8002814:	20000008 	.word	0x20000008

08002818 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800281c:	4b05      	ldr	r3, [pc, #20]	@ (8002834 <HAL_IncTick+0x1c>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b05      	ldr	r3, [pc, #20]	@ (8002838 <HAL_IncTick+0x20>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4413      	add	r3, r2
 8002826:	4a03      	ldr	r2, [pc, #12]	@ (8002834 <HAL_IncTick+0x1c>)
 8002828:	6013      	str	r3, [r2, #0]
}
 800282a:	bf00      	nop
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	20000430 	.word	0x20000430
 8002838:	2000000c 	.word	0x2000000c

0800283c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return uwTick;
 8002840:	4b03      	ldr	r3, [pc, #12]	@ (8002850 <HAL_GetTick+0x14>)
 8002842:	681b      	ldr	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000430 	.word	0x20000430

08002854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800285c:	f7ff ffee 	bl	800283c <HAL_GetTick>
 8002860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286c:	d004      	beq.n	8002878 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800286e:	4b09      	ldr	r3, [pc, #36]	@ (8002894 <HAL_Delay+0x40>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4413      	add	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002878:	bf00      	nop
 800287a:	f7ff ffdf 	bl	800283c <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	429a      	cmp	r2, r3
 8002888:	d8f7      	bhi.n	800287a <HAL_Delay+0x26>
  {
  }
}
 800288a:	bf00      	nop
 800288c:	bf00      	nop
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	2000000c 	.word	0x2000000c

08002898 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	609a      	str	r2, [r3, #8]
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	609a      	str	r2, [r3, #8]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3360      	adds	r3, #96	@ 0x60
 8002912:	461a      	mov	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b08      	ldr	r3, [pc, #32]	@ (8002944 <LL_ADC_SetOffset+0x44>)
 8002922:	4013      	ands	r3, r2
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	4313      	orrs	r3, r2
 8002930:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002938:	bf00      	nop
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	03fff000 	.word	0x03fff000

08002948 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3360      	adds	r3, #96	@ 0x60
 8002956:	461a      	mov	r2, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	3360      	adds	r3, #96	@ 0x60
 8002984:	461a      	mov	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	431a      	orrs	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b087      	sub	sp, #28
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3360      	adds	r3, #96	@ 0x60
 80029ba:	461a      	mov	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80029d4:	bf00      	nop
 80029d6:	371c      	adds	r7, #28
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	3360      	adds	r3, #96	@ 0x60
 80029f0:	461a      	mov	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002a0a:	bf00      	nop
 8002a0c:	371c      	adds	r7, #28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	615a      	str	r2, [r3, #20]
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	3330      	adds	r3, #48	@ 0x30
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	f003 030c 	and.w	r3, r3, #12
 8002a58:	4413      	add	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f003 031f 	and.w	r3, r3, #31
 8002a66:	211f      	movs	r1, #31
 8002a68:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	401a      	ands	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	0e9b      	lsrs	r3, r3, #26
 8002a74:	f003 011f 	and.w	r1, r3, #31
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	431a      	orrs	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a88:	bf00      	nop
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3314      	adds	r3, #20
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	0e5b      	lsrs	r3, r3, #25
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	4413      	add	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	0d1b      	lsrs	r3, r3, #20
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2107      	movs	r1, #7
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	401a      	ands	r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	0d1b      	lsrs	r3, r3, #20
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ade:	bf00      	nop
 8002ae0:	371c      	adds	r7, #28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b04:	43db      	mvns	r3, r3
 8002b06:	401a      	ands	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 0318 	and.w	r3, r3, #24
 8002b0e:	4908      	ldr	r1, [pc, #32]	@ (8002b30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b10:	40d9      	lsrs	r1, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	400b      	ands	r3, r1
 8002b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b22:	bf00      	nop
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	0007ffff 	.word	0x0007ffff

08002b34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002b44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6093      	str	r3, [r2, #8]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b6c:	d101      	bne.n	8002b72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002b90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b94:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bbc:	d101      	bne.n	8002bc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <LL_ADC_IsEnabled+0x18>
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <LL_ADC_IsEnabled+0x1a>
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d101      	bne.n	8002c0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d101      	bne.n	8002c34 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c44:	b590      	push	{r4, r7, lr}
 8002c46:	b089      	sub	sp, #36	@ 0x24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e167      	b.n	8002f2e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d109      	bne.n	8002c80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff fa3f 	bl	80020f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ff67 	bl	8002b58 <LL_ADC_IsDeepPowerDownEnabled>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d004      	beq.n	8002c9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff4d 	bl	8002b34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff ff82 	bl	8002ba8 <LL_ADC_IsInternalRegulatorEnabled>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d115      	bne.n	8002cd6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ff66 	bl	8002b80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cb4:	4ba0      	ldr	r3, [pc, #640]	@ (8002f38 <HAL_ADC_Init+0x2f4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	099b      	lsrs	r3, r3, #6
 8002cba:	4aa0      	ldr	r2, [pc, #640]	@ (8002f3c <HAL_ADC_Init+0x2f8>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	099b      	lsrs	r3, r3, #6
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cc8:	e002      	b.n	8002cd0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f9      	bne.n	8002cca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff ff64 	bl	8002ba8 <LL_ADC_IsInternalRegulatorEnabled>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10d      	bne.n	8002d02 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cea:	f043 0210 	orr.w	r2, r3, #16
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cf6:	f043 0201 	orr.w	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff ff75 	bl	8002bf6 <LL_ADC_REG_IsConversionOngoing>
 8002d0c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f040 8100 	bne.w	8002f1c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f040 80fc 	bne.w	8002f1c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d28:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d2c:	f043 0202 	orr.w	r2, r3, #2
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff49 	bl	8002bd0 <LL_ADC_IsEnabled>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d111      	bne.n	8002d68 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d44:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d48:	f7ff ff42 	bl	8002bd0 <LL_ADC_IsEnabled>
 8002d4c:	4604      	mov	r4, r0
 8002d4e:	487c      	ldr	r0, [pc, #496]	@ (8002f40 <HAL_ADC_Init+0x2fc>)
 8002d50:	f7ff ff3e 	bl	8002bd0 <LL_ADC_IsEnabled>
 8002d54:	4603      	mov	r3, r0
 8002d56:	4323      	orrs	r3, r4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d105      	bne.n	8002d68 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4619      	mov	r1, r3
 8002d62:	4878      	ldr	r0, [pc, #480]	@ (8002f44 <HAL_ADC_Init+0x300>)
 8002d64:	f7ff fd98 	bl	8002898 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	7f5b      	ldrb	r3, [r3, #29]
 8002d6c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d72:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002d78:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002d7e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d86:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d106      	bne.n	8002da4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	045b      	lsls	r3, r3, #17
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d009      	beq.n	8002dc0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	4b60      	ldr	r3, [pc, #384]	@ (8002f48 <HAL_ADC_Init+0x304>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	69b9      	ldr	r1, [r7, #24]
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff ff14 	bl	8002c1c <LL_ADC_INJ_IsConversionOngoing>
 8002df4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d16d      	bne.n	8002ed8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d16a      	bne.n	8002ed8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e06:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e0e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e1e:	f023 0302 	bic.w	r3, r3, #2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	69b9      	ldr	r1, [r7, #24]
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d017      	beq.n	8002e64 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691a      	ldr	r2, [r3, #16]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002e42:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002e4c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6911      	ldr	r1, [r2, #16]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002e62:	e013      	b.n	8002e8c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002e72:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e88:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d118      	bne.n	8002ec8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002ea0:	f023 0304 	bic.w	r3, r3, #4
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002eac:	4311      	orrs	r1, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002eb2:	4311      	orrs	r1, r2
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 0201 	orr.w	r2, r2, #1
 8002ec4:	611a      	str	r2, [r3, #16]
 8002ec6:	e007      	b.n	8002ed8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691a      	ldr	r2, [r3, #16]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0201 	bic.w	r2, r2, #1
 8002ed6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d10c      	bne.n	8002efa <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	f023 010f 	bic.w	r1, r3, #15
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	1e5a      	subs	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ef8:	e007      	b.n	8002f0a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 020f 	bic.w	r2, r2, #15
 8002f08:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0e:	f023 0303 	bic.w	r3, r3, #3
 8002f12:	f043 0201 	orr.w	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f1a:	e007      	b.n	8002f2c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f20:	f043 0210 	orr.w	r2, r3, #16
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3724      	adds	r7, #36	@ 0x24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd90      	pop	{r4, r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20000004 	.word	0x20000004
 8002f3c:	053e2d63 	.word	0x053e2d63
 8002f40:	50000100 	.word	0x50000100
 8002f44:	50000300 	.word	0x50000300
 8002f48:	fff04007 	.word	0xfff04007

08002f4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b0b6      	sub	sp, #216	@ 0xd8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x22>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e3c8      	b.n	8003700 <HAL_ADC_ConfigChannel+0x7b4>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fe3b 	bl	8002bf6 <LL_ADC_REG_IsConversionOngoing>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f040 83ad 	bne.w	80036e2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6818      	ldr	r0, [r3, #0]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	6859      	ldr	r1, [r3, #4]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	461a      	mov	r2, r3
 8002f96:	f7ff fd51 	bl	8002a3c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff fe29 	bl	8002bf6 <LL_ADC_REG_IsConversionOngoing>
 8002fa4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff fe35 	bl	8002c1c <LL_ADC_INJ_IsConversionOngoing>
 8002fb2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f040 81d9 	bne.w	8003372 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f040 81d4 	bne.w	8003372 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fd2:	d10f      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	4619      	mov	r1, r3
 8002fe0:	f7ff fd58 	bl	8002a94 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fd12 	bl	8002a16 <LL_ADC_SetSamplingTimeCommonConfig>
 8002ff2:	e00e      	b.n	8003012 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	6819      	ldr	r1, [r3, #0]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	461a      	mov	r2, r3
 8003002:	f7ff fd47 	bl	8002a94 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2100      	movs	r1, #0
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff fd02 	bl	8002a16 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	08db      	lsrs	r3, r3, #3
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	2b04      	cmp	r3, #4
 8003032:	d022      	beq.n	800307a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	6919      	ldr	r1, [r3, #16]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003044:	f7ff fc5c 	bl	8002900 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6818      	ldr	r0, [r3, #0]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	6919      	ldr	r1, [r3, #16]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	461a      	mov	r2, r3
 8003056:	f7ff fca8 	bl	80029aa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003066:	2b01      	cmp	r3, #1
 8003068:	d102      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x124>
 800306a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800306e:	e000      	b.n	8003072 <HAL_ADC_ConfigChannel+0x126>
 8003070:	2300      	movs	r3, #0
 8003072:	461a      	mov	r2, r3
 8003074:	f7ff fcb4 	bl	80029e0 <LL_ADC_SetOffsetSaturation>
 8003078:	e17b      	b.n	8003372 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2100      	movs	r1, #0
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fc61 	bl	8002948 <LL_ADC_GetOffsetChannel>
 8003086:	4603      	mov	r3, r0
 8003088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10a      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x15a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fc56 	bl	8002948 <LL_ADC_GetOffsetChannel>
 800309c:	4603      	mov	r3, r0
 800309e:	0e9b      	lsrs	r3, r3, #26
 80030a0:	f003 021f 	and.w	r2, r3, #31
 80030a4:	e01e      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x198>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2100      	movs	r1, #0
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff fc4b 	bl	8002948 <LL_ADC_GetOffsetChannel>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80030c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80030d4:	2320      	movs	r3, #32
 80030d6:	e004      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80030d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030dc:	fab3 f383 	clz	r3, r3
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d105      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x1b0>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	0e9b      	lsrs	r3, r3, #26
 80030f6:	f003 031f 	and.w	r3, r3, #31
 80030fa:	e018      	b.n	800312e <HAL_ADC_ConfigChannel+0x1e2>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003118:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003120:	2320      	movs	r3, #32
 8003122:	e004      	b.n	800312e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003124:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003128:	fab3 f383 	clz	r3, r3
 800312c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800312e:	429a      	cmp	r2, r3
 8003130:	d106      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2200      	movs	r2, #0
 8003138:	2100      	movs	r1, #0
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff fc1a 	bl	8002974 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2101      	movs	r1, #1
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fbfe 	bl	8002948 <LL_ADC_GetOffsetChannel>
 800314c:	4603      	mov	r3, r0
 800314e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10a      	bne.n	800316c <HAL_ADC_ConfigChannel+0x220>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2101      	movs	r1, #1
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fbf3 	bl	8002948 <LL_ADC_GetOffsetChannel>
 8003162:	4603      	mov	r3, r0
 8003164:	0e9b      	lsrs	r3, r3, #26
 8003166:	f003 021f 	and.w	r2, r3, #31
 800316a:	e01e      	b.n	80031aa <HAL_ADC_ConfigChannel+0x25e>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2101      	movs	r1, #1
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fbe8 	bl	8002948 <LL_ADC_GetOffsetChannel>
 8003178:	4603      	mov	r3, r0
 800317a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003182:	fa93 f3a3 	rbit	r3, r3
 8003186:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800318a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800318e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003192:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800319a:	2320      	movs	r3, #32
 800319c:	e004      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800319e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031a2:	fab3 f383 	clz	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d105      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x276>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	0e9b      	lsrs	r3, r3, #26
 80031bc:	f003 031f 	and.w	r3, r3, #31
 80031c0:	e018      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x2a8>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80031d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80031de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80031e6:	2320      	movs	r3, #32
 80031e8:	e004      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80031ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031ee:	fab3 f383 	clz	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d106      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2200      	movs	r2, #0
 80031fe:	2101      	movs	r1, #1
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fbb7 	bl	8002974 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2102      	movs	r1, #2
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fb9b 	bl	8002948 <LL_ADC_GetOffsetChannel>
 8003212:	4603      	mov	r3, r0
 8003214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10a      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x2e6>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2102      	movs	r1, #2
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fb90 	bl	8002948 <LL_ADC_GetOffsetChannel>
 8003228:	4603      	mov	r3, r0
 800322a:	0e9b      	lsrs	r3, r3, #26
 800322c:	f003 021f 	and.w	r2, r3, #31
 8003230:	e01e      	b.n	8003270 <HAL_ADC_ConfigChannel+0x324>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2102      	movs	r1, #2
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fb85 	bl	8002948 <LL_ADC_GetOffsetChannel>
 800323e:	4603      	mov	r3, r0
 8003240:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003248:	fa93 f3a3 	rbit	r3, r3
 800324c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003250:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003254:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003258:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003260:	2320      	movs	r3, #32
 8003262:	e004      	b.n	800326e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003264:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003268:	fab3 f383 	clz	r3, r3
 800326c:	b2db      	uxtb	r3, r3
 800326e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003278:	2b00      	cmp	r3, #0
 800327a:	d105      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x33c>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	0e9b      	lsrs	r3, r3, #26
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	e016      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x36a>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003294:	fa93 f3a3 	rbit	r3, r3
 8003298:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800329a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800329c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80032a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80032a8:	2320      	movs	r3, #32
 80032aa:	e004      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80032ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032b0:	fab3 f383 	clz	r3, r3
 80032b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d106      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2200      	movs	r2, #0
 80032c0:	2102      	movs	r1, #2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff fb56 	bl	8002974 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2103      	movs	r1, #3
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fb3a 	bl	8002948 <LL_ADC_GetOffsetChannel>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10a      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x3a8>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2103      	movs	r1, #3
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fb2f 	bl	8002948 <LL_ADC_GetOffsetChannel>
 80032ea:	4603      	mov	r3, r0
 80032ec:	0e9b      	lsrs	r3, r3, #26
 80032ee:	f003 021f 	and.w	r2, r3, #31
 80032f2:	e017      	b.n	8003324 <HAL_ADC_ConfigChannel+0x3d8>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2103      	movs	r1, #3
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fb24 	bl	8002948 <LL_ADC_GetOffsetChannel>
 8003300:	4603      	mov	r3, r0
 8003302:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003304:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003306:	fa93 f3a3 	rbit	r3, r3
 800330a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800330c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800330e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003310:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003316:	2320      	movs	r3, #32
 8003318:	e003      	b.n	8003322 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800331a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800331c:	fab3 f383 	clz	r3, r3
 8003320:	b2db      	uxtb	r3, r3
 8003322:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800332c:	2b00      	cmp	r3, #0
 800332e:	d105      	bne.n	800333c <HAL_ADC_ConfigChannel+0x3f0>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	0e9b      	lsrs	r3, r3, #26
 8003336:	f003 031f 	and.w	r3, r3, #31
 800333a:	e011      	b.n	8003360 <HAL_ADC_ConfigChannel+0x414>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003344:	fa93 f3a3 	rbit	r3, r3
 8003348:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800334a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800334c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800334e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003354:	2320      	movs	r3, #32
 8003356:	e003      	b.n	8003360 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003358:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800335a:	fab3 f383 	clz	r3, r3
 800335e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003360:	429a      	cmp	r2, r3
 8003362:	d106      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2200      	movs	r2, #0
 800336a:	2103      	movs	r1, #3
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff fb01 	bl	8002974 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fc2a 	bl	8002bd0 <LL_ADC_IsEnabled>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	f040 8140 	bne.w	8003604 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	6819      	ldr	r1, [r3, #0]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	461a      	mov	r2, r3
 8003392:	f7ff fbab 	bl	8002aec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	4a8f      	ldr	r2, [pc, #572]	@ (80035d8 <HAL_ADC_ConfigChannel+0x68c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	f040 8131 	bne.w	8003604 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10b      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x47e>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	0e9b      	lsrs	r3, r3, #26
 80033b8:	3301      	adds	r3, #1
 80033ba:	f003 031f 	and.w	r3, r3, #31
 80033be:	2b09      	cmp	r3, #9
 80033c0:	bf94      	ite	ls
 80033c2:	2301      	movls	r3, #1
 80033c4:	2300      	movhi	r3, #0
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	e019      	b.n	80033fe <HAL_ADC_ConfigChannel+0x4b2>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033d2:	fa93 f3a3 	rbit	r3, r3
 80033d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80033d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033da:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80033dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80033e2:	2320      	movs	r3, #32
 80033e4:	e003      	b.n	80033ee <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80033e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033e8:	fab3 f383 	clz	r3, r3
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	3301      	adds	r3, #1
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	2b09      	cmp	r3, #9
 80033f6:	bf94      	ite	ls
 80033f8:	2301      	movls	r3, #1
 80033fa:	2300      	movhi	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d079      	beq.n	80034f6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800340a:	2b00      	cmp	r3, #0
 800340c:	d107      	bne.n	800341e <HAL_ADC_ConfigChannel+0x4d2>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	0e9b      	lsrs	r3, r3, #26
 8003414:	3301      	adds	r3, #1
 8003416:	069b      	lsls	r3, r3, #26
 8003418:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800341c:	e015      	b.n	800344a <HAL_ADC_ConfigChannel+0x4fe>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003426:	fa93 f3a3 	rbit	r3, r3
 800342a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800342c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800342e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003436:	2320      	movs	r3, #32
 8003438:	e003      	b.n	8003442 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800343a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800343c:	fab3 f383 	clz	r3, r3
 8003440:	b2db      	uxtb	r3, r3
 8003442:	3301      	adds	r3, #1
 8003444:	069b      	lsls	r3, r3, #26
 8003446:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <HAL_ADC_ConfigChannel+0x51e>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	0e9b      	lsrs	r3, r3, #26
 800345c:	3301      	adds	r3, #1
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	2101      	movs	r1, #1
 8003464:	fa01 f303 	lsl.w	r3, r1, r3
 8003468:	e017      	b.n	800349a <HAL_ADC_ConfigChannel+0x54e>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800347a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800347c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003482:	2320      	movs	r3, #32
 8003484:	e003      	b.n	800348e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003488:	fab3 f383 	clz	r3, r3
 800348c:	b2db      	uxtb	r3, r3
 800348e:	3301      	adds	r3, #1
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	2101      	movs	r1, #1
 8003496:	fa01 f303 	lsl.w	r3, r1, r3
 800349a:	ea42 0103 	orr.w	r1, r2, r3
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10a      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x574>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	0e9b      	lsrs	r3, r3, #26
 80034b0:	3301      	adds	r3, #1
 80034b2:	f003 021f 	and.w	r2, r3, #31
 80034b6:	4613      	mov	r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	4413      	add	r3, r2
 80034bc:	051b      	lsls	r3, r3, #20
 80034be:	e018      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x5a6>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c8:	fa93 f3a3 	rbit	r3, r3
 80034cc:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80034ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80034d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80034d8:	2320      	movs	r3, #32
 80034da:	e003      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80034dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	3301      	adds	r3, #1
 80034e6:	f003 021f 	and.w	r2, r3, #31
 80034ea:	4613      	mov	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	4413      	add	r3, r2
 80034f0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034f2:	430b      	orrs	r3, r1
 80034f4:	e081      	b.n	80035fa <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d107      	bne.n	8003512 <HAL_ADC_ConfigChannel+0x5c6>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	0e9b      	lsrs	r3, r3, #26
 8003508:	3301      	adds	r3, #1
 800350a:	069b      	lsls	r3, r3, #26
 800350c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003510:	e015      	b.n	800353e <HAL_ADC_ConfigChannel+0x5f2>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800351a:	fa93 f3a3 	rbit	r3, r3
 800351e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003522:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800352a:	2320      	movs	r3, #32
 800352c:	e003      	b.n	8003536 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800352e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003530:	fab3 f383 	clz	r3, r3
 8003534:	b2db      	uxtb	r3, r3
 8003536:	3301      	adds	r3, #1
 8003538:	069b      	lsls	r3, r3, #26
 800353a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003546:	2b00      	cmp	r3, #0
 8003548:	d109      	bne.n	800355e <HAL_ADC_ConfigChannel+0x612>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	0e9b      	lsrs	r3, r3, #26
 8003550:	3301      	adds	r3, #1
 8003552:	f003 031f 	and.w	r3, r3, #31
 8003556:	2101      	movs	r1, #1
 8003558:	fa01 f303 	lsl.w	r3, r1, r3
 800355c:	e017      	b.n	800358e <HAL_ADC_ConfigChannel+0x642>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	fa93 f3a3 	rbit	r3, r3
 800356a:	61fb      	str	r3, [r7, #28]
  return result;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003576:	2320      	movs	r3, #32
 8003578:	e003      	b.n	8003582 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800357a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357c:	fab3 f383 	clz	r3, r3
 8003580:	b2db      	uxtb	r3, r3
 8003582:	3301      	adds	r3, #1
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	2101      	movs	r1, #1
 800358a:	fa01 f303 	lsl.w	r3, r1, r3
 800358e:	ea42 0103 	orr.w	r1, r2, r3
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10d      	bne.n	80035ba <HAL_ADC_ConfigChannel+0x66e>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	0e9b      	lsrs	r3, r3, #26
 80035a4:	3301      	adds	r3, #1
 80035a6:	f003 021f 	and.w	r2, r3, #31
 80035aa:	4613      	mov	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	3b1e      	subs	r3, #30
 80035b2:	051b      	lsls	r3, r3, #20
 80035b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035b8:	e01e      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x6ac>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	613b      	str	r3, [r7, #16]
  return result;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d104      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80035d2:	2320      	movs	r3, #32
 80035d4:	e006      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x698>
 80035d6:	bf00      	nop
 80035d8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	fab3 f383 	clz	r3, r3
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	3301      	adds	r3, #1
 80035e6:	f003 021f 	and.w	r2, r3, #31
 80035ea:	4613      	mov	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	4413      	add	r3, r2
 80035f0:	3b1e      	subs	r3, #30
 80035f2:	051b      	lsls	r3, r3, #20
 80035f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035f8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035fe:	4619      	mov	r1, r3
 8003600:	f7ff fa48 	bl	8002a94 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4b3f      	ldr	r3, [pc, #252]	@ (8003708 <HAL_ADC_ConfigChannel+0x7bc>)
 800360a:	4013      	ands	r3, r2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d071      	beq.n	80036f4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003610:	483e      	ldr	r0, [pc, #248]	@ (800370c <HAL_ADC_ConfigChannel+0x7c0>)
 8003612:	f7ff f967 	bl	80028e4 <LL_ADC_GetCommonPathInternalCh>
 8003616:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a3c      	ldr	r2, [pc, #240]	@ (8003710 <HAL_ADC_ConfigChannel+0x7c4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d004      	beq.n	800362e <HAL_ADC_ConfigChannel+0x6e2>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a3a      	ldr	r2, [pc, #232]	@ (8003714 <HAL_ADC_ConfigChannel+0x7c8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d127      	bne.n	800367e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800362e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003632:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d121      	bne.n	800367e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003642:	d157      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003644:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003648:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800364c:	4619      	mov	r1, r3
 800364e:	482f      	ldr	r0, [pc, #188]	@ (800370c <HAL_ADC_ConfigChannel+0x7c0>)
 8003650:	f7ff f935 	bl	80028be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003654:	4b30      	ldr	r3, [pc, #192]	@ (8003718 <HAL_ADC_ConfigChannel+0x7cc>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	099b      	lsrs	r3, r3, #6
 800365a:	4a30      	ldr	r2, [pc, #192]	@ (800371c <HAL_ADC_ConfigChannel+0x7d0>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	099b      	lsrs	r3, r3, #6
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	4613      	mov	r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800366e:	e002      	b.n	8003676 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	3b01      	subs	r3, #1
 8003674:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1f9      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800367c:	e03a      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a27      	ldr	r2, [pc, #156]	@ (8003720 <HAL_ADC_ConfigChannel+0x7d4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d113      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003688:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800368c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10d      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a22      	ldr	r2, [pc, #136]	@ (8003724 <HAL_ADC_ConfigChannel+0x7d8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d02a      	beq.n	80036f4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800369e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036a6:	4619      	mov	r1, r3
 80036a8:	4818      	ldr	r0, [pc, #96]	@ (800370c <HAL_ADC_ConfigChannel+0x7c0>)
 80036aa:	f7ff f908 	bl	80028be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036ae:	e021      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003728 <HAL_ADC_ConfigChannel+0x7dc>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d11c      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d116      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a16      	ldr	r2, [pc, #88]	@ (8003724 <HAL_ADC_ConfigChannel+0x7d8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d011      	beq.n	80036f4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036d8:	4619      	mov	r1, r3
 80036da:	480c      	ldr	r0, [pc, #48]	@ (800370c <HAL_ADC_ConfigChannel+0x7c0>)
 80036dc:	f7ff f8ef 	bl	80028be <LL_ADC_SetCommonPathInternalCh>
 80036e0:	e008      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e6:	f043 0220 	orr.w	r2, r3, #32
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80036fc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003700:	4618      	mov	r0, r3
 8003702:	37d8      	adds	r7, #216	@ 0xd8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	80080000 	.word	0x80080000
 800370c:	50000300 	.word	0x50000300
 8003710:	c3210000 	.word	0xc3210000
 8003714:	90c00010 	.word	0x90c00010
 8003718:	20000004 	.word	0x20000004
 800371c:	053e2d63 	.word	0x053e2d63
 8003720:	c7520000 	.word	0xc7520000
 8003724:	50000100 	.word	0x50000100
 8003728:	cb840000 	.word	0xcb840000

0800372c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800373c:	4b0c      	ldr	r3, [pc, #48]	@ (8003770 <__NVIC_SetPriorityGrouping+0x44>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003748:	4013      	ands	r3, r2
 800374a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003754:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800375c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800375e:	4a04      	ldr	r2, [pc, #16]	@ (8003770 <__NVIC_SetPriorityGrouping+0x44>)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	60d3      	str	r3, [r2, #12]
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003778:	4b04      	ldr	r3, [pc, #16]	@ (800378c <__NVIC_GetPriorityGrouping+0x18>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	0a1b      	lsrs	r3, r3, #8
 800377e:	f003 0307 	and.w	r3, r3, #7
}
 8003782:	4618      	mov	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	e000ed00 	.word	0xe000ed00

08003790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	6039      	str	r1, [r7, #0]
 800379a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	db0a      	blt.n	80037ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	490c      	ldr	r1, [pc, #48]	@ (80037dc <__NVIC_SetPriority+0x4c>)
 80037aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ae:	0112      	lsls	r2, r2, #4
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	440b      	add	r3, r1
 80037b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b8:	e00a      	b.n	80037d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	4908      	ldr	r1, [pc, #32]	@ (80037e0 <__NVIC_SetPriority+0x50>)
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	3b04      	subs	r3, #4
 80037c8:	0112      	lsls	r2, r2, #4
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	440b      	add	r3, r1
 80037ce:	761a      	strb	r2, [r3, #24]
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000e100 	.word	0xe000e100
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b089      	sub	sp, #36	@ 0x24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f1c3 0307 	rsb	r3, r3, #7
 80037fe:	2b04      	cmp	r3, #4
 8003800:	bf28      	it	cs
 8003802:	2304      	movcs	r3, #4
 8003804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3304      	adds	r3, #4
 800380a:	2b06      	cmp	r3, #6
 800380c:	d902      	bls.n	8003814 <NVIC_EncodePriority+0x30>
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3b03      	subs	r3, #3
 8003812:	e000      	b.n	8003816 <NVIC_EncodePriority+0x32>
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003818:	f04f 32ff 	mov.w	r2, #4294967295
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43da      	mvns	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	401a      	ands	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800382c:	f04f 31ff 	mov.w	r1, #4294967295
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	fa01 f303 	lsl.w	r3, r1, r3
 8003836:	43d9      	mvns	r1, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800383c:	4313      	orrs	r3, r2
         );
}
 800383e:	4618      	mov	r0, r3
 8003840:	3724      	adds	r7, #36	@ 0x24
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
	...

0800384c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3b01      	subs	r3, #1
 8003858:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800385c:	d301      	bcc.n	8003862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800385e:	2301      	movs	r3, #1
 8003860:	e00f      	b.n	8003882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003862:	4a0a      	ldr	r2, [pc, #40]	@ (800388c <SysTick_Config+0x40>)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3b01      	subs	r3, #1
 8003868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800386a:	210f      	movs	r1, #15
 800386c:	f04f 30ff 	mov.w	r0, #4294967295
 8003870:	f7ff ff8e 	bl	8003790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003874:	4b05      	ldr	r3, [pc, #20]	@ (800388c <SysTick_Config+0x40>)
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800387a:	4b04      	ldr	r3, [pc, #16]	@ (800388c <SysTick_Config+0x40>)
 800387c:	2207      	movs	r2, #7
 800387e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	e000e010 	.word	0xe000e010

08003890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ff47 	bl	800372c <__NVIC_SetPriorityGrouping>
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b086      	sub	sp, #24
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	4603      	mov	r3, r0
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038b4:	f7ff ff5e 	bl	8003774 <__NVIC_GetPriorityGrouping>
 80038b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	6978      	ldr	r0, [r7, #20]
 80038c0:	f7ff ff90 	bl	80037e4 <NVIC_EncodePriority>
 80038c4:	4602      	mov	r2, r0
 80038c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ca:	4611      	mov	r1, r2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff ff5f 	bl	8003790 <__NVIC_SetPriority>
}
 80038d2:	bf00      	nop
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff ffb2 	bl	800384c <SysTick_Config>
 80038e8:	4603      	mov	r3, r0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003902:	e15a      	b.n	8003bba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	2101      	movs	r1, #1
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	fa01 f303 	lsl.w	r3, r1, r3
 8003910:	4013      	ands	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 814c 	beq.w	8003bb4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b01      	cmp	r3, #1
 8003926:	d005      	beq.n	8003934 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003930:	2b02      	cmp	r3, #2
 8003932:	d130      	bne.n	8003996 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	2203      	movs	r2, #3
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800396a:	2201      	movs	r2, #1
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43db      	mvns	r3, r3
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4013      	ands	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	091b      	lsrs	r3, r3, #4
 8003980:	f003 0201 	and.w	r2, r3, #1
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d017      	beq.n	80039d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	2203      	movs	r2, #3
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	43db      	mvns	r3, r3
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4013      	ands	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d123      	bne.n	8003a26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	08da      	lsrs	r2, r3, #3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3208      	adds	r2, #8
 80039e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	220f      	movs	r2, #15
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4013      	ands	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	691a      	ldr	r2, [r3, #16]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	08da      	lsrs	r2, r3, #3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3208      	adds	r2, #8
 8003a20:	6939      	ldr	r1, [r7, #16]
 8003a22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	2203      	movs	r2, #3
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43db      	mvns	r3, r3
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f003 0203 	and.w	r2, r3, #3
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 80a6 	beq.w	8003bb4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a68:	4b5b      	ldr	r3, [pc, #364]	@ (8003bd8 <HAL_GPIO_Init+0x2e4>)
 8003a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a6c:	4a5a      	ldr	r2, [pc, #360]	@ (8003bd8 <HAL_GPIO_Init+0x2e4>)
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a74:	4b58      	ldr	r3, [pc, #352]	@ (8003bd8 <HAL_GPIO_Init+0x2e4>)
 8003a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a80:	4a56      	ldr	r2, [pc, #344]	@ (8003bdc <HAL_GPIO_Init+0x2e8>)
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	089b      	lsrs	r3, r3, #2
 8003a86:	3302      	adds	r3, #2
 8003a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	220f      	movs	r2, #15
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003aaa:	d01f      	beq.n	8003aec <HAL_GPIO_Init+0x1f8>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a4c      	ldr	r2, [pc, #304]	@ (8003be0 <HAL_GPIO_Init+0x2ec>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d019      	beq.n	8003ae8 <HAL_GPIO_Init+0x1f4>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a4b      	ldr	r2, [pc, #300]	@ (8003be4 <HAL_GPIO_Init+0x2f0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d013      	beq.n	8003ae4 <HAL_GPIO_Init+0x1f0>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a4a      	ldr	r2, [pc, #296]	@ (8003be8 <HAL_GPIO_Init+0x2f4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00d      	beq.n	8003ae0 <HAL_GPIO_Init+0x1ec>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a49      	ldr	r2, [pc, #292]	@ (8003bec <HAL_GPIO_Init+0x2f8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d007      	beq.n	8003adc <HAL_GPIO_Init+0x1e8>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a48      	ldr	r2, [pc, #288]	@ (8003bf0 <HAL_GPIO_Init+0x2fc>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d101      	bne.n	8003ad8 <HAL_GPIO_Init+0x1e4>
 8003ad4:	2305      	movs	r3, #5
 8003ad6:	e00a      	b.n	8003aee <HAL_GPIO_Init+0x1fa>
 8003ad8:	2306      	movs	r3, #6
 8003ada:	e008      	b.n	8003aee <HAL_GPIO_Init+0x1fa>
 8003adc:	2304      	movs	r3, #4
 8003ade:	e006      	b.n	8003aee <HAL_GPIO_Init+0x1fa>
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e004      	b.n	8003aee <HAL_GPIO_Init+0x1fa>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e002      	b.n	8003aee <HAL_GPIO_Init+0x1fa>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <HAL_GPIO_Init+0x1fa>
 8003aec:	2300      	movs	r3, #0
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	f002 0203 	and.w	r2, r2, #3
 8003af4:	0092      	lsls	r2, r2, #2
 8003af6:	4093      	lsls	r3, r2
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003afe:	4937      	ldr	r1, [pc, #220]	@ (8003bdc <HAL_GPIO_Init+0x2e8>)
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	089b      	lsrs	r3, r3, #2
 8003b04:	3302      	adds	r3, #2
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b0c:	4b39      	ldr	r3, [pc, #228]	@ (8003bf4 <HAL_GPIO_Init+0x300>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	43db      	mvns	r3, r3
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b30:	4a30      	ldr	r2, [pc, #192]	@ (8003bf4 <HAL_GPIO_Init+0x300>)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b36:	4b2f      	ldr	r3, [pc, #188]	@ (8003bf4 <HAL_GPIO_Init+0x300>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4013      	ands	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b5a:	4a26      	ldr	r2, [pc, #152]	@ (8003bf4 <HAL_GPIO_Init+0x300>)
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003b60:	4b24      	ldr	r3, [pc, #144]	@ (8003bf4 <HAL_GPIO_Init+0x300>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b84:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf4 <HAL_GPIO_Init+0x300>)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8003bf4 <HAL_GPIO_Init+0x300>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	43db      	mvns	r3, r3
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4013      	ands	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bae:	4a11      	ldr	r2, [pc, #68]	@ (8003bf4 <HAL_GPIO_Init+0x300>)
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f47f ae9d 	bne.w	8003904 <HAL_GPIO_Init+0x10>
  }
}
 8003bca:	bf00      	nop
 8003bcc:	bf00      	nop
 8003bce:	371c      	adds	r7, #28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	40010000 	.word	0x40010000
 8003be0:	48000400 	.word	0x48000400
 8003be4:	48000800 	.word	0x48000800
 8003be8:	48000c00 	.word	0x48000c00
 8003bec:	48001000 	.word	0x48001000
 8003bf0:	48001400 	.word	0x48001400
 8003bf4:	40010400 	.word	0x40010400

08003bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	807b      	strh	r3, [r7, #2]
 8003c04:	4613      	mov	r3, r2
 8003c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c08:	787b      	ldrb	r3, [r7, #1]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c0e:	887a      	ldrh	r2, [r7, #2]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c14:	e002      	b.n	8003c1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c16:	887a      	ldrh	r2, [r7, #2]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e08d      	b.n	8003d56 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fe faa4 	bl	800219c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2224      	movs	r2, #36	@ 0x24
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0201 	bic.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d107      	bne.n	8003ca2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c9e:	609a      	str	r2, [r3, #8]
 8003ca0:	e006      	b.n	8003cb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003cae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d108      	bne.n	8003cca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cc6:	605a      	str	r2, [r3, #4]
 8003cc8:	e007      	b.n	8003cda <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ce8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cfc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69d9      	ldr	r1, [r3, #28]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a1a      	ldr	r2, [r3, #32]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af02      	add	r7, sp, #8
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	607a      	str	r2, [r7, #4]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	817b      	strh	r3, [r7, #10]
 8003d70:	4613      	mov	r3, r2
 8003d72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	f040 80fd 	bne.w	8003f7c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_I2C_Master_Transmit+0x30>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e0f6      	b.n	8003f7e <HAL_I2C_Master_Transmit+0x21e>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d98:	f7fe fd50 	bl	800283c <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	2319      	movs	r3, #25
 8003da4:	2201      	movs	r2, #1
 8003da6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 fbea 	bl	8004584 <I2C_WaitOnFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e0e1      	b.n	8003f7e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2221      	movs	r2, #33	@ 0x21
 8003dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2210      	movs	r2, #16
 8003dc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	893a      	ldrh	r2, [r7, #8]
 8003dda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2bff      	cmp	r3, #255	@ 0xff
 8003dea:	d906      	bls.n	8003dfa <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	22ff      	movs	r2, #255	@ 0xff
 8003df0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003df2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	e007      	b.n	8003e0a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003e04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e08:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d024      	beq.n	8003e5c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e16:	781a      	ldrb	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	3301      	adds	r3, #1
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	8979      	ldrh	r1, [r7, #10]
 8003e4e:	4b4e      	ldr	r3, [pc, #312]	@ (8003f88 <HAL_I2C_Master_Transmit+0x228>)
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 fd59 	bl	800490c <I2C_TransferConfig>
 8003e5a:	e066      	b.n	8003f2a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	8979      	ldrh	r1, [r7, #10]
 8003e64:	4b48      	ldr	r3, [pc, #288]	@ (8003f88 <HAL_I2C_Master_Transmit+0x228>)
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 fd4e 	bl	800490c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003e70:	e05b      	b.n	8003f2a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	6a39      	ldr	r1, [r7, #32]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 fbdd 	bl	8004636 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e07b      	b.n	8003f7e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8a:	781a      	ldrb	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d034      	beq.n	8003f2a <HAL_I2C_Master_Transmit+0x1ca>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d130      	bne.n	8003f2a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	2180      	movs	r1, #128	@ 0x80
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 fb56 	bl	8004584 <I2C_WaitOnFlagUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e04d      	b.n	8003f7e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2bff      	cmp	r3, #255	@ 0xff
 8003eea:	d90e      	bls.n	8003f0a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	22ff      	movs	r2, #255	@ 0xff
 8003ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	8979      	ldrh	r1, [r7, #10]
 8003efa:	2300      	movs	r3, #0
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fd02 	bl	800490c <I2C_TransferConfig>
 8003f08:	e00f      	b.n	8003f2a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	8979      	ldrh	r1, [r7, #10]
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 fcf1 	bl	800490c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d19e      	bne.n	8003e72 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	6a39      	ldr	r1, [r7, #32]
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 fbc3 	bl	80046c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e01a      	b.n	8003f7e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6859      	ldr	r1, [r3, #4]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f8c <HAL_I2C_Master_Transmit+0x22c>)
 8003f5c:	400b      	ands	r3, r1
 8003f5e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	e000      	b.n	8003f7e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003f7c:	2302      	movs	r3, #2
  }
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	80002000 	.word	0x80002000
 8003f8c:	fe00e800 	.word	0xfe00e800

08003f90 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b088      	sub	sp, #32
 8003f94:	af02      	add	r7, sp, #8
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	4608      	mov	r0, r1
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	817b      	strh	r3, [r7, #10]
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	813b      	strh	r3, [r7, #8]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	f040 80f9 	bne.w	80041aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <HAL_I2C_Mem_Write+0x34>
 8003fbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d105      	bne.n	8003fd0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fca:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0ed      	b.n	80041ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_I2C_Mem_Write+0x4e>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e0e6      	b.n	80041ac <HAL_I2C_Mem_Write+0x21c>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003fe6:	f7fe fc29 	bl	800283c <HAL_GetTick>
 8003fea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	2319      	movs	r3, #25
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 fac3 	bl	8004584 <I2C_WaitOnFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0d1      	b.n	80041ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2221      	movs	r2, #33	@ 0x21
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2240      	movs	r2, #64	@ 0x40
 8004014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a3a      	ldr	r2, [r7, #32]
 8004022:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004028:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004030:	88f8      	ldrh	r0, [r7, #6]
 8004032:	893a      	ldrh	r2, [r7, #8]
 8004034:	8979      	ldrh	r1, [r7, #10]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	9301      	str	r3, [sp, #4]
 800403a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	4603      	mov	r3, r0
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f9d3 	bl	80043ec <I2C_RequestMemoryWrite>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e0a9      	b.n	80041ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405c:	b29b      	uxth	r3, r3
 800405e:	2bff      	cmp	r3, #255	@ 0xff
 8004060:	d90e      	bls.n	8004080 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	22ff      	movs	r2, #255	@ 0xff
 8004066:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406c:	b2da      	uxtb	r2, r3
 800406e:	8979      	ldrh	r1, [r7, #10]
 8004070:	2300      	movs	r3, #0
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 fc47 	bl	800490c <I2C_TransferConfig>
 800407e:	e00f      	b.n	80040a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800408e:	b2da      	uxtb	r2, r3
 8004090:	8979      	ldrh	r1, [r7, #10]
 8004092:	2300      	movs	r3, #0
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 fc36 	bl	800490c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 fac6 	bl	8004636 <I2C_WaitOnTXISFlagUntilTimeout>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e07b      	b.n	80041ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	781a      	ldrb	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d034      	beq.n	8004158 <HAL_I2C_Mem_Write+0x1c8>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d130      	bne.n	8004158 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040fc:	2200      	movs	r2, #0
 80040fe:	2180      	movs	r1, #128	@ 0x80
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 fa3f 	bl	8004584 <I2C_WaitOnFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e04d      	b.n	80041ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004114:	b29b      	uxth	r3, r3
 8004116:	2bff      	cmp	r3, #255	@ 0xff
 8004118:	d90e      	bls.n	8004138 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	22ff      	movs	r2, #255	@ 0xff
 800411e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004124:	b2da      	uxtb	r2, r3
 8004126:	8979      	ldrh	r1, [r7, #10]
 8004128:	2300      	movs	r3, #0
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 fbeb 	bl	800490c <I2C_TransferConfig>
 8004136:	e00f      	b.n	8004158 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004146:	b2da      	uxtb	r2, r3
 8004148:	8979      	ldrh	r1, [r7, #10]
 800414a:	2300      	movs	r3, #0
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 fbda 	bl	800490c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d19e      	bne.n	80040a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 faac 	bl	80046c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e01a      	b.n	80041ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2220      	movs	r2, #32
 800417c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6859      	ldr	r1, [r3, #4]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	4b0a      	ldr	r3, [pc, #40]	@ (80041b4 <HAL_I2C_Mem_Write+0x224>)
 800418a:	400b      	ands	r3, r1
 800418c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2220      	movs	r2, #32
 8004192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	e000      	b.n	80041ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80041aa:	2302      	movs	r3, #2
  }
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	fe00e800 	.word	0xfe00e800

080041b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af02      	add	r7, sp, #8
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	4608      	mov	r0, r1
 80041c2:	4611      	mov	r1, r2
 80041c4:	461a      	mov	r2, r3
 80041c6:	4603      	mov	r3, r0
 80041c8:	817b      	strh	r3, [r7, #10]
 80041ca:	460b      	mov	r3, r1
 80041cc:	813b      	strh	r3, [r7, #8]
 80041ce:	4613      	mov	r3, r2
 80041d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b20      	cmp	r3, #32
 80041dc:	f040 80fd 	bne.w	80043da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <HAL_I2C_Mem_Read+0x34>
 80041e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d105      	bne.n	80041f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041f2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e0f1      	b.n	80043dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_I2C_Mem_Read+0x4e>
 8004202:	2302      	movs	r3, #2
 8004204:	e0ea      	b.n	80043dc <HAL_I2C_Mem_Read+0x224>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800420e:	f7fe fb15 	bl	800283c <HAL_GetTick>
 8004212:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	2319      	movs	r3, #25
 800421a:	2201      	movs	r2, #1
 800421c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 f9af 	bl	8004584 <I2C_WaitOnFlagUntilTimeout>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0d5      	b.n	80043dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2222      	movs	r2, #34	@ 0x22
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2240      	movs	r2, #64	@ 0x40
 800423c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a3a      	ldr	r2, [r7, #32]
 800424a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004250:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004258:	88f8      	ldrh	r0, [r7, #6]
 800425a:	893a      	ldrh	r2, [r7, #8]
 800425c:	8979      	ldrh	r1, [r7, #10]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	4603      	mov	r3, r0
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f913 	bl	8004494 <I2C_RequestMemoryRead>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0ad      	b.n	80043dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004284:	b29b      	uxth	r3, r3
 8004286:	2bff      	cmp	r3, #255	@ 0xff
 8004288:	d90e      	bls.n	80042a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	22ff      	movs	r2, #255	@ 0xff
 800428e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004294:	b2da      	uxtb	r2, r3
 8004296:	8979      	ldrh	r1, [r7, #10]
 8004298:	4b52      	ldr	r3, [pc, #328]	@ (80043e4 <HAL_I2C_Mem_Read+0x22c>)
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 fb33 	bl	800490c <I2C_TransferConfig>
 80042a6:	e00f      	b.n	80042c8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	8979      	ldrh	r1, [r7, #10]
 80042ba:	4b4a      	ldr	r3, [pc, #296]	@ (80043e4 <HAL_I2C_Mem_Read+0x22c>)
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 fb22 	bl	800490c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ce:	2200      	movs	r2, #0
 80042d0:	2104      	movs	r1, #4
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 f956 	bl	8004584 <I2C_WaitOnFlagUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e07c      	b.n	80043dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d034      	beq.n	8004388 <HAL_I2C_Mem_Read+0x1d0>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004322:	2b00      	cmp	r3, #0
 8004324:	d130      	bne.n	8004388 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432c:	2200      	movs	r2, #0
 800432e:	2180      	movs	r1, #128	@ 0x80
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f927 	bl	8004584 <I2C_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e04d      	b.n	80043dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	2bff      	cmp	r3, #255	@ 0xff
 8004348:	d90e      	bls.n	8004368 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	22ff      	movs	r2, #255	@ 0xff
 800434e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004354:	b2da      	uxtb	r2, r3
 8004356:	8979      	ldrh	r1, [r7, #10]
 8004358:	2300      	movs	r3, #0
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 fad3 	bl	800490c <I2C_TransferConfig>
 8004366:	e00f      	b.n	8004388 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004376:	b2da      	uxtb	r2, r3
 8004378:	8979      	ldrh	r1, [r7, #10]
 800437a:	2300      	movs	r3, #0
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 fac2 	bl	800490c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d19a      	bne.n	80042c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f994 	bl	80046c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e01a      	b.n	80043dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2220      	movs	r2, #32
 80043ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6859      	ldr	r1, [r3, #4]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	4b0b      	ldr	r3, [pc, #44]	@ (80043e8 <HAL_I2C_Mem_Read+0x230>)
 80043ba:	400b      	ands	r3, r1
 80043bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e000      	b.n	80043dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80043da:	2302      	movs	r3, #2
  }
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	80002400 	.word	0x80002400
 80043e8:	fe00e800 	.word	0xfe00e800

080043ec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	4608      	mov	r0, r1
 80043f6:	4611      	mov	r1, r2
 80043f8:	461a      	mov	r2, r3
 80043fa:	4603      	mov	r3, r0
 80043fc:	817b      	strh	r3, [r7, #10]
 80043fe:	460b      	mov	r3, r1
 8004400:	813b      	strh	r3, [r7, #8]
 8004402:	4613      	mov	r3, r2
 8004404:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	b2da      	uxtb	r2, r3
 800440a:	8979      	ldrh	r1, [r7, #10]
 800440c:	4b20      	ldr	r3, [pc, #128]	@ (8004490 <I2C_RequestMemoryWrite+0xa4>)
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 fa79 	bl	800490c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800441a:	69fa      	ldr	r2, [r7, #28]
 800441c:	69b9      	ldr	r1, [r7, #24]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f909 	bl	8004636 <I2C_WaitOnTXISFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e02c      	b.n	8004488 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800442e:	88fb      	ldrh	r3, [r7, #6]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d105      	bne.n	8004440 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004434:	893b      	ldrh	r3, [r7, #8]
 8004436:	b2da      	uxtb	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	629a      	str	r2, [r3, #40]	@ 0x28
 800443e:	e015      	b.n	800446c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004440:	893b      	ldrh	r3, [r7, #8]
 8004442:	0a1b      	lsrs	r3, r3, #8
 8004444:	b29b      	uxth	r3, r3
 8004446:	b2da      	uxtb	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800444e:	69fa      	ldr	r2, [r7, #28]
 8004450:	69b9      	ldr	r1, [r7, #24]
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 f8ef 	bl	8004636 <I2C_WaitOnTXISFlagUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e012      	b.n	8004488 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004462:	893b      	ldrh	r3, [r7, #8]
 8004464:	b2da      	uxtb	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2200      	movs	r2, #0
 8004474:	2180      	movs	r1, #128	@ 0x80
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 f884 	bl	8004584 <I2C_WaitOnFlagUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	80002000 	.word	0x80002000

08004494 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af02      	add	r7, sp, #8
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	4608      	mov	r0, r1
 800449e:	4611      	mov	r1, r2
 80044a0:	461a      	mov	r2, r3
 80044a2:	4603      	mov	r3, r0
 80044a4:	817b      	strh	r3, [r7, #10]
 80044a6:	460b      	mov	r3, r1
 80044a8:	813b      	strh	r3, [r7, #8]
 80044aa:	4613      	mov	r3, r2
 80044ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80044ae:	88fb      	ldrh	r3, [r7, #6]
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	8979      	ldrh	r1, [r7, #10]
 80044b4:	4b20      	ldr	r3, [pc, #128]	@ (8004538 <I2C_RequestMemoryRead+0xa4>)
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	2300      	movs	r3, #0
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 fa26 	bl	800490c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c0:	69fa      	ldr	r2, [r7, #28]
 80044c2:	69b9      	ldr	r1, [r7, #24]
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f8b6 	bl	8004636 <I2C_WaitOnTXISFlagUntilTimeout>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e02c      	b.n	800452e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044d4:	88fb      	ldrh	r3, [r7, #6]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d105      	bne.n	80044e6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044da:	893b      	ldrh	r3, [r7, #8]
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80044e4:	e015      	b.n	8004512 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044e6:	893b      	ldrh	r3, [r7, #8]
 80044e8:	0a1b      	lsrs	r3, r3, #8
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	69b9      	ldr	r1, [r7, #24]
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f89c 	bl	8004636 <I2C_WaitOnTXISFlagUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e012      	b.n	800452e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004508:	893b      	ldrh	r3, [r7, #8]
 800450a:	b2da      	uxtb	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	2200      	movs	r2, #0
 800451a:	2140      	movs	r1, #64	@ 0x40
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f831 	bl	8004584 <I2C_WaitOnFlagUntilTimeout>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e000      	b.n	800452e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	80002000 	.word	0x80002000

0800453c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b02      	cmp	r3, #2
 8004550:	d103      	bne.n	800455a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2200      	movs	r2, #0
 8004558:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b01      	cmp	r3, #1
 8004566:	d007      	beq.n	8004578 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0201 	orr.w	r2, r2, #1
 8004576:	619a      	str	r2, [r3, #24]
  }
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	4613      	mov	r3, r2
 8004592:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004594:	e03b      	b.n	800460e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	6839      	ldr	r1, [r7, #0]
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 f8d6 	bl	800474c <I2C_IsErrorOccurred>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e041      	b.n	800462e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b0:	d02d      	beq.n	800460e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b2:	f7fe f943 	bl	800283c <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d302      	bcc.n	80045c8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d122      	bne.n	800460e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699a      	ldr	r2, [r3, #24]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4013      	ands	r3, r2
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	bf0c      	ite	eq
 80045d8:	2301      	moveq	r3, #1
 80045da:	2300      	movne	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	79fb      	ldrb	r3, [r7, #7]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d113      	bne.n	800460e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ea:	f043 0220 	orr.w	r2, r3, #32
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2220      	movs	r2, #32
 80045f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e00f      	b.n	800462e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	699a      	ldr	r2, [r3, #24]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4013      	ands	r3, r2
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	429a      	cmp	r2, r3
 800461c:	bf0c      	ite	eq
 800461e:	2301      	moveq	r3, #1
 8004620:	2300      	movne	r3, #0
 8004622:	b2db      	uxtb	r3, r3
 8004624:	461a      	mov	r2, r3
 8004626:	79fb      	ldrb	r3, [r7, #7]
 8004628:	429a      	cmp	r2, r3
 800462a:	d0b4      	beq.n	8004596 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b084      	sub	sp, #16
 800463a:	af00      	add	r7, sp, #0
 800463c:	60f8      	str	r0, [r7, #12]
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004642:	e033      	b.n	80046ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f87f 	bl	800474c <I2C_IsErrorOccurred>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e031      	b.n	80046bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465e:	d025      	beq.n	80046ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004660:	f7fe f8ec 	bl	800283c <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	429a      	cmp	r2, r3
 800466e:	d302      	bcc.n	8004676 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d11a      	bne.n	80046ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b02      	cmp	r3, #2
 8004682:	d013      	beq.n	80046ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004688:	f043 0220 	orr.w	r2, r3, #32
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e007      	b.n	80046bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d1c4      	bne.n	8004644 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046d0:	e02f      	b.n	8004732 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 f838 	bl	800474c <I2C_IsErrorOccurred>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e02d      	b.n	8004742 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e6:	f7fe f8a9 	bl	800283c <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d302      	bcc.n	80046fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d11a      	bne.n	8004732 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b20      	cmp	r3, #32
 8004708:	d013      	beq.n	8004732 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470e:	f043 0220 	orr.w	r2, r3, #32
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e007      	b.n	8004742 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	f003 0320 	and.w	r3, r3, #32
 800473c:	2b20      	cmp	r3, #32
 800473e:	d1c8      	bne.n	80046d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08a      	sub	sp, #40	@ 0x28
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004766:	2300      	movs	r3, #0
 8004768:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b00      	cmp	r3, #0
 8004776:	d068      	beq.n	800484a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2210      	movs	r2, #16
 800477e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004780:	e049      	b.n	8004816 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004788:	d045      	beq.n	8004816 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800478a:	f7fe f857 	bl	800283c <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	429a      	cmp	r2, r3
 8004798:	d302      	bcc.n	80047a0 <I2C_IsErrorOccurred+0x54>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d13a      	bne.n	8004816 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047c2:	d121      	bne.n	8004808 <I2C_IsErrorOccurred+0xbc>
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047ca:	d01d      	beq.n	8004808 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80047cc:	7cfb      	ldrb	r3, [r7, #19]
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	d01a      	beq.n	8004808 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80047e2:	f7fe f82b 	bl	800283c <HAL_GetTick>
 80047e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047e8:	e00e      	b.n	8004808 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80047ea:	f7fe f827 	bl	800283c <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b19      	cmp	r3, #25
 80047f6:	d907      	bls.n	8004808 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	f043 0320 	orr.w	r3, r3, #32
 80047fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004806:	e006      	b.n	8004816 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b20      	cmp	r3, #32
 8004814:	d1e9      	bne.n	80047ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b20      	cmp	r3, #32
 8004822:	d003      	beq.n	800482c <I2C_IsErrorOccurred+0xe0>
 8004824:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0aa      	beq.n	8004782 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800482c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004830:	2b00      	cmp	r3, #0
 8004832:	d103      	bne.n	800483c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2220      	movs	r2, #32
 800483a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	f043 0304 	orr.w	r3, r3, #4
 8004842:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00b      	beq.n	8004874 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800486c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00b      	beq.n	8004896 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	f043 0308 	orr.w	r3, r3, #8
 8004884:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800488e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00b      	beq.n	80048b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	f043 0302 	orr.w	r3, r3, #2
 80048a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80048b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01c      	beq.n	80048fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f7ff fe3b 	bl	800453c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6859      	ldr	r1, [r3, #4]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004908 <I2C_IsErrorOccurred+0x1bc>)
 80048d2:	400b      	ands	r3, r1
 80048d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	431a      	orrs	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80048fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3728      	adds	r7, #40	@ 0x28
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	fe00e800 	.word	0xfe00e800

0800490c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	607b      	str	r3, [r7, #4]
 8004916:	460b      	mov	r3, r1
 8004918:	817b      	strh	r3, [r7, #10]
 800491a:	4613      	mov	r3, r2
 800491c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800491e:	897b      	ldrh	r3, [r7, #10]
 8004920:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004924:	7a7b      	ldrb	r3, [r7, #9]
 8004926:	041b      	lsls	r3, r3, #16
 8004928:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800492c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	4313      	orrs	r3, r2
 8004936:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800493a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	0d5b      	lsrs	r3, r3, #21
 8004946:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800494a:	4b08      	ldr	r3, [pc, #32]	@ (800496c <I2C_TransferConfig+0x60>)
 800494c:	430b      	orrs	r3, r1
 800494e:	43db      	mvns	r3, r3
 8004950:	ea02 0103 	and.w	r1, r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	430a      	orrs	r2, r1
 800495c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800495e:	bf00      	nop
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	03ff63ff 	.word	0x03ff63ff

08004970 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b20      	cmp	r3, #32
 8004984:	d138      	bne.n	80049f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004990:	2302      	movs	r3, #2
 8004992:	e032      	b.n	80049fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2224      	movs	r2, #36	@ 0x24
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0201 	bic.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80049c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6819      	ldr	r1, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	e000      	b.n	80049fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049f8:	2302      	movs	r3, #2
  }
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b085      	sub	sp, #20
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d139      	bne.n	8004a90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e033      	b.n	8004a92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2224      	movs	r2, #36	@ 0x24
 8004a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0201 	bic.w	r2, r2, #1
 8004a48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004a58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	021b      	lsls	r3, r3, #8
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0201 	orr.w	r2, r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	e000      	b.n	8004a92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a90:	2302      	movs	r3, #2
  }
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
	...

08004aa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d141      	bne.n	8004b32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004aae:	4b4b      	ldr	r3, [pc, #300]	@ (8004bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aba:	d131      	bne.n	8004b20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004abc:	4b47      	ldr	r3, [pc, #284]	@ (8004bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ac2:	4a46      	ldr	r2, [pc, #280]	@ (8004bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ac4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ac8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004acc:	4b43      	ldr	r3, [pc, #268]	@ (8004bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ad4:	4a41      	ldr	r2, [pc, #260]	@ (8004bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ad6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ada:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004adc:	4b40      	ldr	r3, [pc, #256]	@ (8004be0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2232      	movs	r2, #50	@ 0x32
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	4a3f      	ldr	r2, [pc, #252]	@ (8004be4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aec:	0c9b      	lsrs	r3, r3, #18
 8004aee:	3301      	adds	r3, #1
 8004af0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004af2:	e002      	b.n	8004afa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004afa:	4b38      	ldr	r3, [pc, #224]	@ (8004bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b06:	d102      	bne.n	8004b0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f2      	bne.n	8004af4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b0e:	4b33      	ldr	r3, [pc, #204]	@ (8004bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b1a:	d158      	bne.n	8004bce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e057      	b.n	8004bd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b20:	4b2e      	ldr	r3, [pc, #184]	@ (8004bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b26:	4a2d      	ldr	r2, [pc, #180]	@ (8004bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004b30:	e04d      	b.n	8004bce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b38:	d141      	bne.n	8004bbe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b3a:	4b28      	ldr	r3, [pc, #160]	@ (8004bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b46:	d131      	bne.n	8004bac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b48:	4b24      	ldr	r3, [pc, #144]	@ (8004bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b4e:	4a23      	ldr	r2, [pc, #140]	@ (8004bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b58:	4b20      	ldr	r3, [pc, #128]	@ (8004bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b60:	4a1e      	ldr	r2, [pc, #120]	@ (8004bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b68:	4b1d      	ldr	r3, [pc, #116]	@ (8004be0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2232      	movs	r2, #50	@ 0x32
 8004b6e:	fb02 f303 	mul.w	r3, r2, r3
 8004b72:	4a1c      	ldr	r2, [pc, #112]	@ (8004be4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b74:	fba2 2303 	umull	r2, r3, r2, r3
 8004b78:	0c9b      	lsrs	r3, r3, #18
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b7e:	e002      	b.n	8004b86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b86:	4b15      	ldr	r3, [pc, #84]	@ (8004bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b92:	d102      	bne.n	8004b9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f2      	bne.n	8004b80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b9a:	4b10      	ldr	r3, [pc, #64]	@ (8004bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ba6:	d112      	bne.n	8004bce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e011      	b.n	8004bd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bac:	4b0b      	ldr	r3, [pc, #44]	@ (8004bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8004bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004bbc:	e007      	b.n	8004bce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004bbe:	4b07      	ldr	r3, [pc, #28]	@ (8004bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004bc6:	4a05      	ldr	r2, [pc, #20]	@ (8004bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004bcc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	40007000 	.word	0x40007000
 8004be0:	20000004 	.word	0x20000004
 8004be4:	431bde83 	.word	0x431bde83

08004be8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004bec:	4b05      	ldr	r3, [pc, #20]	@ (8004c04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	4a04      	ldr	r2, [pc, #16]	@ (8004c04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004bf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bf6:	6093      	str	r3, [r2, #8]
}
 8004bf8:	bf00      	nop
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	40007000 	.word	0x40007000

08004c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e2fe      	b.n	8005218 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d075      	beq.n	8004d12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c26:	4b97      	ldr	r3, [pc, #604]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 030c 	and.w	r3, r3, #12
 8004c2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c30:	4b94      	ldr	r3, [pc, #592]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f003 0303 	and.w	r3, r3, #3
 8004c38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2b0c      	cmp	r3, #12
 8004c3e:	d102      	bne.n	8004c46 <HAL_RCC_OscConfig+0x3e>
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d002      	beq.n	8004c4c <HAL_RCC_OscConfig+0x44>
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d10b      	bne.n	8004c64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c4c:	4b8d      	ldr	r3, [pc, #564]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d05b      	beq.n	8004d10 <HAL_RCC_OscConfig+0x108>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d157      	bne.n	8004d10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e2d9      	b.n	8005218 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c6c:	d106      	bne.n	8004c7c <HAL_RCC_OscConfig+0x74>
 8004c6e:	4b85      	ldr	r3, [pc, #532]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a84      	ldr	r2, [pc, #528]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	e01d      	b.n	8004cb8 <HAL_RCC_OscConfig+0xb0>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c84:	d10c      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x98>
 8004c86:	4b7f      	ldr	r3, [pc, #508]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004c8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	4b7c      	ldr	r3, [pc, #496]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a7b      	ldr	r2, [pc, #492]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	e00b      	b.n	8004cb8 <HAL_RCC_OscConfig+0xb0>
 8004ca0:	4b78      	ldr	r3, [pc, #480]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a77      	ldr	r2, [pc, #476]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004ca6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	4b75      	ldr	r3, [pc, #468]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a74      	ldr	r2, [pc, #464]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004cb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d013      	beq.n	8004ce8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc0:	f7fd fdbc 	bl	800283c <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cc8:	f7fd fdb8 	bl	800283c <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b64      	cmp	r3, #100	@ 0x64
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e29e      	b.n	8005218 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cda:	4b6a      	ldr	r3, [pc, #424]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f0      	beq.n	8004cc8 <HAL_RCC_OscConfig+0xc0>
 8004ce6:	e014      	b.n	8004d12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7fd fda8 	bl	800283c <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf0:	f7fd fda4 	bl	800283c <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b64      	cmp	r3, #100	@ 0x64
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e28a      	b.n	8005218 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d02:	4b60      	ldr	r3, [pc, #384]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f0      	bne.n	8004cf0 <HAL_RCC_OscConfig+0xe8>
 8004d0e:	e000      	b.n	8004d12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d075      	beq.n	8004e0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d1e:	4b59      	ldr	r3, [pc, #356]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 030c 	and.w	r3, r3, #12
 8004d26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d28:	4b56      	ldr	r3, [pc, #344]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0303 	and.w	r3, r3, #3
 8004d30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b0c      	cmp	r3, #12
 8004d36:	d102      	bne.n	8004d3e <HAL_RCC_OscConfig+0x136>
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d002      	beq.n	8004d44 <HAL_RCC_OscConfig+0x13c>
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	d11f      	bne.n	8004d84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d44:	4b4f      	ldr	r3, [pc, #316]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <HAL_RCC_OscConfig+0x154>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e25d      	b.n	8005218 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5c:	4b49      	ldr	r3, [pc, #292]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	061b      	lsls	r3, r3, #24
 8004d6a:	4946      	ldr	r1, [pc, #280]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d70:	4b45      	ldr	r3, [pc, #276]	@ (8004e88 <HAL_RCC_OscConfig+0x280>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fd fd15 	bl	80027a4 <HAL_InitTick>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d043      	beq.n	8004e08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e249      	b.n	8005218 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d023      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d8c:	4b3d      	ldr	r3, [pc, #244]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a3c      	ldr	r2, [pc, #240]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d98:	f7fd fd50 	bl	800283c <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004da0:	f7fd fd4c 	bl	800283c <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e232      	b.n	8005218 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004db2:	4b34      	ldr	r3, [pc, #208]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dbe:	4b31      	ldr	r3, [pc, #196]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	061b      	lsls	r3, r3, #24
 8004dcc:	492d      	ldr	r1, [pc, #180]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	604b      	str	r3, [r1, #4]
 8004dd2:	e01a      	b.n	8004e0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a2a      	ldr	r2, [pc, #168]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004dda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de0:	f7fd fd2c 	bl	800283c <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004de8:	f7fd fd28 	bl	800283c <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e20e      	b.n	8005218 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dfa:	4b22      	ldr	r3, [pc, #136]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1f0      	bne.n	8004de8 <HAL_RCC_OscConfig+0x1e0>
 8004e06:	e000      	b.n	8004e0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d041      	beq.n	8004e9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d01c      	beq.n	8004e58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e1e:	4b19      	ldr	r3, [pc, #100]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e24:	4a17      	ldr	r2, [pc, #92]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004e26:	f043 0301 	orr.w	r3, r3, #1
 8004e2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2e:	f7fd fd05 	bl	800283c <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e36:	f7fd fd01 	bl	800283c <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e1e7      	b.n	8005218 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e48:	4b0e      	ldr	r3, [pc, #56]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0ef      	beq.n	8004e36 <HAL_RCC_OscConfig+0x22e>
 8004e56:	e020      	b.n	8004e9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e58:	4b0a      	ldr	r3, [pc, #40]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e5e:	4a09      	ldr	r2, [pc, #36]	@ (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e68:	f7fd fce8 	bl	800283c <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e6e:	e00d      	b.n	8004e8c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e70:	f7fd fce4 	bl	800283c <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d906      	bls.n	8004e8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e1ca      	b.n	8005218 <HAL_RCC_OscConfig+0x610>
 8004e82:	bf00      	nop
 8004e84:	40021000 	.word	0x40021000
 8004e88:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e8c:	4b8c      	ldr	r3, [pc, #560]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1ea      	bne.n	8004e70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 80a6 	beq.w	8004ff4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004eac:	4b84      	ldr	r3, [pc, #528]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_RCC_OscConfig+0x2b4>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e000      	b.n	8004ebe <HAL_RCC_OscConfig+0x2b6>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00d      	beq.n	8004ede <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ec2:	4b7f      	ldr	r3, [pc, #508]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec6:	4a7e      	ldr	r2, [pc, #504]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ecc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ece:	4b7c      	ldr	r3, [pc, #496]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004eda:	2301      	movs	r3, #1
 8004edc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ede:	4b79      	ldr	r3, [pc, #484]	@ (80050c4 <HAL_RCC_OscConfig+0x4bc>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d118      	bne.n	8004f1c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004eea:	4b76      	ldr	r3, [pc, #472]	@ (80050c4 <HAL_RCC_OscConfig+0x4bc>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a75      	ldr	r2, [pc, #468]	@ (80050c4 <HAL_RCC_OscConfig+0x4bc>)
 8004ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ef6:	f7fd fca1 	bl	800283c <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004efe:	f7fd fc9d 	bl	800283c <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e183      	b.n	8005218 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f10:	4b6c      	ldr	r3, [pc, #432]	@ (80050c4 <HAL_RCC_OscConfig+0x4bc>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0f0      	beq.n	8004efe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d108      	bne.n	8004f36 <HAL_RCC_OscConfig+0x32e>
 8004f24:	4b66      	ldr	r3, [pc, #408]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f2a:	4a65      	ldr	r2, [pc, #404]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004f2c:	f043 0301 	orr.w	r3, r3, #1
 8004f30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f34:	e024      	b.n	8004f80 <HAL_RCC_OscConfig+0x378>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	2b05      	cmp	r3, #5
 8004f3c:	d110      	bne.n	8004f60 <HAL_RCC_OscConfig+0x358>
 8004f3e:	4b60      	ldr	r3, [pc, #384]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f44:	4a5e      	ldr	r2, [pc, #376]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004f46:	f043 0304 	orr.w	r3, r3, #4
 8004f4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f4e:	4b5c      	ldr	r3, [pc, #368]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f54:	4a5a      	ldr	r2, [pc, #360]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004f56:	f043 0301 	orr.w	r3, r3, #1
 8004f5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f5e:	e00f      	b.n	8004f80 <HAL_RCC_OscConfig+0x378>
 8004f60:	4b57      	ldr	r3, [pc, #348]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f66:	4a56      	ldr	r2, [pc, #344]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004f68:	f023 0301 	bic.w	r3, r3, #1
 8004f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f70:	4b53      	ldr	r3, [pc, #332]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f76:	4a52      	ldr	r2, [pc, #328]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004f78:	f023 0304 	bic.w	r3, r3, #4
 8004f7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d016      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f88:	f7fd fc58 	bl	800283c <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f90:	f7fd fc54 	bl	800283c <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e138      	b.n	8005218 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fa6:	4b46      	ldr	r3, [pc, #280]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0ed      	beq.n	8004f90 <HAL_RCC_OscConfig+0x388>
 8004fb4:	e015      	b.n	8004fe2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb6:	f7fd fc41 	bl	800283c <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fbc:	e00a      	b.n	8004fd4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fbe:	f7fd fc3d 	bl	800283c <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e121      	b.n	8005218 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fd4:	4b3a      	ldr	r3, [pc, #232]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1ed      	bne.n	8004fbe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fe2:	7ffb      	ldrb	r3, [r7, #31]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d105      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fe8:	4b35      	ldr	r3, [pc, #212]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fec:	4a34      	ldr	r2, [pc, #208]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004fee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ff2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0320 	and.w	r3, r3, #32
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d03c      	beq.n	800507a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d01c      	beq.n	8005042 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005008:	4b2d      	ldr	r3, [pc, #180]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 800500a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800500e:	4a2c      	ldr	r2, [pc, #176]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8005010:	f043 0301 	orr.w	r3, r3, #1
 8005014:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005018:	f7fd fc10 	bl	800283c <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005020:	f7fd fc0c 	bl	800283c <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e0f2      	b.n	8005218 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005032:	4b23      	ldr	r3, [pc, #140]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8005034:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0ef      	beq.n	8005020 <HAL_RCC_OscConfig+0x418>
 8005040:	e01b      	b.n	800507a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005042:	4b1f      	ldr	r3, [pc, #124]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8005044:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005048:	4a1d      	ldr	r2, [pc, #116]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 800504a:	f023 0301 	bic.w	r3, r3, #1
 800504e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005052:	f7fd fbf3 	bl	800283c <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800505a:	f7fd fbef 	bl	800283c <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e0d5      	b.n	8005218 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800506c:	4b14      	ldr	r3, [pc, #80]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 800506e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1ef      	bne.n	800505a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 80c9 	beq.w	8005216 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005084:	4b0e      	ldr	r3, [pc, #56]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f003 030c 	and.w	r3, r3, #12
 800508c:	2b0c      	cmp	r3, #12
 800508e:	f000 8083 	beq.w	8005198 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	2b02      	cmp	r3, #2
 8005098:	d15e      	bne.n	8005158 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800509a:	4b09      	ldr	r3, [pc, #36]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a08      	ldr	r2, [pc, #32]	@ (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 80050a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a6:	f7fd fbc9 	bl	800283c <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050ac:	e00c      	b.n	80050c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ae:	f7fd fbc5 	bl	800283c <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d905      	bls.n	80050c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e0ab      	b.n	8005218 <HAL_RCC_OscConfig+0x610>
 80050c0:	40021000 	.word	0x40021000
 80050c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050c8:	4b55      	ldr	r3, [pc, #340]	@ (8005220 <HAL_RCC_OscConfig+0x618>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1ec      	bne.n	80050ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050d4:	4b52      	ldr	r3, [pc, #328]	@ (8005220 <HAL_RCC_OscConfig+0x618>)
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	4b52      	ldr	r3, [pc, #328]	@ (8005224 <HAL_RCC_OscConfig+0x61c>)
 80050da:	4013      	ands	r3, r2
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6a11      	ldr	r1, [r2, #32]
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050e4:	3a01      	subs	r2, #1
 80050e6:	0112      	lsls	r2, r2, #4
 80050e8:	4311      	orrs	r1, r2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80050ee:	0212      	lsls	r2, r2, #8
 80050f0:	4311      	orrs	r1, r2
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80050f6:	0852      	lsrs	r2, r2, #1
 80050f8:	3a01      	subs	r2, #1
 80050fa:	0552      	lsls	r2, r2, #21
 80050fc:	4311      	orrs	r1, r2
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005102:	0852      	lsrs	r2, r2, #1
 8005104:	3a01      	subs	r2, #1
 8005106:	0652      	lsls	r2, r2, #25
 8005108:	4311      	orrs	r1, r2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800510e:	06d2      	lsls	r2, r2, #27
 8005110:	430a      	orrs	r2, r1
 8005112:	4943      	ldr	r1, [pc, #268]	@ (8005220 <HAL_RCC_OscConfig+0x618>)
 8005114:	4313      	orrs	r3, r2
 8005116:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005118:	4b41      	ldr	r3, [pc, #260]	@ (8005220 <HAL_RCC_OscConfig+0x618>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a40      	ldr	r2, [pc, #256]	@ (8005220 <HAL_RCC_OscConfig+0x618>)
 800511e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005122:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005124:	4b3e      	ldr	r3, [pc, #248]	@ (8005220 <HAL_RCC_OscConfig+0x618>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	4a3d      	ldr	r2, [pc, #244]	@ (8005220 <HAL_RCC_OscConfig+0x618>)
 800512a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800512e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005130:	f7fd fb84 	bl	800283c <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005138:	f7fd fb80 	bl	800283c <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e066      	b.n	8005218 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800514a:	4b35      	ldr	r3, [pc, #212]	@ (8005220 <HAL_RCC_OscConfig+0x618>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f0      	beq.n	8005138 <HAL_RCC_OscConfig+0x530>
 8005156:	e05e      	b.n	8005216 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005158:	4b31      	ldr	r3, [pc, #196]	@ (8005220 <HAL_RCC_OscConfig+0x618>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a30      	ldr	r2, [pc, #192]	@ (8005220 <HAL_RCC_OscConfig+0x618>)
 800515e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005164:	f7fd fb6a 	bl	800283c <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800516c:	f7fd fb66 	bl	800283c <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e04c      	b.n	8005218 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800517e:	4b28      	ldr	r3, [pc, #160]	@ (8005220 <HAL_RCC_OscConfig+0x618>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800518a:	4b25      	ldr	r3, [pc, #148]	@ (8005220 <HAL_RCC_OscConfig+0x618>)
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	4924      	ldr	r1, [pc, #144]	@ (8005220 <HAL_RCC_OscConfig+0x618>)
 8005190:	4b25      	ldr	r3, [pc, #148]	@ (8005228 <HAL_RCC_OscConfig+0x620>)
 8005192:	4013      	ands	r3, r2
 8005194:	60cb      	str	r3, [r1, #12]
 8005196:	e03e      	b.n	8005216 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e039      	b.n	8005218 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80051a4:	4b1e      	ldr	r3, [pc, #120]	@ (8005220 <HAL_RCC_OscConfig+0x618>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f003 0203 	and.w	r2, r3, #3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d12c      	bne.n	8005212 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c2:	3b01      	subs	r3, #1
 80051c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d123      	bne.n	8005212 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d11b      	bne.n	8005212 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d113      	bne.n	8005212 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f4:	085b      	lsrs	r3, r3, #1
 80051f6:	3b01      	subs	r3, #1
 80051f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d109      	bne.n	8005212 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005208:	085b      	lsrs	r3, r3, #1
 800520a:	3b01      	subs	r3, #1
 800520c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800520e:	429a      	cmp	r2, r3
 8005210:	d001      	beq.n	8005216 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e000      	b.n	8005218 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3720      	adds	r7, #32
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40021000 	.word	0x40021000
 8005224:	019f800c 	.word	0x019f800c
 8005228:	feeefffc 	.word	0xfeeefffc

0800522c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005236:	2300      	movs	r3, #0
 8005238:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e11e      	b.n	8005482 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005244:	4b91      	ldr	r3, [pc, #580]	@ (800548c <HAL_RCC_ClockConfig+0x260>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d910      	bls.n	8005274 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005252:	4b8e      	ldr	r3, [pc, #568]	@ (800548c <HAL_RCC_ClockConfig+0x260>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f023 020f 	bic.w	r2, r3, #15
 800525a:	498c      	ldr	r1, [pc, #560]	@ (800548c <HAL_RCC_ClockConfig+0x260>)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	4313      	orrs	r3, r2
 8005260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005262:	4b8a      	ldr	r3, [pc, #552]	@ (800548c <HAL_RCC_ClockConfig+0x260>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	429a      	cmp	r2, r3
 800526e:	d001      	beq.n	8005274 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e106      	b.n	8005482 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d073      	beq.n	8005368 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2b03      	cmp	r3, #3
 8005286:	d129      	bne.n	80052dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005288:	4b81      	ldr	r3, [pc, #516]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e0f4      	b.n	8005482 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005298:	f000 f99e 	bl	80055d8 <RCC_GetSysClockFreqFromPLLSource>
 800529c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	4a7c      	ldr	r2, [pc, #496]	@ (8005494 <HAL_RCC_ClockConfig+0x268>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d93f      	bls.n	8005326 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80052a6:	4b7a      	ldr	r3, [pc, #488]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d009      	beq.n	80052c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d033      	beq.n	8005326 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d12f      	bne.n	8005326 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052c6:	4b72      	ldr	r3, [pc, #456]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052ce:	4a70      	ldr	r2, [pc, #448]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 80052d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80052d6:	2380      	movs	r3, #128	@ 0x80
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	e024      	b.n	8005326 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d107      	bne.n	80052f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052e4:	4b6a      	ldr	r3, [pc, #424]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d109      	bne.n	8005304 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e0c6      	b.n	8005482 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052f4:	4b66      	ldr	r3, [pc, #408]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e0be      	b.n	8005482 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005304:	f000 f8ce 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 8005308:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	4a61      	ldr	r2, [pc, #388]	@ (8005494 <HAL_RCC_ClockConfig+0x268>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d909      	bls.n	8005326 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005312:	4b5f      	ldr	r3, [pc, #380]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800531a:	4a5d      	ldr	r2, [pc, #372]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 800531c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005320:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005322:	2380      	movs	r3, #128	@ 0x80
 8005324:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005326:	4b5a      	ldr	r3, [pc, #360]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f023 0203 	bic.w	r2, r3, #3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	4957      	ldr	r1, [pc, #348]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 8005334:	4313      	orrs	r3, r2
 8005336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005338:	f7fd fa80 	bl	800283c <HAL_GetTick>
 800533c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533e:	e00a      	b.n	8005356 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005340:	f7fd fa7c 	bl	800283c <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800534e:	4293      	cmp	r3, r2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e095      	b.n	8005482 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005356:	4b4e      	ldr	r3, [pc, #312]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 020c 	and.w	r2, r3, #12
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	429a      	cmp	r2, r3
 8005366:	d1eb      	bne.n	8005340 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d023      	beq.n	80053bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005380:	4b43      	ldr	r3, [pc, #268]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	4a42      	ldr	r2, [pc, #264]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 8005386:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800538a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b00      	cmp	r3, #0
 8005396:	d007      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005398:	4b3d      	ldr	r3, [pc, #244]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80053a0:	4a3b      	ldr	r2, [pc, #236]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 80053a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80053a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053a8:	4b39      	ldr	r3, [pc, #228]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	4936      	ldr	r1, [pc, #216]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	608b      	str	r3, [r1, #8]
 80053ba:	e008      	b.n	80053ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2b80      	cmp	r3, #128	@ 0x80
 80053c0:	d105      	bne.n	80053ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80053c2:	4b33      	ldr	r3, [pc, #204]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	4a32      	ldr	r2, [pc, #200]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 80053c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053ce:	4b2f      	ldr	r3, [pc, #188]	@ (800548c <HAL_RCC_ClockConfig+0x260>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d21d      	bcs.n	8005418 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053dc:	4b2b      	ldr	r3, [pc, #172]	@ (800548c <HAL_RCC_ClockConfig+0x260>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f023 020f 	bic.w	r2, r3, #15
 80053e4:	4929      	ldr	r1, [pc, #164]	@ (800548c <HAL_RCC_ClockConfig+0x260>)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80053ec:	f7fd fa26 	bl	800283c <HAL_GetTick>
 80053f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053f2:	e00a      	b.n	800540a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f4:	f7fd fa22 	bl	800283c <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005402:	4293      	cmp	r3, r2
 8005404:	d901      	bls.n	800540a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e03b      	b.n	8005482 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800540a:	4b20      	ldr	r3, [pc, #128]	@ (800548c <HAL_RCC_ClockConfig+0x260>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d1ed      	bne.n	80053f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d008      	beq.n	8005436 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005424:	4b1a      	ldr	r3, [pc, #104]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	4917      	ldr	r1, [pc, #92]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 8005432:	4313      	orrs	r3, r2
 8005434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d009      	beq.n	8005456 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005442:	4b13      	ldr	r3, [pc, #76]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	490f      	ldr	r1, [pc, #60]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 8005452:	4313      	orrs	r3, r2
 8005454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005456:	f000 f825 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 800545a:	4602      	mov	r2, r0
 800545c:	4b0c      	ldr	r3, [pc, #48]	@ (8005490 <HAL_RCC_ClockConfig+0x264>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	091b      	lsrs	r3, r3, #4
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	490c      	ldr	r1, [pc, #48]	@ (8005498 <HAL_RCC_ClockConfig+0x26c>)
 8005468:	5ccb      	ldrb	r3, [r1, r3]
 800546a:	f003 031f 	and.w	r3, r3, #31
 800546e:	fa22 f303 	lsr.w	r3, r2, r3
 8005472:	4a0a      	ldr	r2, [pc, #40]	@ (800549c <HAL_RCC_ClockConfig+0x270>)
 8005474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005476:	4b0a      	ldr	r3, [pc, #40]	@ (80054a0 <HAL_RCC_ClockConfig+0x274>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f7fd f992 	bl	80027a4 <HAL_InitTick>
 8005480:	4603      	mov	r3, r0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3718      	adds	r7, #24
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	40022000 	.word	0x40022000
 8005490:	40021000 	.word	0x40021000
 8005494:	04c4b400 	.word	0x04c4b400
 8005498:	0800ac28 	.word	0x0800ac28
 800549c:	20000004 	.word	0x20000004
 80054a0:	20000008 	.word	0x20000008

080054a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80054aa:	4b2c      	ldr	r3, [pc, #176]	@ (800555c <HAL_RCC_GetSysClockFreq+0xb8>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 030c 	and.w	r3, r3, #12
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d102      	bne.n	80054bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005560 <HAL_RCC_GetSysClockFreq+0xbc>)
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	e047      	b.n	800554c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80054bc:	4b27      	ldr	r3, [pc, #156]	@ (800555c <HAL_RCC_GetSysClockFreq+0xb8>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f003 030c 	and.w	r3, r3, #12
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d102      	bne.n	80054ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054c8:	4b26      	ldr	r3, [pc, #152]	@ (8005564 <HAL_RCC_GetSysClockFreq+0xc0>)
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	e03e      	b.n	800554c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80054ce:	4b23      	ldr	r3, [pc, #140]	@ (800555c <HAL_RCC_GetSysClockFreq+0xb8>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 030c 	and.w	r3, r3, #12
 80054d6:	2b0c      	cmp	r3, #12
 80054d8:	d136      	bne.n	8005548 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054da:	4b20      	ldr	r3, [pc, #128]	@ (800555c <HAL_RCC_GetSysClockFreq+0xb8>)
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054e4:	4b1d      	ldr	r3, [pc, #116]	@ (800555c <HAL_RCC_GetSysClockFreq+0xb8>)
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	091b      	lsrs	r3, r3, #4
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	3301      	adds	r3, #1
 80054f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d10c      	bne.n	8005512 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005564 <HAL_RCC_GetSysClockFreq+0xc0>)
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005500:	4a16      	ldr	r2, [pc, #88]	@ (800555c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005502:	68d2      	ldr	r2, [r2, #12]
 8005504:	0a12      	lsrs	r2, r2, #8
 8005506:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800550a:	fb02 f303 	mul.w	r3, r2, r3
 800550e:	617b      	str	r3, [r7, #20]
      break;
 8005510:	e00c      	b.n	800552c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005512:	4a13      	ldr	r2, [pc, #76]	@ (8005560 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	fbb2 f3f3 	udiv	r3, r2, r3
 800551a:	4a10      	ldr	r2, [pc, #64]	@ (800555c <HAL_RCC_GetSysClockFreq+0xb8>)
 800551c:	68d2      	ldr	r2, [r2, #12]
 800551e:	0a12      	lsrs	r2, r2, #8
 8005520:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005524:	fb02 f303 	mul.w	r3, r2, r3
 8005528:	617b      	str	r3, [r7, #20]
      break;
 800552a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800552c:	4b0b      	ldr	r3, [pc, #44]	@ (800555c <HAL_RCC_GetSysClockFreq+0xb8>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	0e5b      	lsrs	r3, r3, #25
 8005532:	f003 0303 	and.w	r3, r3, #3
 8005536:	3301      	adds	r3, #1
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	fbb2 f3f3 	udiv	r3, r2, r3
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	e001      	b.n	800554c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800554c:	693b      	ldr	r3, [r7, #16]
}
 800554e:	4618      	mov	r0, r3
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40021000 	.word	0x40021000
 8005560:	00f42400 	.word	0x00f42400
 8005564:	007a1200 	.word	0x007a1200

08005568 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800556c:	4b03      	ldr	r3, [pc, #12]	@ (800557c <HAL_RCC_GetHCLKFreq+0x14>)
 800556e:	681b      	ldr	r3, [r3, #0]
}
 8005570:	4618      	mov	r0, r3
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	20000004 	.word	0x20000004

08005580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005584:	f7ff fff0 	bl	8005568 <HAL_RCC_GetHCLKFreq>
 8005588:	4602      	mov	r2, r0
 800558a:	4b06      	ldr	r3, [pc, #24]	@ (80055a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	0a1b      	lsrs	r3, r3, #8
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	4904      	ldr	r1, [pc, #16]	@ (80055a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005596:	5ccb      	ldrb	r3, [r1, r3]
 8005598:	f003 031f 	and.w	r3, r3, #31
 800559c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	40021000 	.word	0x40021000
 80055a8:	0800ac38 	.word	0x0800ac38

080055ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80055b0:	f7ff ffda 	bl	8005568 <HAL_RCC_GetHCLKFreq>
 80055b4:	4602      	mov	r2, r0
 80055b6:	4b06      	ldr	r3, [pc, #24]	@ (80055d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	0adb      	lsrs	r3, r3, #11
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	4904      	ldr	r1, [pc, #16]	@ (80055d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055c2:	5ccb      	ldrb	r3, [r1, r3]
 80055c4:	f003 031f 	and.w	r3, r3, #31
 80055c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40021000 	.word	0x40021000
 80055d4:	0800ac38 	.word	0x0800ac38

080055d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055de:	4b1e      	ldr	r3, [pc, #120]	@ (8005658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	091b      	lsrs	r3, r3, #4
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	3301      	adds	r3, #1
 80055f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	d10c      	bne.n	8005616 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055fc:	4a17      	ldr	r2, [pc, #92]	@ (800565c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	fbb2 f3f3 	udiv	r3, r2, r3
 8005604:	4a14      	ldr	r2, [pc, #80]	@ (8005658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005606:	68d2      	ldr	r2, [r2, #12]
 8005608:	0a12      	lsrs	r2, r2, #8
 800560a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800560e:	fb02 f303 	mul.w	r3, r2, r3
 8005612:	617b      	str	r3, [r7, #20]
    break;
 8005614:	e00c      	b.n	8005630 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005616:	4a12      	ldr	r2, [pc, #72]	@ (8005660 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	fbb2 f3f3 	udiv	r3, r2, r3
 800561e:	4a0e      	ldr	r2, [pc, #56]	@ (8005658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005620:	68d2      	ldr	r2, [r2, #12]
 8005622:	0a12      	lsrs	r2, r2, #8
 8005624:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005628:	fb02 f303 	mul.w	r3, r2, r3
 800562c:	617b      	str	r3, [r7, #20]
    break;
 800562e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005630:	4b09      	ldr	r3, [pc, #36]	@ (8005658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	0e5b      	lsrs	r3, r3, #25
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	3301      	adds	r3, #1
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	fbb2 f3f3 	udiv	r3, r2, r3
 8005648:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800564a:	687b      	ldr	r3, [r7, #4]
}
 800564c:	4618      	mov	r0, r3
 800564e:	371c      	adds	r7, #28
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	40021000 	.word	0x40021000
 800565c:	007a1200 	.word	0x007a1200
 8005660:	00f42400 	.word	0x00f42400

08005664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800566c:	2300      	movs	r3, #0
 800566e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005670:	2300      	movs	r3, #0
 8005672:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 8098 	beq.w	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005682:	2300      	movs	r3, #0
 8005684:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005686:	4b43      	ldr	r3, [pc, #268]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10d      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005692:	4b40      	ldr	r3, [pc, #256]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005696:	4a3f      	ldr	r2, [pc, #252]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800569c:	6593      	str	r3, [r2, #88]	@ 0x58
 800569e:	4b3d      	ldr	r3, [pc, #244]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056a6:	60bb      	str	r3, [r7, #8]
 80056a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056aa:	2301      	movs	r3, #1
 80056ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056ae:	4b3a      	ldr	r3, [pc, #232]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a39      	ldr	r2, [pc, #228]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056ba:	f7fd f8bf 	bl	800283c <HAL_GetTick>
 80056be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056c0:	e009      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056c2:	f7fd f8bb 	bl	800283c <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d902      	bls.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	74fb      	strb	r3, [r7, #19]
        break;
 80056d4:	e005      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056d6:	4b30      	ldr	r3, [pc, #192]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0ef      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80056e2:	7cfb      	ldrb	r3, [r7, #19]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d159      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056e8:	4b2a      	ldr	r3, [pc, #168]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d01e      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	429a      	cmp	r2, r3
 8005702:	d019      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005704:	4b23      	ldr	r3, [pc, #140]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800570a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800570e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005710:	4b20      	ldr	r3, [pc, #128]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005716:	4a1f      	ldr	r2, [pc, #124]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800571c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005720:	4b1c      	ldr	r3, [pc, #112]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005726:	4a1b      	ldr	r2, [pc, #108]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005728:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800572c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005730:	4a18      	ldr	r2, [pc, #96]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d016      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005742:	f7fd f87b 	bl	800283c <HAL_GetTick>
 8005746:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005748:	e00b      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800574a:	f7fd f877 	bl	800283c <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005758:	4293      	cmp	r3, r2
 800575a:	d902      	bls.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	74fb      	strb	r3, [r7, #19]
            break;
 8005760:	e006      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005762:	4b0c      	ldr	r3, [pc, #48]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0ec      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005770:	7cfb      	ldrb	r3, [r7, #19]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10b      	bne.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005776:	4b07      	ldr	r3, [pc, #28]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800577c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005784:	4903      	ldr	r1, [pc, #12]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005786:	4313      	orrs	r3, r2
 8005788:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800578c:	e008      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800578e:	7cfb      	ldrb	r3, [r7, #19]
 8005790:	74bb      	strb	r3, [r7, #18]
 8005792:	e005      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005794:	40021000 	.word	0x40021000
 8005798:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579c:	7cfb      	ldrb	r3, [r7, #19]
 800579e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057a0:	7c7b      	ldrb	r3, [r7, #17]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d105      	bne.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a6:	4ba6      	ldr	r3, [pc, #664]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057aa:	4aa5      	ldr	r2, [pc, #660]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057be:	4ba0      	ldr	r3, [pc, #640]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c4:	f023 0203 	bic.w	r2, r3, #3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	499c      	ldr	r1, [pc, #624]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057e0:	4b97      	ldr	r3, [pc, #604]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e6:	f023 020c 	bic.w	r2, r3, #12
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	4994      	ldr	r1, [pc, #592]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005802:	4b8f      	ldr	r3, [pc, #572]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005808:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	498b      	ldr	r1, [pc, #556]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005824:	4b86      	ldr	r3, [pc, #536]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800582a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	4983      	ldr	r1, [pc, #524]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005846:	4b7e      	ldr	r3, [pc, #504]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800584c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	497a      	ldr	r1, [pc, #488]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005868:	4b75      	ldr	r3, [pc, #468]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800586a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800586e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	4972      	ldr	r1, [pc, #456]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800588a:	4b6d      	ldr	r3, [pc, #436]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800588c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005890:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	4969      	ldr	r1, [pc, #420]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058ac:	4b64      	ldr	r3, [pc, #400]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	4961      	ldr	r1, [pc, #388]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058ce:	4b5c      	ldr	r3, [pc, #368]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058dc:	4958      	ldr	r1, [pc, #352]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d015      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058f0:	4b53      	ldr	r3, [pc, #332]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058fe:	4950      	ldr	r1, [pc, #320]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005900:	4313      	orrs	r3, r2
 8005902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800590e:	d105      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005910:	4b4b      	ldr	r3, [pc, #300]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	4a4a      	ldr	r2, [pc, #296]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005916:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800591a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005924:	2b00      	cmp	r3, #0
 8005926:	d015      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005928:	4b45      	ldr	r3, [pc, #276]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800592a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800592e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005936:	4942      	ldr	r1, [pc, #264]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005938:	4313      	orrs	r3, r2
 800593a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005942:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005946:	d105      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005948:	4b3d      	ldr	r3, [pc, #244]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	4a3c      	ldr	r2, [pc, #240]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800594e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005952:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d015      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005960:	4b37      	ldr	r3, [pc, #220]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005966:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596e:	4934      	ldr	r1, [pc, #208]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800597e:	d105      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005980:	4b2f      	ldr	r3, [pc, #188]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	4a2e      	ldr	r2, [pc, #184]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005986:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800598a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d015      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005998:	4b29      	ldr	r3, [pc, #164]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800599a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800599e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a6:	4926      	ldr	r1, [pc, #152]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059b6:	d105      	bne.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059b8:	4b21      	ldr	r3, [pc, #132]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	4a20      	ldr	r2, [pc, #128]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d015      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059de:	4918      	ldr	r1, [pc, #96]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059ee:	d105      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059f0:	4b13      	ldr	r3, [pc, #76]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	4a12      	ldr	r2, [pc, #72]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d015      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005a08:	4b0d      	ldr	r3, [pc, #52]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a16:	490a      	ldr	r1, [pc, #40]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a26:	d105      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005a28:	4b05      	ldr	r3, [pc, #20]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	4a04      	ldr	r2, [pc, #16]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005a34:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	40021000 	.word	0x40021000

08005a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e049      	b.n	8005aea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d106      	bne.n	8005a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7fc fc0c 	bl	8002288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3304      	adds	r3, #4
 8005a80:	4619      	mov	r1, r3
 8005a82:	4610      	mov	r0, r2
 8005a84:	f000 fc8e 	bl	80063a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b082      	sub	sp, #8
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e049      	b.n	8005b98 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d106      	bne.n	8005b1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7fc fbd5 	bl	80022c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2202      	movs	r2, #2
 8005b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4610      	mov	r0, r2
 8005b32:	f000 fc37 	bl	80063a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d109      	bne.n	8005bc4 <HAL_TIM_PWM_Start+0x24>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	bf14      	ite	ne
 8005bbc:	2301      	movne	r3, #1
 8005bbe:	2300      	moveq	r3, #0
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	e03c      	b.n	8005c3e <HAL_TIM_PWM_Start+0x9e>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d109      	bne.n	8005bde <HAL_TIM_PWM_Start+0x3e>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	bf14      	ite	ne
 8005bd6:	2301      	movne	r3, #1
 8005bd8:	2300      	moveq	r3, #0
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	e02f      	b.n	8005c3e <HAL_TIM_PWM_Start+0x9e>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d109      	bne.n	8005bf8 <HAL_TIM_PWM_Start+0x58>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	bf14      	ite	ne
 8005bf0:	2301      	movne	r3, #1
 8005bf2:	2300      	moveq	r3, #0
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	e022      	b.n	8005c3e <HAL_TIM_PWM_Start+0x9e>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b0c      	cmp	r3, #12
 8005bfc:	d109      	bne.n	8005c12 <HAL_TIM_PWM_Start+0x72>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	bf14      	ite	ne
 8005c0a:	2301      	movne	r3, #1
 8005c0c:	2300      	moveq	r3, #0
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	e015      	b.n	8005c3e <HAL_TIM_PWM_Start+0x9e>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b10      	cmp	r3, #16
 8005c16:	d109      	bne.n	8005c2c <HAL_TIM_PWM_Start+0x8c>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	bf14      	ite	ne
 8005c24:	2301      	movne	r3, #1
 8005c26:	2300      	moveq	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	e008      	b.n	8005c3e <HAL_TIM_PWM_Start+0x9e>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	bf14      	ite	ne
 8005c38:	2301      	movne	r3, #1
 8005c3a:	2300      	moveq	r3, #0
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e097      	b.n	8005d76 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d104      	bne.n	8005c56 <HAL_TIM_PWM_Start+0xb6>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c54:	e023      	b.n	8005c9e <HAL_TIM_PWM_Start+0xfe>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d104      	bne.n	8005c66 <HAL_TIM_PWM_Start+0xc6>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c64:	e01b      	b.n	8005c9e <HAL_TIM_PWM_Start+0xfe>
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d104      	bne.n	8005c76 <HAL_TIM_PWM_Start+0xd6>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c74:	e013      	b.n	8005c9e <HAL_TIM_PWM_Start+0xfe>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b0c      	cmp	r3, #12
 8005c7a:	d104      	bne.n	8005c86 <HAL_TIM_PWM_Start+0xe6>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c84:	e00b      	b.n	8005c9e <HAL_TIM_PWM_Start+0xfe>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b10      	cmp	r3, #16
 8005c8a:	d104      	bne.n	8005c96 <HAL_TIM_PWM_Start+0xf6>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c94:	e003      	b.n	8005c9e <HAL_TIM_PWM_Start+0xfe>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2202      	movs	r2, #2
 8005c9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	6839      	ldr	r1, [r7, #0]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f001 f8c8 	bl	8006e3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a33      	ldr	r2, [pc, #204]	@ (8005d80 <HAL_TIM_PWM_Start+0x1e0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d013      	beq.n	8005cde <HAL_TIM_PWM_Start+0x13e>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a32      	ldr	r2, [pc, #200]	@ (8005d84 <HAL_TIM_PWM_Start+0x1e4>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d00e      	beq.n	8005cde <HAL_TIM_PWM_Start+0x13e>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a30      	ldr	r2, [pc, #192]	@ (8005d88 <HAL_TIM_PWM_Start+0x1e8>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d009      	beq.n	8005cde <HAL_TIM_PWM_Start+0x13e>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a2f      	ldr	r2, [pc, #188]	@ (8005d8c <HAL_TIM_PWM_Start+0x1ec>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d004      	beq.n	8005cde <HAL_TIM_PWM_Start+0x13e>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a2d      	ldr	r2, [pc, #180]	@ (8005d90 <HAL_TIM_PWM_Start+0x1f0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d101      	bne.n	8005ce2 <HAL_TIM_PWM_Start+0x142>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <HAL_TIM_PWM_Start+0x144>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d007      	beq.n	8005cf8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cf6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a20      	ldr	r2, [pc, #128]	@ (8005d80 <HAL_TIM_PWM_Start+0x1e0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d018      	beq.n	8005d34 <HAL_TIM_PWM_Start+0x194>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d0a:	d013      	beq.n	8005d34 <HAL_TIM_PWM_Start+0x194>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a20      	ldr	r2, [pc, #128]	@ (8005d94 <HAL_TIM_PWM_Start+0x1f4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00e      	beq.n	8005d34 <HAL_TIM_PWM_Start+0x194>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8005d98 <HAL_TIM_PWM_Start+0x1f8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d009      	beq.n	8005d34 <HAL_TIM_PWM_Start+0x194>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a17      	ldr	r2, [pc, #92]	@ (8005d84 <HAL_TIM_PWM_Start+0x1e4>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d004      	beq.n	8005d34 <HAL_TIM_PWM_Start+0x194>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a16      	ldr	r2, [pc, #88]	@ (8005d88 <HAL_TIM_PWM_Start+0x1e8>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d115      	bne.n	8005d60 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	4b18      	ldr	r3, [pc, #96]	@ (8005d9c <HAL_TIM_PWM_Start+0x1fc>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2b06      	cmp	r3, #6
 8005d44:	d015      	beq.n	8005d72 <HAL_TIM_PWM_Start+0x1d2>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d4c:	d011      	beq.n	8005d72 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f042 0201 	orr.w	r2, r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d5e:	e008      	b.n	8005d72 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0201 	orr.w	r2, r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	e000      	b.n	8005d74 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	40012c00 	.word	0x40012c00
 8005d84:	40013400 	.word	0x40013400
 8005d88:	40014000 	.word	0x40014000
 8005d8c:	40014400 	.word	0x40014400
 8005d90:	40014800 	.word	0x40014800
 8005d94:	40000400 	.word	0x40000400
 8005d98:	40000800 	.word	0x40000800
 8005d9c:	00010007 	.word	0x00010007

08005da0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e049      	b.n	8005e46 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d106      	bne.n	8005dcc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7fc fa9c 	bl	8002304 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	3304      	adds	r3, #4
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4610      	mov	r0, r2
 8005de0:	f000 fae0 	bl	80063a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b086      	sub	sp, #24
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_TIM_IC_ConfigChannel+0x1e>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e088      	b.n	8005f7e <HAL_TIM_IC_ConfigChannel+0x130>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d11b      	bne.n	8005eb2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005e8a:	f000 fe1d 	bl	8006ac8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699a      	ldr	r2, [r3, #24]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 020c 	bic.w	r2, r2, #12
 8005e9c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6999      	ldr	r1, [r3, #24]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	619a      	str	r2, [r3, #24]
 8005eb0:	e060      	b.n	8005f74 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d11c      	bne.n	8005ef2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005ec8:	f000 fe95 	bl	8006bf6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699a      	ldr	r2, [r3, #24]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005eda:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6999      	ldr	r1, [r3, #24]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	021a      	lsls	r2, r3, #8
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	619a      	str	r2, [r3, #24]
 8005ef0:	e040      	b.n	8005f74 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b08      	cmp	r3, #8
 8005ef6:	d11b      	bne.n	8005f30 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005f08:	f000 fee2 	bl	8006cd0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	69da      	ldr	r2, [r3, #28]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 020c 	bic.w	r2, r2, #12
 8005f1a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69d9      	ldr	r1, [r3, #28]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	689a      	ldr	r2, [r3, #8]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	61da      	str	r2, [r3, #28]
 8005f2e:	e021      	b.n	8005f74 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b0c      	cmp	r3, #12
 8005f34:	d11c      	bne.n	8005f70 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005f46:	f000 feff 	bl	8006d48 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	69da      	ldr	r2, [r3, #28]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005f58:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69d9      	ldr	r1, [r3, #28]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	021a      	lsls	r2, r3, #8
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	61da      	str	r2, [r3, #28]
 8005f6e:	e001      	b.n	8005f74 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d101      	bne.n	8005fa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	e0ff      	b.n	80061a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b14      	cmp	r3, #20
 8005fb2:	f200 80f0 	bhi.w	8006196 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbc:	08006011 	.word	0x08006011
 8005fc0:	08006197 	.word	0x08006197
 8005fc4:	08006197 	.word	0x08006197
 8005fc8:	08006197 	.word	0x08006197
 8005fcc:	08006051 	.word	0x08006051
 8005fd0:	08006197 	.word	0x08006197
 8005fd4:	08006197 	.word	0x08006197
 8005fd8:	08006197 	.word	0x08006197
 8005fdc:	08006093 	.word	0x08006093
 8005fe0:	08006197 	.word	0x08006197
 8005fe4:	08006197 	.word	0x08006197
 8005fe8:	08006197 	.word	0x08006197
 8005fec:	080060d3 	.word	0x080060d3
 8005ff0:	08006197 	.word	0x08006197
 8005ff4:	08006197 	.word	0x08006197
 8005ff8:	08006197 	.word	0x08006197
 8005ffc:	08006115 	.word	0x08006115
 8006000:	08006197 	.word	0x08006197
 8006004:	08006197 	.word	0x08006197
 8006008:	08006197 	.word	0x08006197
 800600c:	08006155 	.word	0x08006155
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68b9      	ldr	r1, [r7, #8]
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fa60 	bl	80064dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699a      	ldr	r2, [r3, #24]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0208 	orr.w	r2, r2, #8
 800602a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699a      	ldr	r2, [r3, #24]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0204 	bic.w	r2, r2, #4
 800603a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6999      	ldr	r1, [r3, #24]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	691a      	ldr	r2, [r3, #16]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	619a      	str	r2, [r3, #24]
      break;
 800604e:	e0a5      	b.n	800619c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68b9      	ldr	r1, [r7, #8]
 8006056:	4618      	mov	r0, r3
 8006058:	f000 fad0 	bl	80065fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699a      	ldr	r2, [r3, #24]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800606a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800607a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6999      	ldr	r1, [r3, #24]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	021a      	lsls	r2, r3, #8
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	619a      	str	r2, [r3, #24]
      break;
 8006090:	e084      	b.n	800619c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68b9      	ldr	r1, [r7, #8]
 8006098:	4618      	mov	r0, r3
 800609a:	f000 fb39 	bl	8006710 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69da      	ldr	r2, [r3, #28]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f042 0208 	orr.w	r2, r2, #8
 80060ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69da      	ldr	r2, [r3, #28]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0204 	bic.w	r2, r2, #4
 80060bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69d9      	ldr	r1, [r3, #28]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	691a      	ldr	r2, [r3, #16]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	61da      	str	r2, [r3, #28]
      break;
 80060d0:	e064      	b.n	800619c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68b9      	ldr	r1, [r7, #8]
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 fba1 	bl	8006820 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69da      	ldr	r2, [r3, #28]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	69da      	ldr	r2, [r3, #28]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	69d9      	ldr	r1, [r3, #28]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	021a      	lsls	r2, r3, #8
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	61da      	str	r2, [r3, #28]
      break;
 8006112:	e043      	b.n	800619c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68b9      	ldr	r1, [r7, #8]
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fc0a 	bl	8006934 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 0208 	orr.w	r2, r2, #8
 800612e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0204 	bic.w	r2, r2, #4
 800613e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	691a      	ldr	r2, [r3, #16]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006152:	e023      	b.n	800619c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68b9      	ldr	r1, [r7, #8]
 800615a:	4618      	mov	r0, r3
 800615c:	f000 fc4e 	bl	80069fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800616e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800617e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	021a      	lsls	r2, r3, #8
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006194:	e002      	b.n	800619c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	75fb      	strb	r3, [r7, #23]
      break;
 800619a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop

080061b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d101      	bne.n	80061cc <HAL_TIM_ConfigClockSource+0x1c>
 80061c8:	2302      	movs	r3, #2
 80061ca:	e0de      	b.n	800638a <HAL_TIM_ConfigClockSource+0x1da>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80061ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80061ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a63      	ldr	r2, [pc, #396]	@ (8006394 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	f000 80a9 	beq.w	800635e <HAL_TIM_ConfigClockSource+0x1ae>
 800620c:	4a61      	ldr	r2, [pc, #388]	@ (8006394 <HAL_TIM_ConfigClockSource+0x1e4>)
 800620e:	4293      	cmp	r3, r2
 8006210:	f200 80ae 	bhi.w	8006370 <HAL_TIM_ConfigClockSource+0x1c0>
 8006214:	4a60      	ldr	r2, [pc, #384]	@ (8006398 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	f000 80a1 	beq.w	800635e <HAL_TIM_ConfigClockSource+0x1ae>
 800621c:	4a5e      	ldr	r2, [pc, #376]	@ (8006398 <HAL_TIM_ConfigClockSource+0x1e8>)
 800621e:	4293      	cmp	r3, r2
 8006220:	f200 80a6 	bhi.w	8006370 <HAL_TIM_ConfigClockSource+0x1c0>
 8006224:	4a5d      	ldr	r2, [pc, #372]	@ (800639c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006226:	4293      	cmp	r3, r2
 8006228:	f000 8099 	beq.w	800635e <HAL_TIM_ConfigClockSource+0x1ae>
 800622c:	4a5b      	ldr	r2, [pc, #364]	@ (800639c <HAL_TIM_ConfigClockSource+0x1ec>)
 800622e:	4293      	cmp	r3, r2
 8006230:	f200 809e 	bhi.w	8006370 <HAL_TIM_ConfigClockSource+0x1c0>
 8006234:	4a5a      	ldr	r2, [pc, #360]	@ (80063a0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006236:	4293      	cmp	r3, r2
 8006238:	f000 8091 	beq.w	800635e <HAL_TIM_ConfigClockSource+0x1ae>
 800623c:	4a58      	ldr	r2, [pc, #352]	@ (80063a0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800623e:	4293      	cmp	r3, r2
 8006240:	f200 8096 	bhi.w	8006370 <HAL_TIM_ConfigClockSource+0x1c0>
 8006244:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006248:	f000 8089 	beq.w	800635e <HAL_TIM_ConfigClockSource+0x1ae>
 800624c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006250:	f200 808e 	bhi.w	8006370 <HAL_TIM_ConfigClockSource+0x1c0>
 8006254:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006258:	d03e      	beq.n	80062d8 <HAL_TIM_ConfigClockSource+0x128>
 800625a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800625e:	f200 8087 	bhi.w	8006370 <HAL_TIM_ConfigClockSource+0x1c0>
 8006262:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006266:	f000 8086 	beq.w	8006376 <HAL_TIM_ConfigClockSource+0x1c6>
 800626a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800626e:	d87f      	bhi.n	8006370 <HAL_TIM_ConfigClockSource+0x1c0>
 8006270:	2b70      	cmp	r3, #112	@ 0x70
 8006272:	d01a      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0xfa>
 8006274:	2b70      	cmp	r3, #112	@ 0x70
 8006276:	d87b      	bhi.n	8006370 <HAL_TIM_ConfigClockSource+0x1c0>
 8006278:	2b60      	cmp	r3, #96	@ 0x60
 800627a:	d050      	beq.n	800631e <HAL_TIM_ConfigClockSource+0x16e>
 800627c:	2b60      	cmp	r3, #96	@ 0x60
 800627e:	d877      	bhi.n	8006370 <HAL_TIM_ConfigClockSource+0x1c0>
 8006280:	2b50      	cmp	r3, #80	@ 0x50
 8006282:	d03c      	beq.n	80062fe <HAL_TIM_ConfigClockSource+0x14e>
 8006284:	2b50      	cmp	r3, #80	@ 0x50
 8006286:	d873      	bhi.n	8006370 <HAL_TIM_ConfigClockSource+0x1c0>
 8006288:	2b40      	cmp	r3, #64	@ 0x40
 800628a:	d058      	beq.n	800633e <HAL_TIM_ConfigClockSource+0x18e>
 800628c:	2b40      	cmp	r3, #64	@ 0x40
 800628e:	d86f      	bhi.n	8006370 <HAL_TIM_ConfigClockSource+0x1c0>
 8006290:	2b30      	cmp	r3, #48	@ 0x30
 8006292:	d064      	beq.n	800635e <HAL_TIM_ConfigClockSource+0x1ae>
 8006294:	2b30      	cmp	r3, #48	@ 0x30
 8006296:	d86b      	bhi.n	8006370 <HAL_TIM_ConfigClockSource+0x1c0>
 8006298:	2b20      	cmp	r3, #32
 800629a:	d060      	beq.n	800635e <HAL_TIM_ConfigClockSource+0x1ae>
 800629c:	2b20      	cmp	r3, #32
 800629e:	d867      	bhi.n	8006370 <HAL_TIM_ConfigClockSource+0x1c0>
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d05c      	beq.n	800635e <HAL_TIM_ConfigClockSource+0x1ae>
 80062a4:	2b10      	cmp	r3, #16
 80062a6:	d05a      	beq.n	800635e <HAL_TIM_ConfigClockSource+0x1ae>
 80062a8:	e062      	b.n	8006370 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062ba:	f000 fd9f 	bl	8006dfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80062cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	609a      	str	r2, [r3, #8]
      break;
 80062d6:	e04f      	b.n	8006378 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062e8:	f000 fd88 	bl	8006dfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689a      	ldr	r2, [r3, #8]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062fa:	609a      	str	r2, [r3, #8]
      break;
 80062fc:	e03c      	b.n	8006378 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800630a:	461a      	mov	r2, r3
 800630c:	f000 fc44 	bl	8006b98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2150      	movs	r1, #80	@ 0x50
 8006316:	4618      	mov	r0, r3
 8006318:	f000 fd53 	bl	8006dc2 <TIM_ITRx_SetConfig>
      break;
 800631c:	e02c      	b.n	8006378 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800632a:	461a      	mov	r2, r3
 800632c:	f000 fca0 	bl	8006c70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2160      	movs	r1, #96	@ 0x60
 8006336:	4618      	mov	r0, r3
 8006338:	f000 fd43 	bl	8006dc2 <TIM_ITRx_SetConfig>
      break;
 800633c:	e01c      	b.n	8006378 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800634a:	461a      	mov	r2, r3
 800634c:	f000 fc24 	bl	8006b98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2140      	movs	r1, #64	@ 0x40
 8006356:	4618      	mov	r0, r3
 8006358:	f000 fd33 	bl	8006dc2 <TIM_ITRx_SetConfig>
      break;
 800635c:	e00c      	b.n	8006378 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4619      	mov	r1, r3
 8006368:	4610      	mov	r0, r2
 800636a:	f000 fd2a 	bl	8006dc2 <TIM_ITRx_SetConfig>
      break;
 800636e:	e003      	b.n	8006378 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	73fb      	strb	r3, [r7, #15]
      break;
 8006374:	e000      	b.n	8006378 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006376:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006388:	7bfb      	ldrb	r3, [r7, #15]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	00100070 	.word	0x00100070
 8006398:	00100040 	.word	0x00100040
 800639c:	00100030 	.word	0x00100030
 80063a0:	00100020 	.word	0x00100020

080063a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a42      	ldr	r2, [pc, #264]	@ (80064c0 <TIM_Base_SetConfig+0x11c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d00f      	beq.n	80063dc <TIM_Base_SetConfig+0x38>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063c2:	d00b      	beq.n	80063dc <TIM_Base_SetConfig+0x38>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a3f      	ldr	r2, [pc, #252]	@ (80064c4 <TIM_Base_SetConfig+0x120>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d007      	beq.n	80063dc <TIM_Base_SetConfig+0x38>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a3e      	ldr	r2, [pc, #248]	@ (80064c8 <TIM_Base_SetConfig+0x124>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d003      	beq.n	80063dc <TIM_Base_SetConfig+0x38>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a3d      	ldr	r2, [pc, #244]	@ (80064cc <TIM_Base_SetConfig+0x128>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d108      	bne.n	80063ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a33      	ldr	r2, [pc, #204]	@ (80064c0 <TIM_Base_SetConfig+0x11c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d01b      	beq.n	800642e <TIM_Base_SetConfig+0x8a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063fc:	d017      	beq.n	800642e <TIM_Base_SetConfig+0x8a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a30      	ldr	r2, [pc, #192]	@ (80064c4 <TIM_Base_SetConfig+0x120>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d013      	beq.n	800642e <TIM_Base_SetConfig+0x8a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a2f      	ldr	r2, [pc, #188]	@ (80064c8 <TIM_Base_SetConfig+0x124>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00f      	beq.n	800642e <TIM_Base_SetConfig+0x8a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a2e      	ldr	r2, [pc, #184]	@ (80064cc <TIM_Base_SetConfig+0x128>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00b      	beq.n	800642e <TIM_Base_SetConfig+0x8a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a2d      	ldr	r2, [pc, #180]	@ (80064d0 <TIM_Base_SetConfig+0x12c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d007      	beq.n	800642e <TIM_Base_SetConfig+0x8a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a2c      	ldr	r2, [pc, #176]	@ (80064d4 <TIM_Base_SetConfig+0x130>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d003      	beq.n	800642e <TIM_Base_SetConfig+0x8a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a2b      	ldr	r2, [pc, #172]	@ (80064d8 <TIM_Base_SetConfig+0x134>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d108      	bne.n	8006440 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	4313      	orrs	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a16      	ldr	r2, [pc, #88]	@ (80064c0 <TIM_Base_SetConfig+0x11c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d00f      	beq.n	800648c <TIM_Base_SetConfig+0xe8>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a17      	ldr	r2, [pc, #92]	@ (80064cc <TIM_Base_SetConfig+0x128>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00b      	beq.n	800648c <TIM_Base_SetConfig+0xe8>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a16      	ldr	r2, [pc, #88]	@ (80064d0 <TIM_Base_SetConfig+0x12c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d007      	beq.n	800648c <TIM_Base_SetConfig+0xe8>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a15      	ldr	r2, [pc, #84]	@ (80064d4 <TIM_Base_SetConfig+0x130>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d003      	beq.n	800648c <TIM_Base_SetConfig+0xe8>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a14      	ldr	r2, [pc, #80]	@ (80064d8 <TIM_Base_SetConfig+0x134>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d103      	bne.n	8006494 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	691a      	ldr	r2, [r3, #16]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d105      	bne.n	80064b2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f023 0201 	bic.w	r2, r3, #1
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	611a      	str	r2, [r3, #16]
  }
}
 80064b2:	bf00      	nop
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	40012c00 	.word	0x40012c00
 80064c4:	40000400 	.word	0x40000400
 80064c8:	40000800 	.word	0x40000800
 80064cc:	40013400 	.word	0x40013400
 80064d0:	40014000 	.word	0x40014000
 80064d4:	40014400 	.word	0x40014400
 80064d8:	40014800 	.word	0x40014800

080064dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	f023 0201 	bic.w	r2, r3, #1
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800650a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800650e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f023 0303 	bic.w	r3, r3, #3
 8006516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	4313      	orrs	r3, r2
 8006520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f023 0302 	bic.w	r3, r3, #2
 8006528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	4313      	orrs	r3, r2
 8006532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a2c      	ldr	r2, [pc, #176]	@ (80065e8 <TIM_OC1_SetConfig+0x10c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d00f      	beq.n	800655c <TIM_OC1_SetConfig+0x80>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a2b      	ldr	r2, [pc, #172]	@ (80065ec <TIM_OC1_SetConfig+0x110>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00b      	beq.n	800655c <TIM_OC1_SetConfig+0x80>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a2a      	ldr	r2, [pc, #168]	@ (80065f0 <TIM_OC1_SetConfig+0x114>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d007      	beq.n	800655c <TIM_OC1_SetConfig+0x80>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a29      	ldr	r2, [pc, #164]	@ (80065f4 <TIM_OC1_SetConfig+0x118>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d003      	beq.n	800655c <TIM_OC1_SetConfig+0x80>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a28      	ldr	r2, [pc, #160]	@ (80065f8 <TIM_OC1_SetConfig+0x11c>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d10c      	bne.n	8006576 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f023 0308 	bic.w	r3, r3, #8
 8006562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	4313      	orrs	r3, r2
 800656c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f023 0304 	bic.w	r3, r3, #4
 8006574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a1b      	ldr	r2, [pc, #108]	@ (80065e8 <TIM_OC1_SetConfig+0x10c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d00f      	beq.n	800659e <TIM_OC1_SetConfig+0xc2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a1a      	ldr	r2, [pc, #104]	@ (80065ec <TIM_OC1_SetConfig+0x110>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d00b      	beq.n	800659e <TIM_OC1_SetConfig+0xc2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a19      	ldr	r2, [pc, #100]	@ (80065f0 <TIM_OC1_SetConfig+0x114>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d007      	beq.n	800659e <TIM_OC1_SetConfig+0xc2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a18      	ldr	r2, [pc, #96]	@ (80065f4 <TIM_OC1_SetConfig+0x118>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d003      	beq.n	800659e <TIM_OC1_SetConfig+0xc2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a17      	ldr	r2, [pc, #92]	@ (80065f8 <TIM_OC1_SetConfig+0x11c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d111      	bne.n	80065c2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4313      	orrs	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	621a      	str	r2, [r3, #32]
}
 80065dc:	bf00      	nop
 80065de:	371c      	adds	r7, #28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	40012c00 	.word	0x40012c00
 80065ec:	40013400 	.word	0x40013400
 80065f0:	40014000 	.word	0x40014000
 80065f4:	40014400 	.word	0x40014400
 80065f8:	40014800 	.word	0x40014800

080065fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	f023 0210 	bic.w	r2, r3, #16
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800662a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800662e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	021b      	lsls	r3, r3, #8
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	4313      	orrs	r3, r2
 8006642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f023 0320 	bic.w	r3, r3, #32
 800664a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	011b      	lsls	r3, r3, #4
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a28      	ldr	r2, [pc, #160]	@ (80066fc <TIM_OC2_SetConfig+0x100>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d003      	beq.n	8006668 <TIM_OC2_SetConfig+0x6c>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a27      	ldr	r2, [pc, #156]	@ (8006700 <TIM_OC2_SetConfig+0x104>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d10d      	bne.n	8006684 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800666e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	011b      	lsls	r3, r3, #4
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	4313      	orrs	r3, r2
 800667a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006682:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a1d      	ldr	r2, [pc, #116]	@ (80066fc <TIM_OC2_SetConfig+0x100>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00f      	beq.n	80066ac <TIM_OC2_SetConfig+0xb0>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a1c      	ldr	r2, [pc, #112]	@ (8006700 <TIM_OC2_SetConfig+0x104>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00b      	beq.n	80066ac <TIM_OC2_SetConfig+0xb0>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a1b      	ldr	r2, [pc, #108]	@ (8006704 <TIM_OC2_SetConfig+0x108>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d007      	beq.n	80066ac <TIM_OC2_SetConfig+0xb0>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a1a      	ldr	r2, [pc, #104]	@ (8006708 <TIM_OC2_SetConfig+0x10c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d003      	beq.n	80066ac <TIM_OC2_SetConfig+0xb0>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a19      	ldr	r2, [pc, #100]	@ (800670c <TIM_OC2_SetConfig+0x110>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d113      	bne.n	80066d4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	621a      	str	r2, [r3, #32]
}
 80066ee:	bf00      	nop
 80066f0:	371c      	adds	r7, #28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40012c00 	.word	0x40012c00
 8006700:	40013400 	.word	0x40013400
 8006704:	40014000 	.word	0x40014000
 8006708:	40014400 	.word	0x40014400
 800670c:	40014800 	.word	0x40014800

08006710 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800673e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0303 	bic.w	r3, r3, #3
 800674a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800675c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	021b      	lsls	r3, r3, #8
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	4313      	orrs	r3, r2
 8006768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a27      	ldr	r2, [pc, #156]	@ (800680c <TIM_OC3_SetConfig+0xfc>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d003      	beq.n	800677a <TIM_OC3_SetConfig+0x6a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a26      	ldr	r2, [pc, #152]	@ (8006810 <TIM_OC3_SetConfig+0x100>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d10d      	bne.n	8006796 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006780:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	021b      	lsls	r3, r3, #8
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	4313      	orrs	r3, r2
 800678c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a1c      	ldr	r2, [pc, #112]	@ (800680c <TIM_OC3_SetConfig+0xfc>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d00f      	beq.n	80067be <TIM_OC3_SetConfig+0xae>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006810 <TIM_OC3_SetConfig+0x100>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d00b      	beq.n	80067be <TIM_OC3_SetConfig+0xae>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006814 <TIM_OC3_SetConfig+0x104>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d007      	beq.n	80067be <TIM_OC3_SetConfig+0xae>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a19      	ldr	r2, [pc, #100]	@ (8006818 <TIM_OC3_SetConfig+0x108>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d003      	beq.n	80067be <TIM_OC3_SetConfig+0xae>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a18      	ldr	r2, [pc, #96]	@ (800681c <TIM_OC3_SetConfig+0x10c>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d113      	bne.n	80067e6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	011b      	lsls	r3, r3, #4
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	621a      	str	r2, [r3, #32]
}
 8006800:	bf00      	nop
 8006802:	371c      	adds	r7, #28
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	40012c00 	.word	0x40012c00
 8006810:	40013400 	.word	0x40013400
 8006814:	40014000 	.word	0x40014000
 8006818:	40014400 	.word	0x40014400
 800681c:	40014800 	.word	0x40014800

08006820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800684e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800685a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	021b      	lsls	r3, r3, #8
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800686e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	031b      	lsls	r3, r3, #12
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	4313      	orrs	r3, r2
 800687a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a28      	ldr	r2, [pc, #160]	@ (8006920 <TIM_OC4_SetConfig+0x100>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d003      	beq.n	800688c <TIM_OC4_SetConfig+0x6c>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a27      	ldr	r2, [pc, #156]	@ (8006924 <TIM_OC4_SetConfig+0x104>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d10d      	bne.n	80068a8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	031b      	lsls	r3, r3, #12
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	4313      	orrs	r3, r2
 800689e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a1d      	ldr	r2, [pc, #116]	@ (8006920 <TIM_OC4_SetConfig+0x100>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d00f      	beq.n	80068d0 <TIM_OC4_SetConfig+0xb0>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006924 <TIM_OC4_SetConfig+0x104>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00b      	beq.n	80068d0 <TIM_OC4_SetConfig+0xb0>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006928 <TIM_OC4_SetConfig+0x108>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d007      	beq.n	80068d0 <TIM_OC4_SetConfig+0xb0>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a1a      	ldr	r2, [pc, #104]	@ (800692c <TIM_OC4_SetConfig+0x10c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d003      	beq.n	80068d0 <TIM_OC4_SetConfig+0xb0>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a19      	ldr	r2, [pc, #100]	@ (8006930 <TIM_OC4_SetConfig+0x110>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d113      	bne.n	80068f8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068d6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068de:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	019b      	lsls	r3, r3, #6
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	019b      	lsls	r3, r3, #6
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	621a      	str	r2, [r3, #32]
}
 8006912:	bf00      	nop
 8006914:	371c      	adds	r7, #28
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	40012c00 	.word	0x40012c00
 8006924:	40013400 	.word	0x40013400
 8006928:	40014000 	.word	0x40014000
 800692c:	40014400 	.word	0x40014400
 8006930:	40014800 	.word	0x40014800

08006934 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800695a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006978:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	041b      	lsls	r3, r3, #16
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	4313      	orrs	r3, r2
 8006984:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a17      	ldr	r2, [pc, #92]	@ (80069e8 <TIM_OC5_SetConfig+0xb4>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00f      	beq.n	80069ae <TIM_OC5_SetConfig+0x7a>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a16      	ldr	r2, [pc, #88]	@ (80069ec <TIM_OC5_SetConfig+0xb8>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d00b      	beq.n	80069ae <TIM_OC5_SetConfig+0x7a>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a15      	ldr	r2, [pc, #84]	@ (80069f0 <TIM_OC5_SetConfig+0xbc>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d007      	beq.n	80069ae <TIM_OC5_SetConfig+0x7a>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a14      	ldr	r2, [pc, #80]	@ (80069f4 <TIM_OC5_SetConfig+0xc0>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d003      	beq.n	80069ae <TIM_OC5_SetConfig+0x7a>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a13      	ldr	r2, [pc, #76]	@ (80069f8 <TIM_OC5_SetConfig+0xc4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d109      	bne.n	80069c2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	021b      	lsls	r3, r3, #8
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	4313      	orrs	r3, r2
 80069c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	621a      	str	r2, [r3, #32]
}
 80069dc:	bf00      	nop
 80069de:	371c      	adds	r7, #28
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	40012c00 	.word	0x40012c00
 80069ec:	40013400 	.word	0x40013400
 80069f0:	40014000 	.word	0x40014000
 80069f4:	40014400 	.word	0x40014400
 80069f8:	40014800 	.word	0x40014800

080069fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	021b      	lsls	r3, r3, #8
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	051b      	lsls	r3, r3, #20
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a18      	ldr	r2, [pc, #96]	@ (8006ab4 <TIM_OC6_SetConfig+0xb8>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00f      	beq.n	8006a78 <TIM_OC6_SetConfig+0x7c>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a17      	ldr	r2, [pc, #92]	@ (8006ab8 <TIM_OC6_SetConfig+0xbc>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00b      	beq.n	8006a78 <TIM_OC6_SetConfig+0x7c>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a16      	ldr	r2, [pc, #88]	@ (8006abc <TIM_OC6_SetConfig+0xc0>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d007      	beq.n	8006a78 <TIM_OC6_SetConfig+0x7c>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a15      	ldr	r2, [pc, #84]	@ (8006ac0 <TIM_OC6_SetConfig+0xc4>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d003      	beq.n	8006a78 <TIM_OC6_SetConfig+0x7c>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a14      	ldr	r2, [pc, #80]	@ (8006ac4 <TIM_OC6_SetConfig+0xc8>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d109      	bne.n	8006a8c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	029b      	lsls	r3, r3, #10
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	621a      	str	r2, [r3, #32]
}
 8006aa6:	bf00      	nop
 8006aa8:	371c      	adds	r7, #28
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	40012c00 	.word	0x40012c00
 8006ab8:	40013400 	.word	0x40013400
 8006abc:	40014000 	.word	0x40014000
 8006ac0:	40014400 	.word	0x40014400
 8006ac4:	40014800 	.word	0x40014800

08006ac8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	f023 0201 	bic.w	r2, r3, #1
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4a24      	ldr	r2, [pc, #144]	@ (8006b84 <TIM_TI1_SetConfig+0xbc>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d013      	beq.n	8006b1e <TIM_TI1_SetConfig+0x56>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006afc:	d00f      	beq.n	8006b1e <TIM_TI1_SetConfig+0x56>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	4a21      	ldr	r2, [pc, #132]	@ (8006b88 <TIM_TI1_SetConfig+0xc0>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d00b      	beq.n	8006b1e <TIM_TI1_SetConfig+0x56>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	4a20      	ldr	r2, [pc, #128]	@ (8006b8c <TIM_TI1_SetConfig+0xc4>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d007      	beq.n	8006b1e <TIM_TI1_SetConfig+0x56>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	4a1f      	ldr	r2, [pc, #124]	@ (8006b90 <TIM_TI1_SetConfig+0xc8>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d003      	beq.n	8006b1e <TIM_TI1_SetConfig+0x56>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4a1e      	ldr	r2, [pc, #120]	@ (8006b94 <TIM_TI1_SetConfig+0xcc>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d101      	bne.n	8006b22 <TIM_TI1_SetConfig+0x5a>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e000      	b.n	8006b24 <TIM_TI1_SetConfig+0x5c>
 8006b22:	2300      	movs	r3, #0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d008      	beq.n	8006b3a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f023 0303 	bic.w	r3, r3, #3
 8006b2e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	e003      	b.n	8006b42 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f043 0301 	orr.w	r3, r3, #1
 8006b40:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	011b      	lsls	r3, r3, #4
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f023 030a 	bic.w	r3, r3, #10
 8006b5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f003 030a 	and.w	r3, r3, #10
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	621a      	str	r2, [r3, #32]
}
 8006b76:	bf00      	nop
 8006b78:	371c      	adds	r7, #28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	40012c00 	.word	0x40012c00
 8006b88:	40000400 	.word	0x40000400
 8006b8c:	40000800 	.word	0x40000800
 8006b90:	40013400 	.word	0x40013400
 8006b94:	40014000 	.word	0x40014000

08006b98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	f023 0201 	bic.w	r2, r3, #1
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	011b      	lsls	r3, r3, #4
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f023 030a 	bic.w	r3, r3, #10
 8006bd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	621a      	str	r2, [r3, #32]
}
 8006bea:	bf00      	nop
 8006bec:	371c      	adds	r7, #28
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b087      	sub	sp, #28
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	60b9      	str	r1, [r7, #8]
 8006c00:	607a      	str	r2, [r7, #4]
 8006c02:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	f023 0210 	bic.w	r2, r3, #16
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	031b      	lsls	r3, r3, #12
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c48:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	621a      	str	r2, [r3, #32]
}
 8006c64:	bf00      	nop
 8006c66:	371c      	adds	r7, #28
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	f023 0210 	bic.w	r2, r3, #16
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	031b      	lsls	r3, r3, #12
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006cac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	011b      	lsls	r3, r3, #4
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	621a      	str	r2, [r3, #32]
}
 8006cc4:	bf00      	nop
 8006cc6:	371c      	adds	r7, #28
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	f023 0303 	bic.w	r3, r3, #3
 8006cfc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d0c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	011b      	lsls	r3, r3, #4
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006d20:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	021b      	lsls	r3, r3, #8
 8006d26:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	621a      	str	r2, [r3, #32]
}
 8006d3c:	bf00      	nop
 8006d3e:	371c      	adds	r7, #28
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
 8006d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	69db      	ldr	r3, [r3, #28]
 8006d6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d74:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	021b      	lsls	r3, r3, #8
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d86:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	031b      	lsls	r3, r3, #12
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006d9a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	031b      	lsls	r3, r3, #12
 8006da0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	621a      	str	r2, [r3, #32]
}
 8006db6:	bf00      	nop
 8006db8:	371c      	adds	r7, #28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b085      	sub	sp, #20
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006dd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ddc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	f043 0307 	orr.w	r3, r3, #7
 8006de8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	609a      	str	r2, [r3, #8]
}
 8006df0:	bf00      	nop
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	021a      	lsls	r2, r3, #8
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	609a      	str	r2, [r3, #8]
}
 8006e30:	bf00      	nop
 8006e32:	371c      	adds	r7, #28
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	f003 031f 	and.w	r3, r3, #31
 8006e4e:	2201      	movs	r2, #1
 8006e50:	fa02 f303 	lsl.w	r3, r2, r3
 8006e54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a1a      	ldr	r2, [r3, #32]
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	43db      	mvns	r3, r3
 8006e5e:	401a      	ands	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6a1a      	ldr	r2, [r3, #32]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f003 031f 	and.w	r3, r3, #31
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	fa01 f303 	lsl.w	r3, r1, r3
 8006e74:	431a      	orrs	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	621a      	str	r2, [r3, #32]
}
 8006e7a:	bf00      	nop
 8006e7c:	371c      	adds	r7, #28
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
	...

08006e88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d101      	bne.n	8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	e065      	b.n	8006f6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a2c      	ldr	r2, [pc, #176]	@ (8006f78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d004      	beq.n	8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a2b      	ldr	r2, [pc, #172]	@ (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d108      	bne.n	8006ee6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006eda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006eec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ef0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a1b      	ldr	r2, [pc, #108]	@ (8006f78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d018      	beq.n	8006f40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f16:	d013      	beq.n	8006f40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a18      	ldr	r2, [pc, #96]	@ (8006f80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d00e      	beq.n	8006f40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a17      	ldr	r2, [pc, #92]	@ (8006f84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d009      	beq.n	8006f40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a12      	ldr	r2, [pc, #72]	@ (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d004      	beq.n	8006f40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a13      	ldr	r2, [pc, #76]	@ (8006f88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d10c      	bne.n	8006f5a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	40012c00 	.word	0x40012c00
 8006f7c:	40013400 	.word	0x40013400
 8006f80:	40000400 	.word	0x40000400
 8006f84:	40000800 	.word	0x40000800
 8006f88:	40014000 	.word	0x40014000

08006f8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d101      	bne.n	8006fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	e073      	b.n	8007090 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	695b      	ldr	r3, [r3, #20]
 8007000:	4313      	orrs	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	041b      	lsls	r3, r3, #16
 800701e:	4313      	orrs	r3, r2
 8007020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	69db      	ldr	r3, [r3, #28]
 800702c:	4313      	orrs	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a19      	ldr	r2, [pc, #100]	@ (800709c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d004      	beq.n	8007044 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a18      	ldr	r2, [pc, #96]	@ (80070a0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d11c      	bne.n	800707e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800704e:	051b      	lsls	r3, r3, #20
 8007050:	4313      	orrs	r3, r2
 8007052:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	4313      	orrs	r3, r2
 8007060:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800706c:	4313      	orrs	r3, r2
 800706e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707a:	4313      	orrs	r3, r2
 800707c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	40012c00 	.word	0x40012c00
 80070a0:	40013400 	.word	0x40013400

080070a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e042      	b.n	800713c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d106      	bne.n	80070ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7fb f9c9 	bl	8002460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2224      	movs	r2, #36	@ 0x24
 80070d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 0201 	bic.w	r2, r2, #1
 80070e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d002      	beq.n	80070f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fb82 	bl	80077f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f8b3 	bl	8007260 <UART_SetConfig>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d101      	bne.n	8007104 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e01b      	b.n	800713c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007112:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689a      	ldr	r2, [r3, #8]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007122:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f042 0201 	orr.w	r2, r2, #1
 8007132:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fc01 	bl	800793c <UART_CheckIdleState>
 800713a:	4603      	mov	r3, r0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b08a      	sub	sp, #40	@ 0x28
 8007148:	af02      	add	r7, sp, #8
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	603b      	str	r3, [r7, #0]
 8007150:	4613      	mov	r3, r2
 8007152:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800715a:	2b20      	cmp	r3, #32
 800715c:	d17b      	bne.n	8007256 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d002      	beq.n	800716a <HAL_UART_Transmit+0x26>
 8007164:	88fb      	ldrh	r3, [r7, #6]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e074      	b.n	8007258 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2221      	movs	r2, #33	@ 0x21
 800717a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800717e:	f7fb fb5d 	bl	800283c <HAL_GetTick>
 8007182:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	88fa      	ldrh	r2, [r7, #6]
 8007188:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	88fa      	ldrh	r2, [r7, #6]
 8007190:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800719c:	d108      	bne.n	80071b0 <HAL_UART_Transmit+0x6c>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d104      	bne.n	80071b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80071a6:	2300      	movs	r3, #0
 80071a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	61bb      	str	r3, [r7, #24]
 80071ae:	e003      	b.n	80071b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071b4:	2300      	movs	r3, #0
 80071b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071b8:	e030      	b.n	800721c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	2200      	movs	r2, #0
 80071c2:	2180      	movs	r1, #128	@ 0x80
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f000 fc63 	bl	8007a90 <UART_WaitOnFlagUntilTimeout>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d005      	beq.n	80071dc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2220      	movs	r2, #32
 80071d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e03d      	b.n	8007258 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10b      	bne.n	80071fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	461a      	mov	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	3302      	adds	r3, #2
 80071f6:	61bb      	str	r3, [r7, #24]
 80071f8:	e007      	b.n	800720a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	781a      	ldrb	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	3301      	adds	r3, #1
 8007208:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007210:	b29b      	uxth	r3, r3
 8007212:	3b01      	subs	r3, #1
 8007214:	b29a      	uxth	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007222:	b29b      	uxth	r3, r3
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1c8      	bne.n	80071ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	2200      	movs	r2, #0
 8007230:	2140      	movs	r1, #64	@ 0x40
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f000 fc2c 	bl	8007a90 <UART_WaitOnFlagUntilTimeout>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d005      	beq.n	800724a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2220      	movs	r2, #32
 8007242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e006      	b.n	8007258 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2220      	movs	r2, #32
 800724e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	e000      	b.n	8007258 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007256:	2302      	movs	r3, #2
  }
}
 8007258:	4618      	mov	r0, r3
 800725a:	3720      	adds	r7, #32
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007264:	b08c      	sub	sp, #48	@ 0x30
 8007266:	af00      	add	r7, sp, #0
 8007268:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	431a      	orrs	r2, r3
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	431a      	orrs	r2, r3
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	69db      	ldr	r3, [r3, #28]
 8007284:	4313      	orrs	r3, r2
 8007286:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	4bab      	ldr	r3, [pc, #684]	@ (800753c <UART_SetConfig+0x2dc>)
 8007290:	4013      	ands	r3, r2
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	6812      	ldr	r2, [r2, #0]
 8007296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007298:	430b      	orrs	r3, r1
 800729a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	68da      	ldr	r2, [r3, #12]
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4aa0      	ldr	r2, [pc, #640]	@ (8007540 <UART_SetConfig+0x2e0>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d004      	beq.n	80072cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072c8:	4313      	orrs	r3, r2
 80072ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80072d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	6812      	ldr	r2, [r2, #0]
 80072de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072e0:	430b      	orrs	r3, r1
 80072e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ea:	f023 010f 	bic.w	r1, r3, #15
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a91      	ldr	r2, [pc, #580]	@ (8007544 <UART_SetConfig+0x2e4>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d125      	bne.n	8007350 <UART_SetConfig+0xf0>
 8007304:	4b90      	ldr	r3, [pc, #576]	@ (8007548 <UART_SetConfig+0x2e8>)
 8007306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800730a:	f003 0303 	and.w	r3, r3, #3
 800730e:	2b03      	cmp	r3, #3
 8007310:	d81a      	bhi.n	8007348 <UART_SetConfig+0xe8>
 8007312:	a201      	add	r2, pc, #4	@ (adr r2, 8007318 <UART_SetConfig+0xb8>)
 8007314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007318:	08007329 	.word	0x08007329
 800731c:	08007339 	.word	0x08007339
 8007320:	08007331 	.word	0x08007331
 8007324:	08007341 	.word	0x08007341
 8007328:	2301      	movs	r3, #1
 800732a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800732e:	e0d6      	b.n	80074de <UART_SetConfig+0x27e>
 8007330:	2302      	movs	r3, #2
 8007332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007336:	e0d2      	b.n	80074de <UART_SetConfig+0x27e>
 8007338:	2304      	movs	r3, #4
 800733a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800733e:	e0ce      	b.n	80074de <UART_SetConfig+0x27e>
 8007340:	2308      	movs	r3, #8
 8007342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007346:	e0ca      	b.n	80074de <UART_SetConfig+0x27e>
 8007348:	2310      	movs	r3, #16
 800734a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800734e:	e0c6      	b.n	80074de <UART_SetConfig+0x27e>
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a7d      	ldr	r2, [pc, #500]	@ (800754c <UART_SetConfig+0x2ec>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d138      	bne.n	80073cc <UART_SetConfig+0x16c>
 800735a:	4b7b      	ldr	r3, [pc, #492]	@ (8007548 <UART_SetConfig+0x2e8>)
 800735c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007360:	f003 030c 	and.w	r3, r3, #12
 8007364:	2b0c      	cmp	r3, #12
 8007366:	d82d      	bhi.n	80073c4 <UART_SetConfig+0x164>
 8007368:	a201      	add	r2, pc, #4	@ (adr r2, 8007370 <UART_SetConfig+0x110>)
 800736a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736e:	bf00      	nop
 8007370:	080073a5 	.word	0x080073a5
 8007374:	080073c5 	.word	0x080073c5
 8007378:	080073c5 	.word	0x080073c5
 800737c:	080073c5 	.word	0x080073c5
 8007380:	080073b5 	.word	0x080073b5
 8007384:	080073c5 	.word	0x080073c5
 8007388:	080073c5 	.word	0x080073c5
 800738c:	080073c5 	.word	0x080073c5
 8007390:	080073ad 	.word	0x080073ad
 8007394:	080073c5 	.word	0x080073c5
 8007398:	080073c5 	.word	0x080073c5
 800739c:	080073c5 	.word	0x080073c5
 80073a0:	080073bd 	.word	0x080073bd
 80073a4:	2300      	movs	r3, #0
 80073a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073aa:	e098      	b.n	80074de <UART_SetConfig+0x27e>
 80073ac:	2302      	movs	r3, #2
 80073ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073b2:	e094      	b.n	80074de <UART_SetConfig+0x27e>
 80073b4:	2304      	movs	r3, #4
 80073b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ba:	e090      	b.n	80074de <UART_SetConfig+0x27e>
 80073bc:	2308      	movs	r3, #8
 80073be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073c2:	e08c      	b.n	80074de <UART_SetConfig+0x27e>
 80073c4:	2310      	movs	r3, #16
 80073c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ca:	e088      	b.n	80074de <UART_SetConfig+0x27e>
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a5f      	ldr	r2, [pc, #380]	@ (8007550 <UART_SetConfig+0x2f0>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d125      	bne.n	8007422 <UART_SetConfig+0x1c2>
 80073d6:	4b5c      	ldr	r3, [pc, #368]	@ (8007548 <UART_SetConfig+0x2e8>)
 80073d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80073e0:	2b30      	cmp	r3, #48	@ 0x30
 80073e2:	d016      	beq.n	8007412 <UART_SetConfig+0x1b2>
 80073e4:	2b30      	cmp	r3, #48	@ 0x30
 80073e6:	d818      	bhi.n	800741a <UART_SetConfig+0x1ba>
 80073e8:	2b20      	cmp	r3, #32
 80073ea:	d00a      	beq.n	8007402 <UART_SetConfig+0x1a2>
 80073ec:	2b20      	cmp	r3, #32
 80073ee:	d814      	bhi.n	800741a <UART_SetConfig+0x1ba>
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d002      	beq.n	80073fa <UART_SetConfig+0x19a>
 80073f4:	2b10      	cmp	r3, #16
 80073f6:	d008      	beq.n	800740a <UART_SetConfig+0x1aa>
 80073f8:	e00f      	b.n	800741a <UART_SetConfig+0x1ba>
 80073fa:	2300      	movs	r3, #0
 80073fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007400:	e06d      	b.n	80074de <UART_SetConfig+0x27e>
 8007402:	2302      	movs	r3, #2
 8007404:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007408:	e069      	b.n	80074de <UART_SetConfig+0x27e>
 800740a:	2304      	movs	r3, #4
 800740c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007410:	e065      	b.n	80074de <UART_SetConfig+0x27e>
 8007412:	2308      	movs	r3, #8
 8007414:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007418:	e061      	b.n	80074de <UART_SetConfig+0x27e>
 800741a:	2310      	movs	r3, #16
 800741c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007420:	e05d      	b.n	80074de <UART_SetConfig+0x27e>
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a4b      	ldr	r2, [pc, #300]	@ (8007554 <UART_SetConfig+0x2f4>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d125      	bne.n	8007478 <UART_SetConfig+0x218>
 800742c:	4b46      	ldr	r3, [pc, #280]	@ (8007548 <UART_SetConfig+0x2e8>)
 800742e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007432:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007436:	2bc0      	cmp	r3, #192	@ 0xc0
 8007438:	d016      	beq.n	8007468 <UART_SetConfig+0x208>
 800743a:	2bc0      	cmp	r3, #192	@ 0xc0
 800743c:	d818      	bhi.n	8007470 <UART_SetConfig+0x210>
 800743e:	2b80      	cmp	r3, #128	@ 0x80
 8007440:	d00a      	beq.n	8007458 <UART_SetConfig+0x1f8>
 8007442:	2b80      	cmp	r3, #128	@ 0x80
 8007444:	d814      	bhi.n	8007470 <UART_SetConfig+0x210>
 8007446:	2b00      	cmp	r3, #0
 8007448:	d002      	beq.n	8007450 <UART_SetConfig+0x1f0>
 800744a:	2b40      	cmp	r3, #64	@ 0x40
 800744c:	d008      	beq.n	8007460 <UART_SetConfig+0x200>
 800744e:	e00f      	b.n	8007470 <UART_SetConfig+0x210>
 8007450:	2300      	movs	r3, #0
 8007452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007456:	e042      	b.n	80074de <UART_SetConfig+0x27e>
 8007458:	2302      	movs	r3, #2
 800745a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800745e:	e03e      	b.n	80074de <UART_SetConfig+0x27e>
 8007460:	2304      	movs	r3, #4
 8007462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007466:	e03a      	b.n	80074de <UART_SetConfig+0x27e>
 8007468:	2308      	movs	r3, #8
 800746a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800746e:	e036      	b.n	80074de <UART_SetConfig+0x27e>
 8007470:	2310      	movs	r3, #16
 8007472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007476:	e032      	b.n	80074de <UART_SetConfig+0x27e>
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a30      	ldr	r2, [pc, #192]	@ (8007540 <UART_SetConfig+0x2e0>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d12a      	bne.n	80074d8 <UART_SetConfig+0x278>
 8007482:	4b31      	ldr	r3, [pc, #196]	@ (8007548 <UART_SetConfig+0x2e8>)
 8007484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007488:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800748c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007490:	d01a      	beq.n	80074c8 <UART_SetConfig+0x268>
 8007492:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007496:	d81b      	bhi.n	80074d0 <UART_SetConfig+0x270>
 8007498:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800749c:	d00c      	beq.n	80074b8 <UART_SetConfig+0x258>
 800749e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074a2:	d815      	bhi.n	80074d0 <UART_SetConfig+0x270>
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d003      	beq.n	80074b0 <UART_SetConfig+0x250>
 80074a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074ac:	d008      	beq.n	80074c0 <UART_SetConfig+0x260>
 80074ae:	e00f      	b.n	80074d0 <UART_SetConfig+0x270>
 80074b0:	2300      	movs	r3, #0
 80074b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074b6:	e012      	b.n	80074de <UART_SetConfig+0x27e>
 80074b8:	2302      	movs	r3, #2
 80074ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074be:	e00e      	b.n	80074de <UART_SetConfig+0x27e>
 80074c0:	2304      	movs	r3, #4
 80074c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074c6:	e00a      	b.n	80074de <UART_SetConfig+0x27e>
 80074c8:	2308      	movs	r3, #8
 80074ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ce:	e006      	b.n	80074de <UART_SetConfig+0x27e>
 80074d0:	2310      	movs	r3, #16
 80074d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074d6:	e002      	b.n	80074de <UART_SetConfig+0x27e>
 80074d8:	2310      	movs	r3, #16
 80074da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a17      	ldr	r2, [pc, #92]	@ (8007540 <UART_SetConfig+0x2e0>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	f040 80a8 	bne.w	800763a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80074ee:	2b08      	cmp	r3, #8
 80074f0:	d834      	bhi.n	800755c <UART_SetConfig+0x2fc>
 80074f2:	a201      	add	r2, pc, #4	@ (adr r2, 80074f8 <UART_SetConfig+0x298>)
 80074f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f8:	0800751d 	.word	0x0800751d
 80074fc:	0800755d 	.word	0x0800755d
 8007500:	08007525 	.word	0x08007525
 8007504:	0800755d 	.word	0x0800755d
 8007508:	0800752b 	.word	0x0800752b
 800750c:	0800755d 	.word	0x0800755d
 8007510:	0800755d 	.word	0x0800755d
 8007514:	0800755d 	.word	0x0800755d
 8007518:	08007533 	.word	0x08007533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800751c:	f7fe f830 	bl	8005580 <HAL_RCC_GetPCLK1Freq>
 8007520:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007522:	e021      	b.n	8007568 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007524:	4b0c      	ldr	r3, [pc, #48]	@ (8007558 <UART_SetConfig+0x2f8>)
 8007526:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007528:	e01e      	b.n	8007568 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800752a:	f7fd ffbb 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 800752e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007530:	e01a      	b.n	8007568 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007536:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007538:	e016      	b.n	8007568 <UART_SetConfig+0x308>
 800753a:	bf00      	nop
 800753c:	cfff69f3 	.word	0xcfff69f3
 8007540:	40008000 	.word	0x40008000
 8007544:	40013800 	.word	0x40013800
 8007548:	40021000 	.word	0x40021000
 800754c:	40004400 	.word	0x40004400
 8007550:	40004800 	.word	0x40004800
 8007554:	40004c00 	.word	0x40004c00
 8007558:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800755c:	2300      	movs	r3, #0
 800755e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007566:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 812a 	beq.w	80077c4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007574:	4a9e      	ldr	r2, [pc, #632]	@ (80077f0 <UART_SetConfig+0x590>)
 8007576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800757a:	461a      	mov	r2, r3
 800757c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007582:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	4613      	mov	r3, r2
 800758a:	005b      	lsls	r3, r3, #1
 800758c:	4413      	add	r3, r2
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	429a      	cmp	r2, r3
 8007592:	d305      	bcc.n	80075a0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	429a      	cmp	r2, r3
 800759e:	d903      	bls.n	80075a8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80075a6:	e10d      	b.n	80077c4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075aa:	2200      	movs	r2, #0
 80075ac:	60bb      	str	r3, [r7, #8]
 80075ae:	60fa      	str	r2, [r7, #12]
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b4:	4a8e      	ldr	r2, [pc, #568]	@ (80077f0 <UART_SetConfig+0x590>)
 80075b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	2200      	movs	r2, #0
 80075be:	603b      	str	r3, [r7, #0]
 80075c0:	607a      	str	r2, [r7, #4]
 80075c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075ca:	f7f9 fb35 	bl	8000c38 <__aeabi_uldivmod>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	4610      	mov	r0, r2
 80075d4:	4619      	mov	r1, r3
 80075d6:	f04f 0200 	mov.w	r2, #0
 80075da:	f04f 0300 	mov.w	r3, #0
 80075de:	020b      	lsls	r3, r1, #8
 80075e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075e4:	0202      	lsls	r2, r0, #8
 80075e6:	6979      	ldr	r1, [r7, #20]
 80075e8:	6849      	ldr	r1, [r1, #4]
 80075ea:	0849      	lsrs	r1, r1, #1
 80075ec:	2000      	movs	r0, #0
 80075ee:	460c      	mov	r4, r1
 80075f0:	4605      	mov	r5, r0
 80075f2:	eb12 0804 	adds.w	r8, r2, r4
 80075f6:	eb43 0905 	adc.w	r9, r3, r5
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	469a      	mov	sl, r3
 8007602:	4693      	mov	fp, r2
 8007604:	4652      	mov	r2, sl
 8007606:	465b      	mov	r3, fp
 8007608:	4640      	mov	r0, r8
 800760a:	4649      	mov	r1, r9
 800760c:	f7f9 fb14 	bl	8000c38 <__aeabi_uldivmod>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4613      	mov	r3, r2
 8007616:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800761e:	d308      	bcc.n	8007632 <UART_SetConfig+0x3d2>
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007626:	d204      	bcs.n	8007632 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6a3a      	ldr	r2, [r7, #32]
 800762e:	60da      	str	r2, [r3, #12]
 8007630:	e0c8      	b.n	80077c4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007638:	e0c4      	b.n	80077c4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007642:	d167      	bne.n	8007714 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007644:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007648:	2b08      	cmp	r3, #8
 800764a:	d828      	bhi.n	800769e <UART_SetConfig+0x43e>
 800764c:	a201      	add	r2, pc, #4	@ (adr r2, 8007654 <UART_SetConfig+0x3f4>)
 800764e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007652:	bf00      	nop
 8007654:	08007679 	.word	0x08007679
 8007658:	08007681 	.word	0x08007681
 800765c:	08007689 	.word	0x08007689
 8007660:	0800769f 	.word	0x0800769f
 8007664:	0800768f 	.word	0x0800768f
 8007668:	0800769f 	.word	0x0800769f
 800766c:	0800769f 	.word	0x0800769f
 8007670:	0800769f 	.word	0x0800769f
 8007674:	08007697 	.word	0x08007697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007678:	f7fd ff82 	bl	8005580 <HAL_RCC_GetPCLK1Freq>
 800767c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800767e:	e014      	b.n	80076aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007680:	f7fd ff94 	bl	80055ac <HAL_RCC_GetPCLK2Freq>
 8007684:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007686:	e010      	b.n	80076aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007688:	4b5a      	ldr	r3, [pc, #360]	@ (80077f4 <UART_SetConfig+0x594>)
 800768a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800768c:	e00d      	b.n	80076aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800768e:	f7fd ff09 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 8007692:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007694:	e009      	b.n	80076aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800769a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800769c:	e005      	b.n	80076aa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800769e:	2300      	movs	r3, #0
 80076a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80076a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 8089 	beq.w	80077c4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b6:	4a4e      	ldr	r2, [pc, #312]	@ (80077f0 <UART_SetConfig+0x590>)
 80076b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076bc:	461a      	mov	r2, r3
 80076be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80076c4:	005a      	lsls	r2, r3, #1
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	085b      	lsrs	r3, r3, #1
 80076cc:	441a      	add	r2, r3
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	2b0f      	cmp	r3, #15
 80076dc:	d916      	bls.n	800770c <UART_SetConfig+0x4ac>
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076e4:	d212      	bcs.n	800770c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	f023 030f 	bic.w	r3, r3, #15
 80076ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	085b      	lsrs	r3, r3, #1
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	f003 0307 	and.w	r3, r3, #7
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	8bfb      	ldrh	r3, [r7, #30]
 80076fe:	4313      	orrs	r3, r2
 8007700:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	8bfa      	ldrh	r2, [r7, #30]
 8007708:	60da      	str	r2, [r3, #12]
 800770a:	e05b      	b.n	80077c4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007712:	e057      	b.n	80077c4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007714:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007718:	2b08      	cmp	r3, #8
 800771a:	d828      	bhi.n	800776e <UART_SetConfig+0x50e>
 800771c:	a201      	add	r2, pc, #4	@ (adr r2, 8007724 <UART_SetConfig+0x4c4>)
 800771e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007722:	bf00      	nop
 8007724:	08007749 	.word	0x08007749
 8007728:	08007751 	.word	0x08007751
 800772c:	08007759 	.word	0x08007759
 8007730:	0800776f 	.word	0x0800776f
 8007734:	0800775f 	.word	0x0800775f
 8007738:	0800776f 	.word	0x0800776f
 800773c:	0800776f 	.word	0x0800776f
 8007740:	0800776f 	.word	0x0800776f
 8007744:	08007767 	.word	0x08007767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007748:	f7fd ff1a 	bl	8005580 <HAL_RCC_GetPCLK1Freq>
 800774c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800774e:	e014      	b.n	800777a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007750:	f7fd ff2c 	bl	80055ac <HAL_RCC_GetPCLK2Freq>
 8007754:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007756:	e010      	b.n	800777a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007758:	4b26      	ldr	r3, [pc, #152]	@ (80077f4 <UART_SetConfig+0x594>)
 800775a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800775c:	e00d      	b.n	800777a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800775e:	f7fd fea1 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 8007762:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007764:	e009      	b.n	800777a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800776a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800776c:	e005      	b.n	800777a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007778:	bf00      	nop
    }

    if (pclk != 0U)
 800777a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777c:	2b00      	cmp	r3, #0
 800777e:	d021      	beq.n	80077c4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007784:	4a1a      	ldr	r2, [pc, #104]	@ (80077f0 <UART_SetConfig+0x590>)
 8007786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800778a:	461a      	mov	r2, r3
 800778c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	085b      	lsrs	r3, r3, #1
 8007798:	441a      	add	r2, r3
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	2b0f      	cmp	r3, #15
 80077a8:	d909      	bls.n	80077be <UART_SetConfig+0x55e>
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077b0:	d205      	bcs.n	80077be <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077b2:	6a3b      	ldr	r3, [r7, #32]
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	60da      	str	r2, [r3, #12]
 80077bc:	e002      	b.n	80077c4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	2200      	movs	r2, #0
 80077d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	2200      	movs	r2, #0
 80077de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80077e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3730      	adds	r7, #48	@ 0x30
 80077e8:	46bd      	mov	sp, r7
 80077ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077ee:	bf00      	nop
 80077f0:	0800ac40 	.word	0x0800ac40
 80077f4:	00f42400 	.word	0x00f42400

080077f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007804:	f003 0308 	and.w	r3, r3, #8
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00a      	beq.n	8007822 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	430a      	orrs	r2, r1
 8007820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007848:	f003 0302 	and.w	r3, r3, #2
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00a      	beq.n	8007866 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	430a      	orrs	r2, r1
 8007864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800786a:	f003 0304 	and.w	r3, r3, #4
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00a      	beq.n	8007888 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	430a      	orrs	r2, r1
 8007886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800788c:	f003 0310 	and.w	r3, r3, #16
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00a      	beq.n	80078aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	430a      	orrs	r2, r1
 80078a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ae:	f003 0320 	and.w	r3, r3, #32
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00a      	beq.n	80078cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	430a      	orrs	r2, r1
 80078ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d01a      	beq.n	800790e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	430a      	orrs	r2, r1
 80078ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078f6:	d10a      	bne.n	800790e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	430a      	orrs	r2, r1
 800790c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00a      	beq.n	8007930 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	430a      	orrs	r2, r1
 800792e:	605a      	str	r2, [r3, #4]
  }
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b098      	sub	sp, #96	@ 0x60
 8007940:	af02      	add	r7, sp, #8
 8007942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800794c:	f7fa ff76 	bl	800283c <HAL_GetTick>
 8007950:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0308 	and.w	r3, r3, #8
 800795c:	2b08      	cmp	r3, #8
 800795e:	d12f      	bne.n	80079c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007960:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007968:	2200      	movs	r2, #0
 800796a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f88e 	bl	8007a90 <UART_WaitOnFlagUntilTimeout>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d022      	beq.n	80079c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800798a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800798e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	461a      	mov	r2, r3
 8007996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007998:	647b      	str	r3, [r7, #68]	@ 0x44
 800799a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800799e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e6      	bne.n	800797a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2220      	movs	r2, #32
 80079b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e063      	b.n	8007a88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0304 	and.w	r3, r3, #4
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	d149      	bne.n	8007a62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079d2:	9300      	str	r3, [sp, #0]
 80079d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079d6:	2200      	movs	r2, #0
 80079d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f857 	bl	8007a90 <UART_WaitOnFlagUntilTimeout>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d03c      	beq.n	8007a62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f0:	e853 3f00 	ldrex	r3, [r3]
 80079f4:	623b      	str	r3, [r7, #32]
   return(result);
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	461a      	mov	r2, r3
 8007a04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a06:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a0e:	e841 2300 	strex	r3, r2, [r1]
 8007a12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1e6      	bne.n	80079e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3308      	adds	r3, #8
 8007a20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	e853 3f00 	ldrex	r3, [r3]
 8007a28:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f023 0301 	bic.w	r3, r3, #1
 8007a30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3308      	adds	r3, #8
 8007a38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a3a:	61fa      	str	r2, [r7, #28]
 8007a3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	69b9      	ldr	r1, [r7, #24]
 8007a40:	69fa      	ldr	r2, [r7, #28]
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	617b      	str	r3, [r7, #20]
   return(result);
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e5      	bne.n	8007a1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2220      	movs	r2, #32
 8007a52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e012      	b.n	8007a88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3758      	adds	r7, #88	@ 0x58
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	603b      	str	r3, [r7, #0]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aa0:	e04f      	b.n	8007b42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa8:	d04b      	beq.n	8007b42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aaa:	f7fa fec7 	bl	800283c <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d302      	bcc.n	8007ac0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d101      	bne.n	8007ac4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	e04e      	b.n	8007b62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 0304 	and.w	r3, r3, #4
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d037      	beq.n	8007b42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2b80      	cmp	r3, #128	@ 0x80
 8007ad6:	d034      	beq.n	8007b42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	2b40      	cmp	r3, #64	@ 0x40
 8007adc:	d031      	beq.n	8007b42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	f003 0308 	and.w	r3, r3, #8
 8007ae8:	2b08      	cmp	r3, #8
 8007aea:	d110      	bne.n	8007b0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2208      	movs	r2, #8
 8007af2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f000 f838 	bl	8007b6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2208      	movs	r2, #8
 8007afe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e029      	b.n	8007b62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b1c:	d111      	bne.n	8007b42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 f81e 	bl	8007b6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2220      	movs	r2, #32
 8007b32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e00f      	b.n	8007b62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	69da      	ldr	r2, [r3, #28]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	bf0c      	ite	eq
 8007b52:	2301      	moveq	r3, #1
 8007b54:	2300      	movne	r3, #0
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	461a      	mov	r2, r3
 8007b5a:	79fb      	ldrb	r3, [r7, #7]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d0a0      	beq.n	8007aa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b095      	sub	sp, #84	@ 0x54
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b7a:	e853 3f00 	ldrex	r3, [r3]
 8007b7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b90:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b98:	e841 2300 	strex	r3, r2, [r1]
 8007b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1e6      	bne.n	8007b72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	3308      	adds	r3, #8
 8007baa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	e853 3f00 	ldrex	r3, [r3]
 8007bb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bba:	f023 0301 	bic.w	r3, r3, #1
 8007bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	3308      	adds	r3, #8
 8007bc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bd0:	e841 2300 	strex	r3, r2, [r1]
 8007bd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1e3      	bne.n	8007ba4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d118      	bne.n	8007c16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	e853 3f00 	ldrex	r3, [r3]
 8007bf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	f023 0310 	bic.w	r3, r3, #16
 8007bf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c02:	61bb      	str	r3, [r7, #24]
 8007c04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c06:	6979      	ldr	r1, [r7, #20]
 8007c08:	69ba      	ldr	r2, [r7, #24]
 8007c0a:	e841 2300 	strex	r3, r2, [r1]
 8007c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1e6      	bne.n	8007be4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2220      	movs	r2, #32
 8007c1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007c2a:	bf00      	nop
 8007c2c:	3754      	adds	r7, #84	@ 0x54
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b085      	sub	sp, #20
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d101      	bne.n	8007c4c <HAL_UARTEx_DisableFifoMode+0x16>
 8007c48:	2302      	movs	r3, #2
 8007c4a:	e027      	b.n	8007c9c <HAL_UARTEx_DisableFifoMode+0x66>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2224      	movs	r2, #36	@ 0x24
 8007c58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f022 0201 	bic.w	r2, r2, #1
 8007c72:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007c7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d101      	bne.n	8007cc0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	e02d      	b.n	8007d1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2224      	movs	r2, #36	@ 0x24
 8007ccc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f022 0201 	bic.w	r2, r2, #1
 8007ce6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	683a      	ldr	r2, [r7, #0]
 8007cf8:	430a      	orrs	r2, r1
 8007cfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f84f 	bl	8007da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2220      	movs	r2, #32
 8007d0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d101      	bne.n	8007d3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d38:	2302      	movs	r3, #2
 8007d3a:	e02d      	b.n	8007d98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2224      	movs	r2, #36	@ 0x24
 8007d48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f022 0201 	bic.w	r2, r2, #1
 8007d62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	430a      	orrs	r2, r1
 8007d76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f811 	bl	8007da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2220      	movs	r2, #32
 8007d8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d108      	bne.n	8007dc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007dc0:	e031      	b.n	8007e26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007dc2:	2308      	movs	r3, #8
 8007dc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007dc6:	2308      	movs	r3, #8
 8007dc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	0e5b      	lsrs	r3, r3, #25
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	f003 0307 	and.w	r3, r3, #7
 8007dd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	0f5b      	lsrs	r3, r3, #29
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	f003 0307 	and.w	r3, r3, #7
 8007de8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007dea:	7bbb      	ldrb	r3, [r7, #14]
 8007dec:	7b3a      	ldrb	r2, [r7, #12]
 8007dee:	4911      	ldr	r1, [pc, #68]	@ (8007e34 <UARTEx_SetNbDataToProcess+0x94>)
 8007df0:	5c8a      	ldrb	r2, [r1, r2]
 8007df2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007df6:	7b3a      	ldrb	r2, [r7, #12]
 8007df8:	490f      	ldr	r1, [pc, #60]	@ (8007e38 <UARTEx_SetNbDataToProcess+0x98>)
 8007dfa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007dfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
 8007e0a:	7b7a      	ldrb	r2, [r7, #13]
 8007e0c:	4909      	ldr	r1, [pc, #36]	@ (8007e34 <UARTEx_SetNbDataToProcess+0x94>)
 8007e0e:	5c8a      	ldrb	r2, [r1, r2]
 8007e10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e14:	7b7a      	ldrb	r2, [r7, #13]
 8007e16:	4908      	ldr	r1, [pc, #32]	@ (8007e38 <UARTEx_SetNbDataToProcess+0x98>)
 8007e18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007e26:	bf00      	nop
 8007e28:	3714      	adds	r7, #20
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	0800ac58 	.word	0x0800ac58
 8007e38:	0800ac60 	.word	0x0800ac60

08007e3c <__cvt>:
 8007e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e40:	ec57 6b10 	vmov	r6, r7, d0
 8007e44:	2f00      	cmp	r7, #0
 8007e46:	460c      	mov	r4, r1
 8007e48:	4619      	mov	r1, r3
 8007e4a:	463b      	mov	r3, r7
 8007e4c:	bfbb      	ittet	lt
 8007e4e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007e52:	461f      	movlt	r7, r3
 8007e54:	2300      	movge	r3, #0
 8007e56:	232d      	movlt	r3, #45	@ 0x2d
 8007e58:	700b      	strb	r3, [r1, #0]
 8007e5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e5c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007e60:	4691      	mov	r9, r2
 8007e62:	f023 0820 	bic.w	r8, r3, #32
 8007e66:	bfbc      	itt	lt
 8007e68:	4632      	movlt	r2, r6
 8007e6a:	4616      	movlt	r6, r2
 8007e6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e70:	d005      	beq.n	8007e7e <__cvt+0x42>
 8007e72:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007e76:	d100      	bne.n	8007e7a <__cvt+0x3e>
 8007e78:	3401      	adds	r4, #1
 8007e7a:	2102      	movs	r1, #2
 8007e7c:	e000      	b.n	8007e80 <__cvt+0x44>
 8007e7e:	2103      	movs	r1, #3
 8007e80:	ab03      	add	r3, sp, #12
 8007e82:	9301      	str	r3, [sp, #4]
 8007e84:	ab02      	add	r3, sp, #8
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	ec47 6b10 	vmov	d0, r6, r7
 8007e8c:	4653      	mov	r3, sl
 8007e8e:	4622      	mov	r2, r4
 8007e90:	f000 fe6a 	bl	8008b68 <_dtoa_r>
 8007e94:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007e98:	4605      	mov	r5, r0
 8007e9a:	d119      	bne.n	8007ed0 <__cvt+0x94>
 8007e9c:	f019 0f01 	tst.w	r9, #1
 8007ea0:	d00e      	beq.n	8007ec0 <__cvt+0x84>
 8007ea2:	eb00 0904 	add.w	r9, r0, r4
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	4630      	mov	r0, r6
 8007eac:	4639      	mov	r1, r7
 8007eae:	f7f8 fe33 	bl	8000b18 <__aeabi_dcmpeq>
 8007eb2:	b108      	cbz	r0, 8007eb8 <__cvt+0x7c>
 8007eb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007eb8:	2230      	movs	r2, #48	@ 0x30
 8007eba:	9b03      	ldr	r3, [sp, #12]
 8007ebc:	454b      	cmp	r3, r9
 8007ebe:	d31e      	bcc.n	8007efe <__cvt+0xc2>
 8007ec0:	9b03      	ldr	r3, [sp, #12]
 8007ec2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ec4:	1b5b      	subs	r3, r3, r5
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	6013      	str	r3, [r2, #0]
 8007eca:	b004      	add	sp, #16
 8007ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ed0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ed4:	eb00 0904 	add.w	r9, r0, r4
 8007ed8:	d1e5      	bne.n	8007ea6 <__cvt+0x6a>
 8007eda:	7803      	ldrb	r3, [r0, #0]
 8007edc:	2b30      	cmp	r3, #48	@ 0x30
 8007ede:	d10a      	bne.n	8007ef6 <__cvt+0xba>
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	4639      	mov	r1, r7
 8007ee8:	f7f8 fe16 	bl	8000b18 <__aeabi_dcmpeq>
 8007eec:	b918      	cbnz	r0, 8007ef6 <__cvt+0xba>
 8007eee:	f1c4 0401 	rsb	r4, r4, #1
 8007ef2:	f8ca 4000 	str.w	r4, [sl]
 8007ef6:	f8da 3000 	ldr.w	r3, [sl]
 8007efa:	4499      	add	r9, r3
 8007efc:	e7d3      	b.n	8007ea6 <__cvt+0x6a>
 8007efe:	1c59      	adds	r1, r3, #1
 8007f00:	9103      	str	r1, [sp, #12]
 8007f02:	701a      	strb	r2, [r3, #0]
 8007f04:	e7d9      	b.n	8007eba <__cvt+0x7e>

08007f06 <__exponent>:
 8007f06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f08:	2900      	cmp	r1, #0
 8007f0a:	bfba      	itte	lt
 8007f0c:	4249      	neglt	r1, r1
 8007f0e:	232d      	movlt	r3, #45	@ 0x2d
 8007f10:	232b      	movge	r3, #43	@ 0x2b
 8007f12:	2909      	cmp	r1, #9
 8007f14:	7002      	strb	r2, [r0, #0]
 8007f16:	7043      	strb	r3, [r0, #1]
 8007f18:	dd29      	ble.n	8007f6e <__exponent+0x68>
 8007f1a:	f10d 0307 	add.w	r3, sp, #7
 8007f1e:	461d      	mov	r5, r3
 8007f20:	270a      	movs	r7, #10
 8007f22:	461a      	mov	r2, r3
 8007f24:	fbb1 f6f7 	udiv	r6, r1, r7
 8007f28:	fb07 1416 	mls	r4, r7, r6, r1
 8007f2c:	3430      	adds	r4, #48	@ 0x30
 8007f2e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007f32:	460c      	mov	r4, r1
 8007f34:	2c63      	cmp	r4, #99	@ 0x63
 8007f36:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f3a:	4631      	mov	r1, r6
 8007f3c:	dcf1      	bgt.n	8007f22 <__exponent+0x1c>
 8007f3e:	3130      	adds	r1, #48	@ 0x30
 8007f40:	1e94      	subs	r4, r2, #2
 8007f42:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007f46:	1c41      	adds	r1, r0, #1
 8007f48:	4623      	mov	r3, r4
 8007f4a:	42ab      	cmp	r3, r5
 8007f4c:	d30a      	bcc.n	8007f64 <__exponent+0x5e>
 8007f4e:	f10d 0309 	add.w	r3, sp, #9
 8007f52:	1a9b      	subs	r3, r3, r2
 8007f54:	42ac      	cmp	r4, r5
 8007f56:	bf88      	it	hi
 8007f58:	2300      	movhi	r3, #0
 8007f5a:	3302      	adds	r3, #2
 8007f5c:	4403      	add	r3, r0
 8007f5e:	1a18      	subs	r0, r3, r0
 8007f60:	b003      	add	sp, #12
 8007f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f64:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007f68:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007f6c:	e7ed      	b.n	8007f4a <__exponent+0x44>
 8007f6e:	2330      	movs	r3, #48	@ 0x30
 8007f70:	3130      	adds	r1, #48	@ 0x30
 8007f72:	7083      	strb	r3, [r0, #2]
 8007f74:	70c1      	strb	r1, [r0, #3]
 8007f76:	1d03      	adds	r3, r0, #4
 8007f78:	e7f1      	b.n	8007f5e <__exponent+0x58>
	...

08007f7c <_printf_float>:
 8007f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f80:	b08d      	sub	sp, #52	@ 0x34
 8007f82:	460c      	mov	r4, r1
 8007f84:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007f88:	4616      	mov	r6, r2
 8007f8a:	461f      	mov	r7, r3
 8007f8c:	4605      	mov	r5, r0
 8007f8e:	f000 fcdb 	bl	8008948 <_localeconv_r>
 8007f92:	6803      	ldr	r3, [r0, #0]
 8007f94:	9304      	str	r3, [sp, #16]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7f8 f992 	bl	80002c0 <strlen>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fa0:	f8d8 3000 	ldr.w	r3, [r8]
 8007fa4:	9005      	str	r0, [sp, #20]
 8007fa6:	3307      	adds	r3, #7
 8007fa8:	f023 0307 	bic.w	r3, r3, #7
 8007fac:	f103 0208 	add.w	r2, r3, #8
 8007fb0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007fb4:	f8d4 b000 	ldr.w	fp, [r4]
 8007fb8:	f8c8 2000 	str.w	r2, [r8]
 8007fbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fc0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007fc4:	9307      	str	r3, [sp, #28]
 8007fc6:	f8cd 8018 	str.w	r8, [sp, #24]
 8007fca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007fce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fd2:	4b9c      	ldr	r3, [pc, #624]	@ (8008244 <_printf_float+0x2c8>)
 8007fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd8:	f7f8 fdd0 	bl	8000b7c <__aeabi_dcmpun>
 8007fdc:	bb70      	cbnz	r0, 800803c <_printf_float+0xc0>
 8007fde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fe2:	4b98      	ldr	r3, [pc, #608]	@ (8008244 <_printf_float+0x2c8>)
 8007fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fe8:	f7f8 fdaa 	bl	8000b40 <__aeabi_dcmple>
 8007fec:	bb30      	cbnz	r0, 800803c <_printf_float+0xc0>
 8007fee:	2200      	movs	r2, #0
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	4640      	mov	r0, r8
 8007ff4:	4649      	mov	r1, r9
 8007ff6:	f7f8 fd99 	bl	8000b2c <__aeabi_dcmplt>
 8007ffa:	b110      	cbz	r0, 8008002 <_printf_float+0x86>
 8007ffc:	232d      	movs	r3, #45	@ 0x2d
 8007ffe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008002:	4a91      	ldr	r2, [pc, #580]	@ (8008248 <_printf_float+0x2cc>)
 8008004:	4b91      	ldr	r3, [pc, #580]	@ (800824c <_printf_float+0x2d0>)
 8008006:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800800a:	bf94      	ite	ls
 800800c:	4690      	movls	r8, r2
 800800e:	4698      	movhi	r8, r3
 8008010:	2303      	movs	r3, #3
 8008012:	6123      	str	r3, [r4, #16]
 8008014:	f02b 0304 	bic.w	r3, fp, #4
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	f04f 0900 	mov.w	r9, #0
 800801e:	9700      	str	r7, [sp, #0]
 8008020:	4633      	mov	r3, r6
 8008022:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008024:	4621      	mov	r1, r4
 8008026:	4628      	mov	r0, r5
 8008028:	f000 f9d2 	bl	80083d0 <_printf_common>
 800802c:	3001      	adds	r0, #1
 800802e:	f040 808d 	bne.w	800814c <_printf_float+0x1d0>
 8008032:	f04f 30ff 	mov.w	r0, #4294967295
 8008036:	b00d      	add	sp, #52	@ 0x34
 8008038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800803c:	4642      	mov	r2, r8
 800803e:	464b      	mov	r3, r9
 8008040:	4640      	mov	r0, r8
 8008042:	4649      	mov	r1, r9
 8008044:	f7f8 fd9a 	bl	8000b7c <__aeabi_dcmpun>
 8008048:	b140      	cbz	r0, 800805c <_printf_float+0xe0>
 800804a:	464b      	mov	r3, r9
 800804c:	2b00      	cmp	r3, #0
 800804e:	bfbc      	itt	lt
 8008050:	232d      	movlt	r3, #45	@ 0x2d
 8008052:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008056:	4a7e      	ldr	r2, [pc, #504]	@ (8008250 <_printf_float+0x2d4>)
 8008058:	4b7e      	ldr	r3, [pc, #504]	@ (8008254 <_printf_float+0x2d8>)
 800805a:	e7d4      	b.n	8008006 <_printf_float+0x8a>
 800805c:	6863      	ldr	r3, [r4, #4]
 800805e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008062:	9206      	str	r2, [sp, #24]
 8008064:	1c5a      	adds	r2, r3, #1
 8008066:	d13b      	bne.n	80080e0 <_printf_float+0x164>
 8008068:	2306      	movs	r3, #6
 800806a:	6063      	str	r3, [r4, #4]
 800806c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008070:	2300      	movs	r3, #0
 8008072:	6022      	str	r2, [r4, #0]
 8008074:	9303      	str	r3, [sp, #12]
 8008076:	ab0a      	add	r3, sp, #40	@ 0x28
 8008078:	e9cd a301 	strd	sl, r3, [sp, #4]
 800807c:	ab09      	add	r3, sp, #36	@ 0x24
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	6861      	ldr	r1, [r4, #4]
 8008082:	ec49 8b10 	vmov	d0, r8, r9
 8008086:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800808a:	4628      	mov	r0, r5
 800808c:	f7ff fed6 	bl	8007e3c <__cvt>
 8008090:	9b06      	ldr	r3, [sp, #24]
 8008092:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008094:	2b47      	cmp	r3, #71	@ 0x47
 8008096:	4680      	mov	r8, r0
 8008098:	d129      	bne.n	80080ee <_printf_float+0x172>
 800809a:	1cc8      	adds	r0, r1, #3
 800809c:	db02      	blt.n	80080a4 <_printf_float+0x128>
 800809e:	6863      	ldr	r3, [r4, #4]
 80080a0:	4299      	cmp	r1, r3
 80080a2:	dd41      	ble.n	8008128 <_printf_float+0x1ac>
 80080a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80080a8:	fa5f fa8a 	uxtb.w	sl, sl
 80080ac:	3901      	subs	r1, #1
 80080ae:	4652      	mov	r2, sl
 80080b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80080b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80080b6:	f7ff ff26 	bl	8007f06 <__exponent>
 80080ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080bc:	1813      	adds	r3, r2, r0
 80080be:	2a01      	cmp	r2, #1
 80080c0:	4681      	mov	r9, r0
 80080c2:	6123      	str	r3, [r4, #16]
 80080c4:	dc02      	bgt.n	80080cc <_printf_float+0x150>
 80080c6:	6822      	ldr	r2, [r4, #0]
 80080c8:	07d2      	lsls	r2, r2, #31
 80080ca:	d501      	bpl.n	80080d0 <_printf_float+0x154>
 80080cc:	3301      	adds	r3, #1
 80080ce:	6123      	str	r3, [r4, #16]
 80080d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d0a2      	beq.n	800801e <_printf_float+0xa2>
 80080d8:	232d      	movs	r3, #45	@ 0x2d
 80080da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080de:	e79e      	b.n	800801e <_printf_float+0xa2>
 80080e0:	9a06      	ldr	r2, [sp, #24]
 80080e2:	2a47      	cmp	r2, #71	@ 0x47
 80080e4:	d1c2      	bne.n	800806c <_printf_float+0xf0>
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1c0      	bne.n	800806c <_printf_float+0xf0>
 80080ea:	2301      	movs	r3, #1
 80080ec:	e7bd      	b.n	800806a <_printf_float+0xee>
 80080ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80080f2:	d9db      	bls.n	80080ac <_printf_float+0x130>
 80080f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80080f8:	d118      	bne.n	800812c <_printf_float+0x1b0>
 80080fa:	2900      	cmp	r1, #0
 80080fc:	6863      	ldr	r3, [r4, #4]
 80080fe:	dd0b      	ble.n	8008118 <_printf_float+0x19c>
 8008100:	6121      	str	r1, [r4, #16]
 8008102:	b913      	cbnz	r3, 800810a <_printf_float+0x18e>
 8008104:	6822      	ldr	r2, [r4, #0]
 8008106:	07d0      	lsls	r0, r2, #31
 8008108:	d502      	bpl.n	8008110 <_printf_float+0x194>
 800810a:	3301      	adds	r3, #1
 800810c:	440b      	add	r3, r1
 800810e:	6123      	str	r3, [r4, #16]
 8008110:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008112:	f04f 0900 	mov.w	r9, #0
 8008116:	e7db      	b.n	80080d0 <_printf_float+0x154>
 8008118:	b913      	cbnz	r3, 8008120 <_printf_float+0x1a4>
 800811a:	6822      	ldr	r2, [r4, #0]
 800811c:	07d2      	lsls	r2, r2, #31
 800811e:	d501      	bpl.n	8008124 <_printf_float+0x1a8>
 8008120:	3302      	adds	r3, #2
 8008122:	e7f4      	b.n	800810e <_printf_float+0x192>
 8008124:	2301      	movs	r3, #1
 8008126:	e7f2      	b.n	800810e <_printf_float+0x192>
 8008128:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800812c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800812e:	4299      	cmp	r1, r3
 8008130:	db05      	blt.n	800813e <_printf_float+0x1c2>
 8008132:	6823      	ldr	r3, [r4, #0]
 8008134:	6121      	str	r1, [r4, #16]
 8008136:	07d8      	lsls	r0, r3, #31
 8008138:	d5ea      	bpl.n	8008110 <_printf_float+0x194>
 800813a:	1c4b      	adds	r3, r1, #1
 800813c:	e7e7      	b.n	800810e <_printf_float+0x192>
 800813e:	2900      	cmp	r1, #0
 8008140:	bfd4      	ite	le
 8008142:	f1c1 0202 	rsble	r2, r1, #2
 8008146:	2201      	movgt	r2, #1
 8008148:	4413      	add	r3, r2
 800814a:	e7e0      	b.n	800810e <_printf_float+0x192>
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	055a      	lsls	r2, r3, #21
 8008150:	d407      	bmi.n	8008162 <_printf_float+0x1e6>
 8008152:	6923      	ldr	r3, [r4, #16]
 8008154:	4642      	mov	r2, r8
 8008156:	4631      	mov	r1, r6
 8008158:	4628      	mov	r0, r5
 800815a:	47b8      	blx	r7
 800815c:	3001      	adds	r0, #1
 800815e:	d12b      	bne.n	80081b8 <_printf_float+0x23c>
 8008160:	e767      	b.n	8008032 <_printf_float+0xb6>
 8008162:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008166:	f240 80dd 	bls.w	8008324 <_printf_float+0x3a8>
 800816a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800816e:	2200      	movs	r2, #0
 8008170:	2300      	movs	r3, #0
 8008172:	f7f8 fcd1 	bl	8000b18 <__aeabi_dcmpeq>
 8008176:	2800      	cmp	r0, #0
 8008178:	d033      	beq.n	80081e2 <_printf_float+0x266>
 800817a:	4a37      	ldr	r2, [pc, #220]	@ (8008258 <_printf_float+0x2dc>)
 800817c:	2301      	movs	r3, #1
 800817e:	4631      	mov	r1, r6
 8008180:	4628      	mov	r0, r5
 8008182:	47b8      	blx	r7
 8008184:	3001      	adds	r0, #1
 8008186:	f43f af54 	beq.w	8008032 <_printf_float+0xb6>
 800818a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800818e:	4543      	cmp	r3, r8
 8008190:	db02      	blt.n	8008198 <_printf_float+0x21c>
 8008192:	6823      	ldr	r3, [r4, #0]
 8008194:	07d8      	lsls	r0, r3, #31
 8008196:	d50f      	bpl.n	80081b8 <_printf_float+0x23c>
 8008198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800819c:	4631      	mov	r1, r6
 800819e:	4628      	mov	r0, r5
 80081a0:	47b8      	blx	r7
 80081a2:	3001      	adds	r0, #1
 80081a4:	f43f af45 	beq.w	8008032 <_printf_float+0xb6>
 80081a8:	f04f 0900 	mov.w	r9, #0
 80081ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80081b0:	f104 0a1a 	add.w	sl, r4, #26
 80081b4:	45c8      	cmp	r8, r9
 80081b6:	dc09      	bgt.n	80081cc <_printf_float+0x250>
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	079b      	lsls	r3, r3, #30
 80081bc:	f100 8103 	bmi.w	80083c6 <_printf_float+0x44a>
 80081c0:	68e0      	ldr	r0, [r4, #12]
 80081c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081c4:	4298      	cmp	r0, r3
 80081c6:	bfb8      	it	lt
 80081c8:	4618      	movlt	r0, r3
 80081ca:	e734      	b.n	8008036 <_printf_float+0xba>
 80081cc:	2301      	movs	r3, #1
 80081ce:	4652      	mov	r2, sl
 80081d0:	4631      	mov	r1, r6
 80081d2:	4628      	mov	r0, r5
 80081d4:	47b8      	blx	r7
 80081d6:	3001      	adds	r0, #1
 80081d8:	f43f af2b 	beq.w	8008032 <_printf_float+0xb6>
 80081dc:	f109 0901 	add.w	r9, r9, #1
 80081e0:	e7e8      	b.n	80081b4 <_printf_float+0x238>
 80081e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	dc39      	bgt.n	800825c <_printf_float+0x2e0>
 80081e8:	4a1b      	ldr	r2, [pc, #108]	@ (8008258 <_printf_float+0x2dc>)
 80081ea:	2301      	movs	r3, #1
 80081ec:	4631      	mov	r1, r6
 80081ee:	4628      	mov	r0, r5
 80081f0:	47b8      	blx	r7
 80081f2:	3001      	adds	r0, #1
 80081f4:	f43f af1d 	beq.w	8008032 <_printf_float+0xb6>
 80081f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80081fc:	ea59 0303 	orrs.w	r3, r9, r3
 8008200:	d102      	bne.n	8008208 <_printf_float+0x28c>
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	07d9      	lsls	r1, r3, #31
 8008206:	d5d7      	bpl.n	80081b8 <_printf_float+0x23c>
 8008208:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800820c:	4631      	mov	r1, r6
 800820e:	4628      	mov	r0, r5
 8008210:	47b8      	blx	r7
 8008212:	3001      	adds	r0, #1
 8008214:	f43f af0d 	beq.w	8008032 <_printf_float+0xb6>
 8008218:	f04f 0a00 	mov.w	sl, #0
 800821c:	f104 0b1a 	add.w	fp, r4, #26
 8008220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008222:	425b      	negs	r3, r3
 8008224:	4553      	cmp	r3, sl
 8008226:	dc01      	bgt.n	800822c <_printf_float+0x2b0>
 8008228:	464b      	mov	r3, r9
 800822a:	e793      	b.n	8008154 <_printf_float+0x1d8>
 800822c:	2301      	movs	r3, #1
 800822e:	465a      	mov	r2, fp
 8008230:	4631      	mov	r1, r6
 8008232:	4628      	mov	r0, r5
 8008234:	47b8      	blx	r7
 8008236:	3001      	adds	r0, #1
 8008238:	f43f aefb 	beq.w	8008032 <_printf_float+0xb6>
 800823c:	f10a 0a01 	add.w	sl, sl, #1
 8008240:	e7ee      	b.n	8008220 <_printf_float+0x2a4>
 8008242:	bf00      	nop
 8008244:	7fefffff 	.word	0x7fefffff
 8008248:	0800ac68 	.word	0x0800ac68
 800824c:	0800ac6c 	.word	0x0800ac6c
 8008250:	0800ac70 	.word	0x0800ac70
 8008254:	0800ac74 	.word	0x0800ac74
 8008258:	0800ac78 	.word	0x0800ac78
 800825c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800825e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008262:	4553      	cmp	r3, sl
 8008264:	bfa8      	it	ge
 8008266:	4653      	movge	r3, sl
 8008268:	2b00      	cmp	r3, #0
 800826a:	4699      	mov	r9, r3
 800826c:	dc36      	bgt.n	80082dc <_printf_float+0x360>
 800826e:	f04f 0b00 	mov.w	fp, #0
 8008272:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008276:	f104 021a 	add.w	r2, r4, #26
 800827a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800827c:	9306      	str	r3, [sp, #24]
 800827e:	eba3 0309 	sub.w	r3, r3, r9
 8008282:	455b      	cmp	r3, fp
 8008284:	dc31      	bgt.n	80082ea <_printf_float+0x36e>
 8008286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008288:	459a      	cmp	sl, r3
 800828a:	dc3a      	bgt.n	8008302 <_printf_float+0x386>
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	07da      	lsls	r2, r3, #31
 8008290:	d437      	bmi.n	8008302 <_printf_float+0x386>
 8008292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008294:	ebaa 0903 	sub.w	r9, sl, r3
 8008298:	9b06      	ldr	r3, [sp, #24]
 800829a:	ebaa 0303 	sub.w	r3, sl, r3
 800829e:	4599      	cmp	r9, r3
 80082a0:	bfa8      	it	ge
 80082a2:	4699      	movge	r9, r3
 80082a4:	f1b9 0f00 	cmp.w	r9, #0
 80082a8:	dc33      	bgt.n	8008312 <_printf_float+0x396>
 80082aa:	f04f 0800 	mov.w	r8, #0
 80082ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082b2:	f104 0b1a 	add.w	fp, r4, #26
 80082b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082b8:	ebaa 0303 	sub.w	r3, sl, r3
 80082bc:	eba3 0309 	sub.w	r3, r3, r9
 80082c0:	4543      	cmp	r3, r8
 80082c2:	f77f af79 	ble.w	80081b8 <_printf_float+0x23c>
 80082c6:	2301      	movs	r3, #1
 80082c8:	465a      	mov	r2, fp
 80082ca:	4631      	mov	r1, r6
 80082cc:	4628      	mov	r0, r5
 80082ce:	47b8      	blx	r7
 80082d0:	3001      	adds	r0, #1
 80082d2:	f43f aeae 	beq.w	8008032 <_printf_float+0xb6>
 80082d6:	f108 0801 	add.w	r8, r8, #1
 80082da:	e7ec      	b.n	80082b6 <_printf_float+0x33a>
 80082dc:	4642      	mov	r2, r8
 80082de:	4631      	mov	r1, r6
 80082e0:	4628      	mov	r0, r5
 80082e2:	47b8      	blx	r7
 80082e4:	3001      	adds	r0, #1
 80082e6:	d1c2      	bne.n	800826e <_printf_float+0x2f2>
 80082e8:	e6a3      	b.n	8008032 <_printf_float+0xb6>
 80082ea:	2301      	movs	r3, #1
 80082ec:	4631      	mov	r1, r6
 80082ee:	4628      	mov	r0, r5
 80082f0:	9206      	str	r2, [sp, #24]
 80082f2:	47b8      	blx	r7
 80082f4:	3001      	adds	r0, #1
 80082f6:	f43f ae9c 	beq.w	8008032 <_printf_float+0xb6>
 80082fa:	9a06      	ldr	r2, [sp, #24]
 80082fc:	f10b 0b01 	add.w	fp, fp, #1
 8008300:	e7bb      	b.n	800827a <_printf_float+0x2fe>
 8008302:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008306:	4631      	mov	r1, r6
 8008308:	4628      	mov	r0, r5
 800830a:	47b8      	blx	r7
 800830c:	3001      	adds	r0, #1
 800830e:	d1c0      	bne.n	8008292 <_printf_float+0x316>
 8008310:	e68f      	b.n	8008032 <_printf_float+0xb6>
 8008312:	9a06      	ldr	r2, [sp, #24]
 8008314:	464b      	mov	r3, r9
 8008316:	4442      	add	r2, r8
 8008318:	4631      	mov	r1, r6
 800831a:	4628      	mov	r0, r5
 800831c:	47b8      	blx	r7
 800831e:	3001      	adds	r0, #1
 8008320:	d1c3      	bne.n	80082aa <_printf_float+0x32e>
 8008322:	e686      	b.n	8008032 <_printf_float+0xb6>
 8008324:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008328:	f1ba 0f01 	cmp.w	sl, #1
 800832c:	dc01      	bgt.n	8008332 <_printf_float+0x3b6>
 800832e:	07db      	lsls	r3, r3, #31
 8008330:	d536      	bpl.n	80083a0 <_printf_float+0x424>
 8008332:	2301      	movs	r3, #1
 8008334:	4642      	mov	r2, r8
 8008336:	4631      	mov	r1, r6
 8008338:	4628      	mov	r0, r5
 800833a:	47b8      	blx	r7
 800833c:	3001      	adds	r0, #1
 800833e:	f43f ae78 	beq.w	8008032 <_printf_float+0xb6>
 8008342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008346:	4631      	mov	r1, r6
 8008348:	4628      	mov	r0, r5
 800834a:	47b8      	blx	r7
 800834c:	3001      	adds	r0, #1
 800834e:	f43f ae70 	beq.w	8008032 <_printf_float+0xb6>
 8008352:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008356:	2200      	movs	r2, #0
 8008358:	2300      	movs	r3, #0
 800835a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800835e:	f7f8 fbdb 	bl	8000b18 <__aeabi_dcmpeq>
 8008362:	b9c0      	cbnz	r0, 8008396 <_printf_float+0x41a>
 8008364:	4653      	mov	r3, sl
 8008366:	f108 0201 	add.w	r2, r8, #1
 800836a:	4631      	mov	r1, r6
 800836c:	4628      	mov	r0, r5
 800836e:	47b8      	blx	r7
 8008370:	3001      	adds	r0, #1
 8008372:	d10c      	bne.n	800838e <_printf_float+0x412>
 8008374:	e65d      	b.n	8008032 <_printf_float+0xb6>
 8008376:	2301      	movs	r3, #1
 8008378:	465a      	mov	r2, fp
 800837a:	4631      	mov	r1, r6
 800837c:	4628      	mov	r0, r5
 800837e:	47b8      	blx	r7
 8008380:	3001      	adds	r0, #1
 8008382:	f43f ae56 	beq.w	8008032 <_printf_float+0xb6>
 8008386:	f108 0801 	add.w	r8, r8, #1
 800838a:	45d0      	cmp	r8, sl
 800838c:	dbf3      	blt.n	8008376 <_printf_float+0x3fa>
 800838e:	464b      	mov	r3, r9
 8008390:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008394:	e6df      	b.n	8008156 <_printf_float+0x1da>
 8008396:	f04f 0800 	mov.w	r8, #0
 800839a:	f104 0b1a 	add.w	fp, r4, #26
 800839e:	e7f4      	b.n	800838a <_printf_float+0x40e>
 80083a0:	2301      	movs	r3, #1
 80083a2:	4642      	mov	r2, r8
 80083a4:	e7e1      	b.n	800836a <_printf_float+0x3ee>
 80083a6:	2301      	movs	r3, #1
 80083a8:	464a      	mov	r2, r9
 80083aa:	4631      	mov	r1, r6
 80083ac:	4628      	mov	r0, r5
 80083ae:	47b8      	blx	r7
 80083b0:	3001      	adds	r0, #1
 80083b2:	f43f ae3e 	beq.w	8008032 <_printf_float+0xb6>
 80083b6:	f108 0801 	add.w	r8, r8, #1
 80083ba:	68e3      	ldr	r3, [r4, #12]
 80083bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80083be:	1a5b      	subs	r3, r3, r1
 80083c0:	4543      	cmp	r3, r8
 80083c2:	dcf0      	bgt.n	80083a6 <_printf_float+0x42a>
 80083c4:	e6fc      	b.n	80081c0 <_printf_float+0x244>
 80083c6:	f04f 0800 	mov.w	r8, #0
 80083ca:	f104 0919 	add.w	r9, r4, #25
 80083ce:	e7f4      	b.n	80083ba <_printf_float+0x43e>

080083d0 <_printf_common>:
 80083d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083d4:	4616      	mov	r6, r2
 80083d6:	4698      	mov	r8, r3
 80083d8:	688a      	ldr	r2, [r1, #8]
 80083da:	690b      	ldr	r3, [r1, #16]
 80083dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80083e0:	4293      	cmp	r3, r2
 80083e2:	bfb8      	it	lt
 80083e4:	4613      	movlt	r3, r2
 80083e6:	6033      	str	r3, [r6, #0]
 80083e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80083ec:	4607      	mov	r7, r0
 80083ee:	460c      	mov	r4, r1
 80083f0:	b10a      	cbz	r2, 80083f6 <_printf_common+0x26>
 80083f2:	3301      	adds	r3, #1
 80083f4:	6033      	str	r3, [r6, #0]
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	0699      	lsls	r1, r3, #26
 80083fa:	bf42      	ittt	mi
 80083fc:	6833      	ldrmi	r3, [r6, #0]
 80083fe:	3302      	addmi	r3, #2
 8008400:	6033      	strmi	r3, [r6, #0]
 8008402:	6825      	ldr	r5, [r4, #0]
 8008404:	f015 0506 	ands.w	r5, r5, #6
 8008408:	d106      	bne.n	8008418 <_printf_common+0x48>
 800840a:	f104 0a19 	add.w	sl, r4, #25
 800840e:	68e3      	ldr	r3, [r4, #12]
 8008410:	6832      	ldr	r2, [r6, #0]
 8008412:	1a9b      	subs	r3, r3, r2
 8008414:	42ab      	cmp	r3, r5
 8008416:	dc26      	bgt.n	8008466 <_printf_common+0x96>
 8008418:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800841c:	6822      	ldr	r2, [r4, #0]
 800841e:	3b00      	subs	r3, #0
 8008420:	bf18      	it	ne
 8008422:	2301      	movne	r3, #1
 8008424:	0692      	lsls	r2, r2, #26
 8008426:	d42b      	bmi.n	8008480 <_printf_common+0xb0>
 8008428:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800842c:	4641      	mov	r1, r8
 800842e:	4638      	mov	r0, r7
 8008430:	47c8      	blx	r9
 8008432:	3001      	adds	r0, #1
 8008434:	d01e      	beq.n	8008474 <_printf_common+0xa4>
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	6922      	ldr	r2, [r4, #16]
 800843a:	f003 0306 	and.w	r3, r3, #6
 800843e:	2b04      	cmp	r3, #4
 8008440:	bf02      	ittt	eq
 8008442:	68e5      	ldreq	r5, [r4, #12]
 8008444:	6833      	ldreq	r3, [r6, #0]
 8008446:	1aed      	subeq	r5, r5, r3
 8008448:	68a3      	ldr	r3, [r4, #8]
 800844a:	bf0c      	ite	eq
 800844c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008450:	2500      	movne	r5, #0
 8008452:	4293      	cmp	r3, r2
 8008454:	bfc4      	itt	gt
 8008456:	1a9b      	subgt	r3, r3, r2
 8008458:	18ed      	addgt	r5, r5, r3
 800845a:	2600      	movs	r6, #0
 800845c:	341a      	adds	r4, #26
 800845e:	42b5      	cmp	r5, r6
 8008460:	d11a      	bne.n	8008498 <_printf_common+0xc8>
 8008462:	2000      	movs	r0, #0
 8008464:	e008      	b.n	8008478 <_printf_common+0xa8>
 8008466:	2301      	movs	r3, #1
 8008468:	4652      	mov	r2, sl
 800846a:	4641      	mov	r1, r8
 800846c:	4638      	mov	r0, r7
 800846e:	47c8      	blx	r9
 8008470:	3001      	adds	r0, #1
 8008472:	d103      	bne.n	800847c <_printf_common+0xac>
 8008474:	f04f 30ff 	mov.w	r0, #4294967295
 8008478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800847c:	3501      	adds	r5, #1
 800847e:	e7c6      	b.n	800840e <_printf_common+0x3e>
 8008480:	18e1      	adds	r1, r4, r3
 8008482:	1c5a      	adds	r2, r3, #1
 8008484:	2030      	movs	r0, #48	@ 0x30
 8008486:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800848a:	4422      	add	r2, r4
 800848c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008490:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008494:	3302      	adds	r3, #2
 8008496:	e7c7      	b.n	8008428 <_printf_common+0x58>
 8008498:	2301      	movs	r3, #1
 800849a:	4622      	mov	r2, r4
 800849c:	4641      	mov	r1, r8
 800849e:	4638      	mov	r0, r7
 80084a0:	47c8      	blx	r9
 80084a2:	3001      	adds	r0, #1
 80084a4:	d0e6      	beq.n	8008474 <_printf_common+0xa4>
 80084a6:	3601      	adds	r6, #1
 80084a8:	e7d9      	b.n	800845e <_printf_common+0x8e>
	...

080084ac <_printf_i>:
 80084ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084b0:	7e0f      	ldrb	r7, [r1, #24]
 80084b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80084b4:	2f78      	cmp	r7, #120	@ 0x78
 80084b6:	4691      	mov	r9, r2
 80084b8:	4680      	mov	r8, r0
 80084ba:	460c      	mov	r4, r1
 80084bc:	469a      	mov	sl, r3
 80084be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80084c2:	d807      	bhi.n	80084d4 <_printf_i+0x28>
 80084c4:	2f62      	cmp	r7, #98	@ 0x62
 80084c6:	d80a      	bhi.n	80084de <_printf_i+0x32>
 80084c8:	2f00      	cmp	r7, #0
 80084ca:	f000 80d2 	beq.w	8008672 <_printf_i+0x1c6>
 80084ce:	2f58      	cmp	r7, #88	@ 0x58
 80084d0:	f000 80b9 	beq.w	8008646 <_printf_i+0x19a>
 80084d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80084dc:	e03a      	b.n	8008554 <_printf_i+0xa8>
 80084de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80084e2:	2b15      	cmp	r3, #21
 80084e4:	d8f6      	bhi.n	80084d4 <_printf_i+0x28>
 80084e6:	a101      	add	r1, pc, #4	@ (adr r1, 80084ec <_printf_i+0x40>)
 80084e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084ec:	08008545 	.word	0x08008545
 80084f0:	08008559 	.word	0x08008559
 80084f4:	080084d5 	.word	0x080084d5
 80084f8:	080084d5 	.word	0x080084d5
 80084fc:	080084d5 	.word	0x080084d5
 8008500:	080084d5 	.word	0x080084d5
 8008504:	08008559 	.word	0x08008559
 8008508:	080084d5 	.word	0x080084d5
 800850c:	080084d5 	.word	0x080084d5
 8008510:	080084d5 	.word	0x080084d5
 8008514:	080084d5 	.word	0x080084d5
 8008518:	08008659 	.word	0x08008659
 800851c:	08008583 	.word	0x08008583
 8008520:	08008613 	.word	0x08008613
 8008524:	080084d5 	.word	0x080084d5
 8008528:	080084d5 	.word	0x080084d5
 800852c:	0800867b 	.word	0x0800867b
 8008530:	080084d5 	.word	0x080084d5
 8008534:	08008583 	.word	0x08008583
 8008538:	080084d5 	.word	0x080084d5
 800853c:	080084d5 	.word	0x080084d5
 8008540:	0800861b 	.word	0x0800861b
 8008544:	6833      	ldr	r3, [r6, #0]
 8008546:	1d1a      	adds	r2, r3, #4
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	6032      	str	r2, [r6, #0]
 800854c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008550:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008554:	2301      	movs	r3, #1
 8008556:	e09d      	b.n	8008694 <_printf_i+0x1e8>
 8008558:	6833      	ldr	r3, [r6, #0]
 800855a:	6820      	ldr	r0, [r4, #0]
 800855c:	1d19      	adds	r1, r3, #4
 800855e:	6031      	str	r1, [r6, #0]
 8008560:	0606      	lsls	r6, r0, #24
 8008562:	d501      	bpl.n	8008568 <_printf_i+0xbc>
 8008564:	681d      	ldr	r5, [r3, #0]
 8008566:	e003      	b.n	8008570 <_printf_i+0xc4>
 8008568:	0645      	lsls	r5, r0, #25
 800856a:	d5fb      	bpl.n	8008564 <_printf_i+0xb8>
 800856c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008570:	2d00      	cmp	r5, #0
 8008572:	da03      	bge.n	800857c <_printf_i+0xd0>
 8008574:	232d      	movs	r3, #45	@ 0x2d
 8008576:	426d      	negs	r5, r5
 8008578:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800857c:	4859      	ldr	r0, [pc, #356]	@ (80086e4 <_printf_i+0x238>)
 800857e:	230a      	movs	r3, #10
 8008580:	e011      	b.n	80085a6 <_printf_i+0xfa>
 8008582:	6821      	ldr	r1, [r4, #0]
 8008584:	6833      	ldr	r3, [r6, #0]
 8008586:	0608      	lsls	r0, r1, #24
 8008588:	f853 5b04 	ldr.w	r5, [r3], #4
 800858c:	d402      	bmi.n	8008594 <_printf_i+0xe8>
 800858e:	0649      	lsls	r1, r1, #25
 8008590:	bf48      	it	mi
 8008592:	b2ad      	uxthmi	r5, r5
 8008594:	2f6f      	cmp	r7, #111	@ 0x6f
 8008596:	4853      	ldr	r0, [pc, #332]	@ (80086e4 <_printf_i+0x238>)
 8008598:	6033      	str	r3, [r6, #0]
 800859a:	bf14      	ite	ne
 800859c:	230a      	movne	r3, #10
 800859e:	2308      	moveq	r3, #8
 80085a0:	2100      	movs	r1, #0
 80085a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80085a6:	6866      	ldr	r6, [r4, #4]
 80085a8:	60a6      	str	r6, [r4, #8]
 80085aa:	2e00      	cmp	r6, #0
 80085ac:	bfa2      	ittt	ge
 80085ae:	6821      	ldrge	r1, [r4, #0]
 80085b0:	f021 0104 	bicge.w	r1, r1, #4
 80085b4:	6021      	strge	r1, [r4, #0]
 80085b6:	b90d      	cbnz	r5, 80085bc <_printf_i+0x110>
 80085b8:	2e00      	cmp	r6, #0
 80085ba:	d04b      	beq.n	8008654 <_printf_i+0x1a8>
 80085bc:	4616      	mov	r6, r2
 80085be:	fbb5 f1f3 	udiv	r1, r5, r3
 80085c2:	fb03 5711 	mls	r7, r3, r1, r5
 80085c6:	5dc7      	ldrb	r7, [r0, r7]
 80085c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085cc:	462f      	mov	r7, r5
 80085ce:	42bb      	cmp	r3, r7
 80085d0:	460d      	mov	r5, r1
 80085d2:	d9f4      	bls.n	80085be <_printf_i+0x112>
 80085d4:	2b08      	cmp	r3, #8
 80085d6:	d10b      	bne.n	80085f0 <_printf_i+0x144>
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	07df      	lsls	r7, r3, #31
 80085dc:	d508      	bpl.n	80085f0 <_printf_i+0x144>
 80085de:	6923      	ldr	r3, [r4, #16]
 80085e0:	6861      	ldr	r1, [r4, #4]
 80085e2:	4299      	cmp	r1, r3
 80085e4:	bfde      	ittt	le
 80085e6:	2330      	movle	r3, #48	@ 0x30
 80085e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80085f0:	1b92      	subs	r2, r2, r6
 80085f2:	6122      	str	r2, [r4, #16]
 80085f4:	f8cd a000 	str.w	sl, [sp]
 80085f8:	464b      	mov	r3, r9
 80085fa:	aa03      	add	r2, sp, #12
 80085fc:	4621      	mov	r1, r4
 80085fe:	4640      	mov	r0, r8
 8008600:	f7ff fee6 	bl	80083d0 <_printf_common>
 8008604:	3001      	adds	r0, #1
 8008606:	d14a      	bne.n	800869e <_printf_i+0x1f2>
 8008608:	f04f 30ff 	mov.w	r0, #4294967295
 800860c:	b004      	add	sp, #16
 800860e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	f043 0320 	orr.w	r3, r3, #32
 8008618:	6023      	str	r3, [r4, #0]
 800861a:	4833      	ldr	r0, [pc, #204]	@ (80086e8 <_printf_i+0x23c>)
 800861c:	2778      	movs	r7, #120	@ 0x78
 800861e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	6831      	ldr	r1, [r6, #0]
 8008626:	061f      	lsls	r7, r3, #24
 8008628:	f851 5b04 	ldr.w	r5, [r1], #4
 800862c:	d402      	bmi.n	8008634 <_printf_i+0x188>
 800862e:	065f      	lsls	r7, r3, #25
 8008630:	bf48      	it	mi
 8008632:	b2ad      	uxthmi	r5, r5
 8008634:	6031      	str	r1, [r6, #0]
 8008636:	07d9      	lsls	r1, r3, #31
 8008638:	bf44      	itt	mi
 800863a:	f043 0320 	orrmi.w	r3, r3, #32
 800863e:	6023      	strmi	r3, [r4, #0]
 8008640:	b11d      	cbz	r5, 800864a <_printf_i+0x19e>
 8008642:	2310      	movs	r3, #16
 8008644:	e7ac      	b.n	80085a0 <_printf_i+0xf4>
 8008646:	4827      	ldr	r0, [pc, #156]	@ (80086e4 <_printf_i+0x238>)
 8008648:	e7e9      	b.n	800861e <_printf_i+0x172>
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	f023 0320 	bic.w	r3, r3, #32
 8008650:	6023      	str	r3, [r4, #0]
 8008652:	e7f6      	b.n	8008642 <_printf_i+0x196>
 8008654:	4616      	mov	r6, r2
 8008656:	e7bd      	b.n	80085d4 <_printf_i+0x128>
 8008658:	6833      	ldr	r3, [r6, #0]
 800865a:	6825      	ldr	r5, [r4, #0]
 800865c:	6961      	ldr	r1, [r4, #20]
 800865e:	1d18      	adds	r0, r3, #4
 8008660:	6030      	str	r0, [r6, #0]
 8008662:	062e      	lsls	r6, r5, #24
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	d501      	bpl.n	800866c <_printf_i+0x1c0>
 8008668:	6019      	str	r1, [r3, #0]
 800866a:	e002      	b.n	8008672 <_printf_i+0x1c6>
 800866c:	0668      	lsls	r0, r5, #25
 800866e:	d5fb      	bpl.n	8008668 <_printf_i+0x1bc>
 8008670:	8019      	strh	r1, [r3, #0]
 8008672:	2300      	movs	r3, #0
 8008674:	6123      	str	r3, [r4, #16]
 8008676:	4616      	mov	r6, r2
 8008678:	e7bc      	b.n	80085f4 <_printf_i+0x148>
 800867a:	6833      	ldr	r3, [r6, #0]
 800867c:	1d1a      	adds	r2, r3, #4
 800867e:	6032      	str	r2, [r6, #0]
 8008680:	681e      	ldr	r6, [r3, #0]
 8008682:	6862      	ldr	r2, [r4, #4]
 8008684:	2100      	movs	r1, #0
 8008686:	4630      	mov	r0, r6
 8008688:	f7f7 fdca 	bl	8000220 <memchr>
 800868c:	b108      	cbz	r0, 8008692 <_printf_i+0x1e6>
 800868e:	1b80      	subs	r0, r0, r6
 8008690:	6060      	str	r0, [r4, #4]
 8008692:	6863      	ldr	r3, [r4, #4]
 8008694:	6123      	str	r3, [r4, #16]
 8008696:	2300      	movs	r3, #0
 8008698:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800869c:	e7aa      	b.n	80085f4 <_printf_i+0x148>
 800869e:	6923      	ldr	r3, [r4, #16]
 80086a0:	4632      	mov	r2, r6
 80086a2:	4649      	mov	r1, r9
 80086a4:	4640      	mov	r0, r8
 80086a6:	47d0      	blx	sl
 80086a8:	3001      	adds	r0, #1
 80086aa:	d0ad      	beq.n	8008608 <_printf_i+0x15c>
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	079b      	lsls	r3, r3, #30
 80086b0:	d413      	bmi.n	80086da <_printf_i+0x22e>
 80086b2:	68e0      	ldr	r0, [r4, #12]
 80086b4:	9b03      	ldr	r3, [sp, #12]
 80086b6:	4298      	cmp	r0, r3
 80086b8:	bfb8      	it	lt
 80086ba:	4618      	movlt	r0, r3
 80086bc:	e7a6      	b.n	800860c <_printf_i+0x160>
 80086be:	2301      	movs	r3, #1
 80086c0:	4632      	mov	r2, r6
 80086c2:	4649      	mov	r1, r9
 80086c4:	4640      	mov	r0, r8
 80086c6:	47d0      	blx	sl
 80086c8:	3001      	adds	r0, #1
 80086ca:	d09d      	beq.n	8008608 <_printf_i+0x15c>
 80086cc:	3501      	adds	r5, #1
 80086ce:	68e3      	ldr	r3, [r4, #12]
 80086d0:	9903      	ldr	r1, [sp, #12]
 80086d2:	1a5b      	subs	r3, r3, r1
 80086d4:	42ab      	cmp	r3, r5
 80086d6:	dcf2      	bgt.n	80086be <_printf_i+0x212>
 80086d8:	e7eb      	b.n	80086b2 <_printf_i+0x206>
 80086da:	2500      	movs	r5, #0
 80086dc:	f104 0619 	add.w	r6, r4, #25
 80086e0:	e7f5      	b.n	80086ce <_printf_i+0x222>
 80086e2:	bf00      	nop
 80086e4:	0800ac7a 	.word	0x0800ac7a
 80086e8:	0800ac8b 	.word	0x0800ac8b

080086ec <std>:
 80086ec:	2300      	movs	r3, #0
 80086ee:	b510      	push	{r4, lr}
 80086f0:	4604      	mov	r4, r0
 80086f2:	e9c0 3300 	strd	r3, r3, [r0]
 80086f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086fa:	6083      	str	r3, [r0, #8]
 80086fc:	8181      	strh	r1, [r0, #12]
 80086fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8008700:	81c2      	strh	r2, [r0, #14]
 8008702:	6183      	str	r3, [r0, #24]
 8008704:	4619      	mov	r1, r3
 8008706:	2208      	movs	r2, #8
 8008708:	305c      	adds	r0, #92	@ 0x5c
 800870a:	f000 f914 	bl	8008936 <memset>
 800870e:	4b0d      	ldr	r3, [pc, #52]	@ (8008744 <std+0x58>)
 8008710:	6263      	str	r3, [r4, #36]	@ 0x24
 8008712:	4b0d      	ldr	r3, [pc, #52]	@ (8008748 <std+0x5c>)
 8008714:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008716:	4b0d      	ldr	r3, [pc, #52]	@ (800874c <std+0x60>)
 8008718:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800871a:	4b0d      	ldr	r3, [pc, #52]	@ (8008750 <std+0x64>)
 800871c:	6323      	str	r3, [r4, #48]	@ 0x30
 800871e:	4b0d      	ldr	r3, [pc, #52]	@ (8008754 <std+0x68>)
 8008720:	6224      	str	r4, [r4, #32]
 8008722:	429c      	cmp	r4, r3
 8008724:	d006      	beq.n	8008734 <std+0x48>
 8008726:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800872a:	4294      	cmp	r4, r2
 800872c:	d002      	beq.n	8008734 <std+0x48>
 800872e:	33d0      	adds	r3, #208	@ 0xd0
 8008730:	429c      	cmp	r4, r3
 8008732:	d105      	bne.n	8008740 <std+0x54>
 8008734:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800873c:	f000 b978 	b.w	8008a30 <__retarget_lock_init_recursive>
 8008740:	bd10      	pop	{r4, pc}
 8008742:	bf00      	nop
 8008744:	080088b1 	.word	0x080088b1
 8008748:	080088d3 	.word	0x080088d3
 800874c:	0800890b 	.word	0x0800890b
 8008750:	0800892f 	.word	0x0800892f
 8008754:	20000434 	.word	0x20000434

08008758 <stdio_exit_handler>:
 8008758:	4a02      	ldr	r2, [pc, #8]	@ (8008764 <stdio_exit_handler+0xc>)
 800875a:	4903      	ldr	r1, [pc, #12]	@ (8008768 <stdio_exit_handler+0x10>)
 800875c:	4803      	ldr	r0, [pc, #12]	@ (800876c <stdio_exit_handler+0x14>)
 800875e:	f000 b869 	b.w	8008834 <_fwalk_sglue>
 8008762:	bf00      	nop
 8008764:	20000010 	.word	0x20000010
 8008768:	0800a3ad 	.word	0x0800a3ad
 800876c:	20000020 	.word	0x20000020

08008770 <cleanup_stdio>:
 8008770:	6841      	ldr	r1, [r0, #4]
 8008772:	4b0c      	ldr	r3, [pc, #48]	@ (80087a4 <cleanup_stdio+0x34>)
 8008774:	4299      	cmp	r1, r3
 8008776:	b510      	push	{r4, lr}
 8008778:	4604      	mov	r4, r0
 800877a:	d001      	beq.n	8008780 <cleanup_stdio+0x10>
 800877c:	f001 fe16 	bl	800a3ac <_fflush_r>
 8008780:	68a1      	ldr	r1, [r4, #8]
 8008782:	4b09      	ldr	r3, [pc, #36]	@ (80087a8 <cleanup_stdio+0x38>)
 8008784:	4299      	cmp	r1, r3
 8008786:	d002      	beq.n	800878e <cleanup_stdio+0x1e>
 8008788:	4620      	mov	r0, r4
 800878a:	f001 fe0f 	bl	800a3ac <_fflush_r>
 800878e:	68e1      	ldr	r1, [r4, #12]
 8008790:	4b06      	ldr	r3, [pc, #24]	@ (80087ac <cleanup_stdio+0x3c>)
 8008792:	4299      	cmp	r1, r3
 8008794:	d004      	beq.n	80087a0 <cleanup_stdio+0x30>
 8008796:	4620      	mov	r0, r4
 8008798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800879c:	f001 be06 	b.w	800a3ac <_fflush_r>
 80087a0:	bd10      	pop	{r4, pc}
 80087a2:	bf00      	nop
 80087a4:	20000434 	.word	0x20000434
 80087a8:	2000049c 	.word	0x2000049c
 80087ac:	20000504 	.word	0x20000504

080087b0 <global_stdio_init.part.0>:
 80087b0:	b510      	push	{r4, lr}
 80087b2:	4b0b      	ldr	r3, [pc, #44]	@ (80087e0 <global_stdio_init.part.0+0x30>)
 80087b4:	4c0b      	ldr	r4, [pc, #44]	@ (80087e4 <global_stdio_init.part.0+0x34>)
 80087b6:	4a0c      	ldr	r2, [pc, #48]	@ (80087e8 <global_stdio_init.part.0+0x38>)
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	4620      	mov	r0, r4
 80087bc:	2200      	movs	r2, #0
 80087be:	2104      	movs	r1, #4
 80087c0:	f7ff ff94 	bl	80086ec <std>
 80087c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80087c8:	2201      	movs	r2, #1
 80087ca:	2109      	movs	r1, #9
 80087cc:	f7ff ff8e 	bl	80086ec <std>
 80087d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80087d4:	2202      	movs	r2, #2
 80087d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087da:	2112      	movs	r1, #18
 80087dc:	f7ff bf86 	b.w	80086ec <std>
 80087e0:	2000056c 	.word	0x2000056c
 80087e4:	20000434 	.word	0x20000434
 80087e8:	08008759 	.word	0x08008759

080087ec <__sfp_lock_acquire>:
 80087ec:	4801      	ldr	r0, [pc, #4]	@ (80087f4 <__sfp_lock_acquire+0x8>)
 80087ee:	f000 b920 	b.w	8008a32 <__retarget_lock_acquire_recursive>
 80087f2:	bf00      	nop
 80087f4:	20000575 	.word	0x20000575

080087f8 <__sfp_lock_release>:
 80087f8:	4801      	ldr	r0, [pc, #4]	@ (8008800 <__sfp_lock_release+0x8>)
 80087fa:	f000 b91b 	b.w	8008a34 <__retarget_lock_release_recursive>
 80087fe:	bf00      	nop
 8008800:	20000575 	.word	0x20000575

08008804 <__sinit>:
 8008804:	b510      	push	{r4, lr}
 8008806:	4604      	mov	r4, r0
 8008808:	f7ff fff0 	bl	80087ec <__sfp_lock_acquire>
 800880c:	6a23      	ldr	r3, [r4, #32]
 800880e:	b11b      	cbz	r3, 8008818 <__sinit+0x14>
 8008810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008814:	f7ff bff0 	b.w	80087f8 <__sfp_lock_release>
 8008818:	4b04      	ldr	r3, [pc, #16]	@ (800882c <__sinit+0x28>)
 800881a:	6223      	str	r3, [r4, #32]
 800881c:	4b04      	ldr	r3, [pc, #16]	@ (8008830 <__sinit+0x2c>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1f5      	bne.n	8008810 <__sinit+0xc>
 8008824:	f7ff ffc4 	bl	80087b0 <global_stdio_init.part.0>
 8008828:	e7f2      	b.n	8008810 <__sinit+0xc>
 800882a:	bf00      	nop
 800882c:	08008771 	.word	0x08008771
 8008830:	2000056c 	.word	0x2000056c

08008834 <_fwalk_sglue>:
 8008834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008838:	4607      	mov	r7, r0
 800883a:	4688      	mov	r8, r1
 800883c:	4614      	mov	r4, r2
 800883e:	2600      	movs	r6, #0
 8008840:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008844:	f1b9 0901 	subs.w	r9, r9, #1
 8008848:	d505      	bpl.n	8008856 <_fwalk_sglue+0x22>
 800884a:	6824      	ldr	r4, [r4, #0]
 800884c:	2c00      	cmp	r4, #0
 800884e:	d1f7      	bne.n	8008840 <_fwalk_sglue+0xc>
 8008850:	4630      	mov	r0, r6
 8008852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008856:	89ab      	ldrh	r3, [r5, #12]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d907      	bls.n	800886c <_fwalk_sglue+0x38>
 800885c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008860:	3301      	adds	r3, #1
 8008862:	d003      	beq.n	800886c <_fwalk_sglue+0x38>
 8008864:	4629      	mov	r1, r5
 8008866:	4638      	mov	r0, r7
 8008868:	47c0      	blx	r8
 800886a:	4306      	orrs	r6, r0
 800886c:	3568      	adds	r5, #104	@ 0x68
 800886e:	e7e9      	b.n	8008844 <_fwalk_sglue+0x10>

08008870 <siprintf>:
 8008870:	b40e      	push	{r1, r2, r3}
 8008872:	b500      	push	{lr}
 8008874:	b09c      	sub	sp, #112	@ 0x70
 8008876:	ab1d      	add	r3, sp, #116	@ 0x74
 8008878:	9002      	str	r0, [sp, #8]
 800887a:	9006      	str	r0, [sp, #24]
 800887c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008880:	4809      	ldr	r0, [pc, #36]	@ (80088a8 <siprintf+0x38>)
 8008882:	9107      	str	r1, [sp, #28]
 8008884:	9104      	str	r1, [sp, #16]
 8008886:	4909      	ldr	r1, [pc, #36]	@ (80088ac <siprintf+0x3c>)
 8008888:	f853 2b04 	ldr.w	r2, [r3], #4
 800888c:	9105      	str	r1, [sp, #20]
 800888e:	6800      	ldr	r0, [r0, #0]
 8008890:	9301      	str	r3, [sp, #4]
 8008892:	a902      	add	r1, sp, #8
 8008894:	f001 fc0a 	bl	800a0ac <_svfiprintf_r>
 8008898:	9b02      	ldr	r3, [sp, #8]
 800889a:	2200      	movs	r2, #0
 800889c:	701a      	strb	r2, [r3, #0]
 800889e:	b01c      	add	sp, #112	@ 0x70
 80088a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80088a4:	b003      	add	sp, #12
 80088a6:	4770      	bx	lr
 80088a8:	2000001c 	.word	0x2000001c
 80088ac:	ffff0208 	.word	0xffff0208

080088b0 <__sread>:
 80088b0:	b510      	push	{r4, lr}
 80088b2:	460c      	mov	r4, r1
 80088b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b8:	f000 f86c 	bl	8008994 <_read_r>
 80088bc:	2800      	cmp	r0, #0
 80088be:	bfab      	itete	ge
 80088c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80088c2:	89a3      	ldrhlt	r3, [r4, #12]
 80088c4:	181b      	addge	r3, r3, r0
 80088c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80088ca:	bfac      	ite	ge
 80088cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80088ce:	81a3      	strhlt	r3, [r4, #12]
 80088d0:	bd10      	pop	{r4, pc}

080088d2 <__swrite>:
 80088d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d6:	461f      	mov	r7, r3
 80088d8:	898b      	ldrh	r3, [r1, #12]
 80088da:	05db      	lsls	r3, r3, #23
 80088dc:	4605      	mov	r5, r0
 80088de:	460c      	mov	r4, r1
 80088e0:	4616      	mov	r6, r2
 80088e2:	d505      	bpl.n	80088f0 <__swrite+0x1e>
 80088e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e8:	2302      	movs	r3, #2
 80088ea:	2200      	movs	r2, #0
 80088ec:	f000 f840 	bl	8008970 <_lseek_r>
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088fa:	81a3      	strh	r3, [r4, #12]
 80088fc:	4632      	mov	r2, r6
 80088fe:	463b      	mov	r3, r7
 8008900:	4628      	mov	r0, r5
 8008902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008906:	f000 b857 	b.w	80089b8 <_write_r>

0800890a <__sseek>:
 800890a:	b510      	push	{r4, lr}
 800890c:	460c      	mov	r4, r1
 800890e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008912:	f000 f82d 	bl	8008970 <_lseek_r>
 8008916:	1c43      	adds	r3, r0, #1
 8008918:	89a3      	ldrh	r3, [r4, #12]
 800891a:	bf15      	itete	ne
 800891c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800891e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008922:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008926:	81a3      	strheq	r3, [r4, #12]
 8008928:	bf18      	it	ne
 800892a:	81a3      	strhne	r3, [r4, #12]
 800892c:	bd10      	pop	{r4, pc}

0800892e <__sclose>:
 800892e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008932:	f000 b80d 	b.w	8008950 <_close_r>

08008936 <memset>:
 8008936:	4402      	add	r2, r0
 8008938:	4603      	mov	r3, r0
 800893a:	4293      	cmp	r3, r2
 800893c:	d100      	bne.n	8008940 <memset+0xa>
 800893e:	4770      	bx	lr
 8008940:	f803 1b01 	strb.w	r1, [r3], #1
 8008944:	e7f9      	b.n	800893a <memset+0x4>
	...

08008948 <_localeconv_r>:
 8008948:	4800      	ldr	r0, [pc, #0]	@ (800894c <_localeconv_r+0x4>)
 800894a:	4770      	bx	lr
 800894c:	2000015c 	.word	0x2000015c

08008950 <_close_r>:
 8008950:	b538      	push	{r3, r4, r5, lr}
 8008952:	4d06      	ldr	r5, [pc, #24]	@ (800896c <_close_r+0x1c>)
 8008954:	2300      	movs	r3, #0
 8008956:	4604      	mov	r4, r0
 8008958:	4608      	mov	r0, r1
 800895a:	602b      	str	r3, [r5, #0]
 800895c:	f7f9 fe63 	bl	8002626 <_close>
 8008960:	1c43      	adds	r3, r0, #1
 8008962:	d102      	bne.n	800896a <_close_r+0x1a>
 8008964:	682b      	ldr	r3, [r5, #0]
 8008966:	b103      	cbz	r3, 800896a <_close_r+0x1a>
 8008968:	6023      	str	r3, [r4, #0]
 800896a:	bd38      	pop	{r3, r4, r5, pc}
 800896c:	20000570 	.word	0x20000570

08008970 <_lseek_r>:
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	4d07      	ldr	r5, [pc, #28]	@ (8008990 <_lseek_r+0x20>)
 8008974:	4604      	mov	r4, r0
 8008976:	4608      	mov	r0, r1
 8008978:	4611      	mov	r1, r2
 800897a:	2200      	movs	r2, #0
 800897c:	602a      	str	r2, [r5, #0]
 800897e:	461a      	mov	r2, r3
 8008980:	f7f9 fe78 	bl	8002674 <_lseek>
 8008984:	1c43      	adds	r3, r0, #1
 8008986:	d102      	bne.n	800898e <_lseek_r+0x1e>
 8008988:	682b      	ldr	r3, [r5, #0]
 800898a:	b103      	cbz	r3, 800898e <_lseek_r+0x1e>
 800898c:	6023      	str	r3, [r4, #0]
 800898e:	bd38      	pop	{r3, r4, r5, pc}
 8008990:	20000570 	.word	0x20000570

08008994 <_read_r>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	4d07      	ldr	r5, [pc, #28]	@ (80089b4 <_read_r+0x20>)
 8008998:	4604      	mov	r4, r0
 800899a:	4608      	mov	r0, r1
 800899c:	4611      	mov	r1, r2
 800899e:	2200      	movs	r2, #0
 80089a0:	602a      	str	r2, [r5, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	f7f9 fe06 	bl	80025b4 <_read>
 80089a8:	1c43      	adds	r3, r0, #1
 80089aa:	d102      	bne.n	80089b2 <_read_r+0x1e>
 80089ac:	682b      	ldr	r3, [r5, #0]
 80089ae:	b103      	cbz	r3, 80089b2 <_read_r+0x1e>
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	bd38      	pop	{r3, r4, r5, pc}
 80089b4:	20000570 	.word	0x20000570

080089b8 <_write_r>:
 80089b8:	b538      	push	{r3, r4, r5, lr}
 80089ba:	4d07      	ldr	r5, [pc, #28]	@ (80089d8 <_write_r+0x20>)
 80089bc:	4604      	mov	r4, r0
 80089be:	4608      	mov	r0, r1
 80089c0:	4611      	mov	r1, r2
 80089c2:	2200      	movs	r2, #0
 80089c4:	602a      	str	r2, [r5, #0]
 80089c6:	461a      	mov	r2, r3
 80089c8:	f7f9 fe11 	bl	80025ee <_write>
 80089cc:	1c43      	adds	r3, r0, #1
 80089ce:	d102      	bne.n	80089d6 <_write_r+0x1e>
 80089d0:	682b      	ldr	r3, [r5, #0]
 80089d2:	b103      	cbz	r3, 80089d6 <_write_r+0x1e>
 80089d4:	6023      	str	r3, [r4, #0]
 80089d6:	bd38      	pop	{r3, r4, r5, pc}
 80089d8:	20000570 	.word	0x20000570

080089dc <__errno>:
 80089dc:	4b01      	ldr	r3, [pc, #4]	@ (80089e4 <__errno+0x8>)
 80089de:	6818      	ldr	r0, [r3, #0]
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	2000001c 	.word	0x2000001c

080089e8 <__libc_init_array>:
 80089e8:	b570      	push	{r4, r5, r6, lr}
 80089ea:	4d0d      	ldr	r5, [pc, #52]	@ (8008a20 <__libc_init_array+0x38>)
 80089ec:	4c0d      	ldr	r4, [pc, #52]	@ (8008a24 <__libc_init_array+0x3c>)
 80089ee:	1b64      	subs	r4, r4, r5
 80089f0:	10a4      	asrs	r4, r4, #2
 80089f2:	2600      	movs	r6, #0
 80089f4:	42a6      	cmp	r6, r4
 80089f6:	d109      	bne.n	8008a0c <__libc_init_array+0x24>
 80089f8:	4d0b      	ldr	r5, [pc, #44]	@ (8008a28 <__libc_init_array+0x40>)
 80089fa:	4c0c      	ldr	r4, [pc, #48]	@ (8008a2c <__libc_init_array+0x44>)
 80089fc:	f002 f866 	bl	800aacc <_init>
 8008a00:	1b64      	subs	r4, r4, r5
 8008a02:	10a4      	asrs	r4, r4, #2
 8008a04:	2600      	movs	r6, #0
 8008a06:	42a6      	cmp	r6, r4
 8008a08:	d105      	bne.n	8008a16 <__libc_init_array+0x2e>
 8008a0a:	bd70      	pop	{r4, r5, r6, pc}
 8008a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a10:	4798      	blx	r3
 8008a12:	3601      	adds	r6, #1
 8008a14:	e7ee      	b.n	80089f4 <__libc_init_array+0xc>
 8008a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a1a:	4798      	blx	r3
 8008a1c:	3601      	adds	r6, #1
 8008a1e:	e7f2      	b.n	8008a06 <__libc_init_array+0x1e>
 8008a20:	0800afe0 	.word	0x0800afe0
 8008a24:	0800afe0 	.word	0x0800afe0
 8008a28:	0800afe0 	.word	0x0800afe0
 8008a2c:	0800afe4 	.word	0x0800afe4

08008a30 <__retarget_lock_init_recursive>:
 8008a30:	4770      	bx	lr

08008a32 <__retarget_lock_acquire_recursive>:
 8008a32:	4770      	bx	lr

08008a34 <__retarget_lock_release_recursive>:
 8008a34:	4770      	bx	lr

08008a36 <memcpy>:
 8008a36:	440a      	add	r2, r1
 8008a38:	4291      	cmp	r1, r2
 8008a3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a3e:	d100      	bne.n	8008a42 <memcpy+0xc>
 8008a40:	4770      	bx	lr
 8008a42:	b510      	push	{r4, lr}
 8008a44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a4c:	4291      	cmp	r1, r2
 8008a4e:	d1f9      	bne.n	8008a44 <memcpy+0xe>
 8008a50:	bd10      	pop	{r4, pc}

08008a52 <quorem>:
 8008a52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a56:	6903      	ldr	r3, [r0, #16]
 8008a58:	690c      	ldr	r4, [r1, #16]
 8008a5a:	42a3      	cmp	r3, r4
 8008a5c:	4607      	mov	r7, r0
 8008a5e:	db7e      	blt.n	8008b5e <quorem+0x10c>
 8008a60:	3c01      	subs	r4, #1
 8008a62:	f101 0814 	add.w	r8, r1, #20
 8008a66:	00a3      	lsls	r3, r4, #2
 8008a68:	f100 0514 	add.w	r5, r0, #20
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a72:	9301      	str	r3, [sp, #4]
 8008a74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a84:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a88:	d32e      	bcc.n	8008ae8 <quorem+0x96>
 8008a8a:	f04f 0a00 	mov.w	sl, #0
 8008a8e:	46c4      	mov	ip, r8
 8008a90:	46ae      	mov	lr, r5
 8008a92:	46d3      	mov	fp, sl
 8008a94:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008a98:	b298      	uxth	r0, r3
 8008a9a:	fb06 a000 	mla	r0, r6, r0, sl
 8008a9e:	0c02      	lsrs	r2, r0, #16
 8008aa0:	0c1b      	lsrs	r3, r3, #16
 8008aa2:	fb06 2303 	mla	r3, r6, r3, r2
 8008aa6:	f8de 2000 	ldr.w	r2, [lr]
 8008aaa:	b280      	uxth	r0, r0
 8008aac:	b292      	uxth	r2, r2
 8008aae:	1a12      	subs	r2, r2, r0
 8008ab0:	445a      	add	r2, fp
 8008ab2:	f8de 0000 	ldr.w	r0, [lr]
 8008ab6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008ac0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008ac4:	b292      	uxth	r2, r2
 8008ac6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008aca:	45e1      	cmp	r9, ip
 8008acc:	f84e 2b04 	str.w	r2, [lr], #4
 8008ad0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008ad4:	d2de      	bcs.n	8008a94 <quorem+0x42>
 8008ad6:	9b00      	ldr	r3, [sp, #0]
 8008ad8:	58eb      	ldr	r3, [r5, r3]
 8008ada:	b92b      	cbnz	r3, 8008ae8 <quorem+0x96>
 8008adc:	9b01      	ldr	r3, [sp, #4]
 8008ade:	3b04      	subs	r3, #4
 8008ae0:	429d      	cmp	r5, r3
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	d32f      	bcc.n	8008b46 <quorem+0xf4>
 8008ae6:	613c      	str	r4, [r7, #16]
 8008ae8:	4638      	mov	r0, r7
 8008aea:	f001 f97b 	bl	8009de4 <__mcmp>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	db25      	blt.n	8008b3e <quorem+0xec>
 8008af2:	4629      	mov	r1, r5
 8008af4:	2000      	movs	r0, #0
 8008af6:	f858 2b04 	ldr.w	r2, [r8], #4
 8008afa:	f8d1 c000 	ldr.w	ip, [r1]
 8008afe:	fa1f fe82 	uxth.w	lr, r2
 8008b02:	fa1f f38c 	uxth.w	r3, ip
 8008b06:	eba3 030e 	sub.w	r3, r3, lr
 8008b0a:	4403      	add	r3, r0
 8008b0c:	0c12      	lsrs	r2, r2, #16
 8008b0e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008b12:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b1c:	45c1      	cmp	r9, r8
 8008b1e:	f841 3b04 	str.w	r3, [r1], #4
 8008b22:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008b26:	d2e6      	bcs.n	8008af6 <quorem+0xa4>
 8008b28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b30:	b922      	cbnz	r2, 8008b3c <quorem+0xea>
 8008b32:	3b04      	subs	r3, #4
 8008b34:	429d      	cmp	r5, r3
 8008b36:	461a      	mov	r2, r3
 8008b38:	d30b      	bcc.n	8008b52 <quorem+0x100>
 8008b3a:	613c      	str	r4, [r7, #16]
 8008b3c:	3601      	adds	r6, #1
 8008b3e:	4630      	mov	r0, r6
 8008b40:	b003      	add	sp, #12
 8008b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b46:	6812      	ldr	r2, [r2, #0]
 8008b48:	3b04      	subs	r3, #4
 8008b4a:	2a00      	cmp	r2, #0
 8008b4c:	d1cb      	bne.n	8008ae6 <quorem+0x94>
 8008b4e:	3c01      	subs	r4, #1
 8008b50:	e7c6      	b.n	8008ae0 <quorem+0x8e>
 8008b52:	6812      	ldr	r2, [r2, #0]
 8008b54:	3b04      	subs	r3, #4
 8008b56:	2a00      	cmp	r2, #0
 8008b58:	d1ef      	bne.n	8008b3a <quorem+0xe8>
 8008b5a:	3c01      	subs	r4, #1
 8008b5c:	e7ea      	b.n	8008b34 <quorem+0xe2>
 8008b5e:	2000      	movs	r0, #0
 8008b60:	e7ee      	b.n	8008b40 <quorem+0xee>
 8008b62:	0000      	movs	r0, r0
 8008b64:	0000      	movs	r0, r0
	...

08008b68 <_dtoa_r>:
 8008b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6c:	69c7      	ldr	r7, [r0, #28]
 8008b6e:	b099      	sub	sp, #100	@ 0x64
 8008b70:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008b74:	ec55 4b10 	vmov	r4, r5, d0
 8008b78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008b7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8008b7c:	4683      	mov	fp, r0
 8008b7e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b82:	b97f      	cbnz	r7, 8008ba4 <_dtoa_r+0x3c>
 8008b84:	2010      	movs	r0, #16
 8008b86:	f000 fdfd 	bl	8009784 <malloc>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008b90:	b920      	cbnz	r0, 8008b9c <_dtoa_r+0x34>
 8008b92:	4ba7      	ldr	r3, [pc, #668]	@ (8008e30 <_dtoa_r+0x2c8>)
 8008b94:	21ef      	movs	r1, #239	@ 0xef
 8008b96:	48a7      	ldr	r0, [pc, #668]	@ (8008e34 <_dtoa_r+0x2cc>)
 8008b98:	f001 fc5a 	bl	800a450 <__assert_func>
 8008b9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008ba0:	6007      	str	r7, [r0, #0]
 8008ba2:	60c7      	str	r7, [r0, #12]
 8008ba4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ba8:	6819      	ldr	r1, [r3, #0]
 8008baa:	b159      	cbz	r1, 8008bc4 <_dtoa_r+0x5c>
 8008bac:	685a      	ldr	r2, [r3, #4]
 8008bae:	604a      	str	r2, [r1, #4]
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	4093      	lsls	r3, r2
 8008bb4:	608b      	str	r3, [r1, #8]
 8008bb6:	4658      	mov	r0, fp
 8008bb8:	f000 feda 	bl	8009970 <_Bfree>
 8008bbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	601a      	str	r2, [r3, #0]
 8008bc4:	1e2b      	subs	r3, r5, #0
 8008bc6:	bfb9      	ittee	lt
 8008bc8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008bcc:	9303      	strlt	r3, [sp, #12]
 8008bce:	2300      	movge	r3, #0
 8008bd0:	6033      	strge	r3, [r6, #0]
 8008bd2:	9f03      	ldr	r7, [sp, #12]
 8008bd4:	4b98      	ldr	r3, [pc, #608]	@ (8008e38 <_dtoa_r+0x2d0>)
 8008bd6:	bfbc      	itt	lt
 8008bd8:	2201      	movlt	r2, #1
 8008bda:	6032      	strlt	r2, [r6, #0]
 8008bdc:	43bb      	bics	r3, r7
 8008bde:	d112      	bne.n	8008c06 <_dtoa_r+0x9e>
 8008be0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008be2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008be6:	6013      	str	r3, [r2, #0]
 8008be8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008bec:	4323      	orrs	r3, r4
 8008bee:	f000 854d 	beq.w	800968c <_dtoa_r+0xb24>
 8008bf2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008bf4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008e4c <_dtoa_r+0x2e4>
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 854f 	beq.w	800969c <_dtoa_r+0xb34>
 8008bfe:	f10a 0303 	add.w	r3, sl, #3
 8008c02:	f000 bd49 	b.w	8009698 <_dtoa_r+0xb30>
 8008c06:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	ec51 0b17 	vmov	r0, r1, d7
 8008c10:	2300      	movs	r3, #0
 8008c12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008c16:	f7f7 ff7f 	bl	8000b18 <__aeabi_dcmpeq>
 8008c1a:	4680      	mov	r8, r0
 8008c1c:	b158      	cbz	r0, 8008c36 <_dtoa_r+0xce>
 8008c1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008c20:	2301      	movs	r3, #1
 8008c22:	6013      	str	r3, [r2, #0]
 8008c24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008c26:	b113      	cbz	r3, 8008c2e <_dtoa_r+0xc6>
 8008c28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008c2a:	4b84      	ldr	r3, [pc, #528]	@ (8008e3c <_dtoa_r+0x2d4>)
 8008c2c:	6013      	str	r3, [r2, #0]
 8008c2e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008e50 <_dtoa_r+0x2e8>
 8008c32:	f000 bd33 	b.w	800969c <_dtoa_r+0xb34>
 8008c36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008c3a:	aa16      	add	r2, sp, #88	@ 0x58
 8008c3c:	a917      	add	r1, sp, #92	@ 0x5c
 8008c3e:	4658      	mov	r0, fp
 8008c40:	f001 f980 	bl	8009f44 <__d2b>
 8008c44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008c48:	4681      	mov	r9, r0
 8008c4a:	2e00      	cmp	r6, #0
 8008c4c:	d077      	beq.n	8008d3e <_dtoa_r+0x1d6>
 8008c4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c50:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008c54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008c60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008c64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008c68:	4619      	mov	r1, r3
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	4b74      	ldr	r3, [pc, #464]	@ (8008e40 <_dtoa_r+0x2d8>)
 8008c6e:	f7f7 fb33 	bl	80002d8 <__aeabi_dsub>
 8008c72:	a369      	add	r3, pc, #420	@ (adr r3, 8008e18 <_dtoa_r+0x2b0>)
 8008c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c78:	f7f7 fce6 	bl	8000648 <__aeabi_dmul>
 8008c7c:	a368      	add	r3, pc, #416	@ (adr r3, 8008e20 <_dtoa_r+0x2b8>)
 8008c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c82:	f7f7 fb2b 	bl	80002dc <__adddf3>
 8008c86:	4604      	mov	r4, r0
 8008c88:	4630      	mov	r0, r6
 8008c8a:	460d      	mov	r5, r1
 8008c8c:	f7f7 fc72 	bl	8000574 <__aeabi_i2d>
 8008c90:	a365      	add	r3, pc, #404	@ (adr r3, 8008e28 <_dtoa_r+0x2c0>)
 8008c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c96:	f7f7 fcd7 	bl	8000648 <__aeabi_dmul>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	f7f7 fb1b 	bl	80002dc <__adddf3>
 8008ca6:	4604      	mov	r4, r0
 8008ca8:	460d      	mov	r5, r1
 8008caa:	f7f7 ff7d 	bl	8000ba8 <__aeabi_d2iz>
 8008cae:	2200      	movs	r2, #0
 8008cb0:	4607      	mov	r7, r0
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	4629      	mov	r1, r5
 8008cb8:	f7f7 ff38 	bl	8000b2c <__aeabi_dcmplt>
 8008cbc:	b140      	cbz	r0, 8008cd0 <_dtoa_r+0x168>
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	f7f7 fc58 	bl	8000574 <__aeabi_i2d>
 8008cc4:	4622      	mov	r2, r4
 8008cc6:	462b      	mov	r3, r5
 8008cc8:	f7f7 ff26 	bl	8000b18 <__aeabi_dcmpeq>
 8008ccc:	b900      	cbnz	r0, 8008cd0 <_dtoa_r+0x168>
 8008cce:	3f01      	subs	r7, #1
 8008cd0:	2f16      	cmp	r7, #22
 8008cd2:	d851      	bhi.n	8008d78 <_dtoa_r+0x210>
 8008cd4:	4b5b      	ldr	r3, [pc, #364]	@ (8008e44 <_dtoa_r+0x2dc>)
 8008cd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ce2:	f7f7 ff23 	bl	8000b2c <__aeabi_dcmplt>
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	d048      	beq.n	8008d7c <_dtoa_r+0x214>
 8008cea:	3f01      	subs	r7, #1
 8008cec:	2300      	movs	r3, #0
 8008cee:	9312      	str	r3, [sp, #72]	@ 0x48
 8008cf0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008cf2:	1b9b      	subs	r3, r3, r6
 8008cf4:	1e5a      	subs	r2, r3, #1
 8008cf6:	bf44      	itt	mi
 8008cf8:	f1c3 0801 	rsbmi	r8, r3, #1
 8008cfc:	2300      	movmi	r3, #0
 8008cfe:	9208      	str	r2, [sp, #32]
 8008d00:	bf54      	ite	pl
 8008d02:	f04f 0800 	movpl.w	r8, #0
 8008d06:	9308      	strmi	r3, [sp, #32]
 8008d08:	2f00      	cmp	r7, #0
 8008d0a:	db39      	blt.n	8008d80 <_dtoa_r+0x218>
 8008d0c:	9b08      	ldr	r3, [sp, #32]
 8008d0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008d10:	443b      	add	r3, r7
 8008d12:	9308      	str	r3, [sp, #32]
 8008d14:	2300      	movs	r3, #0
 8008d16:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d1a:	2b09      	cmp	r3, #9
 8008d1c:	d864      	bhi.n	8008de8 <_dtoa_r+0x280>
 8008d1e:	2b05      	cmp	r3, #5
 8008d20:	bfc4      	itt	gt
 8008d22:	3b04      	subgt	r3, #4
 8008d24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d28:	f1a3 0302 	sub.w	r3, r3, #2
 8008d2c:	bfcc      	ite	gt
 8008d2e:	2400      	movgt	r4, #0
 8008d30:	2401      	movle	r4, #1
 8008d32:	2b03      	cmp	r3, #3
 8008d34:	d863      	bhi.n	8008dfe <_dtoa_r+0x296>
 8008d36:	e8df f003 	tbb	[pc, r3]
 8008d3a:	372a      	.short	0x372a
 8008d3c:	5535      	.short	0x5535
 8008d3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008d42:	441e      	add	r6, r3
 8008d44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008d48:	2b20      	cmp	r3, #32
 8008d4a:	bfc1      	itttt	gt
 8008d4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008d50:	409f      	lslgt	r7, r3
 8008d52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008d56:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008d5a:	bfd6      	itet	le
 8008d5c:	f1c3 0320 	rsble	r3, r3, #32
 8008d60:	ea47 0003 	orrgt.w	r0, r7, r3
 8008d64:	fa04 f003 	lslle.w	r0, r4, r3
 8008d68:	f7f7 fbf4 	bl	8000554 <__aeabi_ui2d>
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008d72:	3e01      	subs	r6, #1
 8008d74:	9214      	str	r2, [sp, #80]	@ 0x50
 8008d76:	e777      	b.n	8008c68 <_dtoa_r+0x100>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e7b8      	b.n	8008cee <_dtoa_r+0x186>
 8008d7c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008d7e:	e7b7      	b.n	8008cf0 <_dtoa_r+0x188>
 8008d80:	427b      	negs	r3, r7
 8008d82:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d84:	2300      	movs	r3, #0
 8008d86:	eba8 0807 	sub.w	r8, r8, r7
 8008d8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d8c:	e7c4      	b.n	8008d18 <_dtoa_r+0x1b0>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	dc35      	bgt.n	8008e04 <_dtoa_r+0x29c>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	9307      	str	r3, [sp, #28]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008da2:	e00b      	b.n	8008dbc <_dtoa_r+0x254>
 8008da4:	2301      	movs	r3, #1
 8008da6:	e7f3      	b.n	8008d90 <_dtoa_r+0x228>
 8008da8:	2300      	movs	r3, #0
 8008daa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dae:	18fb      	adds	r3, r7, r3
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	3301      	adds	r3, #1
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	9307      	str	r3, [sp, #28]
 8008db8:	bfb8      	it	lt
 8008dba:	2301      	movlt	r3, #1
 8008dbc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	2204      	movs	r2, #4
 8008dc4:	f102 0514 	add.w	r5, r2, #20
 8008dc8:	429d      	cmp	r5, r3
 8008dca:	d91f      	bls.n	8008e0c <_dtoa_r+0x2a4>
 8008dcc:	6041      	str	r1, [r0, #4]
 8008dce:	4658      	mov	r0, fp
 8008dd0:	f000 fd8e 	bl	80098f0 <_Balloc>
 8008dd4:	4682      	mov	sl, r0
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d13c      	bne.n	8008e54 <_dtoa_r+0x2ec>
 8008dda:	4b1b      	ldr	r3, [pc, #108]	@ (8008e48 <_dtoa_r+0x2e0>)
 8008ddc:	4602      	mov	r2, r0
 8008dde:	f240 11af 	movw	r1, #431	@ 0x1af
 8008de2:	e6d8      	b.n	8008b96 <_dtoa_r+0x2e>
 8008de4:	2301      	movs	r3, #1
 8008de6:	e7e0      	b.n	8008daa <_dtoa_r+0x242>
 8008de8:	2401      	movs	r4, #1
 8008dea:	2300      	movs	r3, #0
 8008dec:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dee:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008df0:	f04f 33ff 	mov.w	r3, #4294967295
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	9307      	str	r3, [sp, #28]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	2312      	movs	r3, #18
 8008dfc:	e7d0      	b.n	8008da0 <_dtoa_r+0x238>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e02:	e7f5      	b.n	8008df0 <_dtoa_r+0x288>
 8008e04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	9307      	str	r3, [sp, #28]
 8008e0a:	e7d7      	b.n	8008dbc <_dtoa_r+0x254>
 8008e0c:	3101      	adds	r1, #1
 8008e0e:	0052      	lsls	r2, r2, #1
 8008e10:	e7d8      	b.n	8008dc4 <_dtoa_r+0x25c>
 8008e12:	bf00      	nop
 8008e14:	f3af 8000 	nop.w
 8008e18:	636f4361 	.word	0x636f4361
 8008e1c:	3fd287a7 	.word	0x3fd287a7
 8008e20:	8b60c8b3 	.word	0x8b60c8b3
 8008e24:	3fc68a28 	.word	0x3fc68a28
 8008e28:	509f79fb 	.word	0x509f79fb
 8008e2c:	3fd34413 	.word	0x3fd34413
 8008e30:	0800aca9 	.word	0x0800aca9
 8008e34:	0800acc0 	.word	0x0800acc0
 8008e38:	7ff00000 	.word	0x7ff00000
 8008e3c:	0800ac79 	.word	0x0800ac79
 8008e40:	3ff80000 	.word	0x3ff80000
 8008e44:	0800adb8 	.word	0x0800adb8
 8008e48:	0800ad18 	.word	0x0800ad18
 8008e4c:	0800aca5 	.word	0x0800aca5
 8008e50:	0800ac78 	.word	0x0800ac78
 8008e54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008e58:	6018      	str	r0, [r3, #0]
 8008e5a:	9b07      	ldr	r3, [sp, #28]
 8008e5c:	2b0e      	cmp	r3, #14
 8008e5e:	f200 80a4 	bhi.w	8008faa <_dtoa_r+0x442>
 8008e62:	2c00      	cmp	r4, #0
 8008e64:	f000 80a1 	beq.w	8008faa <_dtoa_r+0x442>
 8008e68:	2f00      	cmp	r7, #0
 8008e6a:	dd33      	ble.n	8008ed4 <_dtoa_r+0x36c>
 8008e6c:	4bad      	ldr	r3, [pc, #692]	@ (8009124 <_dtoa_r+0x5bc>)
 8008e6e:	f007 020f 	and.w	r2, r7, #15
 8008e72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e76:	ed93 7b00 	vldr	d7, [r3]
 8008e7a:	05f8      	lsls	r0, r7, #23
 8008e7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008e80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008e84:	d516      	bpl.n	8008eb4 <_dtoa_r+0x34c>
 8008e86:	4ba8      	ldr	r3, [pc, #672]	@ (8009128 <_dtoa_r+0x5c0>)
 8008e88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e90:	f7f7 fd04 	bl	800089c <__aeabi_ddiv>
 8008e94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e98:	f004 040f 	and.w	r4, r4, #15
 8008e9c:	2603      	movs	r6, #3
 8008e9e:	4da2      	ldr	r5, [pc, #648]	@ (8009128 <_dtoa_r+0x5c0>)
 8008ea0:	b954      	cbnz	r4, 8008eb8 <_dtoa_r+0x350>
 8008ea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eaa:	f7f7 fcf7 	bl	800089c <__aeabi_ddiv>
 8008eae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008eb2:	e028      	b.n	8008f06 <_dtoa_r+0x39e>
 8008eb4:	2602      	movs	r6, #2
 8008eb6:	e7f2      	b.n	8008e9e <_dtoa_r+0x336>
 8008eb8:	07e1      	lsls	r1, r4, #31
 8008eba:	d508      	bpl.n	8008ece <_dtoa_r+0x366>
 8008ebc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ec0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ec4:	f7f7 fbc0 	bl	8000648 <__aeabi_dmul>
 8008ec8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ecc:	3601      	adds	r6, #1
 8008ece:	1064      	asrs	r4, r4, #1
 8008ed0:	3508      	adds	r5, #8
 8008ed2:	e7e5      	b.n	8008ea0 <_dtoa_r+0x338>
 8008ed4:	f000 80d2 	beq.w	800907c <_dtoa_r+0x514>
 8008ed8:	427c      	negs	r4, r7
 8008eda:	4b92      	ldr	r3, [pc, #584]	@ (8009124 <_dtoa_r+0x5bc>)
 8008edc:	4d92      	ldr	r5, [pc, #584]	@ (8009128 <_dtoa_r+0x5c0>)
 8008ede:	f004 020f 	and.w	r2, r4, #15
 8008ee2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008eee:	f7f7 fbab 	bl	8000648 <__aeabi_dmul>
 8008ef2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ef6:	1124      	asrs	r4, r4, #4
 8008ef8:	2300      	movs	r3, #0
 8008efa:	2602      	movs	r6, #2
 8008efc:	2c00      	cmp	r4, #0
 8008efe:	f040 80b2 	bne.w	8009066 <_dtoa_r+0x4fe>
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1d3      	bne.n	8008eae <_dtoa_r+0x346>
 8008f06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008f08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f000 80b7 	beq.w	8009080 <_dtoa_r+0x518>
 8008f12:	4b86      	ldr	r3, [pc, #536]	@ (800912c <_dtoa_r+0x5c4>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	4620      	mov	r0, r4
 8008f18:	4629      	mov	r1, r5
 8008f1a:	f7f7 fe07 	bl	8000b2c <__aeabi_dcmplt>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	f000 80ae 	beq.w	8009080 <_dtoa_r+0x518>
 8008f24:	9b07      	ldr	r3, [sp, #28]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f000 80aa 	beq.w	8009080 <_dtoa_r+0x518>
 8008f2c:	9b00      	ldr	r3, [sp, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	dd37      	ble.n	8008fa2 <_dtoa_r+0x43a>
 8008f32:	1e7b      	subs	r3, r7, #1
 8008f34:	9304      	str	r3, [sp, #16]
 8008f36:	4620      	mov	r0, r4
 8008f38:	4b7d      	ldr	r3, [pc, #500]	@ (8009130 <_dtoa_r+0x5c8>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	f7f7 fb83 	bl	8000648 <__aeabi_dmul>
 8008f42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f46:	9c00      	ldr	r4, [sp, #0]
 8008f48:	3601      	adds	r6, #1
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	f7f7 fb12 	bl	8000574 <__aeabi_i2d>
 8008f50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f54:	f7f7 fb78 	bl	8000648 <__aeabi_dmul>
 8008f58:	4b76      	ldr	r3, [pc, #472]	@ (8009134 <_dtoa_r+0x5cc>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f7f7 f9be 	bl	80002dc <__adddf3>
 8008f60:	4605      	mov	r5, r0
 8008f62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008f66:	2c00      	cmp	r4, #0
 8008f68:	f040 808d 	bne.w	8009086 <_dtoa_r+0x51e>
 8008f6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f70:	4b71      	ldr	r3, [pc, #452]	@ (8009138 <_dtoa_r+0x5d0>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	f7f7 f9b0 	bl	80002d8 <__aeabi_dsub>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f80:	462a      	mov	r2, r5
 8008f82:	4633      	mov	r3, r6
 8008f84:	f7f7 fdf0 	bl	8000b68 <__aeabi_dcmpgt>
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	f040 828b 	bne.w	80094a4 <_dtoa_r+0x93c>
 8008f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f92:	462a      	mov	r2, r5
 8008f94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008f98:	f7f7 fdc8 	bl	8000b2c <__aeabi_dcmplt>
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	f040 8128 	bne.w	80091f2 <_dtoa_r+0x68a>
 8008fa2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008fa6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008faa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f2c0 815a 	blt.w	8009266 <_dtoa_r+0x6fe>
 8008fb2:	2f0e      	cmp	r7, #14
 8008fb4:	f300 8157 	bgt.w	8009266 <_dtoa_r+0x6fe>
 8008fb8:	4b5a      	ldr	r3, [pc, #360]	@ (8009124 <_dtoa_r+0x5bc>)
 8008fba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008fbe:	ed93 7b00 	vldr	d7, [r3]
 8008fc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	ed8d 7b00 	vstr	d7, [sp]
 8008fca:	da03      	bge.n	8008fd4 <_dtoa_r+0x46c>
 8008fcc:	9b07      	ldr	r3, [sp, #28]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f340 8101 	ble.w	80091d6 <_dtoa_r+0x66e>
 8008fd4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008fd8:	4656      	mov	r6, sl
 8008fda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fde:	4620      	mov	r0, r4
 8008fe0:	4629      	mov	r1, r5
 8008fe2:	f7f7 fc5b 	bl	800089c <__aeabi_ddiv>
 8008fe6:	f7f7 fddf 	bl	8000ba8 <__aeabi_d2iz>
 8008fea:	4680      	mov	r8, r0
 8008fec:	f7f7 fac2 	bl	8000574 <__aeabi_i2d>
 8008ff0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ff4:	f7f7 fb28 	bl	8000648 <__aeabi_dmul>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	4629      	mov	r1, r5
 8009000:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009004:	f7f7 f968 	bl	80002d8 <__aeabi_dsub>
 8009008:	f806 4b01 	strb.w	r4, [r6], #1
 800900c:	9d07      	ldr	r5, [sp, #28]
 800900e:	eba6 040a 	sub.w	r4, r6, sl
 8009012:	42a5      	cmp	r5, r4
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	f040 8117 	bne.w	800924a <_dtoa_r+0x6e2>
 800901c:	f7f7 f95e 	bl	80002dc <__adddf3>
 8009020:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009024:	4604      	mov	r4, r0
 8009026:	460d      	mov	r5, r1
 8009028:	f7f7 fd9e 	bl	8000b68 <__aeabi_dcmpgt>
 800902c:	2800      	cmp	r0, #0
 800902e:	f040 80f9 	bne.w	8009224 <_dtoa_r+0x6bc>
 8009032:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009036:	4620      	mov	r0, r4
 8009038:	4629      	mov	r1, r5
 800903a:	f7f7 fd6d 	bl	8000b18 <__aeabi_dcmpeq>
 800903e:	b118      	cbz	r0, 8009048 <_dtoa_r+0x4e0>
 8009040:	f018 0f01 	tst.w	r8, #1
 8009044:	f040 80ee 	bne.w	8009224 <_dtoa_r+0x6bc>
 8009048:	4649      	mov	r1, r9
 800904a:	4658      	mov	r0, fp
 800904c:	f000 fc90 	bl	8009970 <_Bfree>
 8009050:	2300      	movs	r3, #0
 8009052:	7033      	strb	r3, [r6, #0]
 8009054:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009056:	3701      	adds	r7, #1
 8009058:	601f      	str	r7, [r3, #0]
 800905a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800905c:	2b00      	cmp	r3, #0
 800905e:	f000 831d 	beq.w	800969c <_dtoa_r+0xb34>
 8009062:	601e      	str	r6, [r3, #0]
 8009064:	e31a      	b.n	800969c <_dtoa_r+0xb34>
 8009066:	07e2      	lsls	r2, r4, #31
 8009068:	d505      	bpl.n	8009076 <_dtoa_r+0x50e>
 800906a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800906e:	f7f7 faeb 	bl	8000648 <__aeabi_dmul>
 8009072:	3601      	adds	r6, #1
 8009074:	2301      	movs	r3, #1
 8009076:	1064      	asrs	r4, r4, #1
 8009078:	3508      	adds	r5, #8
 800907a:	e73f      	b.n	8008efc <_dtoa_r+0x394>
 800907c:	2602      	movs	r6, #2
 800907e:	e742      	b.n	8008f06 <_dtoa_r+0x39e>
 8009080:	9c07      	ldr	r4, [sp, #28]
 8009082:	9704      	str	r7, [sp, #16]
 8009084:	e761      	b.n	8008f4a <_dtoa_r+0x3e2>
 8009086:	4b27      	ldr	r3, [pc, #156]	@ (8009124 <_dtoa_r+0x5bc>)
 8009088:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800908a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800908e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009092:	4454      	add	r4, sl
 8009094:	2900      	cmp	r1, #0
 8009096:	d053      	beq.n	8009140 <_dtoa_r+0x5d8>
 8009098:	4928      	ldr	r1, [pc, #160]	@ (800913c <_dtoa_r+0x5d4>)
 800909a:	2000      	movs	r0, #0
 800909c:	f7f7 fbfe 	bl	800089c <__aeabi_ddiv>
 80090a0:	4633      	mov	r3, r6
 80090a2:	462a      	mov	r2, r5
 80090a4:	f7f7 f918 	bl	80002d8 <__aeabi_dsub>
 80090a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80090ac:	4656      	mov	r6, sl
 80090ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090b2:	f7f7 fd79 	bl	8000ba8 <__aeabi_d2iz>
 80090b6:	4605      	mov	r5, r0
 80090b8:	f7f7 fa5c 	bl	8000574 <__aeabi_i2d>
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090c4:	f7f7 f908 	bl	80002d8 <__aeabi_dsub>
 80090c8:	3530      	adds	r5, #48	@ 0x30
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80090d2:	f806 5b01 	strb.w	r5, [r6], #1
 80090d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80090da:	f7f7 fd27 	bl	8000b2c <__aeabi_dcmplt>
 80090de:	2800      	cmp	r0, #0
 80090e0:	d171      	bne.n	80091c6 <_dtoa_r+0x65e>
 80090e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090e6:	4911      	ldr	r1, [pc, #68]	@ (800912c <_dtoa_r+0x5c4>)
 80090e8:	2000      	movs	r0, #0
 80090ea:	f7f7 f8f5 	bl	80002d8 <__aeabi_dsub>
 80090ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80090f2:	f7f7 fd1b 	bl	8000b2c <__aeabi_dcmplt>
 80090f6:	2800      	cmp	r0, #0
 80090f8:	f040 8095 	bne.w	8009226 <_dtoa_r+0x6be>
 80090fc:	42a6      	cmp	r6, r4
 80090fe:	f43f af50 	beq.w	8008fa2 <_dtoa_r+0x43a>
 8009102:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009106:	4b0a      	ldr	r3, [pc, #40]	@ (8009130 <_dtoa_r+0x5c8>)
 8009108:	2200      	movs	r2, #0
 800910a:	f7f7 fa9d 	bl	8000648 <__aeabi_dmul>
 800910e:	4b08      	ldr	r3, [pc, #32]	@ (8009130 <_dtoa_r+0x5c8>)
 8009110:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009114:	2200      	movs	r2, #0
 8009116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800911a:	f7f7 fa95 	bl	8000648 <__aeabi_dmul>
 800911e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009122:	e7c4      	b.n	80090ae <_dtoa_r+0x546>
 8009124:	0800adb8 	.word	0x0800adb8
 8009128:	0800ad90 	.word	0x0800ad90
 800912c:	3ff00000 	.word	0x3ff00000
 8009130:	40240000 	.word	0x40240000
 8009134:	401c0000 	.word	0x401c0000
 8009138:	40140000 	.word	0x40140000
 800913c:	3fe00000 	.word	0x3fe00000
 8009140:	4631      	mov	r1, r6
 8009142:	4628      	mov	r0, r5
 8009144:	f7f7 fa80 	bl	8000648 <__aeabi_dmul>
 8009148:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800914c:	9415      	str	r4, [sp, #84]	@ 0x54
 800914e:	4656      	mov	r6, sl
 8009150:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009154:	f7f7 fd28 	bl	8000ba8 <__aeabi_d2iz>
 8009158:	4605      	mov	r5, r0
 800915a:	f7f7 fa0b 	bl	8000574 <__aeabi_i2d>
 800915e:	4602      	mov	r2, r0
 8009160:	460b      	mov	r3, r1
 8009162:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009166:	f7f7 f8b7 	bl	80002d8 <__aeabi_dsub>
 800916a:	3530      	adds	r5, #48	@ 0x30
 800916c:	f806 5b01 	strb.w	r5, [r6], #1
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	42a6      	cmp	r6, r4
 8009176:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800917a:	f04f 0200 	mov.w	r2, #0
 800917e:	d124      	bne.n	80091ca <_dtoa_r+0x662>
 8009180:	4bac      	ldr	r3, [pc, #688]	@ (8009434 <_dtoa_r+0x8cc>)
 8009182:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009186:	f7f7 f8a9 	bl	80002dc <__adddf3>
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009192:	f7f7 fce9 	bl	8000b68 <__aeabi_dcmpgt>
 8009196:	2800      	cmp	r0, #0
 8009198:	d145      	bne.n	8009226 <_dtoa_r+0x6be>
 800919a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800919e:	49a5      	ldr	r1, [pc, #660]	@ (8009434 <_dtoa_r+0x8cc>)
 80091a0:	2000      	movs	r0, #0
 80091a2:	f7f7 f899 	bl	80002d8 <__aeabi_dsub>
 80091a6:	4602      	mov	r2, r0
 80091a8:	460b      	mov	r3, r1
 80091aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091ae:	f7f7 fcbd 	bl	8000b2c <__aeabi_dcmplt>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	f43f aef5 	beq.w	8008fa2 <_dtoa_r+0x43a>
 80091b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80091ba:	1e73      	subs	r3, r6, #1
 80091bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80091be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80091c2:	2b30      	cmp	r3, #48	@ 0x30
 80091c4:	d0f8      	beq.n	80091b8 <_dtoa_r+0x650>
 80091c6:	9f04      	ldr	r7, [sp, #16]
 80091c8:	e73e      	b.n	8009048 <_dtoa_r+0x4e0>
 80091ca:	4b9b      	ldr	r3, [pc, #620]	@ (8009438 <_dtoa_r+0x8d0>)
 80091cc:	f7f7 fa3c 	bl	8000648 <__aeabi_dmul>
 80091d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091d4:	e7bc      	b.n	8009150 <_dtoa_r+0x5e8>
 80091d6:	d10c      	bne.n	80091f2 <_dtoa_r+0x68a>
 80091d8:	4b98      	ldr	r3, [pc, #608]	@ (800943c <_dtoa_r+0x8d4>)
 80091da:	2200      	movs	r2, #0
 80091dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091e0:	f7f7 fa32 	bl	8000648 <__aeabi_dmul>
 80091e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091e8:	f7f7 fcb4 	bl	8000b54 <__aeabi_dcmpge>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	f000 8157 	beq.w	80094a0 <_dtoa_r+0x938>
 80091f2:	2400      	movs	r4, #0
 80091f4:	4625      	mov	r5, r4
 80091f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091f8:	43db      	mvns	r3, r3
 80091fa:	9304      	str	r3, [sp, #16]
 80091fc:	4656      	mov	r6, sl
 80091fe:	2700      	movs	r7, #0
 8009200:	4621      	mov	r1, r4
 8009202:	4658      	mov	r0, fp
 8009204:	f000 fbb4 	bl	8009970 <_Bfree>
 8009208:	2d00      	cmp	r5, #0
 800920a:	d0dc      	beq.n	80091c6 <_dtoa_r+0x65e>
 800920c:	b12f      	cbz	r7, 800921a <_dtoa_r+0x6b2>
 800920e:	42af      	cmp	r7, r5
 8009210:	d003      	beq.n	800921a <_dtoa_r+0x6b2>
 8009212:	4639      	mov	r1, r7
 8009214:	4658      	mov	r0, fp
 8009216:	f000 fbab 	bl	8009970 <_Bfree>
 800921a:	4629      	mov	r1, r5
 800921c:	4658      	mov	r0, fp
 800921e:	f000 fba7 	bl	8009970 <_Bfree>
 8009222:	e7d0      	b.n	80091c6 <_dtoa_r+0x65e>
 8009224:	9704      	str	r7, [sp, #16]
 8009226:	4633      	mov	r3, r6
 8009228:	461e      	mov	r6, r3
 800922a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800922e:	2a39      	cmp	r2, #57	@ 0x39
 8009230:	d107      	bne.n	8009242 <_dtoa_r+0x6da>
 8009232:	459a      	cmp	sl, r3
 8009234:	d1f8      	bne.n	8009228 <_dtoa_r+0x6c0>
 8009236:	9a04      	ldr	r2, [sp, #16]
 8009238:	3201      	adds	r2, #1
 800923a:	9204      	str	r2, [sp, #16]
 800923c:	2230      	movs	r2, #48	@ 0x30
 800923e:	f88a 2000 	strb.w	r2, [sl]
 8009242:	781a      	ldrb	r2, [r3, #0]
 8009244:	3201      	adds	r2, #1
 8009246:	701a      	strb	r2, [r3, #0]
 8009248:	e7bd      	b.n	80091c6 <_dtoa_r+0x65e>
 800924a:	4b7b      	ldr	r3, [pc, #492]	@ (8009438 <_dtoa_r+0x8d0>)
 800924c:	2200      	movs	r2, #0
 800924e:	f7f7 f9fb 	bl	8000648 <__aeabi_dmul>
 8009252:	2200      	movs	r2, #0
 8009254:	2300      	movs	r3, #0
 8009256:	4604      	mov	r4, r0
 8009258:	460d      	mov	r5, r1
 800925a:	f7f7 fc5d 	bl	8000b18 <__aeabi_dcmpeq>
 800925e:	2800      	cmp	r0, #0
 8009260:	f43f aebb 	beq.w	8008fda <_dtoa_r+0x472>
 8009264:	e6f0      	b.n	8009048 <_dtoa_r+0x4e0>
 8009266:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009268:	2a00      	cmp	r2, #0
 800926a:	f000 80db 	beq.w	8009424 <_dtoa_r+0x8bc>
 800926e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009270:	2a01      	cmp	r2, #1
 8009272:	f300 80bf 	bgt.w	80093f4 <_dtoa_r+0x88c>
 8009276:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009278:	2a00      	cmp	r2, #0
 800927a:	f000 80b7 	beq.w	80093ec <_dtoa_r+0x884>
 800927e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009282:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009284:	4646      	mov	r6, r8
 8009286:	9a08      	ldr	r2, [sp, #32]
 8009288:	2101      	movs	r1, #1
 800928a:	441a      	add	r2, r3
 800928c:	4658      	mov	r0, fp
 800928e:	4498      	add	r8, r3
 8009290:	9208      	str	r2, [sp, #32]
 8009292:	f000 fc21 	bl	8009ad8 <__i2b>
 8009296:	4605      	mov	r5, r0
 8009298:	b15e      	cbz	r6, 80092b2 <_dtoa_r+0x74a>
 800929a:	9b08      	ldr	r3, [sp, #32]
 800929c:	2b00      	cmp	r3, #0
 800929e:	dd08      	ble.n	80092b2 <_dtoa_r+0x74a>
 80092a0:	42b3      	cmp	r3, r6
 80092a2:	9a08      	ldr	r2, [sp, #32]
 80092a4:	bfa8      	it	ge
 80092a6:	4633      	movge	r3, r6
 80092a8:	eba8 0803 	sub.w	r8, r8, r3
 80092ac:	1af6      	subs	r6, r6, r3
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	9308      	str	r3, [sp, #32]
 80092b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092b4:	b1f3      	cbz	r3, 80092f4 <_dtoa_r+0x78c>
 80092b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f000 80b7 	beq.w	800942c <_dtoa_r+0x8c4>
 80092be:	b18c      	cbz	r4, 80092e4 <_dtoa_r+0x77c>
 80092c0:	4629      	mov	r1, r5
 80092c2:	4622      	mov	r2, r4
 80092c4:	4658      	mov	r0, fp
 80092c6:	f000 fcc7 	bl	8009c58 <__pow5mult>
 80092ca:	464a      	mov	r2, r9
 80092cc:	4601      	mov	r1, r0
 80092ce:	4605      	mov	r5, r0
 80092d0:	4658      	mov	r0, fp
 80092d2:	f000 fc17 	bl	8009b04 <__multiply>
 80092d6:	4649      	mov	r1, r9
 80092d8:	9004      	str	r0, [sp, #16]
 80092da:	4658      	mov	r0, fp
 80092dc:	f000 fb48 	bl	8009970 <_Bfree>
 80092e0:	9b04      	ldr	r3, [sp, #16]
 80092e2:	4699      	mov	r9, r3
 80092e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092e6:	1b1a      	subs	r2, r3, r4
 80092e8:	d004      	beq.n	80092f4 <_dtoa_r+0x78c>
 80092ea:	4649      	mov	r1, r9
 80092ec:	4658      	mov	r0, fp
 80092ee:	f000 fcb3 	bl	8009c58 <__pow5mult>
 80092f2:	4681      	mov	r9, r0
 80092f4:	2101      	movs	r1, #1
 80092f6:	4658      	mov	r0, fp
 80092f8:	f000 fbee 	bl	8009ad8 <__i2b>
 80092fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092fe:	4604      	mov	r4, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	f000 81cf 	beq.w	80096a4 <_dtoa_r+0xb3c>
 8009306:	461a      	mov	r2, r3
 8009308:	4601      	mov	r1, r0
 800930a:	4658      	mov	r0, fp
 800930c:	f000 fca4 	bl	8009c58 <__pow5mult>
 8009310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009312:	2b01      	cmp	r3, #1
 8009314:	4604      	mov	r4, r0
 8009316:	f300 8095 	bgt.w	8009444 <_dtoa_r+0x8dc>
 800931a:	9b02      	ldr	r3, [sp, #8]
 800931c:	2b00      	cmp	r3, #0
 800931e:	f040 8087 	bne.w	8009430 <_dtoa_r+0x8c8>
 8009322:	9b03      	ldr	r3, [sp, #12]
 8009324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009328:	2b00      	cmp	r3, #0
 800932a:	f040 8089 	bne.w	8009440 <_dtoa_r+0x8d8>
 800932e:	9b03      	ldr	r3, [sp, #12]
 8009330:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009334:	0d1b      	lsrs	r3, r3, #20
 8009336:	051b      	lsls	r3, r3, #20
 8009338:	b12b      	cbz	r3, 8009346 <_dtoa_r+0x7de>
 800933a:	9b08      	ldr	r3, [sp, #32]
 800933c:	3301      	adds	r3, #1
 800933e:	9308      	str	r3, [sp, #32]
 8009340:	f108 0801 	add.w	r8, r8, #1
 8009344:	2301      	movs	r3, #1
 8009346:	930a      	str	r3, [sp, #40]	@ 0x28
 8009348:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800934a:	2b00      	cmp	r3, #0
 800934c:	f000 81b0 	beq.w	80096b0 <_dtoa_r+0xb48>
 8009350:	6923      	ldr	r3, [r4, #16]
 8009352:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009356:	6918      	ldr	r0, [r3, #16]
 8009358:	f000 fb72 	bl	8009a40 <__hi0bits>
 800935c:	f1c0 0020 	rsb	r0, r0, #32
 8009360:	9b08      	ldr	r3, [sp, #32]
 8009362:	4418      	add	r0, r3
 8009364:	f010 001f 	ands.w	r0, r0, #31
 8009368:	d077      	beq.n	800945a <_dtoa_r+0x8f2>
 800936a:	f1c0 0320 	rsb	r3, r0, #32
 800936e:	2b04      	cmp	r3, #4
 8009370:	dd6b      	ble.n	800944a <_dtoa_r+0x8e2>
 8009372:	9b08      	ldr	r3, [sp, #32]
 8009374:	f1c0 001c 	rsb	r0, r0, #28
 8009378:	4403      	add	r3, r0
 800937a:	4480      	add	r8, r0
 800937c:	4406      	add	r6, r0
 800937e:	9308      	str	r3, [sp, #32]
 8009380:	f1b8 0f00 	cmp.w	r8, #0
 8009384:	dd05      	ble.n	8009392 <_dtoa_r+0x82a>
 8009386:	4649      	mov	r1, r9
 8009388:	4642      	mov	r2, r8
 800938a:	4658      	mov	r0, fp
 800938c:	f000 fcbe 	bl	8009d0c <__lshift>
 8009390:	4681      	mov	r9, r0
 8009392:	9b08      	ldr	r3, [sp, #32]
 8009394:	2b00      	cmp	r3, #0
 8009396:	dd05      	ble.n	80093a4 <_dtoa_r+0x83c>
 8009398:	4621      	mov	r1, r4
 800939a:	461a      	mov	r2, r3
 800939c:	4658      	mov	r0, fp
 800939e:	f000 fcb5 	bl	8009d0c <__lshift>
 80093a2:	4604      	mov	r4, r0
 80093a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d059      	beq.n	800945e <_dtoa_r+0x8f6>
 80093aa:	4621      	mov	r1, r4
 80093ac:	4648      	mov	r0, r9
 80093ae:	f000 fd19 	bl	8009de4 <__mcmp>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	da53      	bge.n	800945e <_dtoa_r+0x8f6>
 80093b6:	1e7b      	subs	r3, r7, #1
 80093b8:	9304      	str	r3, [sp, #16]
 80093ba:	4649      	mov	r1, r9
 80093bc:	2300      	movs	r3, #0
 80093be:	220a      	movs	r2, #10
 80093c0:	4658      	mov	r0, fp
 80093c2:	f000 faf7 	bl	80099b4 <__multadd>
 80093c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093c8:	4681      	mov	r9, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f000 8172 	beq.w	80096b4 <_dtoa_r+0xb4c>
 80093d0:	2300      	movs	r3, #0
 80093d2:	4629      	mov	r1, r5
 80093d4:	220a      	movs	r2, #10
 80093d6:	4658      	mov	r0, fp
 80093d8:	f000 faec 	bl	80099b4 <__multadd>
 80093dc:	9b00      	ldr	r3, [sp, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	4605      	mov	r5, r0
 80093e2:	dc67      	bgt.n	80094b4 <_dtoa_r+0x94c>
 80093e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	dc41      	bgt.n	800946e <_dtoa_r+0x906>
 80093ea:	e063      	b.n	80094b4 <_dtoa_r+0x94c>
 80093ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80093ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80093f2:	e746      	b.n	8009282 <_dtoa_r+0x71a>
 80093f4:	9b07      	ldr	r3, [sp, #28]
 80093f6:	1e5c      	subs	r4, r3, #1
 80093f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093fa:	42a3      	cmp	r3, r4
 80093fc:	bfbf      	itttt	lt
 80093fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009400:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009402:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009404:	1ae3      	sublt	r3, r4, r3
 8009406:	bfb4      	ite	lt
 8009408:	18d2      	addlt	r2, r2, r3
 800940a:	1b1c      	subge	r4, r3, r4
 800940c:	9b07      	ldr	r3, [sp, #28]
 800940e:	bfbc      	itt	lt
 8009410:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009412:	2400      	movlt	r4, #0
 8009414:	2b00      	cmp	r3, #0
 8009416:	bfb5      	itete	lt
 8009418:	eba8 0603 	sublt.w	r6, r8, r3
 800941c:	9b07      	ldrge	r3, [sp, #28]
 800941e:	2300      	movlt	r3, #0
 8009420:	4646      	movge	r6, r8
 8009422:	e730      	b.n	8009286 <_dtoa_r+0x71e>
 8009424:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009426:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009428:	4646      	mov	r6, r8
 800942a:	e735      	b.n	8009298 <_dtoa_r+0x730>
 800942c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800942e:	e75c      	b.n	80092ea <_dtoa_r+0x782>
 8009430:	2300      	movs	r3, #0
 8009432:	e788      	b.n	8009346 <_dtoa_r+0x7de>
 8009434:	3fe00000 	.word	0x3fe00000
 8009438:	40240000 	.word	0x40240000
 800943c:	40140000 	.word	0x40140000
 8009440:	9b02      	ldr	r3, [sp, #8]
 8009442:	e780      	b.n	8009346 <_dtoa_r+0x7de>
 8009444:	2300      	movs	r3, #0
 8009446:	930a      	str	r3, [sp, #40]	@ 0x28
 8009448:	e782      	b.n	8009350 <_dtoa_r+0x7e8>
 800944a:	d099      	beq.n	8009380 <_dtoa_r+0x818>
 800944c:	9a08      	ldr	r2, [sp, #32]
 800944e:	331c      	adds	r3, #28
 8009450:	441a      	add	r2, r3
 8009452:	4498      	add	r8, r3
 8009454:	441e      	add	r6, r3
 8009456:	9208      	str	r2, [sp, #32]
 8009458:	e792      	b.n	8009380 <_dtoa_r+0x818>
 800945a:	4603      	mov	r3, r0
 800945c:	e7f6      	b.n	800944c <_dtoa_r+0x8e4>
 800945e:	9b07      	ldr	r3, [sp, #28]
 8009460:	9704      	str	r7, [sp, #16]
 8009462:	2b00      	cmp	r3, #0
 8009464:	dc20      	bgt.n	80094a8 <_dtoa_r+0x940>
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800946a:	2b02      	cmp	r3, #2
 800946c:	dd1e      	ble.n	80094ac <_dtoa_r+0x944>
 800946e:	9b00      	ldr	r3, [sp, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	f47f aec0 	bne.w	80091f6 <_dtoa_r+0x68e>
 8009476:	4621      	mov	r1, r4
 8009478:	2205      	movs	r2, #5
 800947a:	4658      	mov	r0, fp
 800947c:	f000 fa9a 	bl	80099b4 <__multadd>
 8009480:	4601      	mov	r1, r0
 8009482:	4604      	mov	r4, r0
 8009484:	4648      	mov	r0, r9
 8009486:	f000 fcad 	bl	8009de4 <__mcmp>
 800948a:	2800      	cmp	r0, #0
 800948c:	f77f aeb3 	ble.w	80091f6 <_dtoa_r+0x68e>
 8009490:	4656      	mov	r6, sl
 8009492:	2331      	movs	r3, #49	@ 0x31
 8009494:	f806 3b01 	strb.w	r3, [r6], #1
 8009498:	9b04      	ldr	r3, [sp, #16]
 800949a:	3301      	adds	r3, #1
 800949c:	9304      	str	r3, [sp, #16]
 800949e:	e6ae      	b.n	80091fe <_dtoa_r+0x696>
 80094a0:	9c07      	ldr	r4, [sp, #28]
 80094a2:	9704      	str	r7, [sp, #16]
 80094a4:	4625      	mov	r5, r4
 80094a6:	e7f3      	b.n	8009490 <_dtoa_r+0x928>
 80094a8:	9b07      	ldr	r3, [sp, #28]
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f000 8104 	beq.w	80096bc <_dtoa_r+0xb54>
 80094b4:	2e00      	cmp	r6, #0
 80094b6:	dd05      	ble.n	80094c4 <_dtoa_r+0x95c>
 80094b8:	4629      	mov	r1, r5
 80094ba:	4632      	mov	r2, r6
 80094bc:	4658      	mov	r0, fp
 80094be:	f000 fc25 	bl	8009d0c <__lshift>
 80094c2:	4605      	mov	r5, r0
 80094c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d05a      	beq.n	8009580 <_dtoa_r+0xa18>
 80094ca:	6869      	ldr	r1, [r5, #4]
 80094cc:	4658      	mov	r0, fp
 80094ce:	f000 fa0f 	bl	80098f0 <_Balloc>
 80094d2:	4606      	mov	r6, r0
 80094d4:	b928      	cbnz	r0, 80094e2 <_dtoa_r+0x97a>
 80094d6:	4b84      	ldr	r3, [pc, #528]	@ (80096e8 <_dtoa_r+0xb80>)
 80094d8:	4602      	mov	r2, r0
 80094da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80094de:	f7ff bb5a 	b.w	8008b96 <_dtoa_r+0x2e>
 80094e2:	692a      	ldr	r2, [r5, #16]
 80094e4:	3202      	adds	r2, #2
 80094e6:	0092      	lsls	r2, r2, #2
 80094e8:	f105 010c 	add.w	r1, r5, #12
 80094ec:	300c      	adds	r0, #12
 80094ee:	f7ff faa2 	bl	8008a36 <memcpy>
 80094f2:	2201      	movs	r2, #1
 80094f4:	4631      	mov	r1, r6
 80094f6:	4658      	mov	r0, fp
 80094f8:	f000 fc08 	bl	8009d0c <__lshift>
 80094fc:	f10a 0301 	add.w	r3, sl, #1
 8009500:	9307      	str	r3, [sp, #28]
 8009502:	9b00      	ldr	r3, [sp, #0]
 8009504:	4453      	add	r3, sl
 8009506:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009508:	9b02      	ldr	r3, [sp, #8]
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	462f      	mov	r7, r5
 8009510:	930a      	str	r3, [sp, #40]	@ 0x28
 8009512:	4605      	mov	r5, r0
 8009514:	9b07      	ldr	r3, [sp, #28]
 8009516:	4621      	mov	r1, r4
 8009518:	3b01      	subs	r3, #1
 800951a:	4648      	mov	r0, r9
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	f7ff fa98 	bl	8008a52 <quorem>
 8009522:	4639      	mov	r1, r7
 8009524:	9002      	str	r0, [sp, #8]
 8009526:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800952a:	4648      	mov	r0, r9
 800952c:	f000 fc5a 	bl	8009de4 <__mcmp>
 8009530:	462a      	mov	r2, r5
 8009532:	9008      	str	r0, [sp, #32]
 8009534:	4621      	mov	r1, r4
 8009536:	4658      	mov	r0, fp
 8009538:	f000 fc70 	bl	8009e1c <__mdiff>
 800953c:	68c2      	ldr	r2, [r0, #12]
 800953e:	4606      	mov	r6, r0
 8009540:	bb02      	cbnz	r2, 8009584 <_dtoa_r+0xa1c>
 8009542:	4601      	mov	r1, r0
 8009544:	4648      	mov	r0, r9
 8009546:	f000 fc4d 	bl	8009de4 <__mcmp>
 800954a:	4602      	mov	r2, r0
 800954c:	4631      	mov	r1, r6
 800954e:	4658      	mov	r0, fp
 8009550:	920e      	str	r2, [sp, #56]	@ 0x38
 8009552:	f000 fa0d 	bl	8009970 <_Bfree>
 8009556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009558:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800955a:	9e07      	ldr	r6, [sp, #28]
 800955c:	ea43 0102 	orr.w	r1, r3, r2
 8009560:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009562:	4319      	orrs	r1, r3
 8009564:	d110      	bne.n	8009588 <_dtoa_r+0xa20>
 8009566:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800956a:	d029      	beq.n	80095c0 <_dtoa_r+0xa58>
 800956c:	9b08      	ldr	r3, [sp, #32]
 800956e:	2b00      	cmp	r3, #0
 8009570:	dd02      	ble.n	8009578 <_dtoa_r+0xa10>
 8009572:	9b02      	ldr	r3, [sp, #8]
 8009574:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009578:	9b00      	ldr	r3, [sp, #0]
 800957a:	f883 8000 	strb.w	r8, [r3]
 800957e:	e63f      	b.n	8009200 <_dtoa_r+0x698>
 8009580:	4628      	mov	r0, r5
 8009582:	e7bb      	b.n	80094fc <_dtoa_r+0x994>
 8009584:	2201      	movs	r2, #1
 8009586:	e7e1      	b.n	800954c <_dtoa_r+0x9e4>
 8009588:	9b08      	ldr	r3, [sp, #32]
 800958a:	2b00      	cmp	r3, #0
 800958c:	db04      	blt.n	8009598 <_dtoa_r+0xa30>
 800958e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009590:	430b      	orrs	r3, r1
 8009592:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009594:	430b      	orrs	r3, r1
 8009596:	d120      	bne.n	80095da <_dtoa_r+0xa72>
 8009598:	2a00      	cmp	r2, #0
 800959a:	dded      	ble.n	8009578 <_dtoa_r+0xa10>
 800959c:	4649      	mov	r1, r9
 800959e:	2201      	movs	r2, #1
 80095a0:	4658      	mov	r0, fp
 80095a2:	f000 fbb3 	bl	8009d0c <__lshift>
 80095a6:	4621      	mov	r1, r4
 80095a8:	4681      	mov	r9, r0
 80095aa:	f000 fc1b 	bl	8009de4 <__mcmp>
 80095ae:	2800      	cmp	r0, #0
 80095b0:	dc03      	bgt.n	80095ba <_dtoa_r+0xa52>
 80095b2:	d1e1      	bne.n	8009578 <_dtoa_r+0xa10>
 80095b4:	f018 0f01 	tst.w	r8, #1
 80095b8:	d0de      	beq.n	8009578 <_dtoa_r+0xa10>
 80095ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80095be:	d1d8      	bne.n	8009572 <_dtoa_r+0xa0a>
 80095c0:	9a00      	ldr	r2, [sp, #0]
 80095c2:	2339      	movs	r3, #57	@ 0x39
 80095c4:	7013      	strb	r3, [r2, #0]
 80095c6:	4633      	mov	r3, r6
 80095c8:	461e      	mov	r6, r3
 80095ca:	3b01      	subs	r3, #1
 80095cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80095d0:	2a39      	cmp	r2, #57	@ 0x39
 80095d2:	d052      	beq.n	800967a <_dtoa_r+0xb12>
 80095d4:	3201      	adds	r2, #1
 80095d6:	701a      	strb	r2, [r3, #0]
 80095d8:	e612      	b.n	8009200 <_dtoa_r+0x698>
 80095da:	2a00      	cmp	r2, #0
 80095dc:	dd07      	ble.n	80095ee <_dtoa_r+0xa86>
 80095de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80095e2:	d0ed      	beq.n	80095c0 <_dtoa_r+0xa58>
 80095e4:	9a00      	ldr	r2, [sp, #0]
 80095e6:	f108 0301 	add.w	r3, r8, #1
 80095ea:	7013      	strb	r3, [r2, #0]
 80095ec:	e608      	b.n	8009200 <_dtoa_r+0x698>
 80095ee:	9b07      	ldr	r3, [sp, #28]
 80095f0:	9a07      	ldr	r2, [sp, #28]
 80095f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80095f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d028      	beq.n	800964e <_dtoa_r+0xae6>
 80095fc:	4649      	mov	r1, r9
 80095fe:	2300      	movs	r3, #0
 8009600:	220a      	movs	r2, #10
 8009602:	4658      	mov	r0, fp
 8009604:	f000 f9d6 	bl	80099b4 <__multadd>
 8009608:	42af      	cmp	r7, r5
 800960a:	4681      	mov	r9, r0
 800960c:	f04f 0300 	mov.w	r3, #0
 8009610:	f04f 020a 	mov.w	r2, #10
 8009614:	4639      	mov	r1, r7
 8009616:	4658      	mov	r0, fp
 8009618:	d107      	bne.n	800962a <_dtoa_r+0xac2>
 800961a:	f000 f9cb 	bl	80099b4 <__multadd>
 800961e:	4607      	mov	r7, r0
 8009620:	4605      	mov	r5, r0
 8009622:	9b07      	ldr	r3, [sp, #28]
 8009624:	3301      	adds	r3, #1
 8009626:	9307      	str	r3, [sp, #28]
 8009628:	e774      	b.n	8009514 <_dtoa_r+0x9ac>
 800962a:	f000 f9c3 	bl	80099b4 <__multadd>
 800962e:	4629      	mov	r1, r5
 8009630:	4607      	mov	r7, r0
 8009632:	2300      	movs	r3, #0
 8009634:	220a      	movs	r2, #10
 8009636:	4658      	mov	r0, fp
 8009638:	f000 f9bc 	bl	80099b4 <__multadd>
 800963c:	4605      	mov	r5, r0
 800963e:	e7f0      	b.n	8009622 <_dtoa_r+0xaba>
 8009640:	9b00      	ldr	r3, [sp, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	bfcc      	ite	gt
 8009646:	461e      	movgt	r6, r3
 8009648:	2601      	movle	r6, #1
 800964a:	4456      	add	r6, sl
 800964c:	2700      	movs	r7, #0
 800964e:	4649      	mov	r1, r9
 8009650:	2201      	movs	r2, #1
 8009652:	4658      	mov	r0, fp
 8009654:	f000 fb5a 	bl	8009d0c <__lshift>
 8009658:	4621      	mov	r1, r4
 800965a:	4681      	mov	r9, r0
 800965c:	f000 fbc2 	bl	8009de4 <__mcmp>
 8009660:	2800      	cmp	r0, #0
 8009662:	dcb0      	bgt.n	80095c6 <_dtoa_r+0xa5e>
 8009664:	d102      	bne.n	800966c <_dtoa_r+0xb04>
 8009666:	f018 0f01 	tst.w	r8, #1
 800966a:	d1ac      	bne.n	80095c6 <_dtoa_r+0xa5e>
 800966c:	4633      	mov	r3, r6
 800966e:	461e      	mov	r6, r3
 8009670:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009674:	2a30      	cmp	r2, #48	@ 0x30
 8009676:	d0fa      	beq.n	800966e <_dtoa_r+0xb06>
 8009678:	e5c2      	b.n	8009200 <_dtoa_r+0x698>
 800967a:	459a      	cmp	sl, r3
 800967c:	d1a4      	bne.n	80095c8 <_dtoa_r+0xa60>
 800967e:	9b04      	ldr	r3, [sp, #16]
 8009680:	3301      	adds	r3, #1
 8009682:	9304      	str	r3, [sp, #16]
 8009684:	2331      	movs	r3, #49	@ 0x31
 8009686:	f88a 3000 	strb.w	r3, [sl]
 800968a:	e5b9      	b.n	8009200 <_dtoa_r+0x698>
 800968c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800968e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80096ec <_dtoa_r+0xb84>
 8009692:	b11b      	cbz	r3, 800969c <_dtoa_r+0xb34>
 8009694:	f10a 0308 	add.w	r3, sl, #8
 8009698:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800969a:	6013      	str	r3, [r2, #0]
 800969c:	4650      	mov	r0, sl
 800969e:	b019      	add	sp, #100	@ 0x64
 80096a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	f77f ae37 	ble.w	800931a <_dtoa_r+0x7b2>
 80096ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80096b0:	2001      	movs	r0, #1
 80096b2:	e655      	b.n	8009360 <_dtoa_r+0x7f8>
 80096b4:	9b00      	ldr	r3, [sp, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f77f aed6 	ble.w	8009468 <_dtoa_r+0x900>
 80096bc:	4656      	mov	r6, sl
 80096be:	4621      	mov	r1, r4
 80096c0:	4648      	mov	r0, r9
 80096c2:	f7ff f9c6 	bl	8008a52 <quorem>
 80096c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80096ca:	f806 8b01 	strb.w	r8, [r6], #1
 80096ce:	9b00      	ldr	r3, [sp, #0]
 80096d0:	eba6 020a 	sub.w	r2, r6, sl
 80096d4:	4293      	cmp	r3, r2
 80096d6:	ddb3      	ble.n	8009640 <_dtoa_r+0xad8>
 80096d8:	4649      	mov	r1, r9
 80096da:	2300      	movs	r3, #0
 80096dc:	220a      	movs	r2, #10
 80096de:	4658      	mov	r0, fp
 80096e0:	f000 f968 	bl	80099b4 <__multadd>
 80096e4:	4681      	mov	r9, r0
 80096e6:	e7ea      	b.n	80096be <_dtoa_r+0xb56>
 80096e8:	0800ad18 	.word	0x0800ad18
 80096ec:	0800ac9c 	.word	0x0800ac9c

080096f0 <_free_r>:
 80096f0:	b538      	push	{r3, r4, r5, lr}
 80096f2:	4605      	mov	r5, r0
 80096f4:	2900      	cmp	r1, #0
 80096f6:	d041      	beq.n	800977c <_free_r+0x8c>
 80096f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096fc:	1f0c      	subs	r4, r1, #4
 80096fe:	2b00      	cmp	r3, #0
 8009700:	bfb8      	it	lt
 8009702:	18e4      	addlt	r4, r4, r3
 8009704:	f000 f8e8 	bl	80098d8 <__malloc_lock>
 8009708:	4a1d      	ldr	r2, [pc, #116]	@ (8009780 <_free_r+0x90>)
 800970a:	6813      	ldr	r3, [r2, #0]
 800970c:	b933      	cbnz	r3, 800971c <_free_r+0x2c>
 800970e:	6063      	str	r3, [r4, #4]
 8009710:	6014      	str	r4, [r2, #0]
 8009712:	4628      	mov	r0, r5
 8009714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009718:	f000 b8e4 	b.w	80098e4 <__malloc_unlock>
 800971c:	42a3      	cmp	r3, r4
 800971e:	d908      	bls.n	8009732 <_free_r+0x42>
 8009720:	6820      	ldr	r0, [r4, #0]
 8009722:	1821      	adds	r1, r4, r0
 8009724:	428b      	cmp	r3, r1
 8009726:	bf01      	itttt	eq
 8009728:	6819      	ldreq	r1, [r3, #0]
 800972a:	685b      	ldreq	r3, [r3, #4]
 800972c:	1809      	addeq	r1, r1, r0
 800972e:	6021      	streq	r1, [r4, #0]
 8009730:	e7ed      	b.n	800970e <_free_r+0x1e>
 8009732:	461a      	mov	r2, r3
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	b10b      	cbz	r3, 800973c <_free_r+0x4c>
 8009738:	42a3      	cmp	r3, r4
 800973a:	d9fa      	bls.n	8009732 <_free_r+0x42>
 800973c:	6811      	ldr	r1, [r2, #0]
 800973e:	1850      	adds	r0, r2, r1
 8009740:	42a0      	cmp	r0, r4
 8009742:	d10b      	bne.n	800975c <_free_r+0x6c>
 8009744:	6820      	ldr	r0, [r4, #0]
 8009746:	4401      	add	r1, r0
 8009748:	1850      	adds	r0, r2, r1
 800974a:	4283      	cmp	r3, r0
 800974c:	6011      	str	r1, [r2, #0]
 800974e:	d1e0      	bne.n	8009712 <_free_r+0x22>
 8009750:	6818      	ldr	r0, [r3, #0]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	6053      	str	r3, [r2, #4]
 8009756:	4408      	add	r0, r1
 8009758:	6010      	str	r0, [r2, #0]
 800975a:	e7da      	b.n	8009712 <_free_r+0x22>
 800975c:	d902      	bls.n	8009764 <_free_r+0x74>
 800975e:	230c      	movs	r3, #12
 8009760:	602b      	str	r3, [r5, #0]
 8009762:	e7d6      	b.n	8009712 <_free_r+0x22>
 8009764:	6820      	ldr	r0, [r4, #0]
 8009766:	1821      	adds	r1, r4, r0
 8009768:	428b      	cmp	r3, r1
 800976a:	bf04      	itt	eq
 800976c:	6819      	ldreq	r1, [r3, #0]
 800976e:	685b      	ldreq	r3, [r3, #4]
 8009770:	6063      	str	r3, [r4, #4]
 8009772:	bf04      	itt	eq
 8009774:	1809      	addeq	r1, r1, r0
 8009776:	6021      	streq	r1, [r4, #0]
 8009778:	6054      	str	r4, [r2, #4]
 800977a:	e7ca      	b.n	8009712 <_free_r+0x22>
 800977c:	bd38      	pop	{r3, r4, r5, pc}
 800977e:	bf00      	nop
 8009780:	2000057c 	.word	0x2000057c

08009784 <malloc>:
 8009784:	4b02      	ldr	r3, [pc, #8]	@ (8009790 <malloc+0xc>)
 8009786:	4601      	mov	r1, r0
 8009788:	6818      	ldr	r0, [r3, #0]
 800978a:	f000 b825 	b.w	80097d8 <_malloc_r>
 800978e:	bf00      	nop
 8009790:	2000001c 	.word	0x2000001c

08009794 <sbrk_aligned>:
 8009794:	b570      	push	{r4, r5, r6, lr}
 8009796:	4e0f      	ldr	r6, [pc, #60]	@ (80097d4 <sbrk_aligned+0x40>)
 8009798:	460c      	mov	r4, r1
 800979a:	6831      	ldr	r1, [r6, #0]
 800979c:	4605      	mov	r5, r0
 800979e:	b911      	cbnz	r1, 80097a6 <sbrk_aligned+0x12>
 80097a0:	f000 fe46 	bl	800a430 <_sbrk_r>
 80097a4:	6030      	str	r0, [r6, #0]
 80097a6:	4621      	mov	r1, r4
 80097a8:	4628      	mov	r0, r5
 80097aa:	f000 fe41 	bl	800a430 <_sbrk_r>
 80097ae:	1c43      	adds	r3, r0, #1
 80097b0:	d103      	bne.n	80097ba <sbrk_aligned+0x26>
 80097b2:	f04f 34ff 	mov.w	r4, #4294967295
 80097b6:	4620      	mov	r0, r4
 80097b8:	bd70      	pop	{r4, r5, r6, pc}
 80097ba:	1cc4      	adds	r4, r0, #3
 80097bc:	f024 0403 	bic.w	r4, r4, #3
 80097c0:	42a0      	cmp	r0, r4
 80097c2:	d0f8      	beq.n	80097b6 <sbrk_aligned+0x22>
 80097c4:	1a21      	subs	r1, r4, r0
 80097c6:	4628      	mov	r0, r5
 80097c8:	f000 fe32 	bl	800a430 <_sbrk_r>
 80097cc:	3001      	adds	r0, #1
 80097ce:	d1f2      	bne.n	80097b6 <sbrk_aligned+0x22>
 80097d0:	e7ef      	b.n	80097b2 <sbrk_aligned+0x1e>
 80097d2:	bf00      	nop
 80097d4:	20000578 	.word	0x20000578

080097d8 <_malloc_r>:
 80097d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097dc:	1ccd      	adds	r5, r1, #3
 80097de:	f025 0503 	bic.w	r5, r5, #3
 80097e2:	3508      	adds	r5, #8
 80097e4:	2d0c      	cmp	r5, #12
 80097e6:	bf38      	it	cc
 80097e8:	250c      	movcc	r5, #12
 80097ea:	2d00      	cmp	r5, #0
 80097ec:	4606      	mov	r6, r0
 80097ee:	db01      	blt.n	80097f4 <_malloc_r+0x1c>
 80097f0:	42a9      	cmp	r1, r5
 80097f2:	d904      	bls.n	80097fe <_malloc_r+0x26>
 80097f4:	230c      	movs	r3, #12
 80097f6:	6033      	str	r3, [r6, #0]
 80097f8:	2000      	movs	r0, #0
 80097fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80098d4 <_malloc_r+0xfc>
 8009802:	f000 f869 	bl	80098d8 <__malloc_lock>
 8009806:	f8d8 3000 	ldr.w	r3, [r8]
 800980a:	461c      	mov	r4, r3
 800980c:	bb44      	cbnz	r4, 8009860 <_malloc_r+0x88>
 800980e:	4629      	mov	r1, r5
 8009810:	4630      	mov	r0, r6
 8009812:	f7ff ffbf 	bl	8009794 <sbrk_aligned>
 8009816:	1c43      	adds	r3, r0, #1
 8009818:	4604      	mov	r4, r0
 800981a:	d158      	bne.n	80098ce <_malloc_r+0xf6>
 800981c:	f8d8 4000 	ldr.w	r4, [r8]
 8009820:	4627      	mov	r7, r4
 8009822:	2f00      	cmp	r7, #0
 8009824:	d143      	bne.n	80098ae <_malloc_r+0xd6>
 8009826:	2c00      	cmp	r4, #0
 8009828:	d04b      	beq.n	80098c2 <_malloc_r+0xea>
 800982a:	6823      	ldr	r3, [r4, #0]
 800982c:	4639      	mov	r1, r7
 800982e:	4630      	mov	r0, r6
 8009830:	eb04 0903 	add.w	r9, r4, r3
 8009834:	f000 fdfc 	bl	800a430 <_sbrk_r>
 8009838:	4581      	cmp	r9, r0
 800983a:	d142      	bne.n	80098c2 <_malloc_r+0xea>
 800983c:	6821      	ldr	r1, [r4, #0]
 800983e:	1a6d      	subs	r5, r5, r1
 8009840:	4629      	mov	r1, r5
 8009842:	4630      	mov	r0, r6
 8009844:	f7ff ffa6 	bl	8009794 <sbrk_aligned>
 8009848:	3001      	adds	r0, #1
 800984a:	d03a      	beq.n	80098c2 <_malloc_r+0xea>
 800984c:	6823      	ldr	r3, [r4, #0]
 800984e:	442b      	add	r3, r5
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	f8d8 3000 	ldr.w	r3, [r8]
 8009856:	685a      	ldr	r2, [r3, #4]
 8009858:	bb62      	cbnz	r2, 80098b4 <_malloc_r+0xdc>
 800985a:	f8c8 7000 	str.w	r7, [r8]
 800985e:	e00f      	b.n	8009880 <_malloc_r+0xa8>
 8009860:	6822      	ldr	r2, [r4, #0]
 8009862:	1b52      	subs	r2, r2, r5
 8009864:	d420      	bmi.n	80098a8 <_malloc_r+0xd0>
 8009866:	2a0b      	cmp	r2, #11
 8009868:	d917      	bls.n	800989a <_malloc_r+0xc2>
 800986a:	1961      	adds	r1, r4, r5
 800986c:	42a3      	cmp	r3, r4
 800986e:	6025      	str	r5, [r4, #0]
 8009870:	bf18      	it	ne
 8009872:	6059      	strne	r1, [r3, #4]
 8009874:	6863      	ldr	r3, [r4, #4]
 8009876:	bf08      	it	eq
 8009878:	f8c8 1000 	streq.w	r1, [r8]
 800987c:	5162      	str	r2, [r4, r5]
 800987e:	604b      	str	r3, [r1, #4]
 8009880:	4630      	mov	r0, r6
 8009882:	f000 f82f 	bl	80098e4 <__malloc_unlock>
 8009886:	f104 000b 	add.w	r0, r4, #11
 800988a:	1d23      	adds	r3, r4, #4
 800988c:	f020 0007 	bic.w	r0, r0, #7
 8009890:	1ac2      	subs	r2, r0, r3
 8009892:	bf1c      	itt	ne
 8009894:	1a1b      	subne	r3, r3, r0
 8009896:	50a3      	strne	r3, [r4, r2]
 8009898:	e7af      	b.n	80097fa <_malloc_r+0x22>
 800989a:	6862      	ldr	r2, [r4, #4]
 800989c:	42a3      	cmp	r3, r4
 800989e:	bf0c      	ite	eq
 80098a0:	f8c8 2000 	streq.w	r2, [r8]
 80098a4:	605a      	strne	r2, [r3, #4]
 80098a6:	e7eb      	b.n	8009880 <_malloc_r+0xa8>
 80098a8:	4623      	mov	r3, r4
 80098aa:	6864      	ldr	r4, [r4, #4]
 80098ac:	e7ae      	b.n	800980c <_malloc_r+0x34>
 80098ae:	463c      	mov	r4, r7
 80098b0:	687f      	ldr	r7, [r7, #4]
 80098b2:	e7b6      	b.n	8009822 <_malloc_r+0x4a>
 80098b4:	461a      	mov	r2, r3
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	42a3      	cmp	r3, r4
 80098ba:	d1fb      	bne.n	80098b4 <_malloc_r+0xdc>
 80098bc:	2300      	movs	r3, #0
 80098be:	6053      	str	r3, [r2, #4]
 80098c0:	e7de      	b.n	8009880 <_malloc_r+0xa8>
 80098c2:	230c      	movs	r3, #12
 80098c4:	6033      	str	r3, [r6, #0]
 80098c6:	4630      	mov	r0, r6
 80098c8:	f000 f80c 	bl	80098e4 <__malloc_unlock>
 80098cc:	e794      	b.n	80097f8 <_malloc_r+0x20>
 80098ce:	6005      	str	r5, [r0, #0]
 80098d0:	e7d6      	b.n	8009880 <_malloc_r+0xa8>
 80098d2:	bf00      	nop
 80098d4:	2000057c 	.word	0x2000057c

080098d8 <__malloc_lock>:
 80098d8:	4801      	ldr	r0, [pc, #4]	@ (80098e0 <__malloc_lock+0x8>)
 80098da:	f7ff b8aa 	b.w	8008a32 <__retarget_lock_acquire_recursive>
 80098de:	bf00      	nop
 80098e0:	20000574 	.word	0x20000574

080098e4 <__malloc_unlock>:
 80098e4:	4801      	ldr	r0, [pc, #4]	@ (80098ec <__malloc_unlock+0x8>)
 80098e6:	f7ff b8a5 	b.w	8008a34 <__retarget_lock_release_recursive>
 80098ea:	bf00      	nop
 80098ec:	20000574 	.word	0x20000574

080098f0 <_Balloc>:
 80098f0:	b570      	push	{r4, r5, r6, lr}
 80098f2:	69c6      	ldr	r6, [r0, #28]
 80098f4:	4604      	mov	r4, r0
 80098f6:	460d      	mov	r5, r1
 80098f8:	b976      	cbnz	r6, 8009918 <_Balloc+0x28>
 80098fa:	2010      	movs	r0, #16
 80098fc:	f7ff ff42 	bl	8009784 <malloc>
 8009900:	4602      	mov	r2, r0
 8009902:	61e0      	str	r0, [r4, #28]
 8009904:	b920      	cbnz	r0, 8009910 <_Balloc+0x20>
 8009906:	4b18      	ldr	r3, [pc, #96]	@ (8009968 <_Balloc+0x78>)
 8009908:	4818      	ldr	r0, [pc, #96]	@ (800996c <_Balloc+0x7c>)
 800990a:	216b      	movs	r1, #107	@ 0x6b
 800990c:	f000 fda0 	bl	800a450 <__assert_func>
 8009910:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009914:	6006      	str	r6, [r0, #0]
 8009916:	60c6      	str	r6, [r0, #12]
 8009918:	69e6      	ldr	r6, [r4, #28]
 800991a:	68f3      	ldr	r3, [r6, #12]
 800991c:	b183      	cbz	r3, 8009940 <_Balloc+0x50>
 800991e:	69e3      	ldr	r3, [r4, #28]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009926:	b9b8      	cbnz	r0, 8009958 <_Balloc+0x68>
 8009928:	2101      	movs	r1, #1
 800992a:	fa01 f605 	lsl.w	r6, r1, r5
 800992e:	1d72      	adds	r2, r6, #5
 8009930:	0092      	lsls	r2, r2, #2
 8009932:	4620      	mov	r0, r4
 8009934:	f000 fdaa 	bl	800a48c <_calloc_r>
 8009938:	b160      	cbz	r0, 8009954 <_Balloc+0x64>
 800993a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800993e:	e00e      	b.n	800995e <_Balloc+0x6e>
 8009940:	2221      	movs	r2, #33	@ 0x21
 8009942:	2104      	movs	r1, #4
 8009944:	4620      	mov	r0, r4
 8009946:	f000 fda1 	bl	800a48c <_calloc_r>
 800994a:	69e3      	ldr	r3, [r4, #28]
 800994c:	60f0      	str	r0, [r6, #12]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1e4      	bne.n	800991e <_Balloc+0x2e>
 8009954:	2000      	movs	r0, #0
 8009956:	bd70      	pop	{r4, r5, r6, pc}
 8009958:	6802      	ldr	r2, [r0, #0]
 800995a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800995e:	2300      	movs	r3, #0
 8009960:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009964:	e7f7      	b.n	8009956 <_Balloc+0x66>
 8009966:	bf00      	nop
 8009968:	0800aca9 	.word	0x0800aca9
 800996c:	0800ad29 	.word	0x0800ad29

08009970 <_Bfree>:
 8009970:	b570      	push	{r4, r5, r6, lr}
 8009972:	69c6      	ldr	r6, [r0, #28]
 8009974:	4605      	mov	r5, r0
 8009976:	460c      	mov	r4, r1
 8009978:	b976      	cbnz	r6, 8009998 <_Bfree+0x28>
 800997a:	2010      	movs	r0, #16
 800997c:	f7ff ff02 	bl	8009784 <malloc>
 8009980:	4602      	mov	r2, r0
 8009982:	61e8      	str	r0, [r5, #28]
 8009984:	b920      	cbnz	r0, 8009990 <_Bfree+0x20>
 8009986:	4b09      	ldr	r3, [pc, #36]	@ (80099ac <_Bfree+0x3c>)
 8009988:	4809      	ldr	r0, [pc, #36]	@ (80099b0 <_Bfree+0x40>)
 800998a:	218f      	movs	r1, #143	@ 0x8f
 800998c:	f000 fd60 	bl	800a450 <__assert_func>
 8009990:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009994:	6006      	str	r6, [r0, #0]
 8009996:	60c6      	str	r6, [r0, #12]
 8009998:	b13c      	cbz	r4, 80099aa <_Bfree+0x3a>
 800999a:	69eb      	ldr	r3, [r5, #28]
 800999c:	6862      	ldr	r2, [r4, #4]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099a4:	6021      	str	r1, [r4, #0]
 80099a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80099aa:	bd70      	pop	{r4, r5, r6, pc}
 80099ac:	0800aca9 	.word	0x0800aca9
 80099b0:	0800ad29 	.word	0x0800ad29

080099b4 <__multadd>:
 80099b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b8:	690d      	ldr	r5, [r1, #16]
 80099ba:	4607      	mov	r7, r0
 80099bc:	460c      	mov	r4, r1
 80099be:	461e      	mov	r6, r3
 80099c0:	f101 0c14 	add.w	ip, r1, #20
 80099c4:	2000      	movs	r0, #0
 80099c6:	f8dc 3000 	ldr.w	r3, [ip]
 80099ca:	b299      	uxth	r1, r3
 80099cc:	fb02 6101 	mla	r1, r2, r1, r6
 80099d0:	0c1e      	lsrs	r6, r3, #16
 80099d2:	0c0b      	lsrs	r3, r1, #16
 80099d4:	fb02 3306 	mla	r3, r2, r6, r3
 80099d8:	b289      	uxth	r1, r1
 80099da:	3001      	adds	r0, #1
 80099dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80099e0:	4285      	cmp	r5, r0
 80099e2:	f84c 1b04 	str.w	r1, [ip], #4
 80099e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80099ea:	dcec      	bgt.n	80099c6 <__multadd+0x12>
 80099ec:	b30e      	cbz	r6, 8009a32 <__multadd+0x7e>
 80099ee:	68a3      	ldr	r3, [r4, #8]
 80099f0:	42ab      	cmp	r3, r5
 80099f2:	dc19      	bgt.n	8009a28 <__multadd+0x74>
 80099f4:	6861      	ldr	r1, [r4, #4]
 80099f6:	4638      	mov	r0, r7
 80099f8:	3101      	adds	r1, #1
 80099fa:	f7ff ff79 	bl	80098f0 <_Balloc>
 80099fe:	4680      	mov	r8, r0
 8009a00:	b928      	cbnz	r0, 8009a0e <__multadd+0x5a>
 8009a02:	4602      	mov	r2, r0
 8009a04:	4b0c      	ldr	r3, [pc, #48]	@ (8009a38 <__multadd+0x84>)
 8009a06:	480d      	ldr	r0, [pc, #52]	@ (8009a3c <__multadd+0x88>)
 8009a08:	21ba      	movs	r1, #186	@ 0xba
 8009a0a:	f000 fd21 	bl	800a450 <__assert_func>
 8009a0e:	6922      	ldr	r2, [r4, #16]
 8009a10:	3202      	adds	r2, #2
 8009a12:	f104 010c 	add.w	r1, r4, #12
 8009a16:	0092      	lsls	r2, r2, #2
 8009a18:	300c      	adds	r0, #12
 8009a1a:	f7ff f80c 	bl	8008a36 <memcpy>
 8009a1e:	4621      	mov	r1, r4
 8009a20:	4638      	mov	r0, r7
 8009a22:	f7ff ffa5 	bl	8009970 <_Bfree>
 8009a26:	4644      	mov	r4, r8
 8009a28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a2c:	3501      	adds	r5, #1
 8009a2e:	615e      	str	r6, [r3, #20]
 8009a30:	6125      	str	r5, [r4, #16]
 8009a32:	4620      	mov	r0, r4
 8009a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a38:	0800ad18 	.word	0x0800ad18
 8009a3c:	0800ad29 	.word	0x0800ad29

08009a40 <__hi0bits>:
 8009a40:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009a44:	4603      	mov	r3, r0
 8009a46:	bf36      	itet	cc
 8009a48:	0403      	lslcc	r3, r0, #16
 8009a4a:	2000      	movcs	r0, #0
 8009a4c:	2010      	movcc	r0, #16
 8009a4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a52:	bf3c      	itt	cc
 8009a54:	021b      	lslcc	r3, r3, #8
 8009a56:	3008      	addcc	r0, #8
 8009a58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a5c:	bf3c      	itt	cc
 8009a5e:	011b      	lslcc	r3, r3, #4
 8009a60:	3004      	addcc	r0, #4
 8009a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a66:	bf3c      	itt	cc
 8009a68:	009b      	lslcc	r3, r3, #2
 8009a6a:	3002      	addcc	r0, #2
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	db05      	blt.n	8009a7c <__hi0bits+0x3c>
 8009a70:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009a74:	f100 0001 	add.w	r0, r0, #1
 8009a78:	bf08      	it	eq
 8009a7a:	2020      	moveq	r0, #32
 8009a7c:	4770      	bx	lr

08009a7e <__lo0bits>:
 8009a7e:	6803      	ldr	r3, [r0, #0]
 8009a80:	4602      	mov	r2, r0
 8009a82:	f013 0007 	ands.w	r0, r3, #7
 8009a86:	d00b      	beq.n	8009aa0 <__lo0bits+0x22>
 8009a88:	07d9      	lsls	r1, r3, #31
 8009a8a:	d421      	bmi.n	8009ad0 <__lo0bits+0x52>
 8009a8c:	0798      	lsls	r0, r3, #30
 8009a8e:	bf49      	itett	mi
 8009a90:	085b      	lsrmi	r3, r3, #1
 8009a92:	089b      	lsrpl	r3, r3, #2
 8009a94:	2001      	movmi	r0, #1
 8009a96:	6013      	strmi	r3, [r2, #0]
 8009a98:	bf5c      	itt	pl
 8009a9a:	6013      	strpl	r3, [r2, #0]
 8009a9c:	2002      	movpl	r0, #2
 8009a9e:	4770      	bx	lr
 8009aa0:	b299      	uxth	r1, r3
 8009aa2:	b909      	cbnz	r1, 8009aa8 <__lo0bits+0x2a>
 8009aa4:	0c1b      	lsrs	r3, r3, #16
 8009aa6:	2010      	movs	r0, #16
 8009aa8:	b2d9      	uxtb	r1, r3
 8009aaa:	b909      	cbnz	r1, 8009ab0 <__lo0bits+0x32>
 8009aac:	3008      	adds	r0, #8
 8009aae:	0a1b      	lsrs	r3, r3, #8
 8009ab0:	0719      	lsls	r1, r3, #28
 8009ab2:	bf04      	itt	eq
 8009ab4:	091b      	lsreq	r3, r3, #4
 8009ab6:	3004      	addeq	r0, #4
 8009ab8:	0799      	lsls	r1, r3, #30
 8009aba:	bf04      	itt	eq
 8009abc:	089b      	lsreq	r3, r3, #2
 8009abe:	3002      	addeq	r0, #2
 8009ac0:	07d9      	lsls	r1, r3, #31
 8009ac2:	d403      	bmi.n	8009acc <__lo0bits+0x4e>
 8009ac4:	085b      	lsrs	r3, r3, #1
 8009ac6:	f100 0001 	add.w	r0, r0, #1
 8009aca:	d003      	beq.n	8009ad4 <__lo0bits+0x56>
 8009acc:	6013      	str	r3, [r2, #0]
 8009ace:	4770      	bx	lr
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	4770      	bx	lr
 8009ad4:	2020      	movs	r0, #32
 8009ad6:	4770      	bx	lr

08009ad8 <__i2b>:
 8009ad8:	b510      	push	{r4, lr}
 8009ada:	460c      	mov	r4, r1
 8009adc:	2101      	movs	r1, #1
 8009ade:	f7ff ff07 	bl	80098f0 <_Balloc>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	b928      	cbnz	r0, 8009af2 <__i2b+0x1a>
 8009ae6:	4b05      	ldr	r3, [pc, #20]	@ (8009afc <__i2b+0x24>)
 8009ae8:	4805      	ldr	r0, [pc, #20]	@ (8009b00 <__i2b+0x28>)
 8009aea:	f240 1145 	movw	r1, #325	@ 0x145
 8009aee:	f000 fcaf 	bl	800a450 <__assert_func>
 8009af2:	2301      	movs	r3, #1
 8009af4:	6144      	str	r4, [r0, #20]
 8009af6:	6103      	str	r3, [r0, #16]
 8009af8:	bd10      	pop	{r4, pc}
 8009afa:	bf00      	nop
 8009afc:	0800ad18 	.word	0x0800ad18
 8009b00:	0800ad29 	.word	0x0800ad29

08009b04 <__multiply>:
 8009b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b08:	4614      	mov	r4, r2
 8009b0a:	690a      	ldr	r2, [r1, #16]
 8009b0c:	6923      	ldr	r3, [r4, #16]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	bfa8      	it	ge
 8009b12:	4623      	movge	r3, r4
 8009b14:	460f      	mov	r7, r1
 8009b16:	bfa4      	itt	ge
 8009b18:	460c      	movge	r4, r1
 8009b1a:	461f      	movge	r7, r3
 8009b1c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009b20:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009b24:	68a3      	ldr	r3, [r4, #8]
 8009b26:	6861      	ldr	r1, [r4, #4]
 8009b28:	eb0a 0609 	add.w	r6, sl, r9
 8009b2c:	42b3      	cmp	r3, r6
 8009b2e:	b085      	sub	sp, #20
 8009b30:	bfb8      	it	lt
 8009b32:	3101      	addlt	r1, #1
 8009b34:	f7ff fedc 	bl	80098f0 <_Balloc>
 8009b38:	b930      	cbnz	r0, 8009b48 <__multiply+0x44>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	4b44      	ldr	r3, [pc, #272]	@ (8009c50 <__multiply+0x14c>)
 8009b3e:	4845      	ldr	r0, [pc, #276]	@ (8009c54 <__multiply+0x150>)
 8009b40:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009b44:	f000 fc84 	bl	800a450 <__assert_func>
 8009b48:	f100 0514 	add.w	r5, r0, #20
 8009b4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b50:	462b      	mov	r3, r5
 8009b52:	2200      	movs	r2, #0
 8009b54:	4543      	cmp	r3, r8
 8009b56:	d321      	bcc.n	8009b9c <__multiply+0x98>
 8009b58:	f107 0114 	add.w	r1, r7, #20
 8009b5c:	f104 0214 	add.w	r2, r4, #20
 8009b60:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009b64:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009b68:	9302      	str	r3, [sp, #8]
 8009b6a:	1b13      	subs	r3, r2, r4
 8009b6c:	3b15      	subs	r3, #21
 8009b6e:	f023 0303 	bic.w	r3, r3, #3
 8009b72:	3304      	adds	r3, #4
 8009b74:	f104 0715 	add.w	r7, r4, #21
 8009b78:	42ba      	cmp	r2, r7
 8009b7a:	bf38      	it	cc
 8009b7c:	2304      	movcc	r3, #4
 8009b7e:	9301      	str	r3, [sp, #4]
 8009b80:	9b02      	ldr	r3, [sp, #8]
 8009b82:	9103      	str	r1, [sp, #12]
 8009b84:	428b      	cmp	r3, r1
 8009b86:	d80c      	bhi.n	8009ba2 <__multiply+0x9e>
 8009b88:	2e00      	cmp	r6, #0
 8009b8a:	dd03      	ble.n	8009b94 <__multiply+0x90>
 8009b8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d05b      	beq.n	8009c4c <__multiply+0x148>
 8009b94:	6106      	str	r6, [r0, #16]
 8009b96:	b005      	add	sp, #20
 8009b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b9c:	f843 2b04 	str.w	r2, [r3], #4
 8009ba0:	e7d8      	b.n	8009b54 <__multiply+0x50>
 8009ba2:	f8b1 a000 	ldrh.w	sl, [r1]
 8009ba6:	f1ba 0f00 	cmp.w	sl, #0
 8009baa:	d024      	beq.n	8009bf6 <__multiply+0xf2>
 8009bac:	f104 0e14 	add.w	lr, r4, #20
 8009bb0:	46a9      	mov	r9, r5
 8009bb2:	f04f 0c00 	mov.w	ip, #0
 8009bb6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009bba:	f8d9 3000 	ldr.w	r3, [r9]
 8009bbe:	fa1f fb87 	uxth.w	fp, r7
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	fb0a 330b 	mla	r3, sl, fp, r3
 8009bc8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009bcc:	f8d9 7000 	ldr.w	r7, [r9]
 8009bd0:	4463      	add	r3, ip
 8009bd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009bd6:	fb0a c70b 	mla	r7, sl, fp, ip
 8009bda:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009be4:	4572      	cmp	r2, lr
 8009be6:	f849 3b04 	str.w	r3, [r9], #4
 8009bea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009bee:	d8e2      	bhi.n	8009bb6 <__multiply+0xb2>
 8009bf0:	9b01      	ldr	r3, [sp, #4]
 8009bf2:	f845 c003 	str.w	ip, [r5, r3]
 8009bf6:	9b03      	ldr	r3, [sp, #12]
 8009bf8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009bfc:	3104      	adds	r1, #4
 8009bfe:	f1b9 0f00 	cmp.w	r9, #0
 8009c02:	d021      	beq.n	8009c48 <__multiply+0x144>
 8009c04:	682b      	ldr	r3, [r5, #0]
 8009c06:	f104 0c14 	add.w	ip, r4, #20
 8009c0a:	46ae      	mov	lr, r5
 8009c0c:	f04f 0a00 	mov.w	sl, #0
 8009c10:	f8bc b000 	ldrh.w	fp, [ip]
 8009c14:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009c18:	fb09 770b 	mla	r7, r9, fp, r7
 8009c1c:	4457      	add	r7, sl
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009c24:	f84e 3b04 	str.w	r3, [lr], #4
 8009c28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009c2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c30:	f8be 3000 	ldrh.w	r3, [lr]
 8009c34:	fb09 330a 	mla	r3, r9, sl, r3
 8009c38:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009c3c:	4562      	cmp	r2, ip
 8009c3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c42:	d8e5      	bhi.n	8009c10 <__multiply+0x10c>
 8009c44:	9f01      	ldr	r7, [sp, #4]
 8009c46:	51eb      	str	r3, [r5, r7]
 8009c48:	3504      	adds	r5, #4
 8009c4a:	e799      	b.n	8009b80 <__multiply+0x7c>
 8009c4c:	3e01      	subs	r6, #1
 8009c4e:	e79b      	b.n	8009b88 <__multiply+0x84>
 8009c50:	0800ad18 	.word	0x0800ad18
 8009c54:	0800ad29 	.word	0x0800ad29

08009c58 <__pow5mult>:
 8009c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c5c:	4615      	mov	r5, r2
 8009c5e:	f012 0203 	ands.w	r2, r2, #3
 8009c62:	4607      	mov	r7, r0
 8009c64:	460e      	mov	r6, r1
 8009c66:	d007      	beq.n	8009c78 <__pow5mult+0x20>
 8009c68:	4c25      	ldr	r4, [pc, #148]	@ (8009d00 <__pow5mult+0xa8>)
 8009c6a:	3a01      	subs	r2, #1
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c72:	f7ff fe9f 	bl	80099b4 <__multadd>
 8009c76:	4606      	mov	r6, r0
 8009c78:	10ad      	asrs	r5, r5, #2
 8009c7a:	d03d      	beq.n	8009cf8 <__pow5mult+0xa0>
 8009c7c:	69fc      	ldr	r4, [r7, #28]
 8009c7e:	b97c      	cbnz	r4, 8009ca0 <__pow5mult+0x48>
 8009c80:	2010      	movs	r0, #16
 8009c82:	f7ff fd7f 	bl	8009784 <malloc>
 8009c86:	4602      	mov	r2, r0
 8009c88:	61f8      	str	r0, [r7, #28]
 8009c8a:	b928      	cbnz	r0, 8009c98 <__pow5mult+0x40>
 8009c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8009d04 <__pow5mult+0xac>)
 8009c8e:	481e      	ldr	r0, [pc, #120]	@ (8009d08 <__pow5mult+0xb0>)
 8009c90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009c94:	f000 fbdc 	bl	800a450 <__assert_func>
 8009c98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c9c:	6004      	str	r4, [r0, #0]
 8009c9e:	60c4      	str	r4, [r0, #12]
 8009ca0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009ca4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ca8:	b94c      	cbnz	r4, 8009cbe <__pow5mult+0x66>
 8009caa:	f240 2171 	movw	r1, #625	@ 0x271
 8009cae:	4638      	mov	r0, r7
 8009cb0:	f7ff ff12 	bl	8009ad8 <__i2b>
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009cba:	4604      	mov	r4, r0
 8009cbc:	6003      	str	r3, [r0, #0]
 8009cbe:	f04f 0900 	mov.w	r9, #0
 8009cc2:	07eb      	lsls	r3, r5, #31
 8009cc4:	d50a      	bpl.n	8009cdc <__pow5mult+0x84>
 8009cc6:	4631      	mov	r1, r6
 8009cc8:	4622      	mov	r2, r4
 8009cca:	4638      	mov	r0, r7
 8009ccc:	f7ff ff1a 	bl	8009b04 <__multiply>
 8009cd0:	4631      	mov	r1, r6
 8009cd2:	4680      	mov	r8, r0
 8009cd4:	4638      	mov	r0, r7
 8009cd6:	f7ff fe4b 	bl	8009970 <_Bfree>
 8009cda:	4646      	mov	r6, r8
 8009cdc:	106d      	asrs	r5, r5, #1
 8009cde:	d00b      	beq.n	8009cf8 <__pow5mult+0xa0>
 8009ce0:	6820      	ldr	r0, [r4, #0]
 8009ce2:	b938      	cbnz	r0, 8009cf4 <__pow5mult+0x9c>
 8009ce4:	4622      	mov	r2, r4
 8009ce6:	4621      	mov	r1, r4
 8009ce8:	4638      	mov	r0, r7
 8009cea:	f7ff ff0b 	bl	8009b04 <__multiply>
 8009cee:	6020      	str	r0, [r4, #0]
 8009cf0:	f8c0 9000 	str.w	r9, [r0]
 8009cf4:	4604      	mov	r4, r0
 8009cf6:	e7e4      	b.n	8009cc2 <__pow5mult+0x6a>
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cfe:	bf00      	nop
 8009d00:	0800ad84 	.word	0x0800ad84
 8009d04:	0800aca9 	.word	0x0800aca9
 8009d08:	0800ad29 	.word	0x0800ad29

08009d0c <__lshift>:
 8009d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d10:	460c      	mov	r4, r1
 8009d12:	6849      	ldr	r1, [r1, #4]
 8009d14:	6923      	ldr	r3, [r4, #16]
 8009d16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d1a:	68a3      	ldr	r3, [r4, #8]
 8009d1c:	4607      	mov	r7, r0
 8009d1e:	4691      	mov	r9, r2
 8009d20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d24:	f108 0601 	add.w	r6, r8, #1
 8009d28:	42b3      	cmp	r3, r6
 8009d2a:	db0b      	blt.n	8009d44 <__lshift+0x38>
 8009d2c:	4638      	mov	r0, r7
 8009d2e:	f7ff fddf 	bl	80098f0 <_Balloc>
 8009d32:	4605      	mov	r5, r0
 8009d34:	b948      	cbnz	r0, 8009d4a <__lshift+0x3e>
 8009d36:	4602      	mov	r2, r0
 8009d38:	4b28      	ldr	r3, [pc, #160]	@ (8009ddc <__lshift+0xd0>)
 8009d3a:	4829      	ldr	r0, [pc, #164]	@ (8009de0 <__lshift+0xd4>)
 8009d3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009d40:	f000 fb86 	bl	800a450 <__assert_func>
 8009d44:	3101      	adds	r1, #1
 8009d46:	005b      	lsls	r3, r3, #1
 8009d48:	e7ee      	b.n	8009d28 <__lshift+0x1c>
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	f100 0114 	add.w	r1, r0, #20
 8009d50:	f100 0210 	add.w	r2, r0, #16
 8009d54:	4618      	mov	r0, r3
 8009d56:	4553      	cmp	r3, sl
 8009d58:	db33      	blt.n	8009dc2 <__lshift+0xb6>
 8009d5a:	6920      	ldr	r0, [r4, #16]
 8009d5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d60:	f104 0314 	add.w	r3, r4, #20
 8009d64:	f019 091f 	ands.w	r9, r9, #31
 8009d68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d70:	d02b      	beq.n	8009dca <__lshift+0xbe>
 8009d72:	f1c9 0e20 	rsb	lr, r9, #32
 8009d76:	468a      	mov	sl, r1
 8009d78:	2200      	movs	r2, #0
 8009d7a:	6818      	ldr	r0, [r3, #0]
 8009d7c:	fa00 f009 	lsl.w	r0, r0, r9
 8009d80:	4310      	orrs	r0, r2
 8009d82:	f84a 0b04 	str.w	r0, [sl], #4
 8009d86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d8a:	459c      	cmp	ip, r3
 8009d8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d90:	d8f3      	bhi.n	8009d7a <__lshift+0x6e>
 8009d92:	ebac 0304 	sub.w	r3, ip, r4
 8009d96:	3b15      	subs	r3, #21
 8009d98:	f023 0303 	bic.w	r3, r3, #3
 8009d9c:	3304      	adds	r3, #4
 8009d9e:	f104 0015 	add.w	r0, r4, #21
 8009da2:	4584      	cmp	ip, r0
 8009da4:	bf38      	it	cc
 8009da6:	2304      	movcc	r3, #4
 8009da8:	50ca      	str	r2, [r1, r3]
 8009daa:	b10a      	cbz	r2, 8009db0 <__lshift+0xa4>
 8009dac:	f108 0602 	add.w	r6, r8, #2
 8009db0:	3e01      	subs	r6, #1
 8009db2:	4638      	mov	r0, r7
 8009db4:	612e      	str	r6, [r5, #16]
 8009db6:	4621      	mov	r1, r4
 8009db8:	f7ff fdda 	bl	8009970 <_Bfree>
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	e7c5      	b.n	8009d56 <__lshift+0x4a>
 8009dca:	3904      	subs	r1, #4
 8009dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009dd4:	459c      	cmp	ip, r3
 8009dd6:	d8f9      	bhi.n	8009dcc <__lshift+0xc0>
 8009dd8:	e7ea      	b.n	8009db0 <__lshift+0xa4>
 8009dda:	bf00      	nop
 8009ddc:	0800ad18 	.word	0x0800ad18
 8009de0:	0800ad29 	.word	0x0800ad29

08009de4 <__mcmp>:
 8009de4:	690a      	ldr	r2, [r1, #16]
 8009de6:	4603      	mov	r3, r0
 8009de8:	6900      	ldr	r0, [r0, #16]
 8009dea:	1a80      	subs	r0, r0, r2
 8009dec:	b530      	push	{r4, r5, lr}
 8009dee:	d10e      	bne.n	8009e0e <__mcmp+0x2a>
 8009df0:	3314      	adds	r3, #20
 8009df2:	3114      	adds	r1, #20
 8009df4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009df8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009dfc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e04:	4295      	cmp	r5, r2
 8009e06:	d003      	beq.n	8009e10 <__mcmp+0x2c>
 8009e08:	d205      	bcs.n	8009e16 <__mcmp+0x32>
 8009e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e0e:	bd30      	pop	{r4, r5, pc}
 8009e10:	42a3      	cmp	r3, r4
 8009e12:	d3f3      	bcc.n	8009dfc <__mcmp+0x18>
 8009e14:	e7fb      	b.n	8009e0e <__mcmp+0x2a>
 8009e16:	2001      	movs	r0, #1
 8009e18:	e7f9      	b.n	8009e0e <__mcmp+0x2a>
	...

08009e1c <__mdiff>:
 8009e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e20:	4689      	mov	r9, r1
 8009e22:	4606      	mov	r6, r0
 8009e24:	4611      	mov	r1, r2
 8009e26:	4648      	mov	r0, r9
 8009e28:	4614      	mov	r4, r2
 8009e2a:	f7ff ffdb 	bl	8009de4 <__mcmp>
 8009e2e:	1e05      	subs	r5, r0, #0
 8009e30:	d112      	bne.n	8009e58 <__mdiff+0x3c>
 8009e32:	4629      	mov	r1, r5
 8009e34:	4630      	mov	r0, r6
 8009e36:	f7ff fd5b 	bl	80098f0 <_Balloc>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	b928      	cbnz	r0, 8009e4a <__mdiff+0x2e>
 8009e3e:	4b3f      	ldr	r3, [pc, #252]	@ (8009f3c <__mdiff+0x120>)
 8009e40:	f240 2137 	movw	r1, #567	@ 0x237
 8009e44:	483e      	ldr	r0, [pc, #248]	@ (8009f40 <__mdiff+0x124>)
 8009e46:	f000 fb03 	bl	800a450 <__assert_func>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e50:	4610      	mov	r0, r2
 8009e52:	b003      	add	sp, #12
 8009e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e58:	bfbc      	itt	lt
 8009e5a:	464b      	movlt	r3, r9
 8009e5c:	46a1      	movlt	r9, r4
 8009e5e:	4630      	mov	r0, r6
 8009e60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009e64:	bfba      	itte	lt
 8009e66:	461c      	movlt	r4, r3
 8009e68:	2501      	movlt	r5, #1
 8009e6a:	2500      	movge	r5, #0
 8009e6c:	f7ff fd40 	bl	80098f0 <_Balloc>
 8009e70:	4602      	mov	r2, r0
 8009e72:	b918      	cbnz	r0, 8009e7c <__mdiff+0x60>
 8009e74:	4b31      	ldr	r3, [pc, #196]	@ (8009f3c <__mdiff+0x120>)
 8009e76:	f240 2145 	movw	r1, #581	@ 0x245
 8009e7a:	e7e3      	b.n	8009e44 <__mdiff+0x28>
 8009e7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009e80:	6926      	ldr	r6, [r4, #16]
 8009e82:	60c5      	str	r5, [r0, #12]
 8009e84:	f109 0310 	add.w	r3, r9, #16
 8009e88:	f109 0514 	add.w	r5, r9, #20
 8009e8c:	f104 0e14 	add.w	lr, r4, #20
 8009e90:	f100 0b14 	add.w	fp, r0, #20
 8009e94:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009e98:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009e9c:	9301      	str	r3, [sp, #4]
 8009e9e:	46d9      	mov	r9, fp
 8009ea0:	f04f 0c00 	mov.w	ip, #0
 8009ea4:	9b01      	ldr	r3, [sp, #4]
 8009ea6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009eaa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009eae:	9301      	str	r3, [sp, #4]
 8009eb0:	fa1f f38a 	uxth.w	r3, sl
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	b283      	uxth	r3, r0
 8009eb8:	1acb      	subs	r3, r1, r3
 8009eba:	0c00      	lsrs	r0, r0, #16
 8009ebc:	4463      	add	r3, ip
 8009ebe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009ec2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009ecc:	4576      	cmp	r6, lr
 8009ece:	f849 3b04 	str.w	r3, [r9], #4
 8009ed2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ed6:	d8e5      	bhi.n	8009ea4 <__mdiff+0x88>
 8009ed8:	1b33      	subs	r3, r6, r4
 8009eda:	3b15      	subs	r3, #21
 8009edc:	f023 0303 	bic.w	r3, r3, #3
 8009ee0:	3415      	adds	r4, #21
 8009ee2:	3304      	adds	r3, #4
 8009ee4:	42a6      	cmp	r6, r4
 8009ee6:	bf38      	it	cc
 8009ee8:	2304      	movcc	r3, #4
 8009eea:	441d      	add	r5, r3
 8009eec:	445b      	add	r3, fp
 8009eee:	461e      	mov	r6, r3
 8009ef0:	462c      	mov	r4, r5
 8009ef2:	4544      	cmp	r4, r8
 8009ef4:	d30e      	bcc.n	8009f14 <__mdiff+0xf8>
 8009ef6:	f108 0103 	add.w	r1, r8, #3
 8009efa:	1b49      	subs	r1, r1, r5
 8009efc:	f021 0103 	bic.w	r1, r1, #3
 8009f00:	3d03      	subs	r5, #3
 8009f02:	45a8      	cmp	r8, r5
 8009f04:	bf38      	it	cc
 8009f06:	2100      	movcc	r1, #0
 8009f08:	440b      	add	r3, r1
 8009f0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f0e:	b191      	cbz	r1, 8009f36 <__mdiff+0x11a>
 8009f10:	6117      	str	r7, [r2, #16]
 8009f12:	e79d      	b.n	8009e50 <__mdiff+0x34>
 8009f14:	f854 1b04 	ldr.w	r1, [r4], #4
 8009f18:	46e6      	mov	lr, ip
 8009f1a:	0c08      	lsrs	r0, r1, #16
 8009f1c:	fa1c fc81 	uxtah	ip, ip, r1
 8009f20:	4471      	add	r1, lr
 8009f22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009f26:	b289      	uxth	r1, r1
 8009f28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009f2c:	f846 1b04 	str.w	r1, [r6], #4
 8009f30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009f34:	e7dd      	b.n	8009ef2 <__mdiff+0xd6>
 8009f36:	3f01      	subs	r7, #1
 8009f38:	e7e7      	b.n	8009f0a <__mdiff+0xee>
 8009f3a:	bf00      	nop
 8009f3c:	0800ad18 	.word	0x0800ad18
 8009f40:	0800ad29 	.word	0x0800ad29

08009f44 <__d2b>:
 8009f44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f48:	460f      	mov	r7, r1
 8009f4a:	2101      	movs	r1, #1
 8009f4c:	ec59 8b10 	vmov	r8, r9, d0
 8009f50:	4616      	mov	r6, r2
 8009f52:	f7ff fccd 	bl	80098f0 <_Balloc>
 8009f56:	4604      	mov	r4, r0
 8009f58:	b930      	cbnz	r0, 8009f68 <__d2b+0x24>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	4b23      	ldr	r3, [pc, #140]	@ (8009fec <__d2b+0xa8>)
 8009f5e:	4824      	ldr	r0, [pc, #144]	@ (8009ff0 <__d2b+0xac>)
 8009f60:	f240 310f 	movw	r1, #783	@ 0x30f
 8009f64:	f000 fa74 	bl	800a450 <__assert_func>
 8009f68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f70:	b10d      	cbz	r5, 8009f76 <__d2b+0x32>
 8009f72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f76:	9301      	str	r3, [sp, #4]
 8009f78:	f1b8 0300 	subs.w	r3, r8, #0
 8009f7c:	d023      	beq.n	8009fc6 <__d2b+0x82>
 8009f7e:	4668      	mov	r0, sp
 8009f80:	9300      	str	r3, [sp, #0]
 8009f82:	f7ff fd7c 	bl	8009a7e <__lo0bits>
 8009f86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009f8a:	b1d0      	cbz	r0, 8009fc2 <__d2b+0x7e>
 8009f8c:	f1c0 0320 	rsb	r3, r0, #32
 8009f90:	fa02 f303 	lsl.w	r3, r2, r3
 8009f94:	430b      	orrs	r3, r1
 8009f96:	40c2      	lsrs	r2, r0
 8009f98:	6163      	str	r3, [r4, #20]
 8009f9a:	9201      	str	r2, [sp, #4]
 8009f9c:	9b01      	ldr	r3, [sp, #4]
 8009f9e:	61a3      	str	r3, [r4, #24]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	bf0c      	ite	eq
 8009fa4:	2201      	moveq	r2, #1
 8009fa6:	2202      	movne	r2, #2
 8009fa8:	6122      	str	r2, [r4, #16]
 8009faa:	b1a5      	cbz	r5, 8009fd6 <__d2b+0x92>
 8009fac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009fb0:	4405      	add	r5, r0
 8009fb2:	603d      	str	r5, [r7, #0]
 8009fb4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009fb8:	6030      	str	r0, [r6, #0]
 8009fba:	4620      	mov	r0, r4
 8009fbc:	b003      	add	sp, #12
 8009fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fc2:	6161      	str	r1, [r4, #20]
 8009fc4:	e7ea      	b.n	8009f9c <__d2b+0x58>
 8009fc6:	a801      	add	r0, sp, #4
 8009fc8:	f7ff fd59 	bl	8009a7e <__lo0bits>
 8009fcc:	9b01      	ldr	r3, [sp, #4]
 8009fce:	6163      	str	r3, [r4, #20]
 8009fd0:	3020      	adds	r0, #32
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	e7e8      	b.n	8009fa8 <__d2b+0x64>
 8009fd6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009fda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009fde:	6038      	str	r0, [r7, #0]
 8009fe0:	6918      	ldr	r0, [r3, #16]
 8009fe2:	f7ff fd2d 	bl	8009a40 <__hi0bits>
 8009fe6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009fea:	e7e5      	b.n	8009fb8 <__d2b+0x74>
 8009fec:	0800ad18 	.word	0x0800ad18
 8009ff0:	0800ad29 	.word	0x0800ad29

08009ff4 <__ssputs_r>:
 8009ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff8:	688e      	ldr	r6, [r1, #8]
 8009ffa:	461f      	mov	r7, r3
 8009ffc:	42be      	cmp	r6, r7
 8009ffe:	680b      	ldr	r3, [r1, #0]
 800a000:	4682      	mov	sl, r0
 800a002:	460c      	mov	r4, r1
 800a004:	4690      	mov	r8, r2
 800a006:	d82d      	bhi.n	800a064 <__ssputs_r+0x70>
 800a008:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a00c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a010:	d026      	beq.n	800a060 <__ssputs_r+0x6c>
 800a012:	6965      	ldr	r5, [r4, #20]
 800a014:	6909      	ldr	r1, [r1, #16]
 800a016:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a01a:	eba3 0901 	sub.w	r9, r3, r1
 800a01e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a022:	1c7b      	adds	r3, r7, #1
 800a024:	444b      	add	r3, r9
 800a026:	106d      	asrs	r5, r5, #1
 800a028:	429d      	cmp	r5, r3
 800a02a:	bf38      	it	cc
 800a02c:	461d      	movcc	r5, r3
 800a02e:	0553      	lsls	r3, r2, #21
 800a030:	d527      	bpl.n	800a082 <__ssputs_r+0x8e>
 800a032:	4629      	mov	r1, r5
 800a034:	f7ff fbd0 	bl	80097d8 <_malloc_r>
 800a038:	4606      	mov	r6, r0
 800a03a:	b360      	cbz	r0, 800a096 <__ssputs_r+0xa2>
 800a03c:	6921      	ldr	r1, [r4, #16]
 800a03e:	464a      	mov	r2, r9
 800a040:	f7fe fcf9 	bl	8008a36 <memcpy>
 800a044:	89a3      	ldrh	r3, [r4, #12]
 800a046:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a04a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a04e:	81a3      	strh	r3, [r4, #12]
 800a050:	6126      	str	r6, [r4, #16]
 800a052:	6165      	str	r5, [r4, #20]
 800a054:	444e      	add	r6, r9
 800a056:	eba5 0509 	sub.w	r5, r5, r9
 800a05a:	6026      	str	r6, [r4, #0]
 800a05c:	60a5      	str	r5, [r4, #8]
 800a05e:	463e      	mov	r6, r7
 800a060:	42be      	cmp	r6, r7
 800a062:	d900      	bls.n	800a066 <__ssputs_r+0x72>
 800a064:	463e      	mov	r6, r7
 800a066:	6820      	ldr	r0, [r4, #0]
 800a068:	4632      	mov	r2, r6
 800a06a:	4641      	mov	r1, r8
 800a06c:	f000 f9c6 	bl	800a3fc <memmove>
 800a070:	68a3      	ldr	r3, [r4, #8]
 800a072:	1b9b      	subs	r3, r3, r6
 800a074:	60a3      	str	r3, [r4, #8]
 800a076:	6823      	ldr	r3, [r4, #0]
 800a078:	4433      	add	r3, r6
 800a07a:	6023      	str	r3, [r4, #0]
 800a07c:	2000      	movs	r0, #0
 800a07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a082:	462a      	mov	r2, r5
 800a084:	f000 fa28 	bl	800a4d8 <_realloc_r>
 800a088:	4606      	mov	r6, r0
 800a08a:	2800      	cmp	r0, #0
 800a08c:	d1e0      	bne.n	800a050 <__ssputs_r+0x5c>
 800a08e:	6921      	ldr	r1, [r4, #16]
 800a090:	4650      	mov	r0, sl
 800a092:	f7ff fb2d 	bl	80096f0 <_free_r>
 800a096:	230c      	movs	r3, #12
 800a098:	f8ca 3000 	str.w	r3, [sl]
 800a09c:	89a3      	ldrh	r3, [r4, #12]
 800a09e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0a2:	81a3      	strh	r3, [r4, #12]
 800a0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a8:	e7e9      	b.n	800a07e <__ssputs_r+0x8a>
	...

0800a0ac <_svfiprintf_r>:
 800a0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b0:	4698      	mov	r8, r3
 800a0b2:	898b      	ldrh	r3, [r1, #12]
 800a0b4:	061b      	lsls	r3, r3, #24
 800a0b6:	b09d      	sub	sp, #116	@ 0x74
 800a0b8:	4607      	mov	r7, r0
 800a0ba:	460d      	mov	r5, r1
 800a0bc:	4614      	mov	r4, r2
 800a0be:	d510      	bpl.n	800a0e2 <_svfiprintf_r+0x36>
 800a0c0:	690b      	ldr	r3, [r1, #16]
 800a0c2:	b973      	cbnz	r3, 800a0e2 <_svfiprintf_r+0x36>
 800a0c4:	2140      	movs	r1, #64	@ 0x40
 800a0c6:	f7ff fb87 	bl	80097d8 <_malloc_r>
 800a0ca:	6028      	str	r0, [r5, #0]
 800a0cc:	6128      	str	r0, [r5, #16]
 800a0ce:	b930      	cbnz	r0, 800a0de <_svfiprintf_r+0x32>
 800a0d0:	230c      	movs	r3, #12
 800a0d2:	603b      	str	r3, [r7, #0]
 800a0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d8:	b01d      	add	sp, #116	@ 0x74
 800a0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0de:	2340      	movs	r3, #64	@ 0x40
 800a0e0:	616b      	str	r3, [r5, #20]
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0e6:	2320      	movs	r3, #32
 800a0e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a0ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0f0:	2330      	movs	r3, #48	@ 0x30
 800a0f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a290 <_svfiprintf_r+0x1e4>
 800a0f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a0fa:	f04f 0901 	mov.w	r9, #1
 800a0fe:	4623      	mov	r3, r4
 800a100:	469a      	mov	sl, r3
 800a102:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a106:	b10a      	cbz	r2, 800a10c <_svfiprintf_r+0x60>
 800a108:	2a25      	cmp	r2, #37	@ 0x25
 800a10a:	d1f9      	bne.n	800a100 <_svfiprintf_r+0x54>
 800a10c:	ebba 0b04 	subs.w	fp, sl, r4
 800a110:	d00b      	beq.n	800a12a <_svfiprintf_r+0x7e>
 800a112:	465b      	mov	r3, fp
 800a114:	4622      	mov	r2, r4
 800a116:	4629      	mov	r1, r5
 800a118:	4638      	mov	r0, r7
 800a11a:	f7ff ff6b 	bl	8009ff4 <__ssputs_r>
 800a11e:	3001      	adds	r0, #1
 800a120:	f000 80a7 	beq.w	800a272 <_svfiprintf_r+0x1c6>
 800a124:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a126:	445a      	add	r2, fp
 800a128:	9209      	str	r2, [sp, #36]	@ 0x24
 800a12a:	f89a 3000 	ldrb.w	r3, [sl]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	f000 809f 	beq.w	800a272 <_svfiprintf_r+0x1c6>
 800a134:	2300      	movs	r3, #0
 800a136:	f04f 32ff 	mov.w	r2, #4294967295
 800a13a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a13e:	f10a 0a01 	add.w	sl, sl, #1
 800a142:	9304      	str	r3, [sp, #16]
 800a144:	9307      	str	r3, [sp, #28]
 800a146:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a14a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a14c:	4654      	mov	r4, sl
 800a14e:	2205      	movs	r2, #5
 800a150:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a154:	484e      	ldr	r0, [pc, #312]	@ (800a290 <_svfiprintf_r+0x1e4>)
 800a156:	f7f6 f863 	bl	8000220 <memchr>
 800a15a:	9a04      	ldr	r2, [sp, #16]
 800a15c:	b9d8      	cbnz	r0, 800a196 <_svfiprintf_r+0xea>
 800a15e:	06d0      	lsls	r0, r2, #27
 800a160:	bf44      	itt	mi
 800a162:	2320      	movmi	r3, #32
 800a164:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a168:	0711      	lsls	r1, r2, #28
 800a16a:	bf44      	itt	mi
 800a16c:	232b      	movmi	r3, #43	@ 0x2b
 800a16e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a172:	f89a 3000 	ldrb.w	r3, [sl]
 800a176:	2b2a      	cmp	r3, #42	@ 0x2a
 800a178:	d015      	beq.n	800a1a6 <_svfiprintf_r+0xfa>
 800a17a:	9a07      	ldr	r2, [sp, #28]
 800a17c:	4654      	mov	r4, sl
 800a17e:	2000      	movs	r0, #0
 800a180:	f04f 0c0a 	mov.w	ip, #10
 800a184:	4621      	mov	r1, r4
 800a186:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a18a:	3b30      	subs	r3, #48	@ 0x30
 800a18c:	2b09      	cmp	r3, #9
 800a18e:	d94b      	bls.n	800a228 <_svfiprintf_r+0x17c>
 800a190:	b1b0      	cbz	r0, 800a1c0 <_svfiprintf_r+0x114>
 800a192:	9207      	str	r2, [sp, #28]
 800a194:	e014      	b.n	800a1c0 <_svfiprintf_r+0x114>
 800a196:	eba0 0308 	sub.w	r3, r0, r8
 800a19a:	fa09 f303 	lsl.w	r3, r9, r3
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	9304      	str	r3, [sp, #16]
 800a1a2:	46a2      	mov	sl, r4
 800a1a4:	e7d2      	b.n	800a14c <_svfiprintf_r+0xa0>
 800a1a6:	9b03      	ldr	r3, [sp, #12]
 800a1a8:	1d19      	adds	r1, r3, #4
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	9103      	str	r1, [sp, #12]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	bfbb      	ittet	lt
 800a1b2:	425b      	neglt	r3, r3
 800a1b4:	f042 0202 	orrlt.w	r2, r2, #2
 800a1b8:	9307      	strge	r3, [sp, #28]
 800a1ba:	9307      	strlt	r3, [sp, #28]
 800a1bc:	bfb8      	it	lt
 800a1be:	9204      	strlt	r2, [sp, #16]
 800a1c0:	7823      	ldrb	r3, [r4, #0]
 800a1c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1c4:	d10a      	bne.n	800a1dc <_svfiprintf_r+0x130>
 800a1c6:	7863      	ldrb	r3, [r4, #1]
 800a1c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1ca:	d132      	bne.n	800a232 <_svfiprintf_r+0x186>
 800a1cc:	9b03      	ldr	r3, [sp, #12]
 800a1ce:	1d1a      	adds	r2, r3, #4
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	9203      	str	r2, [sp, #12]
 800a1d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a1d8:	3402      	adds	r4, #2
 800a1da:	9305      	str	r3, [sp, #20]
 800a1dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a2a0 <_svfiprintf_r+0x1f4>
 800a1e0:	7821      	ldrb	r1, [r4, #0]
 800a1e2:	2203      	movs	r2, #3
 800a1e4:	4650      	mov	r0, sl
 800a1e6:	f7f6 f81b 	bl	8000220 <memchr>
 800a1ea:	b138      	cbz	r0, 800a1fc <_svfiprintf_r+0x150>
 800a1ec:	9b04      	ldr	r3, [sp, #16]
 800a1ee:	eba0 000a 	sub.w	r0, r0, sl
 800a1f2:	2240      	movs	r2, #64	@ 0x40
 800a1f4:	4082      	lsls	r2, r0
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	3401      	adds	r4, #1
 800a1fa:	9304      	str	r3, [sp, #16]
 800a1fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a200:	4824      	ldr	r0, [pc, #144]	@ (800a294 <_svfiprintf_r+0x1e8>)
 800a202:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a206:	2206      	movs	r2, #6
 800a208:	f7f6 f80a 	bl	8000220 <memchr>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	d036      	beq.n	800a27e <_svfiprintf_r+0x1d2>
 800a210:	4b21      	ldr	r3, [pc, #132]	@ (800a298 <_svfiprintf_r+0x1ec>)
 800a212:	bb1b      	cbnz	r3, 800a25c <_svfiprintf_r+0x1b0>
 800a214:	9b03      	ldr	r3, [sp, #12]
 800a216:	3307      	adds	r3, #7
 800a218:	f023 0307 	bic.w	r3, r3, #7
 800a21c:	3308      	adds	r3, #8
 800a21e:	9303      	str	r3, [sp, #12]
 800a220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a222:	4433      	add	r3, r6
 800a224:	9309      	str	r3, [sp, #36]	@ 0x24
 800a226:	e76a      	b.n	800a0fe <_svfiprintf_r+0x52>
 800a228:	fb0c 3202 	mla	r2, ip, r2, r3
 800a22c:	460c      	mov	r4, r1
 800a22e:	2001      	movs	r0, #1
 800a230:	e7a8      	b.n	800a184 <_svfiprintf_r+0xd8>
 800a232:	2300      	movs	r3, #0
 800a234:	3401      	adds	r4, #1
 800a236:	9305      	str	r3, [sp, #20]
 800a238:	4619      	mov	r1, r3
 800a23a:	f04f 0c0a 	mov.w	ip, #10
 800a23e:	4620      	mov	r0, r4
 800a240:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a244:	3a30      	subs	r2, #48	@ 0x30
 800a246:	2a09      	cmp	r2, #9
 800a248:	d903      	bls.n	800a252 <_svfiprintf_r+0x1a6>
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d0c6      	beq.n	800a1dc <_svfiprintf_r+0x130>
 800a24e:	9105      	str	r1, [sp, #20]
 800a250:	e7c4      	b.n	800a1dc <_svfiprintf_r+0x130>
 800a252:	fb0c 2101 	mla	r1, ip, r1, r2
 800a256:	4604      	mov	r4, r0
 800a258:	2301      	movs	r3, #1
 800a25a:	e7f0      	b.n	800a23e <_svfiprintf_r+0x192>
 800a25c:	ab03      	add	r3, sp, #12
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	462a      	mov	r2, r5
 800a262:	4b0e      	ldr	r3, [pc, #56]	@ (800a29c <_svfiprintf_r+0x1f0>)
 800a264:	a904      	add	r1, sp, #16
 800a266:	4638      	mov	r0, r7
 800a268:	f7fd fe88 	bl	8007f7c <_printf_float>
 800a26c:	1c42      	adds	r2, r0, #1
 800a26e:	4606      	mov	r6, r0
 800a270:	d1d6      	bne.n	800a220 <_svfiprintf_r+0x174>
 800a272:	89ab      	ldrh	r3, [r5, #12]
 800a274:	065b      	lsls	r3, r3, #25
 800a276:	f53f af2d 	bmi.w	800a0d4 <_svfiprintf_r+0x28>
 800a27a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a27c:	e72c      	b.n	800a0d8 <_svfiprintf_r+0x2c>
 800a27e:	ab03      	add	r3, sp, #12
 800a280:	9300      	str	r3, [sp, #0]
 800a282:	462a      	mov	r2, r5
 800a284:	4b05      	ldr	r3, [pc, #20]	@ (800a29c <_svfiprintf_r+0x1f0>)
 800a286:	a904      	add	r1, sp, #16
 800a288:	4638      	mov	r0, r7
 800a28a:	f7fe f90f 	bl	80084ac <_printf_i>
 800a28e:	e7ed      	b.n	800a26c <_svfiprintf_r+0x1c0>
 800a290:	0800ae80 	.word	0x0800ae80
 800a294:	0800ae8a 	.word	0x0800ae8a
 800a298:	08007f7d 	.word	0x08007f7d
 800a29c:	08009ff5 	.word	0x08009ff5
 800a2a0:	0800ae86 	.word	0x0800ae86

0800a2a4 <__sflush_r>:
 800a2a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ac:	0716      	lsls	r6, r2, #28
 800a2ae:	4605      	mov	r5, r0
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	d454      	bmi.n	800a35e <__sflush_r+0xba>
 800a2b4:	684b      	ldr	r3, [r1, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	dc02      	bgt.n	800a2c0 <__sflush_r+0x1c>
 800a2ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	dd48      	ble.n	800a352 <__sflush_r+0xae>
 800a2c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a2c2:	2e00      	cmp	r6, #0
 800a2c4:	d045      	beq.n	800a352 <__sflush_r+0xae>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a2cc:	682f      	ldr	r7, [r5, #0]
 800a2ce:	6a21      	ldr	r1, [r4, #32]
 800a2d0:	602b      	str	r3, [r5, #0]
 800a2d2:	d030      	beq.n	800a336 <__sflush_r+0x92>
 800a2d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a2d6:	89a3      	ldrh	r3, [r4, #12]
 800a2d8:	0759      	lsls	r1, r3, #29
 800a2da:	d505      	bpl.n	800a2e8 <__sflush_r+0x44>
 800a2dc:	6863      	ldr	r3, [r4, #4]
 800a2de:	1ad2      	subs	r2, r2, r3
 800a2e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a2e2:	b10b      	cbz	r3, 800a2e8 <__sflush_r+0x44>
 800a2e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a2e6:	1ad2      	subs	r2, r2, r3
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a2ec:	6a21      	ldr	r1, [r4, #32]
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	47b0      	blx	r6
 800a2f2:	1c43      	adds	r3, r0, #1
 800a2f4:	89a3      	ldrh	r3, [r4, #12]
 800a2f6:	d106      	bne.n	800a306 <__sflush_r+0x62>
 800a2f8:	6829      	ldr	r1, [r5, #0]
 800a2fa:	291d      	cmp	r1, #29
 800a2fc:	d82b      	bhi.n	800a356 <__sflush_r+0xb2>
 800a2fe:	4a2a      	ldr	r2, [pc, #168]	@ (800a3a8 <__sflush_r+0x104>)
 800a300:	410a      	asrs	r2, r1
 800a302:	07d6      	lsls	r6, r2, #31
 800a304:	d427      	bmi.n	800a356 <__sflush_r+0xb2>
 800a306:	2200      	movs	r2, #0
 800a308:	6062      	str	r2, [r4, #4]
 800a30a:	04d9      	lsls	r1, r3, #19
 800a30c:	6922      	ldr	r2, [r4, #16]
 800a30e:	6022      	str	r2, [r4, #0]
 800a310:	d504      	bpl.n	800a31c <__sflush_r+0x78>
 800a312:	1c42      	adds	r2, r0, #1
 800a314:	d101      	bne.n	800a31a <__sflush_r+0x76>
 800a316:	682b      	ldr	r3, [r5, #0]
 800a318:	b903      	cbnz	r3, 800a31c <__sflush_r+0x78>
 800a31a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a31c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a31e:	602f      	str	r7, [r5, #0]
 800a320:	b1b9      	cbz	r1, 800a352 <__sflush_r+0xae>
 800a322:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a326:	4299      	cmp	r1, r3
 800a328:	d002      	beq.n	800a330 <__sflush_r+0x8c>
 800a32a:	4628      	mov	r0, r5
 800a32c:	f7ff f9e0 	bl	80096f0 <_free_r>
 800a330:	2300      	movs	r3, #0
 800a332:	6363      	str	r3, [r4, #52]	@ 0x34
 800a334:	e00d      	b.n	800a352 <__sflush_r+0xae>
 800a336:	2301      	movs	r3, #1
 800a338:	4628      	mov	r0, r5
 800a33a:	47b0      	blx	r6
 800a33c:	4602      	mov	r2, r0
 800a33e:	1c50      	adds	r0, r2, #1
 800a340:	d1c9      	bne.n	800a2d6 <__sflush_r+0x32>
 800a342:	682b      	ldr	r3, [r5, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d0c6      	beq.n	800a2d6 <__sflush_r+0x32>
 800a348:	2b1d      	cmp	r3, #29
 800a34a:	d001      	beq.n	800a350 <__sflush_r+0xac>
 800a34c:	2b16      	cmp	r3, #22
 800a34e:	d11e      	bne.n	800a38e <__sflush_r+0xea>
 800a350:	602f      	str	r7, [r5, #0]
 800a352:	2000      	movs	r0, #0
 800a354:	e022      	b.n	800a39c <__sflush_r+0xf8>
 800a356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a35a:	b21b      	sxth	r3, r3
 800a35c:	e01b      	b.n	800a396 <__sflush_r+0xf2>
 800a35e:	690f      	ldr	r7, [r1, #16]
 800a360:	2f00      	cmp	r7, #0
 800a362:	d0f6      	beq.n	800a352 <__sflush_r+0xae>
 800a364:	0793      	lsls	r3, r2, #30
 800a366:	680e      	ldr	r6, [r1, #0]
 800a368:	bf08      	it	eq
 800a36a:	694b      	ldreq	r3, [r1, #20]
 800a36c:	600f      	str	r7, [r1, #0]
 800a36e:	bf18      	it	ne
 800a370:	2300      	movne	r3, #0
 800a372:	eba6 0807 	sub.w	r8, r6, r7
 800a376:	608b      	str	r3, [r1, #8]
 800a378:	f1b8 0f00 	cmp.w	r8, #0
 800a37c:	dde9      	ble.n	800a352 <__sflush_r+0xae>
 800a37e:	6a21      	ldr	r1, [r4, #32]
 800a380:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a382:	4643      	mov	r3, r8
 800a384:	463a      	mov	r2, r7
 800a386:	4628      	mov	r0, r5
 800a388:	47b0      	blx	r6
 800a38a:	2800      	cmp	r0, #0
 800a38c:	dc08      	bgt.n	800a3a0 <__sflush_r+0xfc>
 800a38e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a396:	81a3      	strh	r3, [r4, #12]
 800a398:	f04f 30ff 	mov.w	r0, #4294967295
 800a39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3a0:	4407      	add	r7, r0
 800a3a2:	eba8 0800 	sub.w	r8, r8, r0
 800a3a6:	e7e7      	b.n	800a378 <__sflush_r+0xd4>
 800a3a8:	dfbffffe 	.word	0xdfbffffe

0800a3ac <_fflush_r>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	690b      	ldr	r3, [r1, #16]
 800a3b0:	4605      	mov	r5, r0
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	b913      	cbnz	r3, 800a3bc <_fflush_r+0x10>
 800a3b6:	2500      	movs	r5, #0
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	bd38      	pop	{r3, r4, r5, pc}
 800a3bc:	b118      	cbz	r0, 800a3c6 <_fflush_r+0x1a>
 800a3be:	6a03      	ldr	r3, [r0, #32]
 800a3c0:	b90b      	cbnz	r3, 800a3c6 <_fflush_r+0x1a>
 800a3c2:	f7fe fa1f 	bl	8008804 <__sinit>
 800a3c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d0f3      	beq.n	800a3b6 <_fflush_r+0xa>
 800a3ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a3d0:	07d0      	lsls	r0, r2, #31
 800a3d2:	d404      	bmi.n	800a3de <_fflush_r+0x32>
 800a3d4:	0599      	lsls	r1, r3, #22
 800a3d6:	d402      	bmi.n	800a3de <_fflush_r+0x32>
 800a3d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3da:	f7fe fb2a 	bl	8008a32 <__retarget_lock_acquire_recursive>
 800a3de:	4628      	mov	r0, r5
 800a3e0:	4621      	mov	r1, r4
 800a3e2:	f7ff ff5f 	bl	800a2a4 <__sflush_r>
 800a3e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3e8:	07da      	lsls	r2, r3, #31
 800a3ea:	4605      	mov	r5, r0
 800a3ec:	d4e4      	bmi.n	800a3b8 <_fflush_r+0xc>
 800a3ee:	89a3      	ldrh	r3, [r4, #12]
 800a3f0:	059b      	lsls	r3, r3, #22
 800a3f2:	d4e1      	bmi.n	800a3b8 <_fflush_r+0xc>
 800a3f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3f6:	f7fe fb1d 	bl	8008a34 <__retarget_lock_release_recursive>
 800a3fa:	e7dd      	b.n	800a3b8 <_fflush_r+0xc>

0800a3fc <memmove>:
 800a3fc:	4288      	cmp	r0, r1
 800a3fe:	b510      	push	{r4, lr}
 800a400:	eb01 0402 	add.w	r4, r1, r2
 800a404:	d902      	bls.n	800a40c <memmove+0x10>
 800a406:	4284      	cmp	r4, r0
 800a408:	4623      	mov	r3, r4
 800a40a:	d807      	bhi.n	800a41c <memmove+0x20>
 800a40c:	1e43      	subs	r3, r0, #1
 800a40e:	42a1      	cmp	r1, r4
 800a410:	d008      	beq.n	800a424 <memmove+0x28>
 800a412:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a416:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a41a:	e7f8      	b.n	800a40e <memmove+0x12>
 800a41c:	4402      	add	r2, r0
 800a41e:	4601      	mov	r1, r0
 800a420:	428a      	cmp	r2, r1
 800a422:	d100      	bne.n	800a426 <memmove+0x2a>
 800a424:	bd10      	pop	{r4, pc}
 800a426:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a42a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a42e:	e7f7      	b.n	800a420 <memmove+0x24>

0800a430 <_sbrk_r>:
 800a430:	b538      	push	{r3, r4, r5, lr}
 800a432:	4d06      	ldr	r5, [pc, #24]	@ (800a44c <_sbrk_r+0x1c>)
 800a434:	2300      	movs	r3, #0
 800a436:	4604      	mov	r4, r0
 800a438:	4608      	mov	r0, r1
 800a43a:	602b      	str	r3, [r5, #0]
 800a43c:	f7f8 f928 	bl	8002690 <_sbrk>
 800a440:	1c43      	adds	r3, r0, #1
 800a442:	d102      	bne.n	800a44a <_sbrk_r+0x1a>
 800a444:	682b      	ldr	r3, [r5, #0]
 800a446:	b103      	cbz	r3, 800a44a <_sbrk_r+0x1a>
 800a448:	6023      	str	r3, [r4, #0]
 800a44a:	bd38      	pop	{r3, r4, r5, pc}
 800a44c:	20000570 	.word	0x20000570

0800a450 <__assert_func>:
 800a450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a452:	4614      	mov	r4, r2
 800a454:	461a      	mov	r2, r3
 800a456:	4b09      	ldr	r3, [pc, #36]	@ (800a47c <__assert_func+0x2c>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4605      	mov	r5, r0
 800a45c:	68d8      	ldr	r0, [r3, #12]
 800a45e:	b954      	cbnz	r4, 800a476 <__assert_func+0x26>
 800a460:	4b07      	ldr	r3, [pc, #28]	@ (800a480 <__assert_func+0x30>)
 800a462:	461c      	mov	r4, r3
 800a464:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a468:	9100      	str	r1, [sp, #0]
 800a46a:	462b      	mov	r3, r5
 800a46c:	4905      	ldr	r1, [pc, #20]	@ (800a484 <__assert_func+0x34>)
 800a46e:	f000 f86f 	bl	800a550 <fiprintf>
 800a472:	f000 f87f 	bl	800a574 <abort>
 800a476:	4b04      	ldr	r3, [pc, #16]	@ (800a488 <__assert_func+0x38>)
 800a478:	e7f4      	b.n	800a464 <__assert_func+0x14>
 800a47a:	bf00      	nop
 800a47c:	2000001c 	.word	0x2000001c
 800a480:	0800aed6 	.word	0x0800aed6
 800a484:	0800aea8 	.word	0x0800aea8
 800a488:	0800ae9b 	.word	0x0800ae9b

0800a48c <_calloc_r>:
 800a48c:	b570      	push	{r4, r5, r6, lr}
 800a48e:	fba1 5402 	umull	r5, r4, r1, r2
 800a492:	b93c      	cbnz	r4, 800a4a4 <_calloc_r+0x18>
 800a494:	4629      	mov	r1, r5
 800a496:	f7ff f99f 	bl	80097d8 <_malloc_r>
 800a49a:	4606      	mov	r6, r0
 800a49c:	b928      	cbnz	r0, 800a4aa <_calloc_r+0x1e>
 800a49e:	2600      	movs	r6, #0
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	bd70      	pop	{r4, r5, r6, pc}
 800a4a4:	220c      	movs	r2, #12
 800a4a6:	6002      	str	r2, [r0, #0]
 800a4a8:	e7f9      	b.n	800a49e <_calloc_r+0x12>
 800a4aa:	462a      	mov	r2, r5
 800a4ac:	4621      	mov	r1, r4
 800a4ae:	f7fe fa42 	bl	8008936 <memset>
 800a4b2:	e7f5      	b.n	800a4a0 <_calloc_r+0x14>

0800a4b4 <__ascii_mbtowc>:
 800a4b4:	b082      	sub	sp, #8
 800a4b6:	b901      	cbnz	r1, 800a4ba <__ascii_mbtowc+0x6>
 800a4b8:	a901      	add	r1, sp, #4
 800a4ba:	b142      	cbz	r2, 800a4ce <__ascii_mbtowc+0x1a>
 800a4bc:	b14b      	cbz	r3, 800a4d2 <__ascii_mbtowc+0x1e>
 800a4be:	7813      	ldrb	r3, [r2, #0]
 800a4c0:	600b      	str	r3, [r1, #0]
 800a4c2:	7812      	ldrb	r2, [r2, #0]
 800a4c4:	1e10      	subs	r0, r2, #0
 800a4c6:	bf18      	it	ne
 800a4c8:	2001      	movne	r0, #1
 800a4ca:	b002      	add	sp, #8
 800a4cc:	4770      	bx	lr
 800a4ce:	4610      	mov	r0, r2
 800a4d0:	e7fb      	b.n	800a4ca <__ascii_mbtowc+0x16>
 800a4d2:	f06f 0001 	mvn.w	r0, #1
 800a4d6:	e7f8      	b.n	800a4ca <__ascii_mbtowc+0x16>

0800a4d8 <_realloc_r>:
 800a4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4dc:	4680      	mov	r8, r0
 800a4de:	4615      	mov	r5, r2
 800a4e0:	460c      	mov	r4, r1
 800a4e2:	b921      	cbnz	r1, 800a4ee <_realloc_r+0x16>
 800a4e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e8:	4611      	mov	r1, r2
 800a4ea:	f7ff b975 	b.w	80097d8 <_malloc_r>
 800a4ee:	b92a      	cbnz	r2, 800a4fc <_realloc_r+0x24>
 800a4f0:	f7ff f8fe 	bl	80096f0 <_free_r>
 800a4f4:	2400      	movs	r4, #0
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4fc:	f000 f841 	bl	800a582 <_malloc_usable_size_r>
 800a500:	4285      	cmp	r5, r0
 800a502:	4606      	mov	r6, r0
 800a504:	d802      	bhi.n	800a50c <_realloc_r+0x34>
 800a506:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a50a:	d8f4      	bhi.n	800a4f6 <_realloc_r+0x1e>
 800a50c:	4629      	mov	r1, r5
 800a50e:	4640      	mov	r0, r8
 800a510:	f7ff f962 	bl	80097d8 <_malloc_r>
 800a514:	4607      	mov	r7, r0
 800a516:	2800      	cmp	r0, #0
 800a518:	d0ec      	beq.n	800a4f4 <_realloc_r+0x1c>
 800a51a:	42b5      	cmp	r5, r6
 800a51c:	462a      	mov	r2, r5
 800a51e:	4621      	mov	r1, r4
 800a520:	bf28      	it	cs
 800a522:	4632      	movcs	r2, r6
 800a524:	f7fe fa87 	bl	8008a36 <memcpy>
 800a528:	4621      	mov	r1, r4
 800a52a:	4640      	mov	r0, r8
 800a52c:	f7ff f8e0 	bl	80096f0 <_free_r>
 800a530:	463c      	mov	r4, r7
 800a532:	e7e0      	b.n	800a4f6 <_realloc_r+0x1e>

0800a534 <__ascii_wctomb>:
 800a534:	4603      	mov	r3, r0
 800a536:	4608      	mov	r0, r1
 800a538:	b141      	cbz	r1, 800a54c <__ascii_wctomb+0x18>
 800a53a:	2aff      	cmp	r2, #255	@ 0xff
 800a53c:	d904      	bls.n	800a548 <__ascii_wctomb+0x14>
 800a53e:	228a      	movs	r2, #138	@ 0x8a
 800a540:	601a      	str	r2, [r3, #0]
 800a542:	f04f 30ff 	mov.w	r0, #4294967295
 800a546:	4770      	bx	lr
 800a548:	700a      	strb	r2, [r1, #0]
 800a54a:	2001      	movs	r0, #1
 800a54c:	4770      	bx	lr
	...

0800a550 <fiprintf>:
 800a550:	b40e      	push	{r1, r2, r3}
 800a552:	b503      	push	{r0, r1, lr}
 800a554:	4601      	mov	r1, r0
 800a556:	ab03      	add	r3, sp, #12
 800a558:	4805      	ldr	r0, [pc, #20]	@ (800a570 <fiprintf+0x20>)
 800a55a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a55e:	6800      	ldr	r0, [r0, #0]
 800a560:	9301      	str	r3, [sp, #4]
 800a562:	f000 f83f 	bl	800a5e4 <_vfiprintf_r>
 800a566:	b002      	add	sp, #8
 800a568:	f85d eb04 	ldr.w	lr, [sp], #4
 800a56c:	b003      	add	sp, #12
 800a56e:	4770      	bx	lr
 800a570:	2000001c 	.word	0x2000001c

0800a574 <abort>:
 800a574:	b508      	push	{r3, lr}
 800a576:	2006      	movs	r0, #6
 800a578:	f000 fa08 	bl	800a98c <raise>
 800a57c:	2001      	movs	r0, #1
 800a57e:	f7f8 f80e 	bl	800259e <_exit>

0800a582 <_malloc_usable_size_r>:
 800a582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a586:	1f18      	subs	r0, r3, #4
 800a588:	2b00      	cmp	r3, #0
 800a58a:	bfbc      	itt	lt
 800a58c:	580b      	ldrlt	r3, [r1, r0]
 800a58e:	18c0      	addlt	r0, r0, r3
 800a590:	4770      	bx	lr

0800a592 <__sfputc_r>:
 800a592:	6893      	ldr	r3, [r2, #8]
 800a594:	3b01      	subs	r3, #1
 800a596:	2b00      	cmp	r3, #0
 800a598:	b410      	push	{r4}
 800a59a:	6093      	str	r3, [r2, #8]
 800a59c:	da08      	bge.n	800a5b0 <__sfputc_r+0x1e>
 800a59e:	6994      	ldr	r4, [r2, #24]
 800a5a0:	42a3      	cmp	r3, r4
 800a5a2:	db01      	blt.n	800a5a8 <__sfputc_r+0x16>
 800a5a4:	290a      	cmp	r1, #10
 800a5a6:	d103      	bne.n	800a5b0 <__sfputc_r+0x1e>
 800a5a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5ac:	f000 b932 	b.w	800a814 <__swbuf_r>
 800a5b0:	6813      	ldr	r3, [r2, #0]
 800a5b2:	1c58      	adds	r0, r3, #1
 800a5b4:	6010      	str	r0, [r2, #0]
 800a5b6:	7019      	strb	r1, [r3, #0]
 800a5b8:	4608      	mov	r0, r1
 800a5ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <__sfputs_r>:
 800a5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c2:	4606      	mov	r6, r0
 800a5c4:	460f      	mov	r7, r1
 800a5c6:	4614      	mov	r4, r2
 800a5c8:	18d5      	adds	r5, r2, r3
 800a5ca:	42ac      	cmp	r4, r5
 800a5cc:	d101      	bne.n	800a5d2 <__sfputs_r+0x12>
 800a5ce:	2000      	movs	r0, #0
 800a5d0:	e007      	b.n	800a5e2 <__sfputs_r+0x22>
 800a5d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5d6:	463a      	mov	r2, r7
 800a5d8:	4630      	mov	r0, r6
 800a5da:	f7ff ffda 	bl	800a592 <__sfputc_r>
 800a5de:	1c43      	adds	r3, r0, #1
 800a5e0:	d1f3      	bne.n	800a5ca <__sfputs_r+0xa>
 800a5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a5e4 <_vfiprintf_r>:
 800a5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e8:	460d      	mov	r5, r1
 800a5ea:	b09d      	sub	sp, #116	@ 0x74
 800a5ec:	4614      	mov	r4, r2
 800a5ee:	4698      	mov	r8, r3
 800a5f0:	4606      	mov	r6, r0
 800a5f2:	b118      	cbz	r0, 800a5fc <_vfiprintf_r+0x18>
 800a5f4:	6a03      	ldr	r3, [r0, #32]
 800a5f6:	b90b      	cbnz	r3, 800a5fc <_vfiprintf_r+0x18>
 800a5f8:	f7fe f904 	bl	8008804 <__sinit>
 800a5fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5fe:	07d9      	lsls	r1, r3, #31
 800a600:	d405      	bmi.n	800a60e <_vfiprintf_r+0x2a>
 800a602:	89ab      	ldrh	r3, [r5, #12]
 800a604:	059a      	lsls	r2, r3, #22
 800a606:	d402      	bmi.n	800a60e <_vfiprintf_r+0x2a>
 800a608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a60a:	f7fe fa12 	bl	8008a32 <__retarget_lock_acquire_recursive>
 800a60e:	89ab      	ldrh	r3, [r5, #12]
 800a610:	071b      	lsls	r3, r3, #28
 800a612:	d501      	bpl.n	800a618 <_vfiprintf_r+0x34>
 800a614:	692b      	ldr	r3, [r5, #16]
 800a616:	b99b      	cbnz	r3, 800a640 <_vfiprintf_r+0x5c>
 800a618:	4629      	mov	r1, r5
 800a61a:	4630      	mov	r0, r6
 800a61c:	f000 f938 	bl	800a890 <__swsetup_r>
 800a620:	b170      	cbz	r0, 800a640 <_vfiprintf_r+0x5c>
 800a622:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a624:	07dc      	lsls	r4, r3, #31
 800a626:	d504      	bpl.n	800a632 <_vfiprintf_r+0x4e>
 800a628:	f04f 30ff 	mov.w	r0, #4294967295
 800a62c:	b01d      	add	sp, #116	@ 0x74
 800a62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a632:	89ab      	ldrh	r3, [r5, #12]
 800a634:	0598      	lsls	r0, r3, #22
 800a636:	d4f7      	bmi.n	800a628 <_vfiprintf_r+0x44>
 800a638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a63a:	f7fe f9fb 	bl	8008a34 <__retarget_lock_release_recursive>
 800a63e:	e7f3      	b.n	800a628 <_vfiprintf_r+0x44>
 800a640:	2300      	movs	r3, #0
 800a642:	9309      	str	r3, [sp, #36]	@ 0x24
 800a644:	2320      	movs	r3, #32
 800a646:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a64a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a64e:	2330      	movs	r3, #48	@ 0x30
 800a650:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a800 <_vfiprintf_r+0x21c>
 800a654:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a658:	f04f 0901 	mov.w	r9, #1
 800a65c:	4623      	mov	r3, r4
 800a65e:	469a      	mov	sl, r3
 800a660:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a664:	b10a      	cbz	r2, 800a66a <_vfiprintf_r+0x86>
 800a666:	2a25      	cmp	r2, #37	@ 0x25
 800a668:	d1f9      	bne.n	800a65e <_vfiprintf_r+0x7a>
 800a66a:	ebba 0b04 	subs.w	fp, sl, r4
 800a66e:	d00b      	beq.n	800a688 <_vfiprintf_r+0xa4>
 800a670:	465b      	mov	r3, fp
 800a672:	4622      	mov	r2, r4
 800a674:	4629      	mov	r1, r5
 800a676:	4630      	mov	r0, r6
 800a678:	f7ff ffa2 	bl	800a5c0 <__sfputs_r>
 800a67c:	3001      	adds	r0, #1
 800a67e:	f000 80a7 	beq.w	800a7d0 <_vfiprintf_r+0x1ec>
 800a682:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a684:	445a      	add	r2, fp
 800a686:	9209      	str	r2, [sp, #36]	@ 0x24
 800a688:	f89a 3000 	ldrb.w	r3, [sl]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f000 809f 	beq.w	800a7d0 <_vfiprintf_r+0x1ec>
 800a692:	2300      	movs	r3, #0
 800a694:	f04f 32ff 	mov.w	r2, #4294967295
 800a698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a69c:	f10a 0a01 	add.w	sl, sl, #1
 800a6a0:	9304      	str	r3, [sp, #16]
 800a6a2:	9307      	str	r3, [sp, #28]
 800a6a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a6a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6aa:	4654      	mov	r4, sl
 800a6ac:	2205      	movs	r2, #5
 800a6ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6b2:	4853      	ldr	r0, [pc, #332]	@ (800a800 <_vfiprintf_r+0x21c>)
 800a6b4:	f7f5 fdb4 	bl	8000220 <memchr>
 800a6b8:	9a04      	ldr	r2, [sp, #16]
 800a6ba:	b9d8      	cbnz	r0, 800a6f4 <_vfiprintf_r+0x110>
 800a6bc:	06d1      	lsls	r1, r2, #27
 800a6be:	bf44      	itt	mi
 800a6c0:	2320      	movmi	r3, #32
 800a6c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6c6:	0713      	lsls	r3, r2, #28
 800a6c8:	bf44      	itt	mi
 800a6ca:	232b      	movmi	r3, #43	@ 0x2b
 800a6cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a6d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6d6:	d015      	beq.n	800a704 <_vfiprintf_r+0x120>
 800a6d8:	9a07      	ldr	r2, [sp, #28]
 800a6da:	4654      	mov	r4, sl
 800a6dc:	2000      	movs	r0, #0
 800a6de:	f04f 0c0a 	mov.w	ip, #10
 800a6e2:	4621      	mov	r1, r4
 800a6e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6e8:	3b30      	subs	r3, #48	@ 0x30
 800a6ea:	2b09      	cmp	r3, #9
 800a6ec:	d94b      	bls.n	800a786 <_vfiprintf_r+0x1a2>
 800a6ee:	b1b0      	cbz	r0, 800a71e <_vfiprintf_r+0x13a>
 800a6f0:	9207      	str	r2, [sp, #28]
 800a6f2:	e014      	b.n	800a71e <_vfiprintf_r+0x13a>
 800a6f4:	eba0 0308 	sub.w	r3, r0, r8
 800a6f8:	fa09 f303 	lsl.w	r3, r9, r3
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	9304      	str	r3, [sp, #16]
 800a700:	46a2      	mov	sl, r4
 800a702:	e7d2      	b.n	800a6aa <_vfiprintf_r+0xc6>
 800a704:	9b03      	ldr	r3, [sp, #12]
 800a706:	1d19      	adds	r1, r3, #4
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	9103      	str	r1, [sp, #12]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	bfbb      	ittet	lt
 800a710:	425b      	neglt	r3, r3
 800a712:	f042 0202 	orrlt.w	r2, r2, #2
 800a716:	9307      	strge	r3, [sp, #28]
 800a718:	9307      	strlt	r3, [sp, #28]
 800a71a:	bfb8      	it	lt
 800a71c:	9204      	strlt	r2, [sp, #16]
 800a71e:	7823      	ldrb	r3, [r4, #0]
 800a720:	2b2e      	cmp	r3, #46	@ 0x2e
 800a722:	d10a      	bne.n	800a73a <_vfiprintf_r+0x156>
 800a724:	7863      	ldrb	r3, [r4, #1]
 800a726:	2b2a      	cmp	r3, #42	@ 0x2a
 800a728:	d132      	bne.n	800a790 <_vfiprintf_r+0x1ac>
 800a72a:	9b03      	ldr	r3, [sp, #12]
 800a72c:	1d1a      	adds	r2, r3, #4
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	9203      	str	r2, [sp, #12]
 800a732:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a736:	3402      	adds	r4, #2
 800a738:	9305      	str	r3, [sp, #20]
 800a73a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a810 <_vfiprintf_r+0x22c>
 800a73e:	7821      	ldrb	r1, [r4, #0]
 800a740:	2203      	movs	r2, #3
 800a742:	4650      	mov	r0, sl
 800a744:	f7f5 fd6c 	bl	8000220 <memchr>
 800a748:	b138      	cbz	r0, 800a75a <_vfiprintf_r+0x176>
 800a74a:	9b04      	ldr	r3, [sp, #16]
 800a74c:	eba0 000a 	sub.w	r0, r0, sl
 800a750:	2240      	movs	r2, #64	@ 0x40
 800a752:	4082      	lsls	r2, r0
 800a754:	4313      	orrs	r3, r2
 800a756:	3401      	adds	r4, #1
 800a758:	9304      	str	r3, [sp, #16]
 800a75a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a75e:	4829      	ldr	r0, [pc, #164]	@ (800a804 <_vfiprintf_r+0x220>)
 800a760:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a764:	2206      	movs	r2, #6
 800a766:	f7f5 fd5b 	bl	8000220 <memchr>
 800a76a:	2800      	cmp	r0, #0
 800a76c:	d03f      	beq.n	800a7ee <_vfiprintf_r+0x20a>
 800a76e:	4b26      	ldr	r3, [pc, #152]	@ (800a808 <_vfiprintf_r+0x224>)
 800a770:	bb1b      	cbnz	r3, 800a7ba <_vfiprintf_r+0x1d6>
 800a772:	9b03      	ldr	r3, [sp, #12]
 800a774:	3307      	adds	r3, #7
 800a776:	f023 0307 	bic.w	r3, r3, #7
 800a77a:	3308      	adds	r3, #8
 800a77c:	9303      	str	r3, [sp, #12]
 800a77e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a780:	443b      	add	r3, r7
 800a782:	9309      	str	r3, [sp, #36]	@ 0x24
 800a784:	e76a      	b.n	800a65c <_vfiprintf_r+0x78>
 800a786:	fb0c 3202 	mla	r2, ip, r2, r3
 800a78a:	460c      	mov	r4, r1
 800a78c:	2001      	movs	r0, #1
 800a78e:	e7a8      	b.n	800a6e2 <_vfiprintf_r+0xfe>
 800a790:	2300      	movs	r3, #0
 800a792:	3401      	adds	r4, #1
 800a794:	9305      	str	r3, [sp, #20]
 800a796:	4619      	mov	r1, r3
 800a798:	f04f 0c0a 	mov.w	ip, #10
 800a79c:	4620      	mov	r0, r4
 800a79e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7a2:	3a30      	subs	r2, #48	@ 0x30
 800a7a4:	2a09      	cmp	r2, #9
 800a7a6:	d903      	bls.n	800a7b0 <_vfiprintf_r+0x1cc>
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d0c6      	beq.n	800a73a <_vfiprintf_r+0x156>
 800a7ac:	9105      	str	r1, [sp, #20]
 800a7ae:	e7c4      	b.n	800a73a <_vfiprintf_r+0x156>
 800a7b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e7f0      	b.n	800a79c <_vfiprintf_r+0x1b8>
 800a7ba:	ab03      	add	r3, sp, #12
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	462a      	mov	r2, r5
 800a7c0:	4b12      	ldr	r3, [pc, #72]	@ (800a80c <_vfiprintf_r+0x228>)
 800a7c2:	a904      	add	r1, sp, #16
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	f7fd fbd9 	bl	8007f7c <_printf_float>
 800a7ca:	4607      	mov	r7, r0
 800a7cc:	1c78      	adds	r0, r7, #1
 800a7ce:	d1d6      	bne.n	800a77e <_vfiprintf_r+0x19a>
 800a7d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7d2:	07d9      	lsls	r1, r3, #31
 800a7d4:	d405      	bmi.n	800a7e2 <_vfiprintf_r+0x1fe>
 800a7d6:	89ab      	ldrh	r3, [r5, #12]
 800a7d8:	059a      	lsls	r2, r3, #22
 800a7da:	d402      	bmi.n	800a7e2 <_vfiprintf_r+0x1fe>
 800a7dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7de:	f7fe f929 	bl	8008a34 <__retarget_lock_release_recursive>
 800a7e2:	89ab      	ldrh	r3, [r5, #12]
 800a7e4:	065b      	lsls	r3, r3, #25
 800a7e6:	f53f af1f 	bmi.w	800a628 <_vfiprintf_r+0x44>
 800a7ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7ec:	e71e      	b.n	800a62c <_vfiprintf_r+0x48>
 800a7ee:	ab03      	add	r3, sp, #12
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	462a      	mov	r2, r5
 800a7f4:	4b05      	ldr	r3, [pc, #20]	@ (800a80c <_vfiprintf_r+0x228>)
 800a7f6:	a904      	add	r1, sp, #16
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	f7fd fe57 	bl	80084ac <_printf_i>
 800a7fe:	e7e4      	b.n	800a7ca <_vfiprintf_r+0x1e6>
 800a800:	0800ae80 	.word	0x0800ae80
 800a804:	0800ae8a 	.word	0x0800ae8a
 800a808:	08007f7d 	.word	0x08007f7d
 800a80c:	0800a5c1 	.word	0x0800a5c1
 800a810:	0800ae86 	.word	0x0800ae86

0800a814 <__swbuf_r>:
 800a814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a816:	460e      	mov	r6, r1
 800a818:	4614      	mov	r4, r2
 800a81a:	4605      	mov	r5, r0
 800a81c:	b118      	cbz	r0, 800a826 <__swbuf_r+0x12>
 800a81e:	6a03      	ldr	r3, [r0, #32]
 800a820:	b90b      	cbnz	r3, 800a826 <__swbuf_r+0x12>
 800a822:	f7fd ffef 	bl	8008804 <__sinit>
 800a826:	69a3      	ldr	r3, [r4, #24]
 800a828:	60a3      	str	r3, [r4, #8]
 800a82a:	89a3      	ldrh	r3, [r4, #12]
 800a82c:	071a      	lsls	r2, r3, #28
 800a82e:	d501      	bpl.n	800a834 <__swbuf_r+0x20>
 800a830:	6923      	ldr	r3, [r4, #16]
 800a832:	b943      	cbnz	r3, 800a846 <__swbuf_r+0x32>
 800a834:	4621      	mov	r1, r4
 800a836:	4628      	mov	r0, r5
 800a838:	f000 f82a 	bl	800a890 <__swsetup_r>
 800a83c:	b118      	cbz	r0, 800a846 <__swbuf_r+0x32>
 800a83e:	f04f 37ff 	mov.w	r7, #4294967295
 800a842:	4638      	mov	r0, r7
 800a844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a846:	6823      	ldr	r3, [r4, #0]
 800a848:	6922      	ldr	r2, [r4, #16]
 800a84a:	1a98      	subs	r0, r3, r2
 800a84c:	6963      	ldr	r3, [r4, #20]
 800a84e:	b2f6      	uxtb	r6, r6
 800a850:	4283      	cmp	r3, r0
 800a852:	4637      	mov	r7, r6
 800a854:	dc05      	bgt.n	800a862 <__swbuf_r+0x4e>
 800a856:	4621      	mov	r1, r4
 800a858:	4628      	mov	r0, r5
 800a85a:	f7ff fda7 	bl	800a3ac <_fflush_r>
 800a85e:	2800      	cmp	r0, #0
 800a860:	d1ed      	bne.n	800a83e <__swbuf_r+0x2a>
 800a862:	68a3      	ldr	r3, [r4, #8]
 800a864:	3b01      	subs	r3, #1
 800a866:	60a3      	str	r3, [r4, #8]
 800a868:	6823      	ldr	r3, [r4, #0]
 800a86a:	1c5a      	adds	r2, r3, #1
 800a86c:	6022      	str	r2, [r4, #0]
 800a86e:	701e      	strb	r6, [r3, #0]
 800a870:	6962      	ldr	r2, [r4, #20]
 800a872:	1c43      	adds	r3, r0, #1
 800a874:	429a      	cmp	r2, r3
 800a876:	d004      	beq.n	800a882 <__swbuf_r+0x6e>
 800a878:	89a3      	ldrh	r3, [r4, #12]
 800a87a:	07db      	lsls	r3, r3, #31
 800a87c:	d5e1      	bpl.n	800a842 <__swbuf_r+0x2e>
 800a87e:	2e0a      	cmp	r6, #10
 800a880:	d1df      	bne.n	800a842 <__swbuf_r+0x2e>
 800a882:	4621      	mov	r1, r4
 800a884:	4628      	mov	r0, r5
 800a886:	f7ff fd91 	bl	800a3ac <_fflush_r>
 800a88a:	2800      	cmp	r0, #0
 800a88c:	d0d9      	beq.n	800a842 <__swbuf_r+0x2e>
 800a88e:	e7d6      	b.n	800a83e <__swbuf_r+0x2a>

0800a890 <__swsetup_r>:
 800a890:	b538      	push	{r3, r4, r5, lr}
 800a892:	4b29      	ldr	r3, [pc, #164]	@ (800a938 <__swsetup_r+0xa8>)
 800a894:	4605      	mov	r5, r0
 800a896:	6818      	ldr	r0, [r3, #0]
 800a898:	460c      	mov	r4, r1
 800a89a:	b118      	cbz	r0, 800a8a4 <__swsetup_r+0x14>
 800a89c:	6a03      	ldr	r3, [r0, #32]
 800a89e:	b90b      	cbnz	r3, 800a8a4 <__swsetup_r+0x14>
 800a8a0:	f7fd ffb0 	bl	8008804 <__sinit>
 800a8a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8a8:	0719      	lsls	r1, r3, #28
 800a8aa:	d422      	bmi.n	800a8f2 <__swsetup_r+0x62>
 800a8ac:	06da      	lsls	r2, r3, #27
 800a8ae:	d407      	bmi.n	800a8c0 <__swsetup_r+0x30>
 800a8b0:	2209      	movs	r2, #9
 800a8b2:	602a      	str	r2, [r5, #0]
 800a8b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8b8:	81a3      	strh	r3, [r4, #12]
 800a8ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a8be:	e033      	b.n	800a928 <__swsetup_r+0x98>
 800a8c0:	0758      	lsls	r0, r3, #29
 800a8c2:	d512      	bpl.n	800a8ea <__swsetup_r+0x5a>
 800a8c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8c6:	b141      	cbz	r1, 800a8da <__swsetup_r+0x4a>
 800a8c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8cc:	4299      	cmp	r1, r3
 800a8ce:	d002      	beq.n	800a8d6 <__swsetup_r+0x46>
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	f7fe ff0d 	bl	80096f0 <_free_r>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8da:	89a3      	ldrh	r3, [r4, #12]
 800a8dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a8e0:	81a3      	strh	r3, [r4, #12]
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	6063      	str	r3, [r4, #4]
 800a8e6:	6923      	ldr	r3, [r4, #16]
 800a8e8:	6023      	str	r3, [r4, #0]
 800a8ea:	89a3      	ldrh	r3, [r4, #12]
 800a8ec:	f043 0308 	orr.w	r3, r3, #8
 800a8f0:	81a3      	strh	r3, [r4, #12]
 800a8f2:	6923      	ldr	r3, [r4, #16]
 800a8f4:	b94b      	cbnz	r3, 800a90a <__swsetup_r+0x7a>
 800a8f6:	89a3      	ldrh	r3, [r4, #12]
 800a8f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a8fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a900:	d003      	beq.n	800a90a <__swsetup_r+0x7a>
 800a902:	4621      	mov	r1, r4
 800a904:	4628      	mov	r0, r5
 800a906:	f000 f883 	bl	800aa10 <__smakebuf_r>
 800a90a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a90e:	f013 0201 	ands.w	r2, r3, #1
 800a912:	d00a      	beq.n	800a92a <__swsetup_r+0x9a>
 800a914:	2200      	movs	r2, #0
 800a916:	60a2      	str	r2, [r4, #8]
 800a918:	6962      	ldr	r2, [r4, #20]
 800a91a:	4252      	negs	r2, r2
 800a91c:	61a2      	str	r2, [r4, #24]
 800a91e:	6922      	ldr	r2, [r4, #16]
 800a920:	b942      	cbnz	r2, 800a934 <__swsetup_r+0xa4>
 800a922:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a926:	d1c5      	bne.n	800a8b4 <__swsetup_r+0x24>
 800a928:	bd38      	pop	{r3, r4, r5, pc}
 800a92a:	0799      	lsls	r1, r3, #30
 800a92c:	bf58      	it	pl
 800a92e:	6962      	ldrpl	r2, [r4, #20]
 800a930:	60a2      	str	r2, [r4, #8]
 800a932:	e7f4      	b.n	800a91e <__swsetup_r+0x8e>
 800a934:	2000      	movs	r0, #0
 800a936:	e7f7      	b.n	800a928 <__swsetup_r+0x98>
 800a938:	2000001c 	.word	0x2000001c

0800a93c <_raise_r>:
 800a93c:	291f      	cmp	r1, #31
 800a93e:	b538      	push	{r3, r4, r5, lr}
 800a940:	4605      	mov	r5, r0
 800a942:	460c      	mov	r4, r1
 800a944:	d904      	bls.n	800a950 <_raise_r+0x14>
 800a946:	2316      	movs	r3, #22
 800a948:	6003      	str	r3, [r0, #0]
 800a94a:	f04f 30ff 	mov.w	r0, #4294967295
 800a94e:	bd38      	pop	{r3, r4, r5, pc}
 800a950:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a952:	b112      	cbz	r2, 800a95a <_raise_r+0x1e>
 800a954:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a958:	b94b      	cbnz	r3, 800a96e <_raise_r+0x32>
 800a95a:	4628      	mov	r0, r5
 800a95c:	f000 f830 	bl	800a9c0 <_getpid_r>
 800a960:	4622      	mov	r2, r4
 800a962:	4601      	mov	r1, r0
 800a964:	4628      	mov	r0, r5
 800a966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a96a:	f000 b817 	b.w	800a99c <_kill_r>
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d00a      	beq.n	800a988 <_raise_r+0x4c>
 800a972:	1c59      	adds	r1, r3, #1
 800a974:	d103      	bne.n	800a97e <_raise_r+0x42>
 800a976:	2316      	movs	r3, #22
 800a978:	6003      	str	r3, [r0, #0]
 800a97a:	2001      	movs	r0, #1
 800a97c:	e7e7      	b.n	800a94e <_raise_r+0x12>
 800a97e:	2100      	movs	r1, #0
 800a980:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a984:	4620      	mov	r0, r4
 800a986:	4798      	blx	r3
 800a988:	2000      	movs	r0, #0
 800a98a:	e7e0      	b.n	800a94e <_raise_r+0x12>

0800a98c <raise>:
 800a98c:	4b02      	ldr	r3, [pc, #8]	@ (800a998 <raise+0xc>)
 800a98e:	4601      	mov	r1, r0
 800a990:	6818      	ldr	r0, [r3, #0]
 800a992:	f7ff bfd3 	b.w	800a93c <_raise_r>
 800a996:	bf00      	nop
 800a998:	2000001c 	.word	0x2000001c

0800a99c <_kill_r>:
 800a99c:	b538      	push	{r3, r4, r5, lr}
 800a99e:	4d07      	ldr	r5, [pc, #28]	@ (800a9bc <_kill_r+0x20>)
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	4608      	mov	r0, r1
 800a9a6:	4611      	mov	r1, r2
 800a9a8:	602b      	str	r3, [r5, #0]
 800a9aa:	f7f7 fde8 	bl	800257e <_kill>
 800a9ae:	1c43      	adds	r3, r0, #1
 800a9b0:	d102      	bne.n	800a9b8 <_kill_r+0x1c>
 800a9b2:	682b      	ldr	r3, [r5, #0]
 800a9b4:	b103      	cbz	r3, 800a9b8 <_kill_r+0x1c>
 800a9b6:	6023      	str	r3, [r4, #0]
 800a9b8:	bd38      	pop	{r3, r4, r5, pc}
 800a9ba:	bf00      	nop
 800a9bc:	20000570 	.word	0x20000570

0800a9c0 <_getpid_r>:
 800a9c0:	f7f7 bdd5 	b.w	800256e <_getpid>

0800a9c4 <__swhatbuf_r>:
 800a9c4:	b570      	push	{r4, r5, r6, lr}
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9cc:	2900      	cmp	r1, #0
 800a9ce:	b096      	sub	sp, #88	@ 0x58
 800a9d0:	4615      	mov	r5, r2
 800a9d2:	461e      	mov	r6, r3
 800a9d4:	da0d      	bge.n	800a9f2 <__swhatbuf_r+0x2e>
 800a9d6:	89a3      	ldrh	r3, [r4, #12]
 800a9d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a9dc:	f04f 0100 	mov.w	r1, #0
 800a9e0:	bf14      	ite	ne
 800a9e2:	2340      	movne	r3, #64	@ 0x40
 800a9e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	6031      	str	r1, [r6, #0]
 800a9ec:	602b      	str	r3, [r5, #0]
 800a9ee:	b016      	add	sp, #88	@ 0x58
 800a9f0:	bd70      	pop	{r4, r5, r6, pc}
 800a9f2:	466a      	mov	r2, sp
 800a9f4:	f000 f848 	bl	800aa88 <_fstat_r>
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	dbec      	blt.n	800a9d6 <__swhatbuf_r+0x12>
 800a9fc:	9901      	ldr	r1, [sp, #4]
 800a9fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aa02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aa06:	4259      	negs	r1, r3
 800aa08:	4159      	adcs	r1, r3
 800aa0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa0e:	e7eb      	b.n	800a9e8 <__swhatbuf_r+0x24>

0800aa10 <__smakebuf_r>:
 800aa10:	898b      	ldrh	r3, [r1, #12]
 800aa12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa14:	079d      	lsls	r5, r3, #30
 800aa16:	4606      	mov	r6, r0
 800aa18:	460c      	mov	r4, r1
 800aa1a:	d507      	bpl.n	800aa2c <__smakebuf_r+0x1c>
 800aa1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa20:	6023      	str	r3, [r4, #0]
 800aa22:	6123      	str	r3, [r4, #16]
 800aa24:	2301      	movs	r3, #1
 800aa26:	6163      	str	r3, [r4, #20]
 800aa28:	b003      	add	sp, #12
 800aa2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa2c:	ab01      	add	r3, sp, #4
 800aa2e:	466a      	mov	r2, sp
 800aa30:	f7ff ffc8 	bl	800a9c4 <__swhatbuf_r>
 800aa34:	9f00      	ldr	r7, [sp, #0]
 800aa36:	4605      	mov	r5, r0
 800aa38:	4639      	mov	r1, r7
 800aa3a:	4630      	mov	r0, r6
 800aa3c:	f7fe fecc 	bl	80097d8 <_malloc_r>
 800aa40:	b948      	cbnz	r0, 800aa56 <__smakebuf_r+0x46>
 800aa42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa46:	059a      	lsls	r2, r3, #22
 800aa48:	d4ee      	bmi.n	800aa28 <__smakebuf_r+0x18>
 800aa4a:	f023 0303 	bic.w	r3, r3, #3
 800aa4e:	f043 0302 	orr.w	r3, r3, #2
 800aa52:	81a3      	strh	r3, [r4, #12]
 800aa54:	e7e2      	b.n	800aa1c <__smakebuf_r+0xc>
 800aa56:	89a3      	ldrh	r3, [r4, #12]
 800aa58:	6020      	str	r0, [r4, #0]
 800aa5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa5e:	81a3      	strh	r3, [r4, #12]
 800aa60:	9b01      	ldr	r3, [sp, #4]
 800aa62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa66:	b15b      	cbz	r3, 800aa80 <__smakebuf_r+0x70>
 800aa68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	f000 f81d 	bl	800aaac <_isatty_r>
 800aa72:	b128      	cbz	r0, 800aa80 <__smakebuf_r+0x70>
 800aa74:	89a3      	ldrh	r3, [r4, #12]
 800aa76:	f023 0303 	bic.w	r3, r3, #3
 800aa7a:	f043 0301 	orr.w	r3, r3, #1
 800aa7e:	81a3      	strh	r3, [r4, #12]
 800aa80:	89a3      	ldrh	r3, [r4, #12]
 800aa82:	431d      	orrs	r5, r3
 800aa84:	81a5      	strh	r5, [r4, #12]
 800aa86:	e7cf      	b.n	800aa28 <__smakebuf_r+0x18>

0800aa88 <_fstat_r>:
 800aa88:	b538      	push	{r3, r4, r5, lr}
 800aa8a:	4d07      	ldr	r5, [pc, #28]	@ (800aaa8 <_fstat_r+0x20>)
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	4604      	mov	r4, r0
 800aa90:	4608      	mov	r0, r1
 800aa92:	4611      	mov	r1, r2
 800aa94:	602b      	str	r3, [r5, #0]
 800aa96:	f7f7 fdd2 	bl	800263e <_fstat>
 800aa9a:	1c43      	adds	r3, r0, #1
 800aa9c:	d102      	bne.n	800aaa4 <_fstat_r+0x1c>
 800aa9e:	682b      	ldr	r3, [r5, #0]
 800aaa0:	b103      	cbz	r3, 800aaa4 <_fstat_r+0x1c>
 800aaa2:	6023      	str	r3, [r4, #0]
 800aaa4:	bd38      	pop	{r3, r4, r5, pc}
 800aaa6:	bf00      	nop
 800aaa8:	20000570 	.word	0x20000570

0800aaac <_isatty_r>:
 800aaac:	b538      	push	{r3, r4, r5, lr}
 800aaae:	4d06      	ldr	r5, [pc, #24]	@ (800aac8 <_isatty_r+0x1c>)
 800aab0:	2300      	movs	r3, #0
 800aab2:	4604      	mov	r4, r0
 800aab4:	4608      	mov	r0, r1
 800aab6:	602b      	str	r3, [r5, #0]
 800aab8:	f7f7 fdd1 	bl	800265e <_isatty>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	d102      	bne.n	800aac6 <_isatty_r+0x1a>
 800aac0:	682b      	ldr	r3, [r5, #0]
 800aac2:	b103      	cbz	r3, 800aac6 <_isatty_r+0x1a>
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	20000570 	.word	0x20000570

0800aacc <_init>:
 800aacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aace:	bf00      	nop
 800aad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad2:	bc08      	pop	{r3}
 800aad4:	469e      	mov	lr, r3
 800aad6:	4770      	bx	lr

0800aad8 <_fini>:
 800aad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aada:	bf00      	nop
 800aadc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aade:	bc08      	pop	{r3}
 800aae0:	469e      	mov	lr, r3
 800aae2:	4770      	bx	lr
