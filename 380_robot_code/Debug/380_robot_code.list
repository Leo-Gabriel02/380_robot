
380_robot_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9ac  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800ab90  0800ab90  0000bb90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0b0  0800b0b0  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0b0  0800b0b0  0000c0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0b8  0800b0b8  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0b8  0800b0b8  0000c0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0bc  0800b0bc  0000c0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800b0c0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  200001d4  0800b294  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  0800b294  0000d57c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f72  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b75  00000000  00000000  00025176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001620  00000000  00000000  00027cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000115e  00000000  00000000  00029310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ced  00000000  00000000  0002a46e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2d5  00000000  00000000  0004f15b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9378  00000000  00000000  00069430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001627a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071b0  00000000  00000000  001627ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0016999c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ab74 	.word	0x0800ab74

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800ab74 	.word	0x0800ab74

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96a 	b.w	8000f24 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	460c      	mov	r4, r1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d14e      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c74:	4694      	mov	ip, r2
 8000c76:	458c      	cmp	ip, r1
 8000c78:	4686      	mov	lr, r0
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	d962      	bls.n	8000d46 <__udivmoddi4+0xde>
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0320 	rsb	r3, r2, #32
 8000c86:	4091      	lsls	r1, r2
 8000c88:	fa20 f303 	lsr.w	r3, r0, r3
 8000c8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c90:	4319      	orrs	r1, r3
 8000c92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f f68c 	uxth.w	r6, ip
 8000c9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb07 1114 	mls	r1, r7, r4, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb04 f106 	mul.w	r1, r4, r6
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cbe:	f080 8112 	bcs.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 810f 	bls.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc8:	3c02      	subs	r4, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a59      	subs	r1, r3, r1
 8000cce:	fa1f f38e 	uxth.w	r3, lr
 8000cd2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f606 	mul.w	r6, r0, r6
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x94>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cee:	f080 80fc 	bcs.w	8000eea <__udivmoddi4+0x282>
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	f240 80f9 	bls.w	8000eea <__udivmoddi4+0x282>
 8000cf8:	4463      	add	r3, ip
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d02:	2100      	movs	r1, #0
 8000d04:	b11d      	cbz	r5, 8000d0e <__udivmoddi4+0xa6>
 8000d06:	40d3      	lsrs	r3, r2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d905      	bls.n	8000d22 <__udivmoddi4+0xba>
 8000d16:	b10d      	cbz	r5, 8000d1c <__udivmoddi4+0xb4>
 8000d18:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e7f5      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d22:	fab3 f183 	clz	r1, r3
 8000d26:	2900      	cmp	r1, #0
 8000d28:	d146      	bne.n	8000db8 <__udivmoddi4+0x150>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d302      	bcc.n	8000d34 <__udivmoddi4+0xcc>
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	f0c0 80f0 	bcc.w	8000f14 <__udivmoddi4+0x2ac>
 8000d34:	1a86      	subs	r6, r0, r2
 8000d36:	eb64 0303 	sbc.w	r3, r4, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	2d00      	cmp	r5, #0
 8000d3e:	d0e6      	beq.n	8000d0e <__udivmoddi4+0xa6>
 8000d40:	e9c5 6300 	strd	r6, r3, [r5]
 8000d44:	e7e3      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	f040 8090 	bne.w	8000e6c <__udivmoddi4+0x204>
 8000d4c:	eba1 040c 	sub.w	r4, r1, ip
 8000d50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb08 4416 	mls	r4, r8, r6, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb07 f006 	mul.w	r0, r7, r6
 8000d6e:	4298      	cmp	r0, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x11c>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x11a>
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	f200 80cd 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d82:	4626      	mov	r6, r4
 8000d84:	1a1c      	subs	r4, r3, r0
 8000d86:	fa1f f38e 	uxth.w	r3, lr
 8000d8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d96:	fb00 f707 	mul.w	r7, r0, r7
 8000d9a:	429f      	cmp	r7, r3
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x148>
 8000d9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000da2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x146>
 8000da8:	429f      	cmp	r7, r3
 8000daa:	f200 80b0 	bhi.w	8000f0e <__udivmoddi4+0x2a6>
 8000dae:	4620      	mov	r0, r4
 8000db0:	1bdb      	subs	r3, r3, r7
 8000db2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db6:	e7a5      	b.n	8000d04 <__udivmoddi4+0x9c>
 8000db8:	f1c1 0620 	rsb	r6, r1, #32
 8000dbc:	408b      	lsls	r3, r1
 8000dbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dc8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dcc:	ea43 030c 	orr.w	r3, r3, ip
 8000dd0:	40f4      	lsrs	r4, r6
 8000dd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dd6:	0c38      	lsrs	r0, r7, #16
 8000dd8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ddc:	fbb4 fef0 	udiv	lr, r4, r0
 8000de0:	fa1f fc87 	uxth.w	ip, r7
 8000de4:	fb00 441e 	mls	r4, r0, lr, r4
 8000de8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dec:	fb0e f90c 	mul.w	r9, lr, ip
 8000df0:	45a1      	cmp	r9, r4
 8000df2:	fa02 f201 	lsl.w	r2, r2, r1
 8000df6:	d90a      	bls.n	8000e0e <__udivmoddi4+0x1a6>
 8000df8:	193c      	adds	r4, r7, r4
 8000dfa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dfe:	f080 8084 	bcs.w	8000f0a <__udivmoddi4+0x2a2>
 8000e02:	45a1      	cmp	r9, r4
 8000e04:	f240 8081 	bls.w	8000f0a <__udivmoddi4+0x2a2>
 8000e08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	eba4 0409 	sub.w	r4, r4, r9
 8000e12:	fa1f f983 	uxth.w	r9, r3
 8000e16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e26:	45a4      	cmp	ip, r4
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x1d2>
 8000e2a:	193c      	adds	r4, r7, r4
 8000e2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e30:	d267      	bcs.n	8000f02 <__udivmoddi4+0x29a>
 8000e32:	45a4      	cmp	ip, r4
 8000e34:	d965      	bls.n	8000f02 <__udivmoddi4+0x29a>
 8000e36:	3b02      	subs	r3, #2
 8000e38:	443c      	add	r4, r7
 8000e3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e42:	eba4 040c 	sub.w	r4, r4, ip
 8000e46:	429c      	cmp	r4, r3
 8000e48:	46ce      	mov	lr, r9
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	d351      	bcc.n	8000ef2 <__udivmoddi4+0x28a>
 8000e4e:	d04e      	beq.n	8000eee <__udivmoddi4+0x286>
 8000e50:	b155      	cbz	r5, 8000e68 <__udivmoddi4+0x200>
 8000e52:	ebb8 030e 	subs.w	r3, r8, lr
 8000e56:	eb64 040c 	sbc.w	r4, r4, ip
 8000e5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	431e      	orrs	r6, r3
 8000e62:	40cc      	lsrs	r4, r1
 8000e64:	e9c5 6400 	strd	r6, r4, [r5]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	e750      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f103 	lsr.w	r1, r0, r3
 8000e74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e78:	fa24 f303 	lsr.w	r3, r4, r3
 8000e7c:	4094      	lsls	r4, r2
 8000e7e:	430c      	orrs	r4, r1
 8000e80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e88:	fa1f f78c 	uxth.w	r7, ip
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3110 	mls	r1, r8, r0, r3
 8000e94:	0c23      	lsrs	r3, r4, #16
 8000e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9a:	fb00 f107 	mul.w	r1, r0, r7
 8000e9e:	4299      	cmp	r1, r3
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x24c>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eaa:	d22c      	bcs.n	8000f06 <__udivmoddi4+0x29e>
 8000eac:	4299      	cmp	r1, r3
 8000eae:	d92a      	bls.n	8000f06 <__udivmoddi4+0x29e>
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	1a5b      	subs	r3, r3, r1
 8000eb6:	b2a4      	uxth	r4, r4
 8000eb8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ebc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ec0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ec4:	fb01 f307 	mul.w	r3, r1, r7
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x276>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ed4:	d213      	bcs.n	8000efe <__udivmoddi4+0x296>
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	d911      	bls.n	8000efe <__udivmoddi4+0x296>
 8000eda:	3902      	subs	r1, #2
 8000edc:	4464      	add	r4, ip
 8000ede:	1ae4      	subs	r4, r4, r3
 8000ee0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ee4:	e739      	b.n	8000d5a <__udivmoddi4+0xf2>
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	e6f0      	b.n	8000ccc <__udivmoddi4+0x64>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e706      	b.n	8000cfc <__udivmoddi4+0x94>
 8000eee:	45c8      	cmp	r8, r9
 8000ef0:	d2ae      	bcs.n	8000e50 <__udivmoddi4+0x1e8>
 8000ef2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ef6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000efa:	3801      	subs	r0, #1
 8000efc:	e7a8      	b.n	8000e50 <__udivmoddi4+0x1e8>
 8000efe:	4631      	mov	r1, r6
 8000f00:	e7ed      	b.n	8000ede <__udivmoddi4+0x276>
 8000f02:	4603      	mov	r3, r0
 8000f04:	e799      	b.n	8000e3a <__udivmoddi4+0x1d2>
 8000f06:	4630      	mov	r0, r6
 8000f08:	e7d4      	b.n	8000eb4 <__udivmoddi4+0x24c>
 8000f0a:	46d6      	mov	lr, sl
 8000f0c:	e77f      	b.n	8000e0e <__udivmoddi4+0x1a6>
 8000f0e:	4463      	add	r3, ip
 8000f10:	3802      	subs	r0, #2
 8000f12:	e74d      	b.n	8000db0 <__udivmoddi4+0x148>
 8000f14:	4606      	mov	r6, r0
 8000f16:	4623      	mov	r3, r4
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e70f      	b.n	8000d3c <__udivmoddi4+0xd4>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	e730      	b.n	8000d84 <__udivmoddi4+0x11c>
 8000f22:	bf00      	nop

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <runMotors>:

const uint8_t SENSOR_REGS[3] = {0x80 | 0x16, 0x80 | 0x18, 0x80 | 0x1A};
const uint8_t SENSORS[] = {2, 3, 4, 5}; // BL, FR, FL, BR
uint8_t NUM_SENSORS = sizeof(SENSORS)/sizeof(SENSORS[0]);

void runMotors(uint8_t side, uint8_t dir, double duty) {
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b0a3      	sub	sp, #140	@ 0x8c
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	4603      	mov	r3, r0
 8000f30:	460a      	mov	r2, r1
 8000f32:	ed87 0b00 	vstr	d0, [r7]
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	73bb      	strb	r3, [r7, #14]

    char b [100];

    if (duty < 0) {
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f48:	f7ff fdf0 	bl	8000b2c <__aeabi_dcmplt>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d023      	beq.n	8000f9a <runMotors+0x72>
        dir = !dir;
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	bf0c      	ite	eq
 8000f58:	2301      	moveq	r3, #1
 8000f5a:	2300      	movne	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	73bb      	strb	r3, [r7, #14]
        duty = abs(duty*1000)/1000.0;
 8000f60:	f04f 0200 	mov.w	r2, #0
 8000f64:	4b66      	ldr	r3, [pc, #408]	@ (8001100 <runMotors+0x1d8>)
 8000f66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f6a:	f7ff fb6d 	bl	8000648 <__aeabi_dmul>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	4610      	mov	r0, r2
 8000f74:	4619      	mov	r1, r3
 8000f76:	f7ff fe17 	bl	8000ba8 <__aeabi_d2iz>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	bfb8      	it	lt
 8000f80:	425b      	neglt	r3, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff faf6 	bl	8000574 <__aeabi_i2d>
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	4b5c      	ldr	r3, [pc, #368]	@ (8001100 <runMotors+0x1d8>)
 8000f8e:	f7ff fc85 	bl	800089c <__aeabi_ddiv>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	e9c7 2300 	strd	r2, r3, [r7]
    }

    duty = duty*0.8;
 8000f9a:	a357      	add	r3, pc, #348	@ (adr r3, 80010f8 <runMotors+0x1d0>)
 8000f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fa4:	f7ff fb50 	bl	8000648 <__aeabi_dmul>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	e9c7 2300 	strd	r2, r3, [r7]
    if (duty > 0.8) duty = 0.8;
 8000fb0:	a351      	add	r3, pc, #324	@ (adr r3, 80010f8 <runMotors+0x1d0>)
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fba:	f7ff fdd5 	bl	8000b68 <__aeabi_dcmpgt>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d004      	beq.n	8000fce <runMotors+0xa6>
 8000fc4:	a34c      	add	r3, pc, #304	@ (adr r3, 80010f8 <runMotors+0x1d0>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	e9c7 2300 	strd	r2, r3, [r7]

    double duty_adj = dir == FWD ? (1-duty) : duty;
 8000fce:	7bbb      	ldrb	r3, [r7, #14]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d109      	bne.n	8000fe8 <runMotors+0xc0>
 8000fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fd8:	f04f 0000 	mov.w	r0, #0
 8000fdc:	4949      	ldr	r1, [pc, #292]	@ (8001104 <runMotors+0x1dc>)
 8000fde:	f7ff f97b 	bl	80002d8 <__aeabi_dsub>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	e001      	b.n	8000fec <runMotors+0xc4>
 8000fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fec:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78

    sprintf(b, "duty %f fwd? %d \r\n", duty_adj, dir == FWD);
 8000ff0:	7bbb      	ldrb	r3, [r7, #14]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	bf0c      	ite	eq
 8000ff6:	2301      	moveq	r3, #1
 8000ff8:	2300      	movne	r3, #0
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	f107 0014 	add.w	r0, r7, #20
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001006:	4940      	ldr	r1, [pc, #256]	@ (8001108 <runMotors+0x1e0>)
 8001008:	f007 fc88 	bl	800891c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff f955 	bl	80002c0 <strlen>
 8001016:	4603      	mov	r3, r0
 8001018:	b29a      	uxth	r2, r3
 800101a:	f107 0114 	add.w	r1, r7, #20
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	483a      	ldr	r0, [pc, #232]	@ (800110c <runMotors+0x1e4>)
 8001024:	f006 f8e4 	bl	80071f0 <HAL_UART_Transmit>

    if (side == LEFT) {
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d130      	bne.n	8001090 <runMotors+0x168>
        HAL_GPIO_WritePin(GPIOA, RS_DIR_Pin, dir == FWD ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	2b00      	cmp	r3, #0
 8001032:	bf0c      	ite	eq
 8001034:	2301      	moveq	r3, #1
 8001036:	2300      	movne	r3, #0
 8001038:	b2db      	uxtb	r3, r3
 800103a:	461a      	mov	r2, r3
 800103c:	2102      	movs	r1, #2
 800103e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001042:	f002 fe2f 	bl	8003ca4 <HAL_GPIO_WritePin>
        TIM1->CCR1 = duty_adj*TIM1->ARR;
 8001046:	4b32      	ldr	r3, [pc, #200]	@ (8001110 <runMotors+0x1e8>)
 8001048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa82 	bl	8000554 <__aeabi_ui2d>
 8001050:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001054:	f7ff faf8 	bl	8000648 <__aeabi_dmul>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4c2c      	ldr	r4, [pc, #176]	@ (8001110 <runMotors+0x1e8>)
 800105e:	4610      	mov	r0, r2
 8001060:	4619      	mov	r1, r3
 8001062:	f7ff fdc9 	bl	8000bf8 <__aeabi_d2uiz>
 8001066:	4603      	mov	r3, r0
 8001068:	6363      	str	r3, [r4, #52]	@ 0x34
        TIM1->CCR2 = duty_adj*TIM1->ARR;
 800106a:	4b29      	ldr	r3, [pc, #164]	@ (8001110 <runMotors+0x1e8>)
 800106c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fa70 	bl	8000554 <__aeabi_ui2d>
 8001074:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001078:	f7ff fae6 	bl	8000648 <__aeabi_dmul>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4c23      	ldr	r4, [pc, #140]	@ (8001110 <runMotors+0x1e8>)
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	f7ff fdb7 	bl	8000bf8 <__aeabi_d2uiz>
 800108a:	4603      	mov	r3, r0
 800108c:	63a3      	str	r3, [r4, #56]	@ 0x38
    } else {
        HAL_GPIO_WritePin(GPIOA, LS_DIR_Pin, dir == FWD ? GPIO_PIN_SET : GPIO_PIN_RESET);
        TIM1->CCR3 = duty_adj*TIM1->ARR;
        TIM1->CCR4 = duty_adj*TIM1->ARR;
    }
}
 800108e:	e02f      	b.n	80010f0 <runMotors+0x1c8>
        HAL_GPIO_WritePin(GPIOA, LS_DIR_Pin, dir == FWD ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	2b00      	cmp	r3, #0
 8001094:	bf0c      	ite	eq
 8001096:	2301      	moveq	r3, #1
 8001098:	2300      	movne	r3, #0
 800109a:	b2db      	uxtb	r3, r3
 800109c:	461a      	mov	r2, r3
 800109e:	2101      	movs	r1, #1
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a4:	f002 fdfe 	bl	8003ca4 <HAL_GPIO_WritePin>
        TIM1->CCR3 = duty_adj*TIM1->ARR;
 80010a8:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <runMotors+0x1e8>)
 80010aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa51 	bl	8000554 <__aeabi_ui2d>
 80010b2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80010b6:	f7ff fac7 	bl	8000648 <__aeabi_dmul>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4c14      	ldr	r4, [pc, #80]	@ (8001110 <runMotors+0x1e8>)
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	f7ff fd98 	bl	8000bf8 <__aeabi_d2uiz>
 80010c8:	4603      	mov	r3, r0
 80010ca:	63e3      	str	r3, [r4, #60]	@ 0x3c
        TIM1->CCR4 = duty_adj*TIM1->ARR;
 80010cc:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <runMotors+0x1e8>)
 80010ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fa3f 	bl	8000554 <__aeabi_ui2d>
 80010d6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80010da:	f7ff fab5 	bl	8000648 <__aeabi_dmul>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4c0b      	ldr	r4, [pc, #44]	@ (8001110 <runMotors+0x1e8>)
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	f7ff fd86 	bl	8000bf8 <__aeabi_d2uiz>
 80010ec:	4603      	mov	r3, r0
 80010ee:	6423      	str	r3, [r4, #64]	@ 0x40
}
 80010f0:	bf00      	nop
 80010f2:	3784      	adds	r7, #132	@ 0x84
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd90      	pop	{r4, r7, pc}
 80010f8:	9999999a 	.word	0x9999999a
 80010fc:	3fe99999 	.word	0x3fe99999
 8001100:	408f4000 	.word	0x408f4000
 8001104:	3ff00000 	.word	0x3ff00000
 8001108:	0800ab90 	.word	0x0800ab90
 800110c:	20000394 	.word	0x20000394
 8001110:	40012c00 	.word	0x40012c00

08001114 <selectMuxAddr>:
	} else {
		GPIOA->ODR &= ~bitMask;
	}
}

uint8_t selectMuxAddr(uint8_t sensor) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b0a0      	sub	sp, #128	@ 0x80
 8001118:	af02      	add	r7, sp, #8
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  char b [100];

  if (sensor > 7) {
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b07      	cmp	r3, #7
 8001122:	d914      	bls.n	800114e <selectMuxAddr+0x3a>
 		sprintf(b, "sensor index %d out of bounds\r\n", sensor);
 8001124:	79fa      	ldrb	r2, [r7, #7]
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	4923      	ldr	r1, [pc, #140]	@ (80011b8 <selectMuxAddr+0xa4>)
 800112c:	4618      	mov	r0, r3
 800112e:	f007 fbf5 	bl	800891c <siprintf>
 		HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f8c2 	bl	80002c0 <strlen>
 800113c:	4603      	mov	r3, r0
 800113e:	b29a      	uxth	r2, r3
 8001140:	f107 0110 	add.w	r1, r7, #16
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
 8001148:	481c      	ldr	r0, [pc, #112]	@ (80011bc <selectMuxAddr+0xa8>)
 800114a:	f006 f851 	bl	80071f0 <HAL_UART_Transmit>
  }

  uint8_t data[1] = {1 << sensor};
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2201      	movs	r2, #1
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	b2db      	uxtb	r3, r3
 8001158:	733b      	strb	r3, [r7, #12]

  ret = HAL_I2C_Master_Transmit(&hi2c1, MUX_ADDR, data, 1, HAL_MAX_DELAY);
 800115a:	f107 020c 	add.w	r2, r7, #12
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	21e0      	movs	r1, #224	@ 0xe0
 8001168:	4815      	ldr	r0, [pc, #84]	@ (80011c0 <selectMuxAddr+0xac>)
 800116a:	f002 fe4f 	bl	8003e0c <HAL_I2C_Master_Transmit>
 800116e:	4603      	mov	r3, r0
 8001170:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  if ( ret != HAL_OK ) {
 8001174:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001178:	2b00      	cmp	r3, #0
 800117a:	d017      	beq.n	80011ac <selectMuxAddr+0x98>
 		sprintf(b, "failed to connect to sensor %d - error code %d\r\n", sensor, ret);
 800117c:	79fa      	ldrb	r2, [r7, #7]
 800117e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001182:	f107 0010 	add.w	r0, r7, #16
 8001186:	490f      	ldr	r1, [pc, #60]	@ (80011c4 <selectMuxAddr+0xb0>)
 8001188:	f007 fbc8 	bl	800891c <siprintf>
 		HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f895 	bl	80002c0 <strlen>
 8001196:	4603      	mov	r3, r0
 8001198:	b29a      	uxth	r2, r3
 800119a:	f107 0110 	add.w	r1, r7, #16
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	4806      	ldr	r0, [pc, #24]	@ (80011bc <selectMuxAddr+0xa8>)
 80011a4:	f006 f824 	bl	80071f0 <HAL_UART_Transmit>
 		return 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	e000      	b.n	80011ae <selectMuxAddr+0x9a>
 	} else {
// 		sprintf(b, "connected to sensor %d\r\n", sensor);
// 		HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 		return 1;
 80011ac:	2301      	movs	r3, #1
 	}
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3778      	adds	r7, #120	@ 0x78
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	0800aba4 	.word	0x0800aba4
 80011bc:	20000394 	.word	0x20000394
 80011c0:	2000025c 	.word	0x2000025c
 80011c4:	0800abc4 	.word	0x0800abc4

080011c8 <readSensor>:

uint16_t readSensor(uint8_t sensor) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b0a6      	sub	sp, #152	@ 0x98
 80011cc:	af04      	add	r7, sp, #16
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	if (!selectMuxAddr(sensor)) {
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff9d 	bl	8001114 <selectMuxAddr>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <readSensor+0x1c>
		return 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e072      	b.n	80012ca <readSensor+0x102>
  uint8_t buf16[2];
  char out [100];
  uint16_t val;
  uint16_t rgb[3];

	for (int i = 0; i < 3; i++) {
 80011e4:	2300      	movs	r3, #0
 80011e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80011ea:	e049      	b.n	8001280 <readSensor+0xb8>
    ret = HAL_I2C_Mem_Read(&hi2c1, TCS_ADDR, SENSOR_REGS[i], I2C_MEMADD_SIZE_8BIT, buf16, 2, HAL_MAX_DELAY);
 80011ec:	4a39      	ldr	r2, [pc, #228]	@ (80012d4 <readSensor+0x10c>)
 80011ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011f2:	4413      	add	r3, r2
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
 80011fc:	9302      	str	r3, [sp, #8]
 80011fe:	2302      	movs	r3, #2
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2301      	movs	r3, #1
 800120a:	2152      	movs	r1, #82	@ 0x52
 800120c:	4832      	ldr	r0, [pc, #200]	@ (80012d8 <readSensor+0x110>)
 800120e:	f003 f829 	bl	8004264 <HAL_I2C_Mem_Read>
 8001212:	4603      	mov	r3, r0
 8001214:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b

    if ( ret != HAL_OK ) {
 8001218:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800121c:	2b00      	cmp	r3, #0
 800121e:	d016      	beq.n	800124e <readSensor+0x86>
   		sprintf(out, "sensor read %d failed with error code %d\r\n", sensor, ret);
 8001220:	79fa      	ldrb	r2, [r7, #7]
 8001222:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8001226:	f107 0010 	add.w	r0, r7, #16
 800122a:	492c      	ldr	r1, [pc, #176]	@ (80012dc <readSensor+0x114>)
 800122c:	f007 fb76 	bl	800891c <siprintf>
   		HAL_UART_Transmit(&huart2, (uint8_t*)out, strlen(out), HAL_MAX_DELAY);
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f843 	bl	80002c0 <strlen>
 800123a:	4603      	mov	r3, r0
 800123c:	b29a      	uxth	r2, r3
 800123e:	f107 0110 	add.w	r1, r7, #16
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	4826      	ldr	r0, [pc, #152]	@ (80012e0 <readSensor+0x118>)
 8001248:	f005 ffd2 	bl	80071f0 <HAL_UART_Transmit>
 800124c:	e013      	b.n	8001276 <readSensor+0xae>
   	} else {
      val = buf16[1] << 8 | buf16[0];
 800124e:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800125a:	b21b      	sxth	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	b21b      	sxth	r3, r3
 8001260:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

//   		sprintf(b, "%d %d %d\r\n", buf16[1], buf16[0], val);
//   		HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

   		rgb[i] = val;
 8001264:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	3388      	adds	r3, #136	@ 0x88
 800126c:	443b      	add	r3, r7
 800126e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8001272:	f823 2c80 	strh.w	r2, [r3, #-128]
	for (int i = 0; i < 3; i++) {
 8001276:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800127a:	3301      	adds	r3, #1
 800127c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001280:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001284:	2b02      	cmp	r3, #2
 8001286:	ddb1      	ble.n	80011ec <readSensor+0x24>
   	}
	}

	uint16_t r = rgb[0];
 8001288:	893b      	ldrh	r3, [r7, #8]
 800128a:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
	uint16_t g = rgb[1];
 800128e:	897b      	ldrh	r3, [r7, #10]
 8001290:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
	uint16_t b = rgb[2];
 8001294:	89bb      	ldrh	r3, [r7, #12]
 8001296:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

	uint16_t val2 = r*1000 / (r + g + b) * 3;
 800129a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800129e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012a2:	fb03 f202 	mul.w	r2, r3, r2
 80012a6:	f8b7 1082 	ldrh.w	r1, [r7, #130]	@ 0x82
 80012aa:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 80012ae:	4419      	add	r1, r3
 80012b0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80012b4:	440b      	add	r3, r1
 80012b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	0052      	lsls	r2, r2, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c

//	sprintf(out, "sensor %d  r %d g %d b %d scaled %d\r\n", sensor, r, g, b, val2);
//	HAL_UART_Transmit(&huart2, (uint8_t*)out, strlen(out), HAL_MAX_DELAY);

	return val2;
 80012c6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c


}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3788      	adds	r7, #136	@ 0x88
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	0800acf8 	.word	0x0800acf8
 80012d8:	2000025c 	.word	0x2000025c
 80012dc:	0800abf8 	.word	0x0800abf8
 80012e0:	20000394 	.word	0x20000394

080012e4 <initSensors>:

void initSensors() {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0a0      	sub	sp, #128	@ 0x80
 80012e8:	af04      	add	r7, sp, #16
  uint8_t int_time;
  uint8_t gain;
  uint8_t enable;
  char b [100];

  int_time = 0xFF;
 80012ea:	23ff      	movs	r3, #255	@ 0xff
 80012ec:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
  gain = 0x03;
 80012f0:	2303      	movs	r3, #3
 80012f2:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
  enable = 0x01;
 80012f6:	2301      	movs	r3, #1
 80012f8:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

	for (int i = 0; i < sizeof(SENSORS)/sizeof(SENSORS[0]); i++) {
 80012fc:	2300      	movs	r3, #0
 80012fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001300:	e0c4      	b.n	800148c <initSensors+0x1a8>
		if (!selectMuxAddr(SENSORS[i])) {
 8001302:	4a66      	ldr	r2, [pc, #408]	@ (800149c <initSensors+0x1b8>)
 8001304:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001306:	4413      	add	r3, r2
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff02 	bl	8001114 <selectMuxAddr>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 80b6 	beq.w	8001484 <initSensors+0x1a0>
				continue;
		}

		// Write integration time
	  ret = HAL_I2C_Mem_Write(&hi2c1, TCS_ADDR, INT_REG, I2C_MEMADD_SIZE_8BIT, &int_time, 1, HAL_MAX_DELAY);
 8001318:	f04f 33ff 	mov.w	r3, #4294967295
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	2301      	movs	r3, #1
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	f107 036a 	add.w	r3, r7, #106	@ 0x6a
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2301      	movs	r3, #1
 800132a:	2281      	movs	r2, #129	@ 0x81
 800132c:	2152      	movs	r1, #82	@ 0x52
 800132e:	485c      	ldr	r0, [pc, #368]	@ (80014a0 <initSensors+0x1bc>)
 8001330:	f002 fe84 	bl	800403c <HAL_I2C_Mem_Write>
 8001334:	4603      	mov	r3, r0
 8001336:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

	  if ( ret != HAL_OK ) {
 800133a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800133e:	2b00      	cmp	r3, #0
 8001340:	d013      	beq.n	800136a <initSensors+0x86>
			sprintf(b, "fail 1 %d\r\n", ret);
 8001342:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	4956      	ldr	r1, [pc, #344]	@ (80014a4 <initSensors+0x1c0>)
 800134a:	4618      	mov	r0, r3
 800134c:	f007 fae6 	bl	800891c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4618      	mov	r0, r3
 8001354:	f7fe ffb4 	bl	80002c0 <strlen>
 8001358:	4603      	mov	r3, r0
 800135a:	b29a      	uxth	r2, r3
 800135c:	1d39      	adds	r1, r7, #4
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	4851      	ldr	r0, [pc, #324]	@ (80014a8 <initSensors+0x1c4>)
 8001364:	f005 ff44 	bl	80071f0 <HAL_UART_Transmit>
			return;
 8001368:	e094      	b.n	8001494 <initSensors+0x1b0>
		}

	  ret = HAL_I2C_Mem_Write(&hi2c1, TCS_ADDR, GAIN_REG, I2C_MEMADD_SIZE_8BIT, &gain, 1, HAL_MAX_DELAY);
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	9302      	str	r3, [sp, #8]
 8001370:	2301      	movs	r3, #1
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	f107 0369 	add.w	r3, r7, #105	@ 0x69
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	228f      	movs	r2, #143	@ 0x8f
 800137e:	2152      	movs	r1, #82	@ 0x52
 8001380:	4847      	ldr	r0, [pc, #284]	@ (80014a0 <initSensors+0x1bc>)
 8001382:	f002 fe5b 	bl	800403c <HAL_I2C_Mem_Write>
 8001386:	4603      	mov	r3, r0
 8001388:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

	  if ( ret != HAL_OK ) {
 800138c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001390:	2b00      	cmp	r3, #0
 8001392:	d013      	beq.n	80013bc <initSensors+0xd8>
			sprintf(b, "fail 2 %d\r\n", ret);
 8001394:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	4944      	ldr	r1, [pc, #272]	@ (80014ac <initSensors+0x1c8>)
 800139c:	4618      	mov	r0, r3
 800139e:	f007 fabd 	bl	800891c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7fe ff8b 	bl	80002c0 <strlen>
 80013aa:	4603      	mov	r3, r0
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	1d39      	adds	r1, r7, #4
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
 80013b4:	483c      	ldr	r0, [pc, #240]	@ (80014a8 <initSensors+0x1c4>)
 80013b6:	f005 ff1b 	bl	80071f0 <HAL_UART_Transmit>
			return;
 80013ba:	e06b      	b.n	8001494 <initSensors+0x1b0>
		}

	  HAL_Delay(3);
 80013bc:	2003      	movs	r0, #3
 80013be:	f001 fa9f 	bl	8002900 <HAL_Delay>

	  ret = HAL_I2C_Mem_Write(&hi2c1, TCS_ADDR, EN_REG, I2C_MEMADD_SIZE_8BIT, &enable, 1, HAL_MAX_DELAY);
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	2301      	movs	r3, #1
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2301      	movs	r3, #1
 80013d4:	2280      	movs	r2, #128	@ 0x80
 80013d6:	2152      	movs	r1, #82	@ 0x52
 80013d8:	4831      	ldr	r0, [pc, #196]	@ (80014a0 <initSensors+0x1bc>)
 80013da:	f002 fe2f 	bl	800403c <HAL_I2C_Mem_Write>
 80013de:	4603      	mov	r3, r0
 80013e0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

	  if ( ret != HAL_OK ) {
 80013e4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d013      	beq.n	8001414 <initSensors+0x130>
			sprintf(b, "fail 1 %d\r\n", ret);
 80013ec:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	492c      	ldr	r1, [pc, #176]	@ (80014a4 <initSensors+0x1c0>)
 80013f4:	4618      	mov	r0, r3
 80013f6:	f007 fa91 	bl	800891c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7fe ff5f 	bl	80002c0 <strlen>
 8001402:	4603      	mov	r3, r0
 8001404:	b29a      	uxth	r2, r3
 8001406:	1d39      	adds	r1, r7, #4
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
 800140c:	4826      	ldr	r0, [pc, #152]	@ (80014a8 <initSensors+0x1c4>)
 800140e:	f005 feef 	bl	80071f0 <HAL_UART_Transmit>
			return;
 8001412:	e03f      	b.n	8001494 <initSensors+0x1b0>
		}

	  enable |= 0x02;
 8001414:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	b2db      	uxtb	r3, r3
 800141e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

	  HAL_Delay(3);
 8001422:	2003      	movs	r0, #3
 8001424:	f001 fa6c 	bl	8002900 <HAL_Delay>

	  ret = HAL_I2C_Mem_Write(&hi2c1, TCS_ADDR, EN_REG, I2C_MEMADD_SIZE_8BIT, &enable, 1, HAL_MAX_DELAY);
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
 800142c:	9302      	str	r3, [sp, #8]
 800142e:	2301      	movs	r3, #1
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2301      	movs	r3, #1
 800143a:	2280      	movs	r2, #128	@ 0x80
 800143c:	2152      	movs	r1, #82	@ 0x52
 800143e:	4818      	ldr	r0, [pc, #96]	@ (80014a0 <initSensors+0x1bc>)
 8001440:	f002 fdfc 	bl	800403c <HAL_I2C_Mem_Write>
 8001444:	4603      	mov	r3, r0
 8001446:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

	  if ( ret != HAL_OK ) {
 800144a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800144e:	2b00      	cmp	r3, #0
 8001450:	d013      	beq.n	800147a <initSensors+0x196>
			sprintf(b, "fail 1 %d\r\n", ret);
 8001452:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	4912      	ldr	r1, [pc, #72]	@ (80014a4 <initSensors+0x1c0>)
 800145a:	4618      	mov	r0, r3
 800145c:	f007 fa5e 	bl	800891c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	4618      	mov	r0, r3
 8001464:	f7fe ff2c 	bl	80002c0 <strlen>
 8001468:	4603      	mov	r3, r0
 800146a:	b29a      	uxth	r2, r3
 800146c:	1d39      	adds	r1, r7, #4
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
 8001472:	480d      	ldr	r0, [pc, #52]	@ (80014a8 <initSensors+0x1c4>)
 8001474:	f005 febc 	bl	80071f0 <HAL_UART_Transmit>
			return;
 8001478:	e00c      	b.n	8001494 <initSensors+0x1b0>
		}

	  HAL_Delay(300);
 800147a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800147e:	f001 fa3f 	bl	8002900 <HAL_Delay>
 8001482:	e000      	b.n	8001486 <initSensors+0x1a2>
				continue;
 8001484:	bf00      	nop
	for (int i = 0; i < sizeof(SENSORS)/sizeof(SENSORS[0]); i++) {
 8001486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001488:	3301      	adds	r3, #1
 800148a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800148c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800148e:	2b03      	cmp	r3, #3
 8001490:	f67f af37 	bls.w	8001302 <initSensors+0x1e>

	}
}
 8001494:	3770      	adds	r7, #112	@ 0x70
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	0800acfc 	.word	0x0800acfc
 80014a0:	2000025c 	.word	0x2000025c
 80014a4:	0800ac24 	.word	0x0800ac24
 80014a8:	20000394 	.word	0x20000394
 80014ac:	0800ac30 	.word	0x0800ac30

080014b0 <manCalibrate>:

//	runMotors(LEFT, FWD, 0);
//	runMotors(RIGHT, FWD, 0);
}

void manCalibrate(uint16_t* tape_val, uint16_t* wood_val) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b09e      	sub	sp, #120	@ 0x78
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
	HAL_Delay(50);
 80014ba:	2032      	movs	r0, #50	@ 0x32
 80014bc:	f001 fa20 	bl	8002900 <HAL_Delay>

	char b [100];

	uint16_t tape = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	uint16_t wood = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74

	uint8_t reads = 10;
 80014cc:	230a      	movs	r3, #10
 80014ce:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	for (int i = 0; i < reads; i++) {
 80014d2:	2300      	movs	r3, #0
 80014d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80014d6:	e02e      	b.n	8001536 <manCalibrate+0x86>
		tape += readSensor(SENSORS[1]);
 80014d8:	2303      	movs	r3, #3
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fe74 	bl	80011c8 <readSensor>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80014e8:	4413      	add	r3, r2
 80014ea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		tape += readSensor(SENSORS[2]);
 80014ee:	2304      	movs	r3, #4
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fe69 	bl	80011c8 <readSensor>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80014fe:	4413      	add	r3, r2
 8001500:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		wood += readSensor(SENSORS[0]);
 8001504:	2302      	movs	r3, #2
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fe5e 	bl	80011c8 <readSensor>
 800150c:	4603      	mov	r3, r0
 800150e:	461a      	mov	r2, r3
 8001510:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8001514:	4413      	add	r3, r2
 8001516:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
		wood += readSensor(SENSORS[3]);
 800151a:	2305      	movs	r3, #5
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fe53 	bl	80011c8 <readSensor>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800152a:	4413      	add	r3, r2
 800152c:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
	for (int i = 0; i < reads; i++) {
 8001530:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001532:	3301      	adds	r3, #1
 8001534:	673b      	str	r3, [r7, #112]	@ 0x70
 8001536:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800153a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800153c:	429a      	cmp	r2, r3
 800153e:	dbcb      	blt.n	80014d8 <manCalibrate+0x28>
	}

	*tape_val = tape / (2*reads);
 8001540:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8001544:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	fb92 f3f3 	sdiv	r3, r2, r3
 800154e:	b29a      	uxth	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	801a      	strh	r2, [r3, #0]
	*wood_val = wood / (2*reads);
 8001554:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8001558:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001562:	b29a      	uxth	r2, r3
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	801a      	strh	r2, [r3, #0]

	sprintf(b, "wood %d tape %d\r\n", *wood_val, *tape_val);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	f107 0008 	add.w	r0, r7, #8
 8001576:	490a      	ldr	r1, [pc, #40]	@ (80015a0 <manCalibrate+0xf0>)
 8001578:	f007 f9d0 	bl	800891c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 800157c:	f107 0308 	add.w	r3, r7, #8
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe fe9d 	bl	80002c0 <strlen>
 8001586:	4603      	mov	r3, r0
 8001588:	b29a      	uxth	r2, r3
 800158a:	f107 0108 	add.w	r1, r7, #8
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
 8001592:	4804      	ldr	r0, [pc, #16]	@ (80015a4 <manCalibrate+0xf4>)
 8001594:	f005 fe2c 	bl	80071f0 <HAL_UART_Transmit>
}
 8001598:	bf00      	nop
 800159a:	3778      	adds	r7, #120	@ 0x78
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	0800ac68 	.word	0x0800ac68
 80015a4:	20000394 	.word	0x20000394

080015a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015ac:	b0aa      	sub	sp, #168	@ 0xa8
 80015ae:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b0:	f001 f935 	bl	800281e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b4:	f000 fa98 	bl	8001ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b8:	f000 fd64 	bl	8002084 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015bc:	f000 fd16 	bl	8001fec <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80015c0:	f000 fb86 	bl	8001cd0 <MX_TIM1_Init>
  MX_ADC2_Init();
 80015c4:	f000 fade 	bl	8001b84 <MX_ADC2_Init>
  MX_TIM3_Init();
 80015c8:	f000 fcb0 	bl	8001f2c <MX_TIM3_Init>
  MX_TIM2_Init();
 80015cc:	f000 fc54 	bl	8001e78 <MX_TIM2_Init>
  MX_I2C1_Init();
 80015d0:	f000 fb3e 	bl	8001c50 <MX_I2C1_Init>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);


  HAL_Delay(700);
 80015d4:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80015d8:	f001 f992 	bl	8002900 <HAL_Delay>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015dc:	2100      	movs	r1, #0
 80015de:	48c4      	ldr	r0, [pc, #784]	@ (80018f0 <main+0x348>)
 80015e0:	f004 fb34 	bl	8005c4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80015e4:	2104      	movs	r1, #4
 80015e6:	48c2      	ldr	r0, [pc, #776]	@ (80018f0 <main+0x348>)
 80015e8:	f004 fb30 	bl	8005c4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80015ec:	2108      	movs	r1, #8
 80015ee:	48c0      	ldr	r0, [pc, #768]	@ (80018f0 <main+0x348>)
 80015f0:	f004 fb2c 	bl	8005c4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80015f4:	210c      	movs	r1, #12
 80015f6:	48be      	ldr	r0, [pc, #760]	@ (80018f0 <main+0x348>)
 80015f8:	f004 fb28 	bl	8005c4c <HAL_TIM_PWM_Start>

  // Make sure all motors are stopped
  TIM1->CCR1 = 0;
 80015fc:	4bbd      	ldr	r3, [pc, #756]	@ (80018f4 <main+0x34c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = 0;
 8001602:	4bbc      	ldr	r3, [pc, #752]	@ (80018f4 <main+0x34c>)
 8001604:	2200      	movs	r2, #0
 8001606:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR3 = 0;
 8001608:	4bba      	ldr	r3, [pc, #744]	@ (80018f4 <main+0x34c>)
 800160a:	2200      	movs	r2, #0
 800160c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM1->CCR4 = 0;
 800160e:	4bb9      	ldr	r3, [pc, #740]	@ (80018f4 <main+0x34c>)
 8001610:	2200      	movs	r2, #0
 8001612:	641a      	str	r2, [r3, #64]	@ 0x40

  HAL_GPIO_WritePin(GPIOA, LS_DIR_Pin, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	2101      	movs	r1, #1
 8001618:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800161c:	f002 fb42 	bl	8003ca4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, RS_DIR_Pin, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	2102      	movs	r1, #2
 8001624:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001628:	f002 fb3c 	bl	8003ca4 <HAL_GPIO_WritePin>

  char b [100];

  sprintf(b, "left sensor right sensor \r\n");
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	49b1      	ldr	r1, [pc, #708]	@ (80018f8 <main+0x350>)
 8001632:	4618      	mov	r0, r3
 8001634:	f007 f972 	bl	800891c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe fe3f 	bl	80002c0 <strlen>
 8001642:	4603      	mov	r3, r0
 8001644:	b29a      	uxth	r2, r3
 8001646:	f107 010c 	add.w	r1, r7, #12
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	48ab      	ldr	r0, [pc, #684]	@ (80018fc <main+0x354>)
 8001650:	f005 fdce 	bl	80071f0 <HAL_UART_Transmit>

  initSensors();
 8001654:	f7ff fe46 	bl	80012e4 <initSensors>


  uint16_t tape_val;
  uint16_t wood_val;

  HAL_Delay(100);
 8001658:	2064      	movs	r0, #100	@ 0x64
 800165a:	f001 f951 	bl	8002900 <HAL_Delay>


  manCalibrate(&tape_val, &wood_val);
 800165e:	f107 0208 	add.w	r2, r7, #8
 8001662:	f107 030a 	add.w	r3, r7, #10
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff21 	bl	80014b0 <manCalibrate>

  runMotors(LEFT, FWD, 0.5);
 800166e:	ed9f 0b98 	vldr	d0, [pc, #608]	@ 80018d0 <main+0x328>
 8001672:	2100      	movs	r1, #0
 8001674:	2000      	movs	r0, #0
 8001676:	f7ff fc57 	bl	8000f28 <runMotors>
  runMotors(RIGHT, FWD, 0.5);
 800167a:	ed9f 0b95 	vldr	d0, [pc, #596]	@ 80018d0 <main+0x328>
 800167e:	2100      	movs	r1, #0
 8001680:	2001      	movs	r0, #1
 8001682:	f7ff fc51 	bl	8000f28 <runMotors>

  HAL_Delay(300);
 8001686:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800168a:	f001 f939 	bl	8002900 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  	uint16_t TARGET = (tape_val+wood_val)/2;
 800168e:	897b      	ldrh	r3, [r7, #10]
 8001690:	461a      	mov	r2, r3
 8001692:	893b      	ldrh	r3, [r7, #8]
 8001694:	4413      	add	r3, r2
 8001696:	0fda      	lsrs	r2, r3, #31
 8001698:	4413      	add	r3, r2
 800169a:	105b      	asrs	r3, r3, #1
 800169c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  	uint16_t READING_RANGE = TARGET - wood_val;
 80016a0:	893b      	ldrh	r3, [r7, #8]
 80016a2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c

  	uint16_t right = readSensor(SENSORS[1]);
 80016ac:	2303      	movs	r3, #3
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fd8a 	bl	80011c8 <readSensor>
 80016b4:	4603      	mov	r3, r0
 80016b6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
  	uint16_t left = readSensor(SENSORS[2]);
 80016ba:	2304      	movs	r3, #4
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fd83 	bl	80011c8 <readSensor>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

  	sprintf(b, "left sensor %d right sensor %d\r\n", right, left);
 80016c8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80016cc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80016d0:	f107 000c 	add.w	r0, r7, #12
 80016d4:	498a      	ldr	r1, [pc, #552]	@ (8001900 <main+0x358>)
 80016d6:	f007 f921 	bl	800891c <siprintf>
  	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe fdee 	bl	80002c0 <strlen>
 80016e4:	4603      	mov	r3, r0
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	f107 010c 	add.w	r1, r7, #12
 80016ec:	f04f 33ff 	mov.w	r3, #4294967295
 80016f0:	4882      	ldr	r0, [pc, #520]	@ (80018fc <main+0x354>)
 80016f2:	f005 fd7d 	bl	80071f0 <HAL_UART_Transmit>

  	int16_t error_r = right - TARGET;
 80016f6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80016fa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	b29b      	uxth	r3, r3
 8001702:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  	int16_t error_l = left - TARGET;
 8001706:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 800170a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	b29b      	uxth	r3, r3
 8001712:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
//  	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

  	double duty_r;//MIN_DUTY + ratio/(tape/wood)*(MAX_DUTY-MIN_DUTY);//
  	double duty_l;//MIN_DUTY + (1/ratio)/(tape/wood)*(MAX_DUTY-MIN_DUTY); //

  	if (left < wood_val*1.1 && right < 0.5*(tape_val-wood_val) + wood_val) {
 8001716:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe ff2a 	bl	8000574 <__aeabi_i2d>
 8001720:	4682      	mov	sl, r0
 8001722:	468b      	mov	fp, r1
 8001724:	893b      	ldrh	r3, [r7, #8]
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe ff24 	bl	8000574 <__aeabi_i2d>
 800172c:	a36a      	add	r3, pc, #424	@ (adr r3, 80018d8 <main+0x330>)
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	f7fe ff89 	bl	8000648 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4650      	mov	r0, sl
 800173c:	4659      	mov	r1, fp
 800173e:	f7ff f9f5 	bl	8000b2c <__aeabi_dcmplt>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d054      	beq.n	80017f2 <main+0x24a>
 8001748:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe ff11 	bl	8000574 <__aeabi_i2d>
 8001752:	4682      	mov	sl, r0
 8001754:	468b      	mov	fp, r1
 8001756:	897b      	ldrh	r3, [r7, #10]
 8001758:	461a      	mov	r2, r3
 800175a:	893b      	ldrh	r3, [r7, #8]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe ff08 	bl	8000574 <__aeabi_i2d>
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	4b66      	ldr	r3, [pc, #408]	@ (8001904 <main+0x35c>)
 800176a:	f7fe ff6d 	bl	8000648 <__aeabi_dmul>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	e9c7 2300 	strd	r2, r3, [r7]
 8001776:	893b      	ldrh	r3, [r7, #8]
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fefb 	bl	8000574 <__aeabi_i2d>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001786:	f7fe fda9 	bl	80002dc <__adddf3>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4650      	mov	r0, sl
 8001790:	4659      	mov	r1, fp
 8001792:	f7ff f9cb 	bl	8000b2c <__aeabi_dcmplt>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d02a      	beq.n	80017f2 <main+0x24a>
  	  	sprintf(b, "RIGHT TURN\r\n");
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	4959      	ldr	r1, [pc, #356]	@ (8001908 <main+0x360>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	f007 f8ba 	bl	800891c <siprintf>
  	  	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fd87 	bl	80002c0 <strlen>
 80017b2:	4603      	mov	r3, r0
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	f107 010c 	add.w	r1, r7, #12
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	484f      	ldr	r0, [pc, #316]	@ (80018fc <main+0x354>)
 80017c0:	f005 fd16 	bl	80071f0 <HAL_UART_Transmit>

  		duty_r = -1*MAX_DUTY*0.7;
 80017c4:	a346      	add	r3, pc, #280	@ (adr r3, 80018e0 <main+0x338>)
 80017c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ca:	4614      	mov	r4, r2
 80017cc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80017d0:	a345      	add	r3, pc, #276	@ (adr r3, 80018e8 <main+0x340>)
 80017d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d6:	4620      	mov	r0, r4
 80017d8:	4629      	mov	r1, r5
 80017da:	f7fe ff35 	bl	8000648 <__aeabi_dmul>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
  		duty_l = MAX_DUTY*1;
 80017e6:	a33e      	add	r3, pc, #248	@ (adr r3, 80018e0 <main+0x338>)
 80017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ec:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 80017f0:	e130      	b.n	8001a54 <main+0x4ac>
  	} else if (right < wood_val*1.1 && left < 0.5*(tape_val-wood_val) + wood_val) {
 80017f2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe febc 	bl	8000574 <__aeabi_i2d>
 80017fc:	4682      	mov	sl, r0
 80017fe:	468b      	mov	fp, r1
 8001800:	893b      	ldrh	r3, [r7, #8]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe feb6 	bl	8000574 <__aeabi_i2d>
 8001808:	a333      	add	r3, pc, #204	@ (adr r3, 80018d8 <main+0x330>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7fe ff1b 	bl	8000648 <__aeabi_dmul>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4650      	mov	r0, sl
 8001818:	4659      	mov	r1, fp
 800181a:	f7ff f987 	bl	8000b2c <__aeabi_dcmplt>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d075      	beq.n	8001910 <main+0x368>
 8001824:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fea3 	bl	8000574 <__aeabi_i2d>
 800182e:	4682      	mov	sl, r0
 8001830:	468b      	mov	fp, r1
 8001832:	897b      	ldrh	r3, [r7, #10]
 8001834:	461a      	mov	r2, r3
 8001836:	893b      	ldrh	r3, [r7, #8]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fe9a 	bl	8000574 <__aeabi_i2d>
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	4b2f      	ldr	r3, [pc, #188]	@ (8001904 <main+0x35c>)
 8001846:	f7fe feff 	bl	8000648 <__aeabi_dmul>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	e9c7 2300 	strd	r2, r3, [r7]
 8001852:	893b      	ldrh	r3, [r7, #8]
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fe8d 	bl	8000574 <__aeabi_i2d>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001862:	f7fe fd3b 	bl	80002dc <__adddf3>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4650      	mov	r0, sl
 800186c:	4659      	mov	r1, fp
 800186e:	f7ff f95d 	bl	8000b2c <__aeabi_dcmplt>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d04b      	beq.n	8001910 <main+0x368>
  	  	sprintf(b, "LEFT TURN\r\n");
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	4923      	ldr	r1, [pc, #140]	@ (800190c <main+0x364>)
 800187e:	4618      	mov	r0, r3
 8001880:	f007 f84c 	bl	800891c <siprintf>
  	  	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001884:	f107 030c 	add.w	r3, r7, #12
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fd19 	bl	80002c0 <strlen>
 800188e:	4603      	mov	r3, r0
 8001890:	b29a      	uxth	r2, r3
 8001892:	f107 010c 	add.w	r1, r7, #12
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	4818      	ldr	r0, [pc, #96]	@ (80018fc <main+0x354>)
 800189c:	f005 fca8 	bl	80071f0 <HAL_UART_Transmit>

  		duty_l = -1*MAX_DUTY*0.7;
 80018a0:	a30f      	add	r3, pc, #60	@ (adr r3, 80018e0 <main+0x338>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	4690      	mov	r8, r2
 80018a8:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80018ac:	a30e      	add	r3, pc, #56	@ (adr r3, 80018e8 <main+0x340>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	4640      	mov	r0, r8
 80018b4:	4649      	mov	r1, r9
 80018b6:	f7fe fec7 	bl	8000648 <__aeabi_dmul>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
  		duty_r = MAX_DUTY*1;
 80018c2:	a307      	add	r3, pc, #28	@ (adr r3, 80018e0 <main+0x338>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 80018cc:	e0c2      	b.n	8001a54 <main+0x4ac>
 80018ce:	bf00      	nop
 80018d0:	00000000 	.word	0x00000000
 80018d4:	3fe00000 	.word	0x3fe00000
 80018d8:	9999999a 	.word	0x9999999a
 80018dc:	3ff19999 	.word	0x3ff19999
 80018e0:	33333333 	.word	0x33333333
 80018e4:	3fe33333 	.word	0x3fe33333
 80018e8:	66666666 	.word	0x66666666
 80018ec:	3fe66666 	.word	0x3fe66666
 80018f0:	200002b0 	.word	0x200002b0
 80018f4:	40012c00 	.word	0x40012c00
 80018f8:	0800ac7c 	.word	0x0800ac7c
 80018fc:	20000394 	.word	0x20000394
 8001900:	0800ac98 	.word	0x0800ac98
 8001904:	3fe00000 	.word	0x3fe00000
 8001908:	0800acbc 	.word	0x0800acbc
 800190c:	0800accc 	.word	0x0800accc
  	} else {
  	  	double delta_r = (kp * error_r ) / READING_RANGE * DUTY_RANGE;
 8001910:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fe2d 	bl	8000574 <__aeabi_i2d>
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	4b6e      	ldr	r3, [pc, #440]	@ (8001ad8 <main+0x530>)
 8001920:	f7fe fe92 	bl	8000648 <__aeabi_dmul>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4692      	mov	sl, r2
 800192a:	469b      	mov	fp, r3
 800192c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fe1f 	bl	8000574 <__aeabi_i2d>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4650      	mov	r0, sl
 800193c:	4659      	mov	r1, fp
 800193e:	f7fe ffad 	bl	800089c <__aeabi_ddiv>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	a35f      	add	r3, pc, #380	@ (adr r3, 8001ac8 <main+0x520>)
 800194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001950:	f7fe fe7a 	bl	8000648 <__aeabi_dmul>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  	  	double delta_l = (kp * error_l ) / READING_RANGE * DUTY_RANGE;
 800195c:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	@ 0x84
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fe07 	bl	8000574 <__aeabi_i2d>
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ad8 <main+0x530>)
 800196c:	f7fe fe6c 	bl	8000648 <__aeabi_dmul>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4692      	mov	sl, r2
 8001976:	469b      	mov	fp, r3
 8001978:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fdf9 	bl	8000574 <__aeabi_i2d>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4650      	mov	r0, sl
 8001988:	4659      	mov	r1, fp
 800198a:	f7fe ff87 	bl	800089c <__aeabi_ddiv>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	a34c      	add	r3, pc, #304	@ (adr r3, 8001ac8 <main+0x520>)
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	f7fe fe54 	bl	8000648 <__aeabi_dmul>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  		duty_r = AVG_DUTY - delta_r;
 80019a8:	a147      	add	r1, pc, #284	@ (adr r1, 8001ac8 <main+0x520>)
 80019aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019ae:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80019b2:	f7fe fc91 	bl	80002d8 <__aeabi_dsub>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
  		duty_l = AVG_DUTY - delta_l;
 80019be:	a142      	add	r1, pc, #264	@ (adr r1, 8001ac8 <main+0x520>)
 80019c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019c4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80019c8:	f7fe fc86 	bl	80002d8 <__aeabi_dsub>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

  	    if (duty_l < MIN_DUTY) duty_l = MIN_DUTY;
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80019e0:	f7ff f8a4 	bl	8000b2c <__aeabi_dcmplt>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d005      	beq.n	80019f6 <main+0x44e>
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
  	    if (duty_l > MAX_DUTY) duty_l = MAX_DUTY;
 80019f6:	a336      	add	r3, pc, #216	@ (adr r3, 8001ad0 <main+0x528>)
 80019f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fc:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001a00:	f7ff f8b2 	bl	8000b68 <__aeabi_dcmpgt>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d004      	beq.n	8001a14 <main+0x46c>
 8001a0a:	a331      	add	r3, pc, #196	@ (adr r3, 8001ad0 <main+0x528>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
  	    if (duty_r < MIN_DUTY) duty_r = MIN_DUTY;
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001a20:	f7ff f884 	bl	8000b2c <__aeabi_dcmplt>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d005      	beq.n	8001a36 <main+0x48e>
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
  	    if (duty_r > MAX_DUTY) duty_r = MAX_DUTY;
 8001a36:	a326      	add	r3, pc, #152	@ (adr r3, 8001ad0 <main+0x528>)
 8001a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001a40:	f7ff f892 	bl	8000b68 <__aeabi_dcmpgt>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d004      	beq.n	8001a54 <main+0x4ac>
 8001a4a:	a321      	add	r3, pc, #132	@ (adr r3, 8001ad0 <main+0x528>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
  	}

  //	sprintf(b, "delta_r %f duty_r %f\r\n", delta_r, duty_r);
  //	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
  	sprintf(b, "left duty %f right duty %f\r\n", duty_l*100, duty_r*100);
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	4b20      	ldr	r3, [pc, #128]	@ (8001adc <main+0x534>)
 8001a5a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001a5e:	f7fe fdf3 	bl	8000648 <__aeabi_dmul>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4692      	mov	sl, r2
 8001a68:	469b      	mov	fp, r3
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001adc <main+0x534>)
 8001a70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001a74:	f7fe fde8 	bl	8000648 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	f107 000c 	add.w	r0, r7, #12
 8001a80:	e9cd 2300 	strd	r2, r3, [sp]
 8001a84:	4652      	mov	r2, sl
 8001a86:	465b      	mov	r3, fp
 8001a88:	4915      	ldr	r1, [pc, #84]	@ (8001ae0 <main+0x538>)
 8001a8a:	f006 ff47 	bl	800891c <siprintf>
  	HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fc14 	bl	80002c0 <strlen>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	f107 010c 	add.w	r1, r7, #12
 8001aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa4:	480f      	ldr	r0, [pc, #60]	@ (8001ae4 <main+0x53c>)
 8001aa6:	f005 fba3 	bl	80071f0 <HAL_UART_Transmit>

  	runMotors(RIGHT, FWD, duty_r);
 8001aaa:	ed97 0b26 	vldr	d0, [r7, #152]	@ 0x98
 8001aae:	2100      	movs	r1, #0
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f7ff fa39 	bl	8000f28 <runMotors>
  	runMotors(LEFT, FWD, duty_l);
 8001ab6:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8001aba:	2100      	movs	r1, #0
 8001abc:	2000      	movs	r0, #0
 8001abe:	f7ff fa33 	bl	8000f28 <runMotors>
  {
 8001ac2:	e5e4      	b.n	800168e <main+0xe6>
 8001ac4:	f3af 8000 	nop.w
 8001ac8:	9999999a 	.word	0x9999999a
 8001acc:	3fd99999 	.word	0x3fd99999
 8001ad0:	33333333 	.word	0x33333333
 8001ad4:	3fe33333 	.word	0x3fe33333
 8001ad8:	3ff00000 	.word	0x3ff00000
 8001adc:	40590000 	.word	0x40590000
 8001ae0:	0800acd8 	.word	0x0800acd8
 8001ae4:	20000394 	.word	0x20000394

08001ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b094      	sub	sp, #80	@ 0x50
 8001aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aee:	f107 0318 	add.w	r3, r7, #24
 8001af2:	2238      	movs	r2, #56	@ 0x38
 8001af4:	2100      	movs	r1, #0
 8001af6:	4618      	mov	r0, r3
 8001af8:	f006 ff73 	bl	80089e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
 8001b08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b0a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b0e:	f003 f81d 	bl	8004b4c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b12:	2302      	movs	r3, #2
 8001b14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b1c:	2340      	movs	r3, #64	@ 0x40
 8001b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b20:	2302      	movs	r3, #2
 8001b22:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b24:	2302      	movs	r3, #2
 8001b26:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 9;
 8001b2c:	2309      	movs	r3, #9
 8001b2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b30:	2302      	movs	r3, #2
 8001b32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b34:	2302      	movs	r3, #2
 8001b36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b3c:	f107 0318 	add.w	r3, r7, #24
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 f8b7 	bl	8004cb4 <HAL_RCC_OscConfig>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001b4c:	f000 fafc 	bl	8002148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b50:	230f      	movs	r3, #15
 8001b52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b54:	2303      	movs	r3, #3
 8001b56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	2102      	movs	r1, #2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 fbb4 	bl	80052d8 <HAL_RCC_ClockConfig>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001b76:	f000 fae7 	bl	8002148 <Error_Handler>
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	3750      	adds	r7, #80	@ 0x50
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f006 ff26 	bl	80089e2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001b96:	4b2b      	ldr	r3, [pc, #172]	@ (8001c44 <MX_ADC2_Init+0xc0>)
 8001b98:	4a2b      	ldr	r2, [pc, #172]	@ (8001c48 <MX_ADC2_Init+0xc4>)
 8001b9a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001b9c:	4b29      	ldr	r3, [pc, #164]	@ (8001c44 <MX_ADC2_Init+0xc0>)
 8001b9e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ba2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001ba4:	4b27      	ldr	r3, [pc, #156]	@ (8001c44 <MX_ADC2_Init+0xc0>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001baa:	4b26      	ldr	r3, [pc, #152]	@ (8001c44 <MX_ADC2_Init+0xc0>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001bb0:	4b24      	ldr	r3, [pc, #144]	@ (8001c44 <MX_ADC2_Init+0xc0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bb6:	4b23      	ldr	r3, [pc, #140]	@ (8001c44 <MX_ADC2_Init+0xc0>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bbc:	4b21      	ldr	r3, [pc, #132]	@ (8001c44 <MX_ADC2_Init+0xc0>)
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001bc2:	4b20      	ldr	r3, [pc, #128]	@ (8001c44 <MX_ADC2_Init+0xc0>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c44 <MX_ADC2_Init+0xc0>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001bce:	4b1d      	ldr	r3, [pc, #116]	@ (8001c44 <MX_ADC2_Init+0xc0>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c44 <MX_ADC2_Init+0xc0>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bdc:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <MX_ADC2_Init+0xc0>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001be2:	4b18      	ldr	r3, [pc, #96]	@ (8001c44 <MX_ADC2_Init+0xc0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001be8:	4b16      	ldr	r3, [pc, #88]	@ (8001c44 <MX_ADC2_Init+0xc0>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bf0:	4b14      	ldr	r3, [pc, #80]	@ (8001c44 <MX_ADC2_Init+0xc0>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001bf6:	4b13      	ldr	r3, [pc, #76]	@ (8001c44 <MX_ADC2_Init+0xc0>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001bfe:	4811      	ldr	r0, [pc, #68]	@ (8001c44 <MX_ADC2_Init+0xc0>)
 8001c00:	f001 f876 	bl	8002cf0 <HAL_ADC_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001c0a:	f000 fa9d 	bl	8002148 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c4c <MX_ADC2_Init+0xc8>)
 8001c10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c12:	2306      	movs	r3, #6
 8001c14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c1a:	237f      	movs	r3, #127	@ 0x7f
 8001c1c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c1e:	2304      	movs	r3, #4
 8001c20:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c26:	463b      	mov	r3, r7
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4806      	ldr	r0, [pc, #24]	@ (8001c44 <MX_ADC2_Init+0xc0>)
 8001c2c:	f001 f9e4 	bl	8002ff8 <HAL_ADC_ConfigChannel>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001c36:	f000 fa87 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	3720      	adds	r7, #32
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200001f0 	.word	0x200001f0
 8001c48:	50000100 	.word	0x50000100
 8001c4c:	47520000 	.word	0x47520000

08001c50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c54:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc4 <MX_I2C1_Init+0x74>)
 8001c56:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc8 <MX_I2C1_Init+0x78>)
 8001c58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc4 <MX_I2C1_Init+0x74>)
 8001c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ccc <MX_I2C1_Init+0x7c>)
 8001c5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c60:	4b18      	ldr	r3, [pc, #96]	@ (8001cc4 <MX_I2C1_Init+0x74>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c66:	4b17      	ldr	r3, [pc, #92]	@ (8001cc4 <MX_I2C1_Init+0x74>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c6c:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <MX_I2C1_Init+0x74>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c72:	4b14      	ldr	r3, [pc, #80]	@ (8001cc4 <MX_I2C1_Init+0x74>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c78:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <MX_I2C1_Init+0x74>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c7e:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <MX_I2C1_Init+0x74>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <MX_I2C1_Init+0x74>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c8a:	480e      	ldr	r0, [pc, #56]	@ (8001cc4 <MX_I2C1_Init+0x74>)
 8001c8c:	f002 f822 	bl	8003cd4 <HAL_I2C_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c96:	f000 fa57 	bl	8002148 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4809      	ldr	r0, [pc, #36]	@ (8001cc4 <MX_I2C1_Init+0x74>)
 8001c9e:	f002 febd 	bl	8004a1c <HAL_I2CEx_ConfigAnalogFilter>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ca8:	f000 fa4e 	bl	8002148 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cac:	2100      	movs	r1, #0
 8001cae:	4805      	ldr	r0, [pc, #20]	@ (8001cc4 <MX_I2C1_Init+0x74>)
 8001cb0:	f002 feff 	bl	8004ab2 <HAL_I2CEx_ConfigDigitalFilter>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cba:	f000 fa45 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	2000025c 	.word	0x2000025c
 8001cc8:	40005400 	.word	0x40005400
 8001ccc:	10808dd3 	.word	0x10808dd3

08001cd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b09c      	sub	sp, #112	@ 0x70
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cf0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
 8001d00:	615a      	str	r2, [r3, #20]
 8001d02:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2234      	movs	r2, #52	@ 0x34
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f006 fe69 	bl	80089e2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d10:	4b57      	ldr	r3, [pc, #348]	@ (8001e70 <MX_TIM1_Init+0x1a0>)
 8001d12:	4a58      	ldr	r2, [pc, #352]	@ (8001e74 <MX_TIM1_Init+0x1a4>)
 8001d14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001d16:	4b56      	ldr	r3, [pc, #344]	@ (8001e70 <MX_TIM1_Init+0x1a0>)
 8001d18:	2247      	movs	r2, #71	@ 0x47
 8001d1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1c:	4b54      	ldr	r3, [pc, #336]	@ (8001e70 <MX_TIM1_Init+0x1a0>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001d22:	4b53      	ldr	r3, [pc, #332]	@ (8001e70 <MX_TIM1_Init+0x1a0>)
 8001d24:	2263      	movs	r2, #99	@ 0x63
 8001d26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d28:	4b51      	ldr	r3, [pc, #324]	@ (8001e70 <MX_TIM1_Init+0x1a0>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d2e:	4b50      	ldr	r3, [pc, #320]	@ (8001e70 <MX_TIM1_Init+0x1a0>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d34:	4b4e      	ldr	r3, [pc, #312]	@ (8001e70 <MX_TIM1_Init+0x1a0>)
 8001d36:	2280      	movs	r2, #128	@ 0x80
 8001d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d3a:	484d      	ldr	r0, [pc, #308]	@ (8001e70 <MX_TIM1_Init+0x1a0>)
 8001d3c:	f003 fed8 	bl	8005af0 <HAL_TIM_Base_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d46:	f000 f9ff 	bl	8002148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d4e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d50:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d54:	4619      	mov	r1, r3
 8001d56:	4846      	ldr	r0, [pc, #280]	@ (8001e70 <MX_TIM1_Init+0x1a0>)
 8001d58:	f004 fa80 	bl	800625c <HAL_TIM_ConfigClockSource>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d62:	f000 f9f1 	bl	8002148 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d66:	4842      	ldr	r0, [pc, #264]	@ (8001e70 <MX_TIM1_Init+0x1a0>)
 8001d68:	f003 ff19 	bl	8005b9e <HAL_TIM_PWM_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001d72:	f000 f9e9 	bl	8002148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d82:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d86:	4619      	mov	r1, r3
 8001d88:	4839      	ldr	r0, [pc, #228]	@ (8001e70 <MX_TIM1_Init+0x1a0>)
 8001d8a:	f005 f8d3 	bl	8006f34 <HAL_TIMEx_MasterConfigSynchronization>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001d94:	f000 f9d8 	bl	8002148 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d98:	2360      	movs	r3, #96	@ 0x60
 8001d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001da0:	2300      	movs	r3, #0
 8001da2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001da4:	2300      	movs	r3, #0
 8001da6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dac:	2300      	movs	r3, #0
 8001dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001db0:	2300      	movs	r3, #0
 8001db2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001db4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001db8:	2200      	movs	r2, #0
 8001dba:	4619      	mov	r1, r3
 8001dbc:	482c      	ldr	r0, [pc, #176]	@ (8001e70 <MX_TIM1_Init+0x1a0>)
 8001dbe:	f004 f939 	bl	8006034 <HAL_TIM_PWM_ConfigChannel>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001dc8:	f000 f9be 	bl	8002148 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dcc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4826      	ldr	r0, [pc, #152]	@ (8001e70 <MX_TIM1_Init+0x1a0>)
 8001dd6:	f004 f92d 	bl	8006034 <HAL_TIM_PWM_ConfigChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001de0:	f000 f9b2 	bl	8002148 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001de4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001de8:	2208      	movs	r2, #8
 8001dea:	4619      	mov	r1, r3
 8001dec:	4820      	ldr	r0, [pc, #128]	@ (8001e70 <MX_TIM1_Init+0x1a0>)
 8001dee:	f004 f921 	bl	8006034 <HAL_TIM_PWM_ConfigChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001df8:	f000 f9a6 	bl	8002148 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001dfc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e00:	220c      	movs	r2, #12
 8001e02:	4619      	mov	r1, r3
 8001e04:	481a      	ldr	r0, [pc, #104]	@ (8001e70 <MX_TIM1_Init+0x1a0>)
 8001e06:	f004 f915 	bl	8006034 <HAL_TIM_PWM_ConfigChannel>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001e10:	f000 f99a 	bl	8002148 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e44:	2300      	movs	r3, #0
 8001e46:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4807      	ldr	r0, [pc, #28]	@ (8001e70 <MX_TIM1_Init+0x1a0>)
 8001e52:	f005 f8f1 	bl	8007038 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8001e5c:	f000 f974 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e60:	4803      	ldr	r0, [pc, #12]	@ (8001e70 <MX_TIM1_Init+0x1a0>)
 8001e62:	f000 fae7 	bl	8002434 <HAL_TIM_MspPostInit>

}
 8001e66:	bf00      	nop
 8001e68:	3770      	adds	r7, #112	@ 0x70
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200002b0 	.word	0x200002b0
 8001e74:	40012c00 	.word	0x40012c00

08001e78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	@ 0x28
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7e:	f107 031c 	add.w	r3, r7, #28
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e8a:	463b      	mov	r3, r7
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
 8001e98:	615a      	str	r2, [r3, #20]
 8001e9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e9c:	4b22      	ldr	r3, [pc, #136]	@ (8001f28 <MX_TIM2_Init+0xb0>)
 8001e9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ea2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ea4:	4b20      	ldr	r3, [pc, #128]	@ (8001f28 <MX_TIM2_Init+0xb0>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8001f28 <MX_TIM2_Init+0xb0>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f28 <MX_TIM2_Init+0xb0>)
 8001eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f28 <MX_TIM2_Init+0xb0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f28 <MX_TIM2_Init+0xb0>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ec4:	4818      	ldr	r0, [pc, #96]	@ (8001f28 <MX_TIM2_Init+0xb0>)
 8001ec6:	f003 fe6a 	bl	8005b9e <HAL_TIM_PWM_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001ed0:	f000 f93a 	bl	8002148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001edc:	f107 031c 	add.w	r3, r7, #28
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4811      	ldr	r0, [pc, #68]	@ (8001f28 <MX_TIM2_Init+0xb0>)
 8001ee4:	f005 f826 	bl	8006f34 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001eee:	f000 f92b 	bl	8002148 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ef2:	2360      	movs	r3, #96	@ 0x60
 8001ef4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f02:	463b      	mov	r3, r7
 8001f04:	2200      	movs	r2, #0
 8001f06:	4619      	mov	r1, r3
 8001f08:	4807      	ldr	r0, [pc, #28]	@ (8001f28 <MX_TIM2_Init+0xb0>)
 8001f0a:	f004 f893 	bl	8006034 <HAL_TIM_PWM_ConfigChannel>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001f14:	f000 f918 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f18:	4803      	ldr	r0, [pc, #12]	@ (8001f28 <MX_TIM2_Init+0xb0>)
 8001f1a:	f000 fa8b 	bl	8002434 <HAL_TIM_MspPostInit>

}
 8001f1e:	bf00      	nop
 8001f20:	3728      	adds	r7, #40	@ 0x28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200002fc 	.word	0x200002fc

08001f2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f4a:	4b26      	ldr	r3, [pc, #152]	@ (8001fe4 <MX_TIM3_Init+0xb8>)
 8001f4c:	4a26      	ldr	r2, [pc, #152]	@ (8001fe8 <MX_TIM3_Init+0xbc>)
 8001f4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f50:	4b24      	ldr	r3, [pc, #144]	@ (8001fe4 <MX_TIM3_Init+0xb8>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f56:	4b23      	ldr	r3, [pc, #140]	@ (8001fe4 <MX_TIM3_Init+0xb8>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f5c:	4b21      	ldr	r3, [pc, #132]	@ (8001fe4 <MX_TIM3_Init+0xb8>)
 8001f5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f64:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe4 <MX_TIM3_Init+0xb8>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe4 <MX_TIM3_Init+0xb8>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001f70:	481c      	ldr	r0, [pc, #112]	@ (8001fe4 <MX_TIM3_Init+0xb8>)
 8001f72:	f003 ff6b 	bl	8005e4c <HAL_TIM_IC_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001f7c:	f000 f8e4 	bl	8002148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4815      	ldr	r0, [pc, #84]	@ (8001fe4 <MX_TIM3_Init+0xb8>)
 8001f90:	f004 ffd0 	bl	8006f34 <HAL_TIMEx_MasterConfigSynchronization>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001f9a:	f000 f8d5 	bl	8002148 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	480b      	ldr	r0, [pc, #44]	@ (8001fe4 <MX_TIM3_Init+0xb8>)
 8001fb6:	f003 ffa0 	bl	8005efa <HAL_TIM_IC_ConfigChannel>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001fc0:	f000 f8c2 	bl	8002148 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4806      	ldr	r0, [pc, #24]	@ (8001fe4 <MX_TIM3_Init+0xb8>)
 8001fcc:	f003 ff95 	bl	8005efa <HAL_TIM_IC_ConfigChannel>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001fd6:	f000 f8b7 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fda:	bf00      	nop
 8001fdc:	3720      	adds	r7, #32
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000348 	.word	0x20000348
 8001fe8:	40000400 	.word	0x40000400

08001fec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ff0:	4b22      	ldr	r3, [pc, #136]	@ (800207c <MX_USART2_UART_Init+0x90>)
 8001ff2:	4a23      	ldr	r2, [pc, #140]	@ (8002080 <MX_USART2_UART_Init+0x94>)
 8001ff4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ff6:	4b21      	ldr	r3, [pc, #132]	@ (800207c <MX_USART2_UART_Init+0x90>)
 8001ff8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ffc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800207c <MX_USART2_UART_Init+0x90>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002004:	4b1d      	ldr	r3, [pc, #116]	@ (800207c <MX_USART2_UART_Init+0x90>)
 8002006:	2200      	movs	r2, #0
 8002008:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800200a:	4b1c      	ldr	r3, [pc, #112]	@ (800207c <MX_USART2_UART_Init+0x90>)
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002010:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <MX_USART2_UART_Init+0x90>)
 8002012:	220c      	movs	r2, #12
 8002014:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002016:	4b19      	ldr	r3, [pc, #100]	@ (800207c <MX_USART2_UART_Init+0x90>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800201c:	4b17      	ldr	r3, [pc, #92]	@ (800207c <MX_USART2_UART_Init+0x90>)
 800201e:	2200      	movs	r2, #0
 8002020:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002022:	4b16      	ldr	r3, [pc, #88]	@ (800207c <MX_USART2_UART_Init+0x90>)
 8002024:	2200      	movs	r2, #0
 8002026:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002028:	4b14      	ldr	r3, [pc, #80]	@ (800207c <MX_USART2_UART_Init+0x90>)
 800202a:	2200      	movs	r2, #0
 800202c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800202e:	4b13      	ldr	r3, [pc, #76]	@ (800207c <MX_USART2_UART_Init+0x90>)
 8002030:	2200      	movs	r2, #0
 8002032:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002034:	4811      	ldr	r0, [pc, #68]	@ (800207c <MX_USART2_UART_Init+0x90>)
 8002036:	f005 f88b 	bl	8007150 <HAL_UART_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002040:	f000 f882 	bl	8002148 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002044:	2100      	movs	r1, #0
 8002046:	480d      	ldr	r0, [pc, #52]	@ (800207c <MX_USART2_UART_Init+0x90>)
 8002048:	f005 fe84 	bl	8007d54 <HAL_UARTEx_SetTxFifoThreshold>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002052:	f000 f879 	bl	8002148 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002056:	2100      	movs	r1, #0
 8002058:	4808      	ldr	r0, [pc, #32]	@ (800207c <MX_USART2_UART_Init+0x90>)
 800205a:	f005 feb9 	bl	8007dd0 <HAL_UARTEx_SetRxFifoThreshold>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002064:	f000 f870 	bl	8002148 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002068:	4804      	ldr	r0, [pc, #16]	@ (800207c <MX_USART2_UART_Init+0x90>)
 800206a:	f005 fe3a 	bl	8007ce2 <HAL_UARTEx_DisableFifoMode>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002074:	f000 f868 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000394 	.word	0x20000394
 8002080:	40004400 	.word	0x40004400

08002084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208a:	f107 030c 	add.w	r3, r7, #12
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	60da      	str	r2, [r3, #12]
 8002098:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800209a:	4b29      	ldr	r3, [pc, #164]	@ (8002140 <MX_GPIO_Init+0xbc>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209e:	4a28      	ldr	r2, [pc, #160]	@ (8002140 <MX_GPIO_Init+0xbc>)
 80020a0:	f043 0320 	orr.w	r3, r3, #32
 80020a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020a6:	4b26      	ldr	r3, [pc, #152]	@ (8002140 <MX_GPIO_Init+0xbc>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	4b23      	ldr	r3, [pc, #140]	@ (8002140 <MX_GPIO_Init+0xbc>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	4a22      	ldr	r2, [pc, #136]	@ (8002140 <MX_GPIO_Init+0xbc>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020be:	4b20      	ldr	r3, [pc, #128]	@ (8002140 <MX_GPIO_Init+0xbc>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	607b      	str	r3, [r7, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002140 <MX_GPIO_Init+0xbc>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002140 <MX_GPIO_Init+0xbc>)
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002140 <MX_GPIO_Init+0xbc>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LS_DIR_Pin|RS_DIR_Pin, GPIO_PIN_RESET);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2103      	movs	r1, #3
 80020e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ea:	f001 fddb 	bl	8003ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80020ee:	2200      	movs	r2, #0
 80020f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020f4:	4813      	ldr	r0, [pc, #76]	@ (8002144 <MX_GPIO_Init+0xc0>)
 80020f6:	f001 fdd5 	bl	8003ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LS_DIR_Pin RS_DIR_Pin */
  GPIO_InitStruct.Pin = LS_DIR_Pin|RS_DIR_Pin;
 80020fa:	2303      	movs	r3, #3
 80020fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fe:	2301      	movs	r3, #1
 8002100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210a:	f107 030c 	add.w	r3, r7, #12
 800210e:	4619      	mov	r1, r3
 8002110:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002114:	f001 fc44 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002118:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800211c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800211e:	2301      	movs	r3, #1
 8002120:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	2300      	movs	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800212a:	f107 030c 	add.w	r3, r7, #12
 800212e:	4619      	mov	r1, r3
 8002130:	4804      	ldr	r0, [pc, #16]	@ (8002144 <MX_GPIO_Init+0xc0>)
 8002132:	f001 fc35 	bl	80039a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002136:	bf00      	nop
 8002138:	3720      	adds	r7, #32
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	48000400 	.word	0x48000400

08002148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800214c:	b672      	cpsid	i
}
 800214e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <Error_Handler+0x8>

08002154 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215a:	4b0f      	ldr	r3, [pc, #60]	@ (8002198 <HAL_MspInit+0x44>)
 800215c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800215e:	4a0e      	ldr	r2, [pc, #56]	@ (8002198 <HAL_MspInit+0x44>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6613      	str	r3, [r2, #96]	@ 0x60
 8002166:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <HAL_MspInit+0x44>)
 8002168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <HAL_MspInit+0x44>)
 8002174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002176:	4a08      	ldr	r2, [pc, #32]	@ (8002198 <HAL_MspInit+0x44>)
 8002178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800217c:	6593      	str	r3, [r2, #88]	@ 0x58
 800217e:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_MspInit+0x44>)
 8002180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800218a:	f002 fd83 	bl	8004c94 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000

0800219c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b09a      	sub	sp, #104	@ 0x68
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021b4:	f107 0310 	add.w	r3, r7, #16
 80021b8:	2244      	movs	r2, #68	@ 0x44
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f006 fc10 	bl	80089e2 <memset>
  if(hadc->Instance==ADC2)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002240 <HAL_ADC_MspInit+0xa4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d134      	bne.n	8002236 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80021cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021d0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80021d2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80021d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d8:	f107 0310 	add.w	r3, r7, #16
 80021dc:	4618      	mov	r0, r3
 80021de:	f003 fa97 	bl	8005710 <HAL_RCCEx_PeriphCLKConfig>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80021e8:	f7ff ffae 	bl	8002148 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80021ec:	4b15      	ldr	r3, [pc, #84]	@ (8002244 <HAL_ADC_MspInit+0xa8>)
 80021ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f0:	4a14      	ldr	r2, [pc, #80]	@ (8002244 <HAL_ADC_MspInit+0xa8>)
 80021f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021f8:	4b12      	ldr	r3, [pc, #72]	@ (8002244 <HAL_ADC_MspInit+0xa8>)
 80021fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002204:	4b0f      	ldr	r3, [pc, #60]	@ (8002244 <HAL_ADC_MspInit+0xa8>)
 8002206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002208:	4a0e      	ldr	r2, [pc, #56]	@ (8002244 <HAL_ADC_MspInit+0xa8>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002210:	4b0c      	ldr	r3, [pc, #48]	@ (8002244 <HAL_ADC_MspInit+0xa8>)
 8002212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN17
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800221c:	2310      	movs	r3, #16
 800221e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002220:	2303      	movs	r3, #3
 8002222:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002228:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800222c:	4619      	mov	r1, r3
 800222e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002232:	f001 fbb5 	bl	80039a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002236:	bf00      	nop
 8002238:	3768      	adds	r7, #104	@ 0x68
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	50000100 	.word	0x50000100
 8002244:	40021000 	.word	0x40021000

08002248 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b09c      	sub	sp, #112	@ 0x70
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002260:	f107 0318 	add.w	r3, r7, #24
 8002264:	2244      	movs	r2, #68	@ 0x44
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f006 fbba 	bl	80089e2 <memset>
  if(hi2c->Instance==I2C1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a2d      	ldr	r2, [pc, #180]	@ (8002328 <HAL_I2C_MspInit+0xe0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d153      	bne.n	8002320 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002278:	2340      	movs	r3, #64	@ 0x40
 800227a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800227c:	2300      	movs	r3, #0
 800227e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002280:	f107 0318 	add.w	r3, r7, #24
 8002284:	4618      	mov	r0, r3
 8002286:	f003 fa43 	bl	8005710 <HAL_RCCEx_PeriphCLKConfig>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002290:	f7ff ff5a 	bl	8002148 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002294:	4b25      	ldr	r3, [pc, #148]	@ (800232c <HAL_I2C_MspInit+0xe4>)
 8002296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002298:	4a24      	ldr	r2, [pc, #144]	@ (800232c <HAL_I2C_MspInit+0xe4>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022a0:	4b22      	ldr	r3, [pc, #136]	@ (800232c <HAL_I2C_MspInit+0xe4>)
 80022a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ac:	4b1f      	ldr	r3, [pc, #124]	@ (800232c <HAL_I2C_MspInit+0xe4>)
 80022ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b0:	4a1e      	ldr	r2, [pc, #120]	@ (800232c <HAL_I2C_MspInit+0xe4>)
 80022b2:	f043 0302 	orr.w	r3, r3, #2
 80022b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022b8:	4b1c      	ldr	r3, [pc, #112]	@ (800232c <HAL_I2C_MspInit+0xe4>)
 80022ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ca:	2312      	movs	r3, #18
 80022cc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ce:	2301      	movs	r3, #1
 80022d0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022d6:	2304      	movs	r3, #4
 80022d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022da:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80022de:	4619      	mov	r1, r3
 80022e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022e4:	f001 fb5c 	bl	80039a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022e8:	2380      	movs	r3, #128	@ 0x80
 80022ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ec:	2312      	movs	r3, #18
 80022ee:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022f0:	2301      	movs	r3, #1
 80022f2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022f8:	2304      	movs	r3, #4
 80022fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002300:	4619      	mov	r1, r3
 8002302:	480b      	ldr	r0, [pc, #44]	@ (8002330 <HAL_I2C_MspInit+0xe8>)
 8002304:	f001 fb4c 	bl	80039a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002308:	4b08      	ldr	r3, [pc, #32]	@ (800232c <HAL_I2C_MspInit+0xe4>)
 800230a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230c:	4a07      	ldr	r2, [pc, #28]	@ (800232c <HAL_I2C_MspInit+0xe4>)
 800230e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002312:	6593      	str	r3, [r2, #88]	@ 0x58
 8002314:	4b05      	ldr	r3, [pc, #20]	@ (800232c <HAL_I2C_MspInit+0xe4>)
 8002316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002318:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002320:	bf00      	nop
 8002322:	3770      	adds	r7, #112	@ 0x70
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40005400 	.word	0x40005400
 800232c:	40021000 	.word	0x40021000
 8002330:	48000400 	.word	0x48000400

08002334 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0a      	ldr	r2, [pc, #40]	@ (800236c <HAL_TIM_Base_MspInit+0x38>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d10b      	bne.n	800235e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002346:	4b0a      	ldr	r3, [pc, #40]	@ (8002370 <HAL_TIM_Base_MspInit+0x3c>)
 8002348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800234a:	4a09      	ldr	r2, [pc, #36]	@ (8002370 <HAL_TIM_Base_MspInit+0x3c>)
 800234c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002350:	6613      	str	r3, [r2, #96]	@ 0x60
 8002352:	4b07      	ldr	r3, [pc, #28]	@ (8002370 <HAL_TIM_Base_MspInit+0x3c>)
 8002354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002356:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40012c00 	.word	0x40012c00
 8002370:	40021000 	.word	0x40021000

08002374 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002384:	d10b      	bne.n	800239e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002386:	4b09      	ldr	r3, [pc, #36]	@ (80023ac <HAL_TIM_PWM_MspInit+0x38>)
 8002388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238a:	4a08      	ldr	r2, [pc, #32]	@ (80023ac <HAL_TIM_PWM_MspInit+0x38>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6593      	str	r3, [r2, #88]	@ 0x58
 8002392:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <HAL_TIM_PWM_MspInit+0x38>)
 8002394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800239e:	bf00      	nop
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000

080023b0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	@ 0x28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 0314 	add.w	r3, r7, #20
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a17      	ldr	r2, [pc, #92]	@ (800242c <HAL_TIM_IC_MspInit+0x7c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d128      	bne.n	8002424 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023d2:	4b17      	ldr	r3, [pc, #92]	@ (8002430 <HAL_TIM_IC_MspInit+0x80>)
 80023d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d6:	4a16      	ldr	r2, [pc, #88]	@ (8002430 <HAL_TIM_IC_MspInit+0x80>)
 80023d8:	f043 0302 	orr.w	r3, r3, #2
 80023dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80023de:	4b14      	ldr	r3, [pc, #80]	@ (8002430 <HAL_TIM_IC_MspInit+0x80>)
 80023e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	4b11      	ldr	r3, [pc, #68]	@ (8002430 <HAL_TIM_IC_MspInit+0x80>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ee:	4a10      	ldr	r2, [pc, #64]	@ (8002430 <HAL_TIM_IC_MspInit+0x80>)
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002430 <HAL_TIM_IC_MspInit+0x80>)
 80023f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_R_Pin|ENC_L_Pin;
 8002402:	23c0      	movs	r3, #192	@ 0xc0
 8002404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002406:	2302      	movs	r3, #2
 8002408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240e:	2300      	movs	r3, #0
 8002410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002412:	2302      	movs	r3, #2
 8002414:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002416:	f107 0314 	add.w	r3, r7, #20
 800241a:	4619      	mov	r1, r3
 800241c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002420:	f001 fabe 	bl	80039a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002424:	bf00      	nop
 8002426:	3728      	adds	r7, #40	@ 0x28
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40000400 	.word	0x40000400
 8002430:	40021000 	.word	0x40021000

08002434 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08a      	sub	sp, #40	@ 0x28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a2c      	ldr	r2, [pc, #176]	@ (8002504 <HAL_TIM_MspPostInit+0xd0>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d130      	bne.n	80024b8 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002456:	4b2c      	ldr	r3, [pc, #176]	@ (8002508 <HAL_TIM_MspPostInit+0xd4>)
 8002458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245a:	4a2b      	ldr	r2, [pc, #172]	@ (8002508 <HAL_TIM_MspPostInit+0xd4>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002462:	4b29      	ldr	r3, [pc, #164]	@ (8002508 <HAL_TIM_MspPostInit+0xd4>)
 8002464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = RS_M2_Pin|RS_M1_Pin|LS_M2_Pin;
 800246e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002474:	2302      	movs	r3, #2
 8002476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247c:	2300      	movs	r3, #0
 800247e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002480:	2306      	movs	r3, #6
 8002482:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	4619      	mov	r1, r3
 800248a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800248e:	f001 fa87 	bl	80039a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LS_M1_Pin;
 8002492:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2300      	movs	r3, #0
 80024a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 80024a4:	230b      	movs	r3, #11
 80024a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LS_M1_GPIO_Port, &GPIO_InitStruct);
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	4619      	mov	r1, r3
 80024ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024b2:	f001 fa75 	bl	80039a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80024b6:	e021      	b.n	80024fc <HAL_TIM_MspPostInit+0xc8>
  else if(htim->Instance==TIM2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c0:	d11c      	bne.n	80024fc <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <HAL_TIM_MspPostInit+0xd4>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c6:	4a10      	ldr	r2, [pc, #64]	@ (8002508 <HAL_TIM_MspPostInit+0xd4>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002508 <HAL_TIM_MspPostInit+0xd4>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_Pin;
 80024da:	2320      	movs	r3, #32
 80024dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e6:	2300      	movs	r3, #0
 80024e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024ea:	2301      	movs	r3, #1
 80024ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 80024ee:	f107 0314 	add.w	r3, r7, #20
 80024f2:	4619      	mov	r1, r3
 80024f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024f8:	f001 fa52 	bl	80039a0 <HAL_GPIO_Init>
}
 80024fc:	bf00      	nop
 80024fe:	3728      	adds	r7, #40	@ 0x28
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40012c00 	.word	0x40012c00
 8002508:	40021000 	.word	0x40021000

0800250c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b09a      	sub	sp, #104	@ 0x68
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002524:	f107 0310 	add.w	r3, r7, #16
 8002528:	2244      	movs	r2, #68	@ 0x44
 800252a:	2100      	movs	r1, #0
 800252c:	4618      	mov	r0, r3
 800252e:	f006 fa58 	bl	80089e2 <memset>
  if(huart->Instance==USART2)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a1f      	ldr	r2, [pc, #124]	@ (80025b4 <HAL_UART_MspInit+0xa8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d136      	bne.n	80025aa <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800253c:	2302      	movs	r3, #2
 800253e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002540:	2300      	movs	r3, #0
 8002542:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002544:	f107 0310 	add.w	r3, r7, #16
 8002548:	4618      	mov	r0, r3
 800254a:	f003 f8e1 	bl	8005710 <HAL_RCCEx_PeriphCLKConfig>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002554:	f7ff fdf8 	bl	8002148 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002558:	4b17      	ldr	r3, [pc, #92]	@ (80025b8 <HAL_UART_MspInit+0xac>)
 800255a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255c:	4a16      	ldr	r2, [pc, #88]	@ (80025b8 <HAL_UART_MspInit+0xac>)
 800255e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002562:	6593      	str	r3, [r2, #88]	@ 0x58
 8002564:	4b14      	ldr	r3, [pc, #80]	@ (80025b8 <HAL_UART_MspInit+0xac>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002570:	4b11      	ldr	r3, [pc, #68]	@ (80025b8 <HAL_UART_MspInit+0xac>)
 8002572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002574:	4a10      	ldr	r2, [pc, #64]	@ (80025b8 <HAL_UART_MspInit+0xac>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800257c:	4b0e      	ldr	r3, [pc, #56]	@ (80025b8 <HAL_UART_MspInit+0xac>)
 800257e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002588:	230c      	movs	r3, #12
 800258a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002594:	2300      	movs	r3, #0
 8002596:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002598:	2307      	movs	r3, #7
 800259a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025a0:	4619      	mov	r1, r3
 80025a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025a6:	f001 f9fb 	bl	80039a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025aa:	bf00      	nop
 80025ac:	3768      	adds	r7, #104	@ 0x68
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40004400 	.word	0x40004400
 80025b8:	40021000 	.word	0x40021000

080025bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025c0:	bf00      	nop
 80025c2:	e7fd      	b.n	80025c0 <NMI_Handler+0x4>

080025c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025c8:	bf00      	nop
 80025ca:	e7fd      	b.n	80025c8 <HardFault_Handler+0x4>

080025cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025d0:	bf00      	nop
 80025d2:	e7fd      	b.n	80025d0 <MemManage_Handler+0x4>

080025d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d8:	bf00      	nop
 80025da:	e7fd      	b.n	80025d8 <BusFault_Handler+0x4>

080025dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025e0:	bf00      	nop
 80025e2:	e7fd      	b.n	80025e0 <UsageFault_Handler+0x4>

080025e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002612:	f000 f957 	bl	80028c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}

0800261a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0
  return 1;
 800261e:	2301      	movs	r3, #1
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <_kill>:

int _kill(int pid, int sig)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002634:	f006 fa28 	bl	8008a88 <__errno>
 8002638:	4603      	mov	r3, r0
 800263a:	2216      	movs	r2, #22
 800263c:	601a      	str	r2, [r3, #0]
  return -1;
 800263e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <_exit>:

void _exit (int status)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002652:	f04f 31ff 	mov.w	r1, #4294967295
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff ffe7 	bl	800262a <_kill>
  while (1) {}    /* Make sure we hang here */
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <_exit+0x12>

08002660 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	e00a      	b.n	8002688 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002672:	f3af 8000 	nop.w
 8002676:	4601      	mov	r1, r0
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	60ba      	str	r2, [r7, #8]
 800267e:	b2ca      	uxtb	r2, r1
 8002680:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	3301      	adds	r3, #1
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	429a      	cmp	r2, r3
 800268e:	dbf0      	blt.n	8002672 <_read+0x12>
  }

  return len;
 8002690:	687b      	ldr	r3, [r7, #4]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b086      	sub	sp, #24
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	e009      	b.n	80026c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	60ba      	str	r2, [r7, #8]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	3301      	adds	r3, #1
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	dbf1      	blt.n	80026ac <_write+0x12>
  }
  return len;
 80026c8:	687b      	ldr	r3, [r7, #4]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <_close>:

int _close(int file)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026fa:	605a      	str	r2, [r3, #4]
  return 0;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <_isatty>:

int _isatty(int file)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002712:	2301      	movs	r3, #1
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002744:	4a14      	ldr	r2, [pc, #80]	@ (8002798 <_sbrk+0x5c>)
 8002746:	4b15      	ldr	r3, [pc, #84]	@ (800279c <_sbrk+0x60>)
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002750:	4b13      	ldr	r3, [pc, #76]	@ (80027a0 <_sbrk+0x64>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d102      	bne.n	800275e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002758:	4b11      	ldr	r3, [pc, #68]	@ (80027a0 <_sbrk+0x64>)
 800275a:	4a12      	ldr	r2, [pc, #72]	@ (80027a4 <_sbrk+0x68>)
 800275c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800275e:	4b10      	ldr	r3, [pc, #64]	@ (80027a0 <_sbrk+0x64>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	429a      	cmp	r2, r3
 800276a:	d207      	bcs.n	800277c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800276c:	f006 f98c 	bl	8008a88 <__errno>
 8002770:	4603      	mov	r3, r0
 8002772:	220c      	movs	r2, #12
 8002774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002776:	f04f 33ff 	mov.w	r3, #4294967295
 800277a:	e009      	b.n	8002790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800277c:	4b08      	ldr	r3, [pc, #32]	@ (80027a0 <_sbrk+0x64>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002782:	4b07      	ldr	r3, [pc, #28]	@ (80027a0 <_sbrk+0x64>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4413      	add	r3, r2
 800278a:	4a05      	ldr	r2, [pc, #20]	@ (80027a0 <_sbrk+0x64>)
 800278c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800278e:	68fb      	ldr	r3, [r7, #12]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20008000 	.word	0x20008000
 800279c:	00000400 	.word	0x00000400
 80027a0:	20000428 	.word	0x20000428
 80027a4:	20000580 	.word	0x20000580

080027a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027ac:	4b06      	ldr	r3, [pc, #24]	@ (80027c8 <SystemInit+0x20>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b2:	4a05      	ldr	r2, [pc, #20]	@ (80027c8 <SystemInit+0x20>)
 80027b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027cc:	480d      	ldr	r0, [pc, #52]	@ (8002804 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027ce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80027d0:	f7ff ffea 	bl	80027a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027d4:	480c      	ldr	r0, [pc, #48]	@ (8002808 <LoopForever+0x6>)
  ldr r1, =_edata
 80027d6:	490d      	ldr	r1, [pc, #52]	@ (800280c <LoopForever+0xa>)
  ldr r2, =_sidata
 80027d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002810 <LoopForever+0xe>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80027dc:	e002      	b.n	80027e4 <LoopCopyDataInit>

080027de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027e2:	3304      	adds	r3, #4

080027e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e8:	d3f9      	bcc.n	80027de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002814 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002818 <LoopForever+0x16>)
  movs r3, #0
 80027ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f0:	e001      	b.n	80027f6 <LoopFillZerobss>

080027f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f4:	3204      	adds	r2, #4

080027f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f8:	d3fb      	bcc.n	80027f2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80027fa:	f006 f94b 	bl	8008a94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027fe:	f7fe fed3 	bl	80015a8 <main>

08002802 <LoopForever>:

LoopForever:
    b LoopForever
 8002802:	e7fe      	b.n	8002802 <LoopForever>
  ldr   r0, =_estack
 8002804:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800280c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002810:	0800b0c0 	.word	0x0800b0c0
  ldr r2, =_sbss
 8002814:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002818:	2000057c 	.word	0x2000057c

0800281c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800281c:	e7fe      	b.n	800281c <ADC1_2_IRQHandler>

0800281e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002828:	2003      	movs	r0, #3
 800282a:	f001 f887 	bl	800393c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800282e:	2000      	movs	r0, #0
 8002830:	f000 f80e 	bl	8002850 <HAL_InitTick>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	71fb      	strb	r3, [r7, #7]
 800283e:	e001      	b.n	8002844 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002840:	f7ff fc88 	bl	8002154 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002844:	79fb      	ldrb	r3, [r7, #7]

}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800285c:	4b16      	ldr	r3, [pc, #88]	@ (80028b8 <HAL_InitTick+0x68>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d022      	beq.n	80028aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002864:	4b15      	ldr	r3, [pc, #84]	@ (80028bc <HAL_InitTick+0x6c>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	4b13      	ldr	r3, [pc, #76]	@ (80028b8 <HAL_InitTick+0x68>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002870:	fbb1 f3f3 	udiv	r3, r1, r3
 8002874:	fbb2 f3f3 	udiv	r3, r2, r3
 8002878:	4618      	mov	r0, r3
 800287a:	f001 f884 	bl	8003986 <HAL_SYSTICK_Config>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10f      	bne.n	80028a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b0f      	cmp	r3, #15
 8002888:	d809      	bhi.n	800289e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800288a:	2200      	movs	r2, #0
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	f04f 30ff 	mov.w	r0, #4294967295
 8002892:	f001 f85e 	bl	8003952 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002896:	4a0a      	ldr	r2, [pc, #40]	@ (80028c0 <HAL_InitTick+0x70>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	e007      	b.n	80028ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	73fb      	strb	r3, [r7, #15]
 80028a2:	e004      	b.n	80028ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
 80028a8:	e001      	b.n	80028ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000008 	.word	0x20000008
 80028bc:	20000000 	.word	0x20000000
 80028c0:	20000004 	.word	0x20000004

080028c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c8:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <HAL_IncTick+0x1c>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <HAL_IncTick+0x20>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4413      	add	r3, r2
 80028d2:	4a03      	ldr	r2, [pc, #12]	@ (80028e0 <HAL_IncTick+0x1c>)
 80028d4:	6013      	str	r3, [r2, #0]
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	2000042c 	.word	0x2000042c
 80028e4:	20000008 	.word	0x20000008

080028e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return uwTick;
 80028ec:	4b03      	ldr	r3, [pc, #12]	@ (80028fc <HAL_GetTick+0x14>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	2000042c 	.word	0x2000042c

08002900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002908:	f7ff ffee 	bl	80028e8 <HAL_GetTick>
 800290c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d004      	beq.n	8002924 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800291a:	4b09      	ldr	r3, [pc, #36]	@ (8002940 <HAL_Delay+0x40>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4413      	add	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002924:	bf00      	nop
 8002926:	f7ff ffdf 	bl	80028e8 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	429a      	cmp	r2, r3
 8002934:	d8f7      	bhi.n	8002926 <HAL_Delay+0x26>
  {
  }
}
 8002936:	bf00      	nop
 8002938:	bf00      	nop
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000008 	.word	0x20000008

08002944 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	609a      	str	r2, [r3, #8]
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	609a      	str	r2, [r3, #8]
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	3360      	adds	r3, #96	@ 0x60
 80029be:	461a      	mov	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	4b08      	ldr	r3, [pc, #32]	@ (80029f0 <LL_ADC_SetOffset+0x44>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	4313      	orrs	r3, r2
 80029dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80029e4:	bf00      	nop
 80029e6:	371c      	adds	r7, #28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	03fff000 	.word	0x03fff000

080029f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3360      	adds	r3, #96	@ 0x60
 8002a02:	461a      	mov	r2, r3
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3360      	adds	r3, #96	@ 0x60
 8002a30:	461a      	mov	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a4a:	bf00      	nop
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b087      	sub	sp, #28
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3360      	adds	r3, #96	@ 0x60
 8002a66:	461a      	mov	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002a80:	bf00      	nop
 8002a82:	371c      	adds	r7, #28
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	3360      	adds	r3, #96	@ 0x60
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002ab6:	bf00      	nop
 8002ab8:	371c      	adds	r7, #28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	615a      	str	r2, [r3, #20]
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	3330      	adds	r3, #48	@ 0x30
 8002af8:	461a      	mov	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	0a1b      	lsrs	r3, r3, #8
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	f003 030c 	and.w	r3, r3, #12
 8002b04:	4413      	add	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	211f      	movs	r1, #31
 8002b14:	fa01 f303 	lsl.w	r3, r1, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	0e9b      	lsrs	r3, r3, #26
 8002b20:	f003 011f 	and.w	r1, r3, #31
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f003 031f 	and.w	r3, r3, #31
 8002b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b34:	bf00      	nop
 8002b36:	371c      	adds	r7, #28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3314      	adds	r3, #20
 8002b50:	461a      	mov	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	0e5b      	lsrs	r3, r3, #25
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	4413      	add	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	0d1b      	lsrs	r3, r3, #20
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	2107      	movs	r1, #7
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	401a      	ands	r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	0d1b      	lsrs	r3, r3, #20
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	431a      	orrs	r2, r3
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b8a:	bf00      	nop
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f003 0318 	and.w	r3, r3, #24
 8002bba:	4908      	ldr	r1, [pc, #32]	@ (8002bdc <LL_ADC_SetChannelSingleDiff+0x44>)
 8002bbc:	40d9      	lsrs	r1, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	400b      	ands	r3, r1
 8002bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002bce:	bf00      	nop
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	0007ffff 	.word	0x0007ffff

08002be0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002bf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6093      	str	r3, [r2, #8]
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c18:	d101      	bne.n	8002c1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002c3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c40:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c68:	d101      	bne.n	8002c6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <LL_ADC_IsEnabled+0x18>
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <LL_ADC_IsEnabled+0x1a>
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d101      	bne.n	8002cba <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d101      	bne.n	8002ce0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cf0:	b590      	push	{r4, r7, lr}
 8002cf2:	b089      	sub	sp, #36	@ 0x24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e167      	b.n	8002fda <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d109      	bne.n	8002d2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff fa3f 	bl	800219c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff ff67 	bl	8002c04 <LL_ADC_IsDeepPowerDownEnabled>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d004      	beq.n	8002d46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff4d 	bl	8002be0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff ff82 	bl	8002c54 <LL_ADC_IsInternalRegulatorEnabled>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d115      	bne.n	8002d82 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff ff66 	bl	8002c2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d60:	4ba0      	ldr	r3, [pc, #640]	@ (8002fe4 <HAL_ADC_Init+0x2f4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	099b      	lsrs	r3, r3, #6
 8002d66:	4aa0      	ldr	r2, [pc, #640]	@ (8002fe8 <HAL_ADC_Init+0x2f8>)
 8002d68:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6c:	099b      	lsrs	r3, r3, #6
 8002d6e:	3301      	adds	r3, #1
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d74:	e002      	b.n	8002d7c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f9      	bne.n	8002d76 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff ff64 	bl	8002c54 <LL_ADC_IsInternalRegulatorEnabled>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10d      	bne.n	8002dae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d96:	f043 0210 	orr.w	r2, r3, #16
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002da2:	f043 0201 	orr.w	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff ff75 	bl	8002ca2 <LL_ADC_REG_IsConversionOngoing>
 8002db8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f040 8100 	bne.w	8002fc8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f040 80fc 	bne.w	8002fc8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002dd8:	f043 0202 	orr.w	r2, r3, #2
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff49 	bl	8002c7c <LL_ADC_IsEnabled>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d111      	bne.n	8002e14 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002df0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002df4:	f7ff ff42 	bl	8002c7c <LL_ADC_IsEnabled>
 8002df8:	4604      	mov	r4, r0
 8002dfa:	487c      	ldr	r0, [pc, #496]	@ (8002fec <HAL_ADC_Init+0x2fc>)
 8002dfc:	f7ff ff3e 	bl	8002c7c <LL_ADC_IsEnabled>
 8002e00:	4603      	mov	r3, r0
 8002e02:	4323      	orrs	r3, r4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d105      	bne.n	8002e14 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4878      	ldr	r0, [pc, #480]	@ (8002ff0 <HAL_ADC_Init+0x300>)
 8002e10:	f7ff fd98 	bl	8002944 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	7f5b      	ldrb	r3, [r3, #29]
 8002e18:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e1e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002e24:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002e2a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e32:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d106      	bne.n	8002e50 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e46:	3b01      	subs	r3, #1
 8002e48:	045b      	lsls	r3, r3, #17
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d009      	beq.n	8002e6c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e64:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	4b60      	ldr	r3, [pc, #384]	@ (8002ff4 <HAL_ADC_Init+0x304>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	69b9      	ldr	r1, [r7, #24]
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff ff14 	bl	8002cc8 <LL_ADC_INJ_IsConversionOngoing>
 8002ea0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d16d      	bne.n	8002f84 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d16a      	bne.n	8002f84 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002eb2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002eba:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002eca:	f023 0302 	bic.w	r3, r3, #2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	69b9      	ldr	r1, [r7, #24]
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d017      	beq.n	8002f10 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002eee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002ef8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002efc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6911      	ldr	r1, [r2, #16]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002f0e:	e013      	b.n	8002f38 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002f1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f34:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d118      	bne.n	8002f74 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002f4c:	f023 0304 	bic.w	r3, r3, #4
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f58:	4311      	orrs	r1, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f5e:	4311      	orrs	r1, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f64:	430a      	orrs	r2, r1
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0201 	orr.w	r2, r2, #1
 8002f70:	611a      	str	r2, [r3, #16]
 8002f72:	e007      	b.n	8002f84 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0201 	bic.w	r2, r2, #1
 8002f82:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d10c      	bne.n	8002fa6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	f023 010f 	bic.w	r1, r3, #15
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	1e5a      	subs	r2, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fa4:	e007      	b.n	8002fb6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 020f 	bic.w	r2, r2, #15
 8002fb4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fba:	f023 0303 	bic.w	r3, r3, #3
 8002fbe:	f043 0201 	orr.w	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fc6:	e007      	b.n	8002fd8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fcc:	f043 0210 	orr.w	r2, r3, #16
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3724      	adds	r7, #36	@ 0x24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd90      	pop	{r4, r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	053e2d63 	.word	0x053e2d63
 8002fec:	50000100 	.word	0x50000100
 8002ff0:	50000300 	.word	0x50000300
 8002ff4:	fff04007 	.word	0xfff04007

08002ff8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b0b6      	sub	sp, #216	@ 0xd8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_ADC_ConfigChannel+0x22>
 8003016:	2302      	movs	r3, #2
 8003018:	e3c8      	b.n	80037ac <HAL_ADC_ConfigChannel+0x7b4>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fe3b 	bl	8002ca2 <LL_ADC_REG_IsConversionOngoing>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	f040 83ad 	bne.w	800378e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	f7ff fd51 	bl	8002ae8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff fe29 	bl	8002ca2 <LL_ADC_REG_IsConversionOngoing>
 8003050:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fe35 	bl	8002cc8 <LL_ADC_INJ_IsConversionOngoing>
 800305e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003062:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003066:	2b00      	cmp	r3, #0
 8003068:	f040 81d9 	bne.w	800341e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800306c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003070:	2b00      	cmp	r3, #0
 8003072:	f040 81d4 	bne.w	800341e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800307e:	d10f      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2200      	movs	r2, #0
 800308a:	4619      	mov	r1, r3
 800308c:	f7ff fd58 	bl	8002b40 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fd12 	bl	8002ac2 <LL_ADC_SetSamplingTimeCommonConfig>
 800309e:	e00e      	b.n	80030be <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	6819      	ldr	r1, [r3, #0]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	461a      	mov	r2, r3
 80030ae:	f7ff fd47 	bl	8002b40 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2100      	movs	r1, #0
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fd02 	bl	8002ac2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	695a      	ldr	r2, [r3, #20]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	08db      	lsrs	r3, r3, #3
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d022      	beq.n	8003126 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	6919      	ldr	r1, [r3, #16]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80030f0:	f7ff fc5c 	bl	80029ac <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	6919      	ldr	r1, [r3, #16]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	461a      	mov	r2, r3
 8003102:	f7ff fca8 	bl	8002a56 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003112:	2b01      	cmp	r3, #1
 8003114:	d102      	bne.n	800311c <HAL_ADC_ConfigChannel+0x124>
 8003116:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800311a:	e000      	b.n	800311e <HAL_ADC_ConfigChannel+0x126>
 800311c:	2300      	movs	r3, #0
 800311e:	461a      	mov	r2, r3
 8003120:	f7ff fcb4 	bl	8002a8c <LL_ADC_SetOffsetSaturation>
 8003124:	e17b      	b.n	800341e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fc61 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 8003132:	4603      	mov	r3, r0
 8003134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x15a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fc56 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 8003148:	4603      	mov	r3, r0
 800314a:	0e9b      	lsrs	r3, r3, #26
 800314c:	f003 021f 	and.w	r2, r3, #31
 8003150:	e01e      	b.n	8003190 <HAL_ADC_ConfigChannel+0x198>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fc4b 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 800315e:	4603      	mov	r3, r0
 8003160:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003168:	fa93 f3a3 	rbit	r3, r3
 800316c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003170:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003174:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003178:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003180:	2320      	movs	r3, #32
 8003182:	e004      	b.n	800318e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003184:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003188:	fab3 f383 	clz	r3, r3
 800318c:	b2db      	uxtb	r3, r3
 800318e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x1b0>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	0e9b      	lsrs	r3, r3, #26
 80031a2:	f003 031f 	and.w	r3, r3, #31
 80031a6:	e018      	b.n	80031da <HAL_ADC_ConfigChannel+0x1e2>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80031b4:	fa93 f3a3 	rbit	r3, r3
 80031b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80031bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80031c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80031cc:	2320      	movs	r3, #32
 80031ce:	e004      	b.n	80031da <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80031d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031d4:	fab3 f383 	clz	r3, r3
 80031d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031da:	429a      	cmp	r2, r3
 80031dc:	d106      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2200      	movs	r2, #0
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fc1a 	bl	8002a20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2101      	movs	r1, #1
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fbfe 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10a      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x220>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2101      	movs	r1, #1
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fbf3 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 800320e:	4603      	mov	r3, r0
 8003210:	0e9b      	lsrs	r3, r3, #26
 8003212:	f003 021f 	and.w	r2, r3, #31
 8003216:	e01e      	b.n	8003256 <HAL_ADC_ConfigChannel+0x25e>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2101      	movs	r1, #1
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fbe8 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 8003224:	4603      	mov	r3, r0
 8003226:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800323a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800323e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003246:	2320      	movs	r3, #32
 8003248:	e004      	b.n	8003254 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800324a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325e:	2b00      	cmp	r3, #0
 8003260:	d105      	bne.n	800326e <HAL_ADC_ConfigChannel+0x276>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	0e9b      	lsrs	r3, r3, #26
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	e018      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x2a8>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003282:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003286:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800328a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003292:	2320      	movs	r3, #32
 8003294:	e004      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003296:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d106      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2200      	movs	r2, #0
 80032aa:	2101      	movs	r1, #1
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fbb7 	bl	8002a20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2102      	movs	r1, #2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fb9b 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 80032be:	4603      	mov	r3, r0
 80032c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10a      	bne.n	80032de <HAL_ADC_ConfigChannel+0x2e6>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2102      	movs	r1, #2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fb90 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 80032d4:	4603      	mov	r3, r0
 80032d6:	0e9b      	lsrs	r3, r3, #26
 80032d8:	f003 021f 	and.w	r2, r3, #31
 80032dc:	e01e      	b.n	800331c <HAL_ADC_ConfigChannel+0x324>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2102      	movs	r1, #2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fb85 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032f4:	fa93 f3a3 	rbit	r3, r3
 80032f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80032fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003300:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003304:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800330c:	2320      	movs	r3, #32
 800330e:	e004      	b.n	800331a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003310:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003314:	fab3 f383 	clz	r3, r3
 8003318:	b2db      	uxtb	r3, r3
 800331a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003324:	2b00      	cmp	r3, #0
 8003326:	d105      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x33c>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	0e9b      	lsrs	r3, r3, #26
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	e016      	b.n	8003362 <HAL_ADC_ConfigChannel+0x36a>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003340:	fa93 f3a3 	rbit	r3, r3
 8003344:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003346:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003348:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800334c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003354:	2320      	movs	r3, #32
 8003356:	e004      	b.n	8003362 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003358:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800335c:	fab3 f383 	clz	r3, r3
 8003360:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003362:	429a      	cmp	r2, r3
 8003364:	d106      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2200      	movs	r2, #0
 800336c:	2102      	movs	r1, #2
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff fb56 	bl	8002a20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2103      	movs	r1, #3
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff fb3a 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 8003380:	4603      	mov	r3, r0
 8003382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10a      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x3a8>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2103      	movs	r1, #3
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fb2f 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 8003396:	4603      	mov	r3, r0
 8003398:	0e9b      	lsrs	r3, r3, #26
 800339a:	f003 021f 	and.w	r2, r3, #31
 800339e:	e017      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x3d8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2103      	movs	r1, #3
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fb24 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 80033ac:	4603      	mov	r3, r0
 80033ae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033b2:	fa93 f3a3 	rbit	r3, r3
 80033b6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80033b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033ba:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80033bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80033c2:	2320      	movs	r3, #32
 80033c4:	e003      	b.n	80033ce <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80033c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033c8:	fab3 f383 	clz	r3, r3
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x3f0>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	0e9b      	lsrs	r3, r3, #26
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	e011      	b.n	800340c <HAL_ADC_ConfigChannel+0x414>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80033f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80033fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003400:	2320      	movs	r3, #32
 8003402:	e003      	b.n	800340c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003404:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800340c:	429a      	cmp	r2, r3
 800340e:	d106      	bne.n	800341e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2200      	movs	r2, #0
 8003416:	2103      	movs	r1, #3
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fb01 	bl	8002a20 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff fc2a 	bl	8002c7c <LL_ADC_IsEnabled>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	f040 8140 	bne.w	80036b0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	6819      	ldr	r1, [r3, #0]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	461a      	mov	r2, r3
 800343e:	f7ff fbab 	bl	8002b98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	4a8f      	ldr	r2, [pc, #572]	@ (8003684 <HAL_ADC_ConfigChannel+0x68c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	f040 8131 	bne.w	80036b0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10b      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x47e>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	0e9b      	lsrs	r3, r3, #26
 8003464:	3301      	adds	r3, #1
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	2b09      	cmp	r3, #9
 800346c:	bf94      	ite	ls
 800346e:	2301      	movls	r3, #1
 8003470:	2300      	movhi	r3, #0
 8003472:	b2db      	uxtb	r3, r3
 8003474:	e019      	b.n	80034aa <HAL_ADC_ConfigChannel+0x4b2>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800347e:	fa93 f3a3 	rbit	r3, r3
 8003482:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003484:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003486:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003488:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800348e:	2320      	movs	r3, #32
 8003490:	e003      	b.n	800349a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003492:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003494:	fab3 f383 	clz	r3, r3
 8003498:	b2db      	uxtb	r3, r3
 800349a:	3301      	adds	r3, #1
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	2b09      	cmp	r3, #9
 80034a2:	bf94      	ite	ls
 80034a4:	2301      	movls	r3, #1
 80034a6:	2300      	movhi	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d079      	beq.n	80035a2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d107      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x4d2>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	0e9b      	lsrs	r3, r3, #26
 80034c0:	3301      	adds	r3, #1
 80034c2:	069b      	lsls	r3, r3, #26
 80034c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034c8:	e015      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x4fe>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034d2:	fa93 f3a3 	rbit	r3, r3
 80034d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80034d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034da:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80034dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80034e2:	2320      	movs	r3, #32
 80034e4:	e003      	b.n	80034ee <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80034e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e8:	fab3 f383 	clz	r3, r3
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	3301      	adds	r3, #1
 80034f0:	069b      	lsls	r3, r3, #26
 80034f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d109      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x51e>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	0e9b      	lsrs	r3, r3, #26
 8003508:	3301      	adds	r3, #1
 800350a:	f003 031f 	and.w	r3, r3, #31
 800350e:	2101      	movs	r1, #1
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	e017      	b.n	8003546 <HAL_ADC_ConfigChannel+0x54e>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800351e:	fa93 f3a3 	rbit	r3, r3
 8003522:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003526:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003528:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800352e:	2320      	movs	r3, #32
 8003530:	e003      	b.n	800353a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003534:	fab3 f383 	clz	r3, r3
 8003538:	b2db      	uxtb	r3, r3
 800353a:	3301      	adds	r3, #1
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	2101      	movs	r1, #1
 8003542:	fa01 f303 	lsl.w	r3, r1, r3
 8003546:	ea42 0103 	orr.w	r1, r2, r3
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10a      	bne.n	800356c <HAL_ADC_ConfigChannel+0x574>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	0e9b      	lsrs	r3, r3, #26
 800355c:	3301      	adds	r3, #1
 800355e:	f003 021f 	and.w	r2, r3, #31
 8003562:	4613      	mov	r3, r2
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	4413      	add	r3, r2
 8003568:	051b      	lsls	r3, r3, #20
 800356a:	e018      	b.n	800359e <HAL_ADC_ConfigChannel+0x5a6>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003574:	fa93 f3a3 	rbit	r3, r3
 8003578:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800357a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800357c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800357e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003584:	2320      	movs	r3, #32
 8003586:	e003      	b.n	8003590 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800358a:	fab3 f383 	clz	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	3301      	adds	r3, #1
 8003592:	f003 021f 	and.w	r2, r3, #31
 8003596:	4613      	mov	r3, r2
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	4413      	add	r3, r2
 800359c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800359e:	430b      	orrs	r3, r1
 80035a0:	e081      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d107      	bne.n	80035be <HAL_ADC_ConfigChannel+0x5c6>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	0e9b      	lsrs	r3, r3, #26
 80035b4:	3301      	adds	r3, #1
 80035b6:	069b      	lsls	r3, r3, #26
 80035b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035bc:	e015      	b.n	80035ea <HAL_ADC_ConfigChannel+0x5f2>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c6:	fa93 f3a3 	rbit	r3, r3
 80035ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80035cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ce:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80035d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80035d6:	2320      	movs	r3, #32
 80035d8:	e003      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80035da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035dc:	fab3 f383 	clz	r3, r3
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	3301      	adds	r3, #1
 80035e4:	069b      	lsls	r3, r3, #26
 80035e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <HAL_ADC_ConfigChannel+0x612>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	0e9b      	lsrs	r3, r3, #26
 80035fc:	3301      	adds	r3, #1
 80035fe:	f003 031f 	and.w	r3, r3, #31
 8003602:	2101      	movs	r1, #1
 8003604:	fa01 f303 	lsl.w	r3, r1, r3
 8003608:	e017      	b.n	800363a <HAL_ADC_ConfigChannel+0x642>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	fa93 f3a3 	rbit	r3, r3
 8003616:	61fb      	str	r3, [r7, #28]
  return result;
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800361c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003622:	2320      	movs	r3, #32
 8003624:	e003      	b.n	800362e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	fab3 f383 	clz	r3, r3
 800362c:	b2db      	uxtb	r3, r3
 800362e:	3301      	adds	r3, #1
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	2101      	movs	r1, #1
 8003636:	fa01 f303 	lsl.w	r3, r1, r3
 800363a:	ea42 0103 	orr.w	r1, r2, r3
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10d      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x66e>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	0e9b      	lsrs	r3, r3, #26
 8003650:	3301      	adds	r3, #1
 8003652:	f003 021f 	and.w	r2, r3, #31
 8003656:	4613      	mov	r3, r2
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	4413      	add	r3, r2
 800365c:	3b1e      	subs	r3, #30
 800365e:	051b      	lsls	r3, r3, #20
 8003660:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003664:	e01e      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x6ac>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	fa93 f3a3 	rbit	r3, r3
 8003672:	613b      	str	r3, [r7, #16]
  return result;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d104      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800367e:	2320      	movs	r3, #32
 8003680:	e006      	b.n	8003690 <HAL_ADC_ConfigChannel+0x698>
 8003682:	bf00      	nop
 8003684:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	fab3 f383 	clz	r3, r3
 800368e:	b2db      	uxtb	r3, r3
 8003690:	3301      	adds	r3, #1
 8003692:	f003 021f 	and.w	r2, r3, #31
 8003696:	4613      	mov	r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	4413      	add	r3, r2
 800369c:	3b1e      	subs	r3, #30
 800369e:	051b      	lsls	r3, r3, #20
 80036a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036a4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036aa:	4619      	mov	r1, r3
 80036ac:	f7ff fa48 	bl	8002b40 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	4b3f      	ldr	r3, [pc, #252]	@ (80037b4 <HAL_ADC_ConfigChannel+0x7bc>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d071      	beq.n	80037a0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036bc:	483e      	ldr	r0, [pc, #248]	@ (80037b8 <HAL_ADC_ConfigChannel+0x7c0>)
 80036be:	f7ff f967 	bl	8002990 <LL_ADC_GetCommonPathInternalCh>
 80036c2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a3c      	ldr	r2, [pc, #240]	@ (80037bc <HAL_ADC_ConfigChannel+0x7c4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d004      	beq.n	80036da <HAL_ADC_ConfigChannel+0x6e2>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a3a      	ldr	r2, [pc, #232]	@ (80037c0 <HAL_ADC_ConfigChannel+0x7c8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d127      	bne.n	800372a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d121      	bne.n	800372a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036ee:	d157      	bne.n	80037a0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036f8:	4619      	mov	r1, r3
 80036fa:	482f      	ldr	r0, [pc, #188]	@ (80037b8 <HAL_ADC_ConfigChannel+0x7c0>)
 80036fc:	f7ff f935 	bl	800296a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003700:	4b30      	ldr	r3, [pc, #192]	@ (80037c4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	099b      	lsrs	r3, r3, #6
 8003706:	4a30      	ldr	r2, [pc, #192]	@ (80037c8 <HAL_ADC_ConfigChannel+0x7d0>)
 8003708:	fba2 2303 	umull	r2, r3, r2, r3
 800370c:	099b      	lsrs	r3, r3, #6
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	4613      	mov	r3, r2
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800371a:	e002      	b.n	8003722 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	3b01      	subs	r3, #1
 8003720:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1f9      	bne.n	800371c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003728:	e03a      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a27      	ldr	r2, [pc, #156]	@ (80037cc <HAL_ADC_ConfigChannel+0x7d4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d113      	bne.n	800375c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003734:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003738:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10d      	bne.n	800375c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a22      	ldr	r2, [pc, #136]	@ (80037d0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d02a      	beq.n	80037a0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800374a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800374e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003752:	4619      	mov	r1, r3
 8003754:	4818      	ldr	r0, [pc, #96]	@ (80037b8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003756:	f7ff f908 	bl	800296a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800375a:	e021      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a1c      	ldr	r2, [pc, #112]	@ (80037d4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d11c      	bne.n	80037a0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003766:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800376a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d116      	bne.n	80037a0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a16      	ldr	r2, [pc, #88]	@ (80037d0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d011      	beq.n	80037a0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800377c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003780:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003784:	4619      	mov	r1, r3
 8003786:	480c      	ldr	r0, [pc, #48]	@ (80037b8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003788:	f7ff f8ef 	bl	800296a <LL_ADC_SetCommonPathInternalCh>
 800378c:	e008      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003792:	f043 0220 	orr.w	r2, r3, #32
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80037a8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	37d8      	adds	r7, #216	@ 0xd8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	80080000 	.word	0x80080000
 80037b8:	50000300 	.word	0x50000300
 80037bc:	c3210000 	.word	0xc3210000
 80037c0:	90c00010 	.word	0x90c00010
 80037c4:	20000000 	.word	0x20000000
 80037c8:	053e2d63 	.word	0x053e2d63
 80037cc:	c7520000 	.word	0xc7520000
 80037d0:	50000100 	.word	0x50000100
 80037d4:	cb840000 	.word	0xcb840000

080037d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e8:	4b0c      	ldr	r3, [pc, #48]	@ (800381c <__NVIC_SetPriorityGrouping+0x44>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037f4:	4013      	ands	r3, r2
 80037f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003800:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800380a:	4a04      	ldr	r2, [pc, #16]	@ (800381c <__NVIC_SetPriorityGrouping+0x44>)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	60d3      	str	r3, [r2, #12]
}
 8003810:	bf00      	nop
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003824:	4b04      	ldr	r3, [pc, #16]	@ (8003838 <__NVIC_GetPriorityGrouping+0x18>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	0a1b      	lsrs	r3, r3, #8
 800382a:	f003 0307 	and.w	r3, r3, #7
}
 800382e:	4618      	mov	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	6039      	str	r1, [r7, #0]
 8003846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384c:	2b00      	cmp	r3, #0
 800384e:	db0a      	blt.n	8003866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	b2da      	uxtb	r2, r3
 8003854:	490c      	ldr	r1, [pc, #48]	@ (8003888 <__NVIC_SetPriority+0x4c>)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	0112      	lsls	r2, r2, #4
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	440b      	add	r3, r1
 8003860:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003864:	e00a      	b.n	800387c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	b2da      	uxtb	r2, r3
 800386a:	4908      	ldr	r1, [pc, #32]	@ (800388c <__NVIC_SetPriority+0x50>)
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	3b04      	subs	r3, #4
 8003874:	0112      	lsls	r2, r2, #4
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	440b      	add	r3, r1
 800387a:	761a      	strb	r2, [r3, #24]
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	e000e100 	.word	0xe000e100
 800388c:	e000ed00 	.word	0xe000ed00

08003890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003890:	b480      	push	{r7}
 8003892:	b089      	sub	sp, #36	@ 0x24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f1c3 0307 	rsb	r3, r3, #7
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	bf28      	it	cs
 80038ae:	2304      	movcs	r3, #4
 80038b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3304      	adds	r3, #4
 80038b6:	2b06      	cmp	r3, #6
 80038b8:	d902      	bls.n	80038c0 <NVIC_EncodePriority+0x30>
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3b03      	subs	r3, #3
 80038be:	e000      	b.n	80038c2 <NVIC_EncodePriority+0x32>
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c4:	f04f 32ff 	mov.w	r2, #4294967295
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43da      	mvns	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	401a      	ands	r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038d8:	f04f 31ff 	mov.w	r1, #4294967295
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	fa01 f303 	lsl.w	r3, r1, r3
 80038e2:	43d9      	mvns	r1, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e8:	4313      	orrs	r3, r2
         );
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3724      	adds	r7, #36	@ 0x24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
	...

080038f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3b01      	subs	r3, #1
 8003904:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003908:	d301      	bcc.n	800390e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800390a:	2301      	movs	r3, #1
 800390c:	e00f      	b.n	800392e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800390e:	4a0a      	ldr	r2, [pc, #40]	@ (8003938 <SysTick_Config+0x40>)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3b01      	subs	r3, #1
 8003914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003916:	210f      	movs	r1, #15
 8003918:	f04f 30ff 	mov.w	r0, #4294967295
 800391c:	f7ff ff8e 	bl	800383c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003920:	4b05      	ldr	r3, [pc, #20]	@ (8003938 <SysTick_Config+0x40>)
 8003922:	2200      	movs	r2, #0
 8003924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003926:	4b04      	ldr	r3, [pc, #16]	@ (8003938 <SysTick_Config+0x40>)
 8003928:	2207      	movs	r2, #7
 800392a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	e000e010 	.word	0xe000e010

0800393c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff ff47 	bl	80037d8 <__NVIC_SetPriorityGrouping>
}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b086      	sub	sp, #24
 8003956:	af00      	add	r7, sp, #0
 8003958:	4603      	mov	r3, r0
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	607a      	str	r2, [r7, #4]
 800395e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003960:	f7ff ff5e 	bl	8003820 <__NVIC_GetPriorityGrouping>
 8003964:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	68b9      	ldr	r1, [r7, #8]
 800396a:	6978      	ldr	r0, [r7, #20]
 800396c:	f7ff ff90 	bl	8003890 <NVIC_EncodePriority>
 8003970:	4602      	mov	r2, r0
 8003972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003976:	4611      	mov	r1, r2
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff ff5f 	bl	800383c <__NVIC_SetPriority>
}
 800397e:	bf00      	nop
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff ffb2 	bl	80038f8 <SysTick_Config>
 8003994:	4603      	mov	r3, r0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80039ae:	e15a      	b.n	8003c66 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	2101      	movs	r1, #1
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	fa01 f303 	lsl.w	r3, r1, r3
 80039bc:	4013      	ands	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 814c 	beq.w	8003c60 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d005      	beq.n	80039e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d130      	bne.n	8003a42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	2203      	movs	r2, #3
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4013      	ands	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a16:	2201      	movs	r2, #1
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4013      	ands	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	091b      	lsrs	r3, r3, #4
 8003a2c:	f003 0201 	and.w	r2, r3, #1
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d017      	beq.n	8003a7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	2203      	movs	r2, #3
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4013      	ands	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d123      	bne.n	8003ad2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	08da      	lsrs	r2, r3, #3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3208      	adds	r2, #8
 8003a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	220f      	movs	r2, #15
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	08da      	lsrs	r2, r3, #3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3208      	adds	r2, #8
 8003acc:	6939      	ldr	r1, [r7, #16]
 8003ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	2203      	movs	r2, #3
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f003 0203 	and.w	r2, r3, #3
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 80a6 	beq.w	8003c60 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b14:	4b5b      	ldr	r3, [pc, #364]	@ (8003c84 <HAL_GPIO_Init+0x2e4>)
 8003b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b18:	4a5a      	ldr	r2, [pc, #360]	@ (8003c84 <HAL_GPIO_Init+0x2e4>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b20:	4b58      	ldr	r3, [pc, #352]	@ (8003c84 <HAL_GPIO_Init+0x2e4>)
 8003b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b2c:	4a56      	ldr	r2, [pc, #344]	@ (8003c88 <HAL_GPIO_Init+0x2e8>)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	089b      	lsrs	r3, r3, #2
 8003b32:	3302      	adds	r3, #2
 8003b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	220f      	movs	r2, #15
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b56:	d01f      	beq.n	8003b98 <HAL_GPIO_Init+0x1f8>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a4c      	ldr	r2, [pc, #304]	@ (8003c8c <HAL_GPIO_Init+0x2ec>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d019      	beq.n	8003b94 <HAL_GPIO_Init+0x1f4>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a4b      	ldr	r2, [pc, #300]	@ (8003c90 <HAL_GPIO_Init+0x2f0>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d013      	beq.n	8003b90 <HAL_GPIO_Init+0x1f0>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a4a      	ldr	r2, [pc, #296]	@ (8003c94 <HAL_GPIO_Init+0x2f4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00d      	beq.n	8003b8c <HAL_GPIO_Init+0x1ec>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a49      	ldr	r2, [pc, #292]	@ (8003c98 <HAL_GPIO_Init+0x2f8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d007      	beq.n	8003b88 <HAL_GPIO_Init+0x1e8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a48      	ldr	r2, [pc, #288]	@ (8003c9c <HAL_GPIO_Init+0x2fc>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d101      	bne.n	8003b84 <HAL_GPIO_Init+0x1e4>
 8003b80:	2305      	movs	r3, #5
 8003b82:	e00a      	b.n	8003b9a <HAL_GPIO_Init+0x1fa>
 8003b84:	2306      	movs	r3, #6
 8003b86:	e008      	b.n	8003b9a <HAL_GPIO_Init+0x1fa>
 8003b88:	2304      	movs	r3, #4
 8003b8a:	e006      	b.n	8003b9a <HAL_GPIO_Init+0x1fa>
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e004      	b.n	8003b9a <HAL_GPIO_Init+0x1fa>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e002      	b.n	8003b9a <HAL_GPIO_Init+0x1fa>
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <HAL_GPIO_Init+0x1fa>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	f002 0203 	and.w	r2, r2, #3
 8003ba0:	0092      	lsls	r2, r2, #2
 8003ba2:	4093      	lsls	r3, r2
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003baa:	4937      	ldr	r1, [pc, #220]	@ (8003c88 <HAL_GPIO_Init+0x2e8>)
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	089b      	lsrs	r3, r3, #2
 8003bb0:	3302      	adds	r3, #2
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bb8:	4b39      	ldr	r3, [pc, #228]	@ (8003ca0 <HAL_GPIO_Init+0x300>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bdc:	4a30      	ldr	r2, [pc, #192]	@ (8003ca0 <HAL_GPIO_Init+0x300>)
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003be2:	4b2f      	ldr	r3, [pc, #188]	@ (8003ca0 <HAL_GPIO_Init+0x300>)
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	43db      	mvns	r3, r3
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c06:	4a26      	ldr	r2, [pc, #152]	@ (8003ca0 <HAL_GPIO_Init+0x300>)
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003c0c:	4b24      	ldr	r3, [pc, #144]	@ (8003ca0 <HAL_GPIO_Init+0x300>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c30:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca0 <HAL_GPIO_Init+0x300>)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c36:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca0 <HAL_GPIO_Init+0x300>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c5a:	4a11      	ldr	r2, [pc, #68]	@ (8003ca0 <HAL_GPIO_Init+0x300>)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	3301      	adds	r3, #1
 8003c64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f47f ae9d 	bne.w	80039b0 <HAL_GPIO_Init+0x10>
  }
}
 8003c76:	bf00      	nop
 8003c78:	bf00      	nop
 8003c7a:	371c      	adds	r7, #28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	40021000 	.word	0x40021000
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	48000400 	.word	0x48000400
 8003c90:	48000800 	.word	0x48000800
 8003c94:	48000c00 	.word	0x48000c00
 8003c98:	48001000 	.word	0x48001000
 8003c9c:	48001400 	.word	0x48001400
 8003ca0:	40010400 	.word	0x40010400

08003ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	460b      	mov	r3, r1
 8003cae:	807b      	strh	r3, [r7, #2]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cb4:	787b      	ldrb	r3, [r7, #1]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cba:	887a      	ldrh	r2, [r7, #2]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cc0:	e002      	b.n	8003cc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cc2:	887a      	ldrh	r2, [r7, #2]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e08d      	b.n	8003e02 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fe faa4 	bl	8002248 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2224      	movs	r2, #36	@ 0x24
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0201 	bic.w	r2, r2, #1
 8003d16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d107      	bne.n	8003d4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d4a:	609a      	str	r2, [r3, #8]
 8003d4c:	e006      	b.n	8003d5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003d5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d108      	bne.n	8003d76 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d72:	605a      	str	r2, [r3, #4]
 8003d74:	e007      	b.n	8003d86 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6812      	ldr	r2, [r2, #0]
 8003d90:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003da8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691a      	ldr	r2, [r3, #16]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69d9      	ldr	r1, [r3, #28]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1a      	ldr	r2, [r3, #32]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	607a      	str	r2, [r7, #4]
 8003e16:	461a      	mov	r2, r3
 8003e18:	460b      	mov	r3, r1
 8003e1a:	817b      	strh	r3, [r7, #10]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	f040 80fd 	bne.w	8004028 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_I2C_Master_Transmit+0x30>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e0f6      	b.n	800402a <HAL_I2C_Master_Transmit+0x21e>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e44:	f7fe fd50 	bl	80028e8 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	2319      	movs	r3, #25
 8003e50:	2201      	movs	r2, #1
 8003e52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 fbea 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e0e1      	b.n	800402a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2221      	movs	r2, #33	@ 0x21
 8003e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2210      	movs	r2, #16
 8003e72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	893a      	ldrh	r2, [r7, #8]
 8003e86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2bff      	cmp	r3, #255	@ 0xff
 8003e96:	d906      	bls.n	8003ea6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	22ff      	movs	r2, #255	@ 0xff
 8003e9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003e9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	e007      	b.n	8003eb6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003eb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003eb4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d024      	beq.n	8003f08 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec2:	781a      	ldrb	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	8979      	ldrh	r1, [r7, #10]
 8003efa:	4b4e      	ldr	r3, [pc, #312]	@ (8004034 <HAL_I2C_Master_Transmit+0x228>)
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 fd59 	bl	80049b8 <I2C_TransferConfig>
 8003f06:	e066      	b.n	8003fd6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	8979      	ldrh	r1, [r7, #10]
 8003f10:	4b48      	ldr	r3, [pc, #288]	@ (8004034 <HAL_I2C_Master_Transmit+0x228>)
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fd4e 	bl	80049b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003f1c:	e05b      	b.n	8003fd6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	6a39      	ldr	r1, [r7, #32]
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 fbdd 	bl	80046e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e07b      	b.n	800402a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f36:	781a      	ldrb	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d034      	beq.n	8003fd6 <HAL_I2C_Master_Transmit+0x1ca>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d130      	bne.n	8003fd6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2180      	movs	r1, #128	@ 0x80
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 fb56 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e04d      	b.n	800402a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2bff      	cmp	r3, #255	@ 0xff
 8003f96:	d90e      	bls.n	8003fb6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	22ff      	movs	r2, #255	@ 0xff
 8003f9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	8979      	ldrh	r1, [r7, #10]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 fd02 	bl	80049b8 <I2C_TransferConfig>
 8003fb4:	e00f      	b.n	8003fd6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	8979      	ldrh	r1, [r7, #10]
 8003fc8:	2300      	movs	r3, #0
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 fcf1 	bl	80049b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d19e      	bne.n	8003f1e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	6a39      	ldr	r1, [r7, #32]
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fbc3 	bl	8004770 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e01a      	b.n	800402a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6859      	ldr	r1, [r3, #4]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	4b0c      	ldr	r3, [pc, #48]	@ (8004038 <HAL_I2C_Master_Transmit+0x22c>)
 8004008:	400b      	ands	r3, r1
 800400a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e000      	b.n	800402a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004028:	2302      	movs	r3, #2
  }
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	80002000 	.word	0x80002000
 8004038:	fe00e800 	.word	0xfe00e800

0800403c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af02      	add	r7, sp, #8
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	4608      	mov	r0, r1
 8004046:	4611      	mov	r1, r2
 8004048:	461a      	mov	r2, r3
 800404a:	4603      	mov	r3, r0
 800404c:	817b      	strh	r3, [r7, #10]
 800404e:	460b      	mov	r3, r1
 8004050:	813b      	strh	r3, [r7, #8]
 8004052:	4613      	mov	r3, r2
 8004054:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b20      	cmp	r3, #32
 8004060:	f040 80f9 	bne.w	8004256 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <HAL_I2C_Mem_Write+0x34>
 800406a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800406c:	2b00      	cmp	r3, #0
 800406e:	d105      	bne.n	800407c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004076:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0ed      	b.n	8004258 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_I2C_Mem_Write+0x4e>
 8004086:	2302      	movs	r3, #2
 8004088:	e0e6      	b.n	8004258 <HAL_I2C_Mem_Write+0x21c>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004092:	f7fe fc29 	bl	80028e8 <HAL_GetTick>
 8004096:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	2319      	movs	r3, #25
 800409e:	2201      	movs	r2, #1
 80040a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 fac3 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0d1      	b.n	8004258 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2221      	movs	r2, #33	@ 0x21
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2240      	movs	r2, #64	@ 0x40
 80040c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a3a      	ldr	r2, [r7, #32]
 80040ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80040d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040dc:	88f8      	ldrh	r0, [r7, #6]
 80040de:	893a      	ldrh	r2, [r7, #8]
 80040e0:	8979      	ldrh	r1, [r7, #10]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	9301      	str	r3, [sp, #4]
 80040e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	4603      	mov	r3, r0
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f9d3 	bl	8004498 <I2C_RequestMemoryWrite>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e0a9      	b.n	8004258 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004108:	b29b      	uxth	r3, r3
 800410a:	2bff      	cmp	r3, #255	@ 0xff
 800410c:	d90e      	bls.n	800412c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	22ff      	movs	r2, #255	@ 0xff
 8004112:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004118:	b2da      	uxtb	r2, r3
 800411a:	8979      	ldrh	r1, [r7, #10]
 800411c:	2300      	movs	r3, #0
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 fc47 	bl	80049b8 <I2C_TransferConfig>
 800412a:	e00f      	b.n	800414c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800413a:	b2da      	uxtb	r2, r3
 800413c:	8979      	ldrh	r1, [r7, #10]
 800413e:	2300      	movs	r3, #0
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 fc36 	bl	80049b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 fac6 	bl	80046e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e07b      	b.n	8004258 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004164:	781a      	ldrb	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d034      	beq.n	8004204 <HAL_I2C_Mem_Write+0x1c8>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d130      	bne.n	8004204 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a8:	2200      	movs	r2, #0
 80041aa:	2180      	movs	r1, #128	@ 0x80
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 fa3f 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e04d      	b.n	8004258 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2bff      	cmp	r3, #255	@ 0xff
 80041c4:	d90e      	bls.n	80041e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	22ff      	movs	r2, #255	@ 0xff
 80041ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	8979      	ldrh	r1, [r7, #10]
 80041d4:	2300      	movs	r3, #0
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fbeb 	bl	80049b8 <I2C_TransferConfig>
 80041e2:	e00f      	b.n	8004204 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	8979      	ldrh	r1, [r7, #10]
 80041f6:	2300      	movs	r3, #0
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 fbda 	bl	80049b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d19e      	bne.n	800414c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 faac 	bl	8004770 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e01a      	b.n	8004258 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2220      	movs	r2, #32
 8004228:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6859      	ldr	r1, [r3, #4]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	4b0a      	ldr	r3, [pc, #40]	@ (8004260 <HAL_I2C_Mem_Write+0x224>)
 8004236:	400b      	ands	r3, r1
 8004238:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	e000      	b.n	8004258 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004256:	2302      	movs	r3, #2
  }
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	fe00e800 	.word	0xfe00e800

08004264 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af02      	add	r7, sp, #8
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	4608      	mov	r0, r1
 800426e:	4611      	mov	r1, r2
 8004270:	461a      	mov	r2, r3
 8004272:	4603      	mov	r3, r0
 8004274:	817b      	strh	r3, [r7, #10]
 8004276:	460b      	mov	r3, r1
 8004278:	813b      	strh	r3, [r7, #8]
 800427a:	4613      	mov	r3, r2
 800427c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b20      	cmp	r3, #32
 8004288:	f040 80fd 	bne.w	8004486 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <HAL_I2C_Mem_Read+0x34>
 8004292:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004294:	2b00      	cmp	r3, #0
 8004296:	d105      	bne.n	80042a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800429e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0f1      	b.n	8004488 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_I2C_Mem_Read+0x4e>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e0ea      	b.n	8004488 <HAL_I2C_Mem_Read+0x224>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042ba:	f7fe fb15 	bl	80028e8 <HAL_GetTick>
 80042be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	2319      	movs	r3, #25
 80042c6:	2201      	movs	r2, #1
 80042c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 f9af 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e0d5      	b.n	8004488 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2222      	movs	r2, #34	@ 0x22
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2240      	movs	r2, #64	@ 0x40
 80042e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a3a      	ldr	r2, [r7, #32]
 80042f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004304:	88f8      	ldrh	r0, [r7, #6]
 8004306:	893a      	ldrh	r2, [r7, #8]
 8004308:	8979      	ldrh	r1, [r7, #10]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	4603      	mov	r3, r0
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f913 	bl	8004540 <I2C_RequestMemoryRead>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0ad      	b.n	8004488 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	2bff      	cmp	r3, #255	@ 0xff
 8004334:	d90e      	bls.n	8004354 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	22ff      	movs	r2, #255	@ 0xff
 800433a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004340:	b2da      	uxtb	r2, r3
 8004342:	8979      	ldrh	r1, [r7, #10]
 8004344:	4b52      	ldr	r3, [pc, #328]	@ (8004490 <HAL_I2C_Mem_Read+0x22c>)
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 fb33 	bl	80049b8 <I2C_TransferConfig>
 8004352:	e00f      	b.n	8004374 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004362:	b2da      	uxtb	r2, r3
 8004364:	8979      	ldrh	r1, [r7, #10]
 8004366:	4b4a      	ldr	r3, [pc, #296]	@ (8004490 <HAL_I2C_Mem_Read+0x22c>)
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 fb22 	bl	80049b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437a:	2200      	movs	r2, #0
 800437c:	2104      	movs	r1, #4
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f956 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e07c      	b.n	8004488 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d034      	beq.n	8004434 <HAL_I2C_Mem_Read+0x1d0>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d130      	bne.n	8004434 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d8:	2200      	movs	r2, #0
 80043da:	2180      	movs	r1, #128	@ 0x80
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f927 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e04d      	b.n	8004488 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2bff      	cmp	r3, #255	@ 0xff
 80043f4:	d90e      	bls.n	8004414 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	22ff      	movs	r2, #255	@ 0xff
 80043fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004400:	b2da      	uxtb	r2, r3
 8004402:	8979      	ldrh	r1, [r7, #10]
 8004404:	2300      	movs	r3, #0
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 fad3 	bl	80049b8 <I2C_TransferConfig>
 8004412:	e00f      	b.n	8004434 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004422:	b2da      	uxtb	r2, r3
 8004424:	8979      	ldrh	r1, [r7, #10]
 8004426:	2300      	movs	r3, #0
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 fac2 	bl	80049b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d19a      	bne.n	8004374 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f994 	bl	8004770 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e01a      	b.n	8004488 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2220      	movs	r2, #32
 8004458:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	4b0b      	ldr	r3, [pc, #44]	@ (8004494 <HAL_I2C_Mem_Read+0x230>)
 8004466:	400b      	ands	r3, r1
 8004468:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	e000      	b.n	8004488 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004486:	2302      	movs	r3, #2
  }
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	80002400 	.word	0x80002400
 8004494:	fe00e800 	.word	0xfe00e800

08004498 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	4608      	mov	r0, r1
 80044a2:	4611      	mov	r1, r2
 80044a4:	461a      	mov	r2, r3
 80044a6:	4603      	mov	r3, r0
 80044a8:	817b      	strh	r3, [r7, #10]
 80044aa:	460b      	mov	r3, r1
 80044ac:	813b      	strh	r3, [r7, #8]
 80044ae:	4613      	mov	r3, r2
 80044b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	8979      	ldrh	r1, [r7, #10]
 80044b8:	4b20      	ldr	r3, [pc, #128]	@ (800453c <I2C_RequestMemoryWrite+0xa4>)
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 fa79 	bl	80049b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	69b9      	ldr	r1, [r7, #24]
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f909 	bl	80046e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e02c      	b.n	8004534 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044da:	88fb      	ldrh	r3, [r7, #6]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d105      	bne.n	80044ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044e0:	893b      	ldrh	r3, [r7, #8]
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80044ea:	e015      	b.n	8004518 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044ec:	893b      	ldrh	r3, [r7, #8]
 80044ee:	0a1b      	lsrs	r3, r3, #8
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044fa:	69fa      	ldr	r2, [r7, #28]
 80044fc:	69b9      	ldr	r1, [r7, #24]
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f8ef 	bl	80046e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e012      	b.n	8004534 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800450e:	893b      	ldrh	r3, [r7, #8]
 8004510:	b2da      	uxtb	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	2200      	movs	r2, #0
 8004520:	2180      	movs	r1, #128	@ 0x80
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f884 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	80002000 	.word	0x80002000

08004540 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af02      	add	r7, sp, #8
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	4608      	mov	r0, r1
 800454a:	4611      	mov	r1, r2
 800454c:	461a      	mov	r2, r3
 800454e:	4603      	mov	r3, r0
 8004550:	817b      	strh	r3, [r7, #10]
 8004552:	460b      	mov	r3, r1
 8004554:	813b      	strh	r3, [r7, #8]
 8004556:	4613      	mov	r3, r2
 8004558:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800455a:	88fb      	ldrh	r3, [r7, #6]
 800455c:	b2da      	uxtb	r2, r3
 800455e:	8979      	ldrh	r1, [r7, #10]
 8004560:	4b20      	ldr	r3, [pc, #128]	@ (80045e4 <I2C_RequestMemoryRead+0xa4>)
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	2300      	movs	r3, #0
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 fa26 	bl	80049b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800456c:	69fa      	ldr	r2, [r7, #28]
 800456e:	69b9      	ldr	r1, [r7, #24]
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 f8b6 	bl	80046e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e02c      	b.n	80045da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004580:	88fb      	ldrh	r3, [r7, #6]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d105      	bne.n	8004592 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004586:	893b      	ldrh	r3, [r7, #8]
 8004588:	b2da      	uxtb	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004590:	e015      	b.n	80045be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004592:	893b      	ldrh	r3, [r7, #8]
 8004594:	0a1b      	lsrs	r3, r3, #8
 8004596:	b29b      	uxth	r3, r3
 8004598:	b2da      	uxtb	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045a0:	69fa      	ldr	r2, [r7, #28]
 80045a2:	69b9      	ldr	r1, [r7, #24]
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f89c 	bl	80046e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e012      	b.n	80045da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045b4:	893b      	ldrh	r3, [r7, #8]
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	2200      	movs	r2, #0
 80045c6:	2140      	movs	r1, #64	@ 0x40
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 f831 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	80002000 	.word	0x80002000

080045e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d103      	bne.n	8004606 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2200      	movs	r2, #0
 8004604:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b01      	cmp	r3, #1
 8004612:	d007      	beq.n	8004624 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699a      	ldr	r2, [r3, #24]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0201 	orr.w	r2, r2, #1
 8004622:	619a      	str	r2, [r3, #24]
  }
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	603b      	str	r3, [r7, #0]
 800463c:	4613      	mov	r3, r2
 800463e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004640:	e03b      	b.n	80046ba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	6839      	ldr	r1, [r7, #0]
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f8d6 	bl	80047f8 <I2C_IsErrorOccurred>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e041      	b.n	80046da <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465c:	d02d      	beq.n	80046ba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465e:	f7fe f943 	bl	80028e8 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d302      	bcc.n	8004674 <I2C_WaitOnFlagUntilTimeout+0x44>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d122      	bne.n	80046ba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	4013      	ands	r3, r2
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	429a      	cmp	r2, r3
 8004682:	bf0c      	ite	eq
 8004684:	2301      	moveq	r3, #1
 8004686:	2300      	movne	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	461a      	mov	r2, r3
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	429a      	cmp	r2, r3
 8004690:	d113      	bne.n	80046ba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004696:	f043 0220 	orr.w	r2, r3, #32
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e00f      	b.n	80046da <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699a      	ldr	r2, [r3, #24]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4013      	ands	r3, r2
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	bf0c      	ite	eq
 80046ca:	2301      	moveq	r3, #1
 80046cc:	2300      	movne	r3, #0
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	461a      	mov	r2, r3
 80046d2:	79fb      	ldrb	r3, [r7, #7]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d0b4      	beq.n	8004642 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046ee:	e033      	b.n	8004758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 f87f 	bl	80047f8 <I2C_IsErrorOccurred>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e031      	b.n	8004768 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470a:	d025      	beq.n	8004758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470c:	f7fe f8ec 	bl	80028e8 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	429a      	cmp	r2, r3
 800471a:	d302      	bcc.n	8004722 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d11a      	bne.n	8004758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b02      	cmp	r3, #2
 800472e:	d013      	beq.n	8004758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004734:	f043 0220 	orr.w	r2, r3, #32
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e007      	b.n	8004768 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b02      	cmp	r3, #2
 8004764:	d1c4      	bne.n	80046f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800477c:	e02f      	b.n	80047de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	68b9      	ldr	r1, [r7, #8]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f838 	bl	80047f8 <I2C_IsErrorOccurred>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e02d      	b.n	80047ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004792:	f7fe f8a9 	bl	80028e8 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d302      	bcc.n	80047a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d11a      	bne.n	80047de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d013      	beq.n	80047de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ba:	f043 0220 	orr.w	r2, r3, #32
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e007      	b.n	80047ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	d1c8      	bne.n	800477e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08a      	sub	sp, #40	@ 0x28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004812:	2300      	movs	r3, #0
 8004814:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	2b00      	cmp	r3, #0
 8004822:	d068      	beq.n	80048f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2210      	movs	r2, #16
 800482a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800482c:	e049      	b.n	80048c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004834:	d045      	beq.n	80048c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004836:	f7fe f857 	bl	80028e8 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	429a      	cmp	r2, r3
 8004844:	d302      	bcc.n	800484c <I2C_IsErrorOccurred+0x54>
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d13a      	bne.n	80048c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004856:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800485e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800486a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800486e:	d121      	bne.n	80048b4 <I2C_IsErrorOccurred+0xbc>
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004876:	d01d      	beq.n	80048b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004878:	7cfb      	ldrb	r3, [r7, #19]
 800487a:	2b20      	cmp	r3, #32
 800487c:	d01a      	beq.n	80048b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800488c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800488e:	f7fe f82b 	bl	80028e8 <HAL_GetTick>
 8004892:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004894:	e00e      	b.n	80048b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004896:	f7fe f827 	bl	80028e8 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b19      	cmp	r3, #25
 80048a2:	d907      	bls.n	80048b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	f043 0320 	orr.w	r3, r3, #32
 80048aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80048b2:	e006      	b.n	80048c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d1e9      	bne.n	8004896 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	f003 0320 	and.w	r3, r3, #32
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d003      	beq.n	80048d8 <I2C_IsErrorOccurred+0xe0>
 80048d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0aa      	beq.n	800482e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80048d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d103      	bne.n	80048e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2220      	movs	r2, #32
 80048e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	f043 0304 	orr.w	r3, r3, #4
 80048ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00b      	beq.n	8004920 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004918:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00b      	beq.n	8004942 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	f043 0308 	orr.w	r3, r3, #8
 8004930:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800493a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00b      	beq.n	8004964 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	f043 0302 	orr.w	r3, r3, #2
 8004952:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800495c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004964:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01c      	beq.n	80049a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f7ff fe3b 	bl	80045e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6859      	ldr	r1, [r3, #4]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	4b0d      	ldr	r3, [pc, #52]	@ (80049b4 <I2C_IsErrorOccurred+0x1bc>)
 800497e:	400b      	ands	r3, r1
 8004980:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	431a      	orrs	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80049a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3728      	adds	r7, #40	@ 0x28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	fe00e800 	.word	0xfe00e800

080049b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	607b      	str	r3, [r7, #4]
 80049c2:	460b      	mov	r3, r1
 80049c4:	817b      	strh	r3, [r7, #10]
 80049c6:	4613      	mov	r3, r2
 80049c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049ca:	897b      	ldrh	r3, [r7, #10]
 80049cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049d0:	7a7b      	ldrb	r3, [r7, #9]
 80049d2:	041b      	lsls	r3, r3, #16
 80049d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80049e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	0d5b      	lsrs	r3, r3, #21
 80049f2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80049f6:	4b08      	ldr	r3, [pc, #32]	@ (8004a18 <I2C_TransferConfig+0x60>)
 80049f8:	430b      	orrs	r3, r1
 80049fa:	43db      	mvns	r3, r3
 80049fc:	ea02 0103 	and.w	r1, r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	03ff63ff 	.word	0x03ff63ff

08004a1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d138      	bne.n	8004aa4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e032      	b.n	8004aa6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2224      	movs	r2, #36	@ 0x24
 8004a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0201 	bic.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6819      	ldr	r1, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	e000      	b.n	8004aa6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004aa4:	2302      	movs	r3, #2
  }
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b085      	sub	sp, #20
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d139      	bne.n	8004b3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d101      	bne.n	8004ad6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e033      	b.n	8004b3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2224      	movs	r2, #36	@ 0x24
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0201 	bic.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	021b      	lsls	r3, r3, #8
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0201 	orr.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e000      	b.n	8004b3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
  }
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
	...

08004b4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d141      	bne.n	8004bde <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b5a:	4b4b      	ldr	r3, [pc, #300]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b66:	d131      	bne.n	8004bcc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b68:	4b47      	ldr	r3, [pc, #284]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b6e:	4a46      	ldr	r2, [pc, #280]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b78:	4b43      	ldr	r3, [pc, #268]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b80:	4a41      	ldr	r2, [pc, #260]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b88:	4b40      	ldr	r3, [pc, #256]	@ (8004c8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2232      	movs	r2, #50	@ 0x32
 8004b8e:	fb02 f303 	mul.w	r3, r2, r3
 8004b92:	4a3f      	ldr	r2, [pc, #252]	@ (8004c90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	0c9b      	lsrs	r3, r3, #18
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b9e:	e002      	b.n	8004ba6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ba6:	4b38      	ldr	r3, [pc, #224]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bb2:	d102      	bne.n	8004bba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f2      	bne.n	8004ba0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bba:	4b33      	ldr	r3, [pc, #204]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bc6:	d158      	bne.n	8004c7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e057      	b.n	8004c7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bd2:	4a2d      	ldr	r2, [pc, #180]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004bdc:	e04d      	b.n	8004c7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004be4:	d141      	bne.n	8004c6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004be6:	4b28      	ldr	r3, [pc, #160]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bf2:	d131      	bne.n	8004c58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bf4:	4b24      	ldr	r3, [pc, #144]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bfa:	4a23      	ldr	r2, [pc, #140]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c04:	4b20      	ldr	r3, [pc, #128]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c0c:	4a1e      	ldr	r2, [pc, #120]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c14:	4b1d      	ldr	r3, [pc, #116]	@ (8004c8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2232      	movs	r2, #50	@ 0x32
 8004c1a:	fb02 f303 	mul.w	r3, r2, r3
 8004c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8004c90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c20:	fba2 2303 	umull	r2, r3, r2, r3
 8004c24:	0c9b      	lsrs	r3, r3, #18
 8004c26:	3301      	adds	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c2a:	e002      	b.n	8004c32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c32:	4b15      	ldr	r3, [pc, #84]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c3e:	d102      	bne.n	8004c46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f2      	bne.n	8004c2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c46:	4b10      	ldr	r3, [pc, #64]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c52:	d112      	bne.n	8004c7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e011      	b.n	8004c7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c58:	4b0b      	ldr	r3, [pc, #44]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c68:	e007      	b.n	8004c7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c6a:	4b07      	ldr	r3, [pc, #28]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c72:	4a05      	ldr	r2, [pc, #20]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c74:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c78:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	40007000 	.word	0x40007000
 8004c8c:	20000000 	.word	0x20000000
 8004c90:	431bde83 	.word	0x431bde83

08004c94 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004c98:	4b05      	ldr	r3, [pc, #20]	@ (8004cb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	4a04      	ldr	r2, [pc, #16]	@ (8004cb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ca2:	6093      	str	r3, [r2, #8]
}
 8004ca4:	bf00      	nop
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40007000 	.word	0x40007000

08004cb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e2fe      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d075      	beq.n	8004dbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cd2:	4b97      	ldr	r3, [pc, #604]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 030c 	and.w	r3, r3, #12
 8004cda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cdc:	4b94      	ldr	r3, [pc, #592]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0303 	and.w	r3, r3, #3
 8004ce4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	2b0c      	cmp	r3, #12
 8004cea:	d102      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x3e>
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	d002      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x44>
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d10b      	bne.n	8004d10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf8:	4b8d      	ldr	r3, [pc, #564]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d05b      	beq.n	8004dbc <HAL_RCC_OscConfig+0x108>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d157      	bne.n	8004dbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e2d9      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d18:	d106      	bne.n	8004d28 <HAL_RCC_OscConfig+0x74>
 8004d1a:	4b85      	ldr	r3, [pc, #532]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a84      	ldr	r2, [pc, #528]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	e01d      	b.n	8004d64 <HAL_RCC_OscConfig+0xb0>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d30:	d10c      	bne.n	8004d4c <HAL_RCC_OscConfig+0x98>
 8004d32:	4b7f      	ldr	r3, [pc, #508]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a7e      	ldr	r2, [pc, #504]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	4b7c      	ldr	r3, [pc, #496]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a7b      	ldr	r2, [pc, #492]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	e00b      	b.n	8004d64 <HAL_RCC_OscConfig+0xb0>
 8004d4c:	4b78      	ldr	r3, [pc, #480]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a77      	ldr	r2, [pc, #476]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004d52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	4b75      	ldr	r3, [pc, #468]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a74      	ldr	r2, [pc, #464]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004d5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d013      	beq.n	8004d94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6c:	f7fd fdbc 	bl	80028e8 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d74:	f7fd fdb8 	bl	80028e8 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	@ 0x64
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e29e      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d86:	4b6a      	ldr	r3, [pc, #424]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0f0      	beq.n	8004d74 <HAL_RCC_OscConfig+0xc0>
 8004d92:	e014      	b.n	8004dbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d94:	f7fd fda8 	bl	80028e8 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d9c:	f7fd fda4 	bl	80028e8 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b64      	cmp	r3, #100	@ 0x64
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e28a      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dae:	4b60      	ldr	r3, [pc, #384]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f0      	bne.n	8004d9c <HAL_RCC_OscConfig+0xe8>
 8004dba:	e000      	b.n	8004dbe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d075      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dca:	4b59      	ldr	r3, [pc, #356]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 030c 	and.w	r3, r3, #12
 8004dd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dd4:	4b56      	ldr	r3, [pc, #344]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2b0c      	cmp	r3, #12
 8004de2:	d102      	bne.n	8004dea <HAL_RCC_OscConfig+0x136>
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d002      	beq.n	8004df0 <HAL_RCC_OscConfig+0x13c>
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d11f      	bne.n	8004e30 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004df0:	4b4f      	ldr	r3, [pc, #316]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d005      	beq.n	8004e08 <HAL_RCC_OscConfig+0x154>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e25d      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e08:	4b49      	ldr	r3, [pc, #292]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	061b      	lsls	r3, r3, #24
 8004e16:	4946      	ldr	r1, [pc, #280]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e1c:	4b45      	ldr	r3, [pc, #276]	@ (8004f34 <HAL_RCC_OscConfig+0x280>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fd fd15 	bl	8002850 <HAL_InitTick>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d043      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e249      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d023      	beq.n	8004e80 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e38:	4b3d      	ldr	r3, [pc, #244]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a3c      	ldr	r2, [pc, #240]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e44:	f7fd fd50 	bl	80028e8 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e4c:	f7fd fd4c 	bl	80028e8 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e232      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e5e:	4b34      	ldr	r3, [pc, #208]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0f0      	beq.n	8004e4c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e6a:	4b31      	ldr	r3, [pc, #196]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	061b      	lsls	r3, r3, #24
 8004e78:	492d      	ldr	r1, [pc, #180]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	604b      	str	r3, [r1, #4]
 8004e7e:	e01a      	b.n	8004eb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e80:	4b2b      	ldr	r3, [pc, #172]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a2a      	ldr	r2, [pc, #168]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004e86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8c:	f7fd fd2c 	bl	80028e8 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e94:	f7fd fd28 	bl	80028e8 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e20e      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ea6:	4b22      	ldr	r3, [pc, #136]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0x1e0>
 8004eb2:	e000      	b.n	8004eb6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004eb4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d041      	beq.n	8004f46 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d01c      	beq.n	8004f04 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eca:	4b19      	ldr	r3, [pc, #100]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ed0:	4a17      	ldr	r2, [pc, #92]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004ed2:	f043 0301 	orr.w	r3, r3, #1
 8004ed6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eda:	f7fd fd05 	bl	80028e8 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee2:	f7fd fd01 	bl	80028e8 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e1e7      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0ef      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x22e>
 8004f02:	e020      	b.n	8004f46 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f04:	4b0a      	ldr	r3, [pc, #40]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f0a:	4a09      	ldr	r2, [pc, #36]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004f0c:	f023 0301 	bic.w	r3, r3, #1
 8004f10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f14:	f7fd fce8 	bl	80028e8 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f1a:	e00d      	b.n	8004f38 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f1c:	f7fd fce4 	bl	80028e8 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d906      	bls.n	8004f38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e1ca      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
 8004f2e:	bf00      	nop
 8004f30:	40021000 	.word	0x40021000
 8004f34:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f38:	4b8c      	ldr	r3, [pc, #560]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8004f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1ea      	bne.n	8004f1c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0304 	and.w	r3, r3, #4
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 80a6 	beq.w	80050a0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f54:	2300      	movs	r3, #0
 8004f56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f58:	4b84      	ldr	r3, [pc, #528]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8004f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <HAL_RCC_OscConfig+0x2b4>
 8004f64:	2301      	movs	r3, #1
 8004f66:	e000      	b.n	8004f6a <HAL_RCC_OscConfig+0x2b6>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00d      	beq.n	8004f8a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f6e:	4b7f      	ldr	r3, [pc, #508]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8004f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f72:	4a7e      	ldr	r2, [pc, #504]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8004f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f78:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f7a:	4b7c      	ldr	r3, [pc, #496]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8004f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f86:	2301      	movs	r3, #1
 8004f88:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f8a:	4b79      	ldr	r3, [pc, #484]	@ (8005170 <HAL_RCC_OscConfig+0x4bc>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d118      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f96:	4b76      	ldr	r3, [pc, #472]	@ (8005170 <HAL_RCC_OscConfig+0x4bc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a75      	ldr	r2, [pc, #468]	@ (8005170 <HAL_RCC_OscConfig+0x4bc>)
 8004f9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fa2:	f7fd fca1 	bl	80028e8 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004faa:	f7fd fc9d 	bl	80028e8 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e183      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fbc:	4b6c      	ldr	r3, [pc, #432]	@ (8005170 <HAL_RCC_OscConfig+0x4bc>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0f0      	beq.n	8004faa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d108      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x32e>
 8004fd0:	4b66      	ldr	r3, [pc, #408]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8004fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fd6:	4a65      	ldr	r2, [pc, #404]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8004fd8:	f043 0301 	orr.w	r3, r3, #1
 8004fdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fe0:	e024      	b.n	800502c <HAL_RCC_OscConfig+0x378>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	2b05      	cmp	r3, #5
 8004fe8:	d110      	bne.n	800500c <HAL_RCC_OscConfig+0x358>
 8004fea:	4b60      	ldr	r3, [pc, #384]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8004fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff0:	4a5e      	ldr	r2, [pc, #376]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8004ff2:	f043 0304 	orr.w	r3, r3, #4
 8004ff6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ffa:	4b5c      	ldr	r3, [pc, #368]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8004ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005000:	4a5a      	ldr	r2, [pc, #360]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8005002:	f043 0301 	orr.w	r3, r3, #1
 8005006:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800500a:	e00f      	b.n	800502c <HAL_RCC_OscConfig+0x378>
 800500c:	4b57      	ldr	r3, [pc, #348]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 800500e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005012:	4a56      	ldr	r2, [pc, #344]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800501c:	4b53      	ldr	r3, [pc, #332]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005022:	4a52      	ldr	r2, [pc, #328]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8005024:	f023 0304 	bic.w	r3, r3, #4
 8005028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d016      	beq.n	8005062 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005034:	f7fd fc58 	bl	80028e8 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800503a:	e00a      	b.n	8005052 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800503c:	f7fd fc54 	bl	80028e8 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800504a:	4293      	cmp	r3, r2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e138      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005052:	4b46      	ldr	r3, [pc, #280]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8005054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0ed      	beq.n	800503c <HAL_RCC_OscConfig+0x388>
 8005060:	e015      	b.n	800508e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005062:	f7fd fc41 	bl	80028e8 <HAL_GetTick>
 8005066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005068:	e00a      	b.n	8005080 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800506a:	f7fd fc3d 	bl	80028e8 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005078:	4293      	cmp	r3, r2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e121      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005080:	4b3a      	ldr	r3, [pc, #232]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8005082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1ed      	bne.n	800506a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800508e:	7ffb      	ldrb	r3, [r7, #31]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d105      	bne.n	80050a0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005094:	4b35      	ldr	r3, [pc, #212]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8005096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005098:	4a34      	ldr	r2, [pc, #208]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 800509a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800509e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0320 	and.w	r3, r3, #32
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d03c      	beq.n	8005126 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01c      	beq.n	80050ee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050b4:	4b2d      	ldr	r3, [pc, #180]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 80050b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050ba:	4a2c      	ldr	r2, [pc, #176]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c4:	f7fd fc10 	bl	80028e8 <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050cc:	f7fd fc0c 	bl	80028e8 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e0f2      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050de:	4b23      	ldr	r3, [pc, #140]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 80050e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0ef      	beq.n	80050cc <HAL_RCC_OscConfig+0x418>
 80050ec:	e01b      	b.n	8005126 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050ee:	4b1f      	ldr	r3, [pc, #124]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 80050f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050f4:	4a1d      	ldr	r2, [pc, #116]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 80050f6:	f023 0301 	bic.w	r3, r3, #1
 80050fa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050fe:	f7fd fbf3 	bl	80028e8 <HAL_GetTick>
 8005102:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005104:	e008      	b.n	8005118 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005106:	f7fd fbef 	bl	80028e8 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e0d5      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005118:	4b14      	ldr	r3, [pc, #80]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 800511a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1ef      	bne.n	8005106 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 80c9 	beq.w	80052c2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005130:	4b0e      	ldr	r3, [pc, #56]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 030c 	and.w	r3, r3, #12
 8005138:	2b0c      	cmp	r3, #12
 800513a:	f000 8083 	beq.w	8005244 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d15e      	bne.n	8005204 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005146:	4b09      	ldr	r3, [pc, #36]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a08      	ldr	r2, [pc, #32]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 800514c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005152:	f7fd fbc9 	bl	80028e8 <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005158:	e00c      	b.n	8005174 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800515a:	f7fd fbc5 	bl	80028e8 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d905      	bls.n	8005174 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e0ab      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
 800516c:	40021000 	.word	0x40021000
 8005170:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005174:	4b55      	ldr	r3, [pc, #340]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1ec      	bne.n	800515a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005180:	4b52      	ldr	r3, [pc, #328]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	4b52      	ldr	r3, [pc, #328]	@ (80052d0 <HAL_RCC_OscConfig+0x61c>)
 8005186:	4013      	ands	r3, r2
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6a11      	ldr	r1, [r2, #32]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005190:	3a01      	subs	r2, #1
 8005192:	0112      	lsls	r2, r2, #4
 8005194:	4311      	orrs	r1, r2
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800519a:	0212      	lsls	r2, r2, #8
 800519c:	4311      	orrs	r1, r2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80051a2:	0852      	lsrs	r2, r2, #1
 80051a4:	3a01      	subs	r2, #1
 80051a6:	0552      	lsls	r2, r2, #21
 80051a8:	4311      	orrs	r1, r2
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80051ae:	0852      	lsrs	r2, r2, #1
 80051b0:	3a01      	subs	r2, #1
 80051b2:	0652      	lsls	r2, r2, #25
 80051b4:	4311      	orrs	r1, r2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051ba:	06d2      	lsls	r2, r2, #27
 80051bc:	430a      	orrs	r2, r1
 80051be:	4943      	ldr	r1, [pc, #268]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051c4:	4b41      	ldr	r3, [pc, #260]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a40      	ldr	r2, [pc, #256]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 80051ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051d0:	4b3e      	ldr	r3, [pc, #248]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	4a3d      	ldr	r2, [pc, #244]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 80051d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051dc:	f7fd fb84 	bl	80028e8 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e4:	f7fd fb80 	bl	80028e8 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e066      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051f6:	4b35      	ldr	r3, [pc, #212]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCC_OscConfig+0x530>
 8005202:	e05e      	b.n	80052c2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005204:	4b31      	ldr	r3, [pc, #196]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a30      	ldr	r2, [pc, #192]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 800520a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800520e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005210:	f7fd fb6a 	bl	80028e8 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005218:	f7fd fb66 	bl	80028e8 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e04c      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800522a:	4b28      	ldr	r3, [pc, #160]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1f0      	bne.n	8005218 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005236:	4b25      	ldr	r3, [pc, #148]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	4924      	ldr	r1, [pc, #144]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 800523c:	4b25      	ldr	r3, [pc, #148]	@ (80052d4 <HAL_RCC_OscConfig+0x620>)
 800523e:	4013      	ands	r3, r2
 8005240:	60cb      	str	r3, [r1, #12]
 8005242:	e03e      	b.n	80052c2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e039      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005250:	4b1e      	ldr	r3, [pc, #120]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f003 0203 	and.w	r2, r3, #3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	429a      	cmp	r2, r3
 8005262:	d12c      	bne.n	80052be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526e:	3b01      	subs	r3, #1
 8005270:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005272:	429a      	cmp	r2, r3
 8005274:	d123      	bne.n	80052be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005280:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005282:	429a      	cmp	r2, r3
 8005284:	d11b      	bne.n	80052be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005292:	429a      	cmp	r2, r3
 8005294:	d113      	bne.n	80052be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a0:	085b      	lsrs	r3, r3, #1
 80052a2:	3b01      	subs	r3, #1
 80052a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d109      	bne.n	80052be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b4:	085b      	lsrs	r3, r3, #1
 80052b6:	3b01      	subs	r3, #1
 80052b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d001      	beq.n	80052c2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3720      	adds	r7, #32
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	40021000 	.word	0x40021000
 80052d0:	019f800c 	.word	0x019f800c
 80052d4:	feeefffc 	.word	0xfeeefffc

080052d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e11e      	b.n	800552e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052f0:	4b91      	ldr	r3, [pc, #580]	@ (8005538 <HAL_RCC_ClockConfig+0x260>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 030f 	and.w	r3, r3, #15
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d910      	bls.n	8005320 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052fe:	4b8e      	ldr	r3, [pc, #568]	@ (8005538 <HAL_RCC_ClockConfig+0x260>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f023 020f 	bic.w	r2, r3, #15
 8005306:	498c      	ldr	r1, [pc, #560]	@ (8005538 <HAL_RCC_ClockConfig+0x260>)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	4313      	orrs	r3, r2
 800530c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800530e:	4b8a      	ldr	r3, [pc, #552]	@ (8005538 <HAL_RCC_ClockConfig+0x260>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d001      	beq.n	8005320 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e106      	b.n	800552e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d073      	beq.n	8005414 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	2b03      	cmp	r3, #3
 8005332:	d129      	bne.n	8005388 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005334:	4b81      	ldr	r3, [pc, #516]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e0f4      	b.n	800552e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005344:	f000 f99e 	bl	8005684 <RCC_GetSysClockFreqFromPLLSource>
 8005348:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	4a7c      	ldr	r2, [pc, #496]	@ (8005540 <HAL_RCC_ClockConfig+0x268>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d93f      	bls.n	80053d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005352:	4b7a      	ldr	r3, [pc, #488]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d009      	beq.n	8005372 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005366:	2b00      	cmp	r3, #0
 8005368:	d033      	beq.n	80053d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800536e:	2b00      	cmp	r3, #0
 8005370:	d12f      	bne.n	80053d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005372:	4b72      	ldr	r3, [pc, #456]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800537a:	4a70      	ldr	r2, [pc, #448]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 800537c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005380:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005382:	2380      	movs	r3, #128	@ 0x80
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	e024      	b.n	80053d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b02      	cmp	r3, #2
 800538e:	d107      	bne.n	80053a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005390:	4b6a      	ldr	r3, [pc, #424]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d109      	bne.n	80053b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e0c6      	b.n	800552e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053a0:	4b66      	ldr	r3, [pc, #408]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e0be      	b.n	800552e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80053b0:	f000 f8ce 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 80053b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	4a61      	ldr	r2, [pc, #388]	@ (8005540 <HAL_RCC_ClockConfig+0x268>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d909      	bls.n	80053d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053be:	4b5f      	ldr	r3, [pc, #380]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053c6:	4a5d      	ldr	r2, [pc, #372]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 80053c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80053ce:	2380      	movs	r3, #128	@ 0x80
 80053d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053d2:	4b5a      	ldr	r3, [pc, #360]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f023 0203 	bic.w	r2, r3, #3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	4957      	ldr	r1, [pc, #348]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e4:	f7fd fa80 	bl	80028e8 <HAL_GetTick>
 80053e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ea:	e00a      	b.n	8005402 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053ec:	f7fd fa7c 	bl	80028e8 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e095      	b.n	800552e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005402:	4b4e      	ldr	r3, [pc, #312]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 020c 	and.w	r2, r3, #12
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	429a      	cmp	r2, r3
 8005412:	d1eb      	bne.n	80053ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d023      	beq.n	8005468 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800542c:	4b43      	ldr	r3, [pc, #268]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	4a42      	ldr	r2, [pc, #264]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 8005432:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005436:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b00      	cmp	r3, #0
 8005442:	d007      	beq.n	8005454 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005444:	4b3d      	ldr	r3, [pc, #244]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800544c:	4a3b      	ldr	r2, [pc, #236]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 800544e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005452:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005454:	4b39      	ldr	r3, [pc, #228]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	4936      	ldr	r1, [pc, #216]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 8005462:	4313      	orrs	r3, r2
 8005464:	608b      	str	r3, [r1, #8]
 8005466:	e008      	b.n	800547a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	2b80      	cmp	r3, #128	@ 0x80
 800546c:	d105      	bne.n	800547a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800546e:	4b33      	ldr	r3, [pc, #204]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	4a32      	ldr	r2, [pc, #200]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 8005474:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005478:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800547a:	4b2f      	ldr	r3, [pc, #188]	@ (8005538 <HAL_RCC_ClockConfig+0x260>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d21d      	bcs.n	80054c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005488:	4b2b      	ldr	r3, [pc, #172]	@ (8005538 <HAL_RCC_ClockConfig+0x260>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f023 020f 	bic.w	r2, r3, #15
 8005490:	4929      	ldr	r1, [pc, #164]	@ (8005538 <HAL_RCC_ClockConfig+0x260>)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	4313      	orrs	r3, r2
 8005496:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005498:	f7fd fa26 	bl	80028e8 <HAL_GetTick>
 800549c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800549e:	e00a      	b.n	80054b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054a0:	f7fd fa22 	bl	80028e8 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e03b      	b.n	800552e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b6:	4b20      	ldr	r3, [pc, #128]	@ (8005538 <HAL_RCC_ClockConfig+0x260>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d1ed      	bne.n	80054a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d008      	beq.n	80054e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054d0:	4b1a      	ldr	r3, [pc, #104]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	4917      	ldr	r1, [pc, #92]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ee:	4b13      	ldr	r3, [pc, #76]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	490f      	ldr	r1, [pc, #60]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005502:	f000 f825 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 8005506:	4602      	mov	r2, r0
 8005508:	4b0c      	ldr	r3, [pc, #48]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	091b      	lsrs	r3, r3, #4
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	490c      	ldr	r1, [pc, #48]	@ (8005544 <HAL_RCC_ClockConfig+0x26c>)
 8005514:	5ccb      	ldrb	r3, [r1, r3]
 8005516:	f003 031f 	and.w	r3, r3, #31
 800551a:	fa22 f303 	lsr.w	r3, r2, r3
 800551e:	4a0a      	ldr	r2, [pc, #40]	@ (8005548 <HAL_RCC_ClockConfig+0x270>)
 8005520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005522:	4b0a      	ldr	r3, [pc, #40]	@ (800554c <HAL_RCC_ClockConfig+0x274>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	f7fd f992 	bl	8002850 <HAL_InitTick>
 800552c:	4603      	mov	r3, r0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	40022000 	.word	0x40022000
 800553c:	40021000 	.word	0x40021000
 8005540:	04c4b400 	.word	0x04c4b400
 8005544:	0800ad00 	.word	0x0800ad00
 8005548:	20000000 	.word	0x20000000
 800554c:	20000004 	.word	0x20000004

08005550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005556:	4b2c      	ldr	r3, [pc, #176]	@ (8005608 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 030c 	and.w	r3, r3, #12
 800555e:	2b04      	cmp	r3, #4
 8005560:	d102      	bne.n	8005568 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005562:	4b2a      	ldr	r3, [pc, #168]	@ (800560c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005564:	613b      	str	r3, [r7, #16]
 8005566:	e047      	b.n	80055f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005568:	4b27      	ldr	r3, [pc, #156]	@ (8005608 <HAL_RCC_GetSysClockFreq+0xb8>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f003 030c 	and.w	r3, r3, #12
 8005570:	2b08      	cmp	r3, #8
 8005572:	d102      	bne.n	800557a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005574:	4b26      	ldr	r3, [pc, #152]	@ (8005610 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005576:	613b      	str	r3, [r7, #16]
 8005578:	e03e      	b.n	80055f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800557a:	4b23      	ldr	r3, [pc, #140]	@ (8005608 <HAL_RCC_GetSysClockFreq+0xb8>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 030c 	and.w	r3, r3, #12
 8005582:	2b0c      	cmp	r3, #12
 8005584:	d136      	bne.n	80055f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005586:	4b20      	ldr	r3, [pc, #128]	@ (8005608 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005590:	4b1d      	ldr	r3, [pc, #116]	@ (8005608 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	091b      	lsrs	r3, r3, #4
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	3301      	adds	r3, #1
 800559c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d10c      	bne.n	80055be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005610 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ac:	4a16      	ldr	r2, [pc, #88]	@ (8005608 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055ae:	68d2      	ldr	r2, [r2, #12]
 80055b0:	0a12      	lsrs	r2, r2, #8
 80055b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80055b6:	fb02 f303 	mul.w	r3, r2, r3
 80055ba:	617b      	str	r3, [r7, #20]
      break;
 80055bc:	e00c      	b.n	80055d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055be:	4a13      	ldr	r2, [pc, #76]	@ (800560c <HAL_RCC_GetSysClockFreq+0xbc>)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c6:	4a10      	ldr	r2, [pc, #64]	@ (8005608 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055c8:	68d2      	ldr	r2, [r2, #12]
 80055ca:	0a12      	lsrs	r2, r2, #8
 80055cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80055d0:	fb02 f303 	mul.w	r3, r2, r3
 80055d4:	617b      	str	r3, [r7, #20]
      break;
 80055d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005608 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	0e5b      	lsrs	r3, r3, #25
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	3301      	adds	r3, #1
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	e001      	b.n	80055f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80055f8:	693b      	ldr	r3, [r7, #16]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	40021000 	.word	0x40021000
 800560c:	00f42400 	.word	0x00f42400
 8005610:	007a1200 	.word	0x007a1200

08005614 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005618:	4b03      	ldr	r3, [pc, #12]	@ (8005628 <HAL_RCC_GetHCLKFreq+0x14>)
 800561a:	681b      	ldr	r3, [r3, #0]
}
 800561c:	4618      	mov	r0, r3
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	20000000 	.word	0x20000000

0800562c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005630:	f7ff fff0 	bl	8005614 <HAL_RCC_GetHCLKFreq>
 8005634:	4602      	mov	r2, r0
 8005636:	4b06      	ldr	r3, [pc, #24]	@ (8005650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	0a1b      	lsrs	r3, r3, #8
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	4904      	ldr	r1, [pc, #16]	@ (8005654 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005642:	5ccb      	ldrb	r3, [r1, r3]
 8005644:	f003 031f 	and.w	r3, r3, #31
 8005648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800564c:	4618      	mov	r0, r3
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40021000 	.word	0x40021000
 8005654:	0800ad10 	.word	0x0800ad10

08005658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800565c:	f7ff ffda 	bl	8005614 <HAL_RCC_GetHCLKFreq>
 8005660:	4602      	mov	r2, r0
 8005662:	4b06      	ldr	r3, [pc, #24]	@ (800567c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	0adb      	lsrs	r3, r3, #11
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	4904      	ldr	r1, [pc, #16]	@ (8005680 <HAL_RCC_GetPCLK2Freq+0x28>)
 800566e:	5ccb      	ldrb	r3, [r1, r3]
 8005670:	f003 031f 	and.w	r3, r3, #31
 8005674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005678:	4618      	mov	r0, r3
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40021000 	.word	0x40021000
 8005680:	0800ad10 	.word	0x0800ad10

08005684 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800568a:	4b1e      	ldr	r3, [pc, #120]	@ (8005704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005694:	4b1b      	ldr	r3, [pc, #108]	@ (8005704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	091b      	lsrs	r3, r3, #4
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	3301      	adds	r3, #1
 80056a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	d10c      	bne.n	80056c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056a8:	4a17      	ldr	r2, [pc, #92]	@ (8005708 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b0:	4a14      	ldr	r2, [pc, #80]	@ (8005704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056b2:	68d2      	ldr	r2, [r2, #12]
 80056b4:	0a12      	lsrs	r2, r2, #8
 80056b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056ba:	fb02 f303 	mul.w	r3, r2, r3
 80056be:	617b      	str	r3, [r7, #20]
    break;
 80056c0:	e00c      	b.n	80056dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056c2:	4a12      	ldr	r2, [pc, #72]	@ (800570c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ca:	4a0e      	ldr	r2, [pc, #56]	@ (8005704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056cc:	68d2      	ldr	r2, [r2, #12]
 80056ce:	0a12      	lsrs	r2, r2, #8
 80056d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056d4:	fb02 f303 	mul.w	r3, r2, r3
 80056d8:	617b      	str	r3, [r7, #20]
    break;
 80056da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056dc:	4b09      	ldr	r3, [pc, #36]	@ (8005704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	0e5b      	lsrs	r3, r3, #25
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	3301      	adds	r3, #1
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80056f6:	687b      	ldr	r3, [r7, #4]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	40021000 	.word	0x40021000
 8005708:	007a1200 	.word	0x007a1200
 800570c:	00f42400 	.word	0x00f42400

08005710 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005718:	2300      	movs	r3, #0
 800571a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800571c:	2300      	movs	r3, #0
 800571e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8098 	beq.w	800585e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800572e:	2300      	movs	r3, #0
 8005730:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005732:	4b43      	ldr	r3, [pc, #268]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10d      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800573e:	4b40      	ldr	r3, [pc, #256]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005742:	4a3f      	ldr	r2, [pc, #252]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005748:	6593      	str	r3, [r2, #88]	@ 0x58
 800574a:	4b3d      	ldr	r3, [pc, #244]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800574c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800574e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005752:	60bb      	str	r3, [r7, #8]
 8005754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005756:	2301      	movs	r3, #1
 8005758:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800575a:	4b3a      	ldr	r3, [pc, #232]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a39      	ldr	r2, [pc, #228]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005764:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005766:	f7fd f8bf 	bl	80028e8 <HAL_GetTick>
 800576a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800576c:	e009      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800576e:	f7fd f8bb 	bl	80028e8 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d902      	bls.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	74fb      	strb	r3, [r7, #19]
        break;
 8005780:	e005      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005782:	4b30      	ldr	r3, [pc, #192]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0ef      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800578e:	7cfb      	ldrb	r3, [r7, #19]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d159      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005794:	4b2a      	ldr	r3, [pc, #168]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800579a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800579e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d01e      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d019      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057b0:	4b23      	ldr	r3, [pc, #140]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057bc:	4b20      	ldr	r3, [pc, #128]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057dc:	4a18      	ldr	r2, [pc, #96]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d016      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ee:	f7fd f87b 	bl	80028e8 <HAL_GetTick>
 80057f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057f4:	e00b      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057f6:	f7fd f877 	bl	80028e8 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005804:	4293      	cmp	r3, r2
 8005806:	d902      	bls.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	74fb      	strb	r3, [r7, #19]
            break;
 800580c:	e006      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800580e:	4b0c      	ldr	r3, [pc, #48]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0ec      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800581c:	7cfb      	ldrb	r3, [r7, #19]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10b      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005822:	4b07      	ldr	r3, [pc, #28]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005828:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005830:	4903      	ldr	r1, [pc, #12]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005838:	e008      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800583a:	7cfb      	ldrb	r3, [r7, #19]
 800583c:	74bb      	strb	r3, [r7, #18]
 800583e:	e005      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005840:	40021000 	.word	0x40021000
 8005844:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005848:	7cfb      	ldrb	r3, [r7, #19]
 800584a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800584c:	7c7b      	ldrb	r3, [r7, #17]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d105      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005852:	4ba6      	ldr	r3, [pc, #664]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005856:	4aa5      	ldr	r2, [pc, #660]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005858:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800585c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800586a:	4ba0      	ldr	r3, [pc, #640]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800586c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005870:	f023 0203 	bic.w	r2, r3, #3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	499c      	ldr	r1, [pc, #624]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800588c:	4b97      	ldr	r3, [pc, #604]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800588e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005892:	f023 020c 	bic.w	r2, r3, #12
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	4994      	ldr	r1, [pc, #592]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0304 	and.w	r3, r3, #4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058ae:	4b8f      	ldr	r3, [pc, #572]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	498b      	ldr	r1, [pc, #556]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00a      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058d0:	4b86      	ldr	r3, [pc, #536]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	4983      	ldr	r1, [pc, #524]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058f2:	4b7e      	ldr	r3, [pc, #504]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	497a      	ldr	r1, [pc, #488]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005902:	4313      	orrs	r3, r2
 8005904:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00a      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005914:	4b75      	ldr	r3, [pc, #468]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800591a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	4972      	ldr	r1, [pc, #456]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005936:	4b6d      	ldr	r3, [pc, #436]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800593c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	4969      	ldr	r1, [pc, #420]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005958:	4b64      	ldr	r3, [pc, #400]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800595a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800595e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	4961      	ldr	r1, [pc, #388]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005968:	4313      	orrs	r3, r2
 800596a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800597a:	4b5c      	ldr	r3, [pc, #368]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800597c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005980:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005988:	4958      	ldr	r1, [pc, #352]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800598a:	4313      	orrs	r3, r2
 800598c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005998:	2b00      	cmp	r3, #0
 800599a:	d015      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800599c:	4b53      	ldr	r3, [pc, #332]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059aa:	4950      	ldr	r1, [pc, #320]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059ba:	d105      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059bc:	4b4b      	ldr	r3, [pc, #300]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	4a4a      	ldr	r2, [pc, #296]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d015      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059d4:	4b45      	ldr	r3, [pc, #276]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e2:	4942      	ldr	r1, [pc, #264]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059f2:	d105      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059f4:	4b3d      	ldr	r3, [pc, #244]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	4a3c      	ldr	r2, [pc, #240]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059fe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d015      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a0c:	4b37      	ldr	r3, [pc, #220]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a12:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a1a:	4934      	ldr	r1, [pc, #208]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a2a:	d105      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	4a2e      	ldr	r2, [pc, #184]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a36:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d015      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a44:	4b29      	ldr	r3, [pc, #164]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a52:	4926      	ldr	r1, [pc, #152]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a62:	d105      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a64:	4b21      	ldr	r3, [pc, #132]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	4a20      	ldr	r2, [pc, #128]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a6e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d015      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8a:	4918      	ldr	r1, [pc, #96]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a9a:	d105      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a9c:	4b13      	ldr	r3, [pc, #76]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	4a12      	ldr	r2, [pc, #72]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005aa6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d015      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac2:	490a      	ldr	r1, [pc, #40]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ace:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ad2:	d105      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ad4:	4b05      	ldr	r3, [pc, #20]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	4a04      	ldr	r2, [pc, #16]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ada:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ade:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005ae0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40021000 	.word	0x40021000

08005af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e049      	b.n	8005b96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d106      	bne.n	8005b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7fc fc0c 	bl	8002334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	4610      	mov	r0, r2
 8005b30:	f000 fc8e 	bl	8006450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b082      	sub	sp, #8
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e049      	b.n	8005c44 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d106      	bne.n	8005bca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f7fc fbd5 	bl	8002374 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	4619      	mov	r1, r3
 8005bdc:	4610      	mov	r0, r2
 8005bde:	f000 fc37 	bl	8006450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d109      	bne.n	8005c70 <HAL_TIM_PWM_Start+0x24>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	bf14      	ite	ne
 8005c68:	2301      	movne	r3, #1
 8005c6a:	2300      	moveq	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	e03c      	b.n	8005cea <HAL_TIM_PWM_Start+0x9e>
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	d109      	bne.n	8005c8a <HAL_TIM_PWM_Start+0x3e>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	bf14      	ite	ne
 8005c82:	2301      	movne	r3, #1
 8005c84:	2300      	moveq	r3, #0
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	e02f      	b.n	8005cea <HAL_TIM_PWM_Start+0x9e>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d109      	bne.n	8005ca4 <HAL_TIM_PWM_Start+0x58>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	bf14      	ite	ne
 8005c9c:	2301      	movne	r3, #1
 8005c9e:	2300      	moveq	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	e022      	b.n	8005cea <HAL_TIM_PWM_Start+0x9e>
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	2b0c      	cmp	r3, #12
 8005ca8:	d109      	bne.n	8005cbe <HAL_TIM_PWM_Start+0x72>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	bf14      	ite	ne
 8005cb6:	2301      	movne	r3, #1
 8005cb8:	2300      	moveq	r3, #0
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	e015      	b.n	8005cea <HAL_TIM_PWM_Start+0x9e>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b10      	cmp	r3, #16
 8005cc2:	d109      	bne.n	8005cd8 <HAL_TIM_PWM_Start+0x8c>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	bf14      	ite	ne
 8005cd0:	2301      	movne	r3, #1
 8005cd2:	2300      	moveq	r3, #0
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	e008      	b.n	8005cea <HAL_TIM_PWM_Start+0x9e>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	bf14      	ite	ne
 8005ce4:	2301      	movne	r3, #1
 8005ce6:	2300      	moveq	r3, #0
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e097      	b.n	8005e22 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d104      	bne.n	8005d02 <HAL_TIM_PWM_Start+0xb6>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d00:	e023      	b.n	8005d4a <HAL_TIM_PWM_Start+0xfe>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d104      	bne.n	8005d12 <HAL_TIM_PWM_Start+0xc6>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d10:	e01b      	b.n	8005d4a <HAL_TIM_PWM_Start+0xfe>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d104      	bne.n	8005d22 <HAL_TIM_PWM_Start+0xd6>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d20:	e013      	b.n	8005d4a <HAL_TIM_PWM_Start+0xfe>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b0c      	cmp	r3, #12
 8005d26:	d104      	bne.n	8005d32 <HAL_TIM_PWM_Start+0xe6>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d30:	e00b      	b.n	8005d4a <HAL_TIM_PWM_Start+0xfe>
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b10      	cmp	r3, #16
 8005d36:	d104      	bne.n	8005d42 <HAL_TIM_PWM_Start+0xf6>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d40:	e003      	b.n	8005d4a <HAL_TIM_PWM_Start+0xfe>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2202      	movs	r2, #2
 8005d46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f001 f8c8 	bl	8006ee8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a33      	ldr	r2, [pc, #204]	@ (8005e2c <HAL_TIM_PWM_Start+0x1e0>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d013      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x13e>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a32      	ldr	r2, [pc, #200]	@ (8005e30 <HAL_TIM_PWM_Start+0x1e4>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00e      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x13e>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a30      	ldr	r2, [pc, #192]	@ (8005e34 <HAL_TIM_PWM_Start+0x1e8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d009      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x13e>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a2f      	ldr	r2, [pc, #188]	@ (8005e38 <HAL_TIM_PWM_Start+0x1ec>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x13e>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a2d      	ldr	r2, [pc, #180]	@ (8005e3c <HAL_TIM_PWM_Start+0x1f0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d101      	bne.n	8005d8e <HAL_TIM_PWM_Start+0x142>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e000      	b.n	8005d90 <HAL_TIM_PWM_Start+0x144>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d007      	beq.n	8005da4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005da2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a20      	ldr	r2, [pc, #128]	@ (8005e2c <HAL_TIM_PWM_Start+0x1e0>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d018      	beq.n	8005de0 <HAL_TIM_PWM_Start+0x194>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005db6:	d013      	beq.n	8005de0 <HAL_TIM_PWM_Start+0x194>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a20      	ldr	r2, [pc, #128]	@ (8005e40 <HAL_TIM_PWM_Start+0x1f4>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d00e      	beq.n	8005de0 <HAL_TIM_PWM_Start+0x194>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a1f      	ldr	r2, [pc, #124]	@ (8005e44 <HAL_TIM_PWM_Start+0x1f8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d009      	beq.n	8005de0 <HAL_TIM_PWM_Start+0x194>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a17      	ldr	r2, [pc, #92]	@ (8005e30 <HAL_TIM_PWM_Start+0x1e4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d004      	beq.n	8005de0 <HAL_TIM_PWM_Start+0x194>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a16      	ldr	r2, [pc, #88]	@ (8005e34 <HAL_TIM_PWM_Start+0x1e8>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d115      	bne.n	8005e0c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	4b18      	ldr	r3, [pc, #96]	@ (8005e48 <HAL_TIM_PWM_Start+0x1fc>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b06      	cmp	r3, #6
 8005df0:	d015      	beq.n	8005e1e <HAL_TIM_PWM_Start+0x1d2>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005df8:	d011      	beq.n	8005e1e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f042 0201 	orr.w	r2, r2, #1
 8005e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e0a:	e008      	b.n	8005e1e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	e000      	b.n	8005e20 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	40012c00 	.word	0x40012c00
 8005e30:	40013400 	.word	0x40013400
 8005e34:	40014000 	.word	0x40014000
 8005e38:	40014400 	.word	0x40014400
 8005e3c:	40014800 	.word	0x40014800
 8005e40:	40000400 	.word	0x40000400
 8005e44:	40000800 	.word	0x40000800
 8005e48:	00010007 	.word	0x00010007

08005e4c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e049      	b.n	8005ef2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7fc fa9c 	bl	80023b0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3304      	adds	r3, #4
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	f000 fae0 	bl	8006450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b086      	sub	sp, #24
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	60f8      	str	r0, [r7, #12]
 8005f02:	60b9      	str	r1, [r7, #8]
 8005f04:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e088      	b.n	800602a <HAL_TIM_IC_ConfigChannel+0x130>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d11b      	bne.n	8005f5e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005f36:	f000 fe1d 	bl	8006b74 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	699a      	ldr	r2, [r3, #24]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 020c 	bic.w	r2, r2, #12
 8005f48:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6999      	ldr	r1, [r3, #24]
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	619a      	str	r2, [r3, #24]
 8005f5c:	e060      	b.n	8006020 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d11c      	bne.n	8005f9e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005f74:	f000 fe95 	bl	8006ca2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699a      	ldr	r2, [r3, #24]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005f86:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6999      	ldr	r1, [r3, #24]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	021a      	lsls	r2, r3, #8
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	619a      	str	r2, [r3, #24]
 8005f9c:	e040      	b.n	8006020 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d11b      	bne.n	8005fdc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005fb4:	f000 fee2 	bl	8006d7c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	69da      	ldr	r2, [r3, #28]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 020c 	bic.w	r2, r2, #12
 8005fc6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69d9      	ldr	r1, [r3, #28]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	61da      	str	r2, [r3, #28]
 8005fda:	e021      	b.n	8006020 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b0c      	cmp	r3, #12
 8005fe0:	d11c      	bne.n	800601c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005ff2:	f000 feff 	bl	8006df4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69da      	ldr	r2, [r3, #28]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006004:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	69d9      	ldr	r1, [r3, #28]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	021a      	lsls	r2, r3, #8
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	61da      	str	r2, [r3, #28]
 800601a:	e001      	b.n	8006020 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006028:	7dfb      	ldrb	r3, [r7, #23]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3718      	adds	r7, #24
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
	...

08006034 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800604e:	2302      	movs	r3, #2
 8006050:	e0ff      	b.n	8006252 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b14      	cmp	r3, #20
 800605e:	f200 80f0 	bhi.w	8006242 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006062:	a201      	add	r2, pc, #4	@ (adr r2, 8006068 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006068:	080060bd 	.word	0x080060bd
 800606c:	08006243 	.word	0x08006243
 8006070:	08006243 	.word	0x08006243
 8006074:	08006243 	.word	0x08006243
 8006078:	080060fd 	.word	0x080060fd
 800607c:	08006243 	.word	0x08006243
 8006080:	08006243 	.word	0x08006243
 8006084:	08006243 	.word	0x08006243
 8006088:	0800613f 	.word	0x0800613f
 800608c:	08006243 	.word	0x08006243
 8006090:	08006243 	.word	0x08006243
 8006094:	08006243 	.word	0x08006243
 8006098:	0800617f 	.word	0x0800617f
 800609c:	08006243 	.word	0x08006243
 80060a0:	08006243 	.word	0x08006243
 80060a4:	08006243 	.word	0x08006243
 80060a8:	080061c1 	.word	0x080061c1
 80060ac:	08006243 	.word	0x08006243
 80060b0:	08006243 	.word	0x08006243
 80060b4:	08006243 	.word	0x08006243
 80060b8:	08006201 	.word	0x08006201
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fa60 	bl	8006588 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699a      	ldr	r2, [r3, #24]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0208 	orr.w	r2, r2, #8
 80060d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	699a      	ldr	r2, [r3, #24]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0204 	bic.w	r2, r2, #4
 80060e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6999      	ldr	r1, [r3, #24]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	691a      	ldr	r2, [r3, #16]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	619a      	str	r2, [r3, #24]
      break;
 80060fa:	e0a5      	b.n	8006248 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fad0 	bl	80066a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699a      	ldr	r2, [r3, #24]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699a      	ldr	r2, [r3, #24]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6999      	ldr	r1, [r3, #24]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	021a      	lsls	r2, r3, #8
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	619a      	str	r2, [r3, #24]
      break;
 800613c:	e084      	b.n	8006248 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68b9      	ldr	r1, [r7, #8]
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fb39 	bl	80067bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	69da      	ldr	r2, [r3, #28]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f042 0208 	orr.w	r2, r2, #8
 8006158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	69da      	ldr	r2, [r3, #28]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0204 	bic.w	r2, r2, #4
 8006168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	69d9      	ldr	r1, [r3, #28]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	61da      	str	r2, [r3, #28]
      break;
 800617c:	e064      	b.n	8006248 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68b9      	ldr	r1, [r7, #8]
 8006184:	4618      	mov	r0, r3
 8006186:	f000 fba1 	bl	80068cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69da      	ldr	r2, [r3, #28]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69d9      	ldr	r1, [r3, #28]
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	021a      	lsls	r2, r3, #8
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	61da      	str	r2, [r3, #28]
      break;
 80061be:	e043      	b.n	8006248 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68b9      	ldr	r1, [r7, #8]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 fc0a 	bl	80069e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f042 0208 	orr.w	r2, r2, #8
 80061da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 0204 	bic.w	r2, r2, #4
 80061ea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	691a      	ldr	r2, [r3, #16]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80061fe:	e023      	b.n	8006248 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68b9      	ldr	r1, [r7, #8]
 8006206:	4618      	mov	r0, r3
 8006208:	f000 fc4e 	bl	8006aa8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800621a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800622a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	021a      	lsls	r2, r3, #8
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	430a      	orrs	r2, r1
 800623e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006240:	e002      	b.n	8006248 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	75fb      	strb	r3, [r7, #23]
      break;
 8006246:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006250:	7dfb      	ldrb	r3, [r7, #23]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop

0800625c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <HAL_TIM_ConfigClockSource+0x1c>
 8006274:	2302      	movs	r3, #2
 8006276:	e0de      	b.n	8006436 <HAL_TIM_ConfigClockSource+0x1da>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006296:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800629a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a63      	ldr	r2, [pc, #396]	@ (8006440 <HAL_TIM_ConfigClockSource+0x1e4>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	f000 80a9 	beq.w	800640a <HAL_TIM_ConfigClockSource+0x1ae>
 80062b8:	4a61      	ldr	r2, [pc, #388]	@ (8006440 <HAL_TIM_ConfigClockSource+0x1e4>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	f200 80ae 	bhi.w	800641c <HAL_TIM_ConfigClockSource+0x1c0>
 80062c0:	4a60      	ldr	r2, [pc, #384]	@ (8006444 <HAL_TIM_ConfigClockSource+0x1e8>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	f000 80a1 	beq.w	800640a <HAL_TIM_ConfigClockSource+0x1ae>
 80062c8:	4a5e      	ldr	r2, [pc, #376]	@ (8006444 <HAL_TIM_ConfigClockSource+0x1e8>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	f200 80a6 	bhi.w	800641c <HAL_TIM_ConfigClockSource+0x1c0>
 80062d0:	4a5d      	ldr	r2, [pc, #372]	@ (8006448 <HAL_TIM_ConfigClockSource+0x1ec>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	f000 8099 	beq.w	800640a <HAL_TIM_ConfigClockSource+0x1ae>
 80062d8:	4a5b      	ldr	r2, [pc, #364]	@ (8006448 <HAL_TIM_ConfigClockSource+0x1ec>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	f200 809e 	bhi.w	800641c <HAL_TIM_ConfigClockSource+0x1c0>
 80062e0:	4a5a      	ldr	r2, [pc, #360]	@ (800644c <HAL_TIM_ConfigClockSource+0x1f0>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	f000 8091 	beq.w	800640a <HAL_TIM_ConfigClockSource+0x1ae>
 80062e8:	4a58      	ldr	r2, [pc, #352]	@ (800644c <HAL_TIM_ConfigClockSource+0x1f0>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	f200 8096 	bhi.w	800641c <HAL_TIM_ConfigClockSource+0x1c0>
 80062f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80062f4:	f000 8089 	beq.w	800640a <HAL_TIM_ConfigClockSource+0x1ae>
 80062f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80062fc:	f200 808e 	bhi.w	800641c <HAL_TIM_ConfigClockSource+0x1c0>
 8006300:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006304:	d03e      	beq.n	8006384 <HAL_TIM_ConfigClockSource+0x128>
 8006306:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800630a:	f200 8087 	bhi.w	800641c <HAL_TIM_ConfigClockSource+0x1c0>
 800630e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006312:	f000 8086 	beq.w	8006422 <HAL_TIM_ConfigClockSource+0x1c6>
 8006316:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800631a:	d87f      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x1c0>
 800631c:	2b70      	cmp	r3, #112	@ 0x70
 800631e:	d01a      	beq.n	8006356 <HAL_TIM_ConfigClockSource+0xfa>
 8006320:	2b70      	cmp	r3, #112	@ 0x70
 8006322:	d87b      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x1c0>
 8006324:	2b60      	cmp	r3, #96	@ 0x60
 8006326:	d050      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x16e>
 8006328:	2b60      	cmp	r3, #96	@ 0x60
 800632a:	d877      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x1c0>
 800632c:	2b50      	cmp	r3, #80	@ 0x50
 800632e:	d03c      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x14e>
 8006330:	2b50      	cmp	r3, #80	@ 0x50
 8006332:	d873      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x1c0>
 8006334:	2b40      	cmp	r3, #64	@ 0x40
 8006336:	d058      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x18e>
 8006338:	2b40      	cmp	r3, #64	@ 0x40
 800633a:	d86f      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x1c0>
 800633c:	2b30      	cmp	r3, #48	@ 0x30
 800633e:	d064      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x1ae>
 8006340:	2b30      	cmp	r3, #48	@ 0x30
 8006342:	d86b      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x1c0>
 8006344:	2b20      	cmp	r3, #32
 8006346:	d060      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x1ae>
 8006348:	2b20      	cmp	r3, #32
 800634a:	d867      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x1c0>
 800634c:	2b00      	cmp	r3, #0
 800634e:	d05c      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x1ae>
 8006350:	2b10      	cmp	r3, #16
 8006352:	d05a      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x1ae>
 8006354:	e062      	b.n	800641c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006366:	f000 fd9f 	bl	8006ea8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006378:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	609a      	str	r2, [r3, #8]
      break;
 8006382:	e04f      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006394:	f000 fd88 	bl	8006ea8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689a      	ldr	r2, [r3, #8]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063a6:	609a      	str	r2, [r3, #8]
      break;
 80063a8:	e03c      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063b6:	461a      	mov	r2, r3
 80063b8:	f000 fc44 	bl	8006c44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2150      	movs	r1, #80	@ 0x50
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fd53 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 80063c8:	e02c      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063d6:	461a      	mov	r2, r3
 80063d8:	f000 fca0 	bl	8006d1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2160      	movs	r1, #96	@ 0x60
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fd43 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 80063e8:	e01c      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063f6:	461a      	mov	r2, r3
 80063f8:	f000 fc24 	bl	8006c44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2140      	movs	r1, #64	@ 0x40
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fd33 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 8006408:	e00c      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4619      	mov	r1, r3
 8006414:	4610      	mov	r0, r2
 8006416:	f000 fd2a 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 800641a:	e003      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	73fb      	strb	r3, [r7, #15]
      break;
 8006420:	e000      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006434:	7bfb      	ldrb	r3, [r7, #15]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	00100070 	.word	0x00100070
 8006444:	00100040 	.word	0x00100040
 8006448:	00100030 	.word	0x00100030
 800644c:	00100020 	.word	0x00100020

08006450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a42      	ldr	r2, [pc, #264]	@ (800656c <TIM_Base_SetConfig+0x11c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00f      	beq.n	8006488 <TIM_Base_SetConfig+0x38>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800646e:	d00b      	beq.n	8006488 <TIM_Base_SetConfig+0x38>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a3f      	ldr	r2, [pc, #252]	@ (8006570 <TIM_Base_SetConfig+0x120>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d007      	beq.n	8006488 <TIM_Base_SetConfig+0x38>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a3e      	ldr	r2, [pc, #248]	@ (8006574 <TIM_Base_SetConfig+0x124>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d003      	beq.n	8006488 <TIM_Base_SetConfig+0x38>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a3d      	ldr	r2, [pc, #244]	@ (8006578 <TIM_Base_SetConfig+0x128>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d108      	bne.n	800649a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800648e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a33      	ldr	r2, [pc, #204]	@ (800656c <TIM_Base_SetConfig+0x11c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d01b      	beq.n	80064da <TIM_Base_SetConfig+0x8a>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064a8:	d017      	beq.n	80064da <TIM_Base_SetConfig+0x8a>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a30      	ldr	r2, [pc, #192]	@ (8006570 <TIM_Base_SetConfig+0x120>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d013      	beq.n	80064da <TIM_Base_SetConfig+0x8a>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a2f      	ldr	r2, [pc, #188]	@ (8006574 <TIM_Base_SetConfig+0x124>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00f      	beq.n	80064da <TIM_Base_SetConfig+0x8a>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a2e      	ldr	r2, [pc, #184]	@ (8006578 <TIM_Base_SetConfig+0x128>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d00b      	beq.n	80064da <TIM_Base_SetConfig+0x8a>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a2d      	ldr	r2, [pc, #180]	@ (800657c <TIM_Base_SetConfig+0x12c>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d007      	beq.n	80064da <TIM_Base_SetConfig+0x8a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a2c      	ldr	r2, [pc, #176]	@ (8006580 <TIM_Base_SetConfig+0x130>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d003      	beq.n	80064da <TIM_Base_SetConfig+0x8a>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a2b      	ldr	r2, [pc, #172]	@ (8006584 <TIM_Base_SetConfig+0x134>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d108      	bne.n	80064ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a16      	ldr	r2, [pc, #88]	@ (800656c <TIM_Base_SetConfig+0x11c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00f      	beq.n	8006538 <TIM_Base_SetConfig+0xe8>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a17      	ldr	r2, [pc, #92]	@ (8006578 <TIM_Base_SetConfig+0x128>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d00b      	beq.n	8006538 <TIM_Base_SetConfig+0xe8>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a16      	ldr	r2, [pc, #88]	@ (800657c <TIM_Base_SetConfig+0x12c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d007      	beq.n	8006538 <TIM_Base_SetConfig+0xe8>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a15      	ldr	r2, [pc, #84]	@ (8006580 <TIM_Base_SetConfig+0x130>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d003      	beq.n	8006538 <TIM_Base_SetConfig+0xe8>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a14      	ldr	r2, [pc, #80]	@ (8006584 <TIM_Base_SetConfig+0x134>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d103      	bne.n	8006540 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	691a      	ldr	r2, [r3, #16]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b01      	cmp	r3, #1
 8006550:	d105      	bne.n	800655e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f023 0201 	bic.w	r2, r3, #1
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	611a      	str	r2, [r3, #16]
  }
}
 800655e:	bf00      	nop
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	40012c00 	.word	0x40012c00
 8006570:	40000400 	.word	0x40000400
 8006574:	40000800 	.word	0x40000800
 8006578:	40013400 	.word	0x40013400
 800657c:	40014000 	.word	0x40014000
 8006580:	40014400 	.word	0x40014400
 8006584:	40014800 	.word	0x40014800

08006588 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	f023 0201 	bic.w	r2, r3, #1
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 0303 	bic.w	r3, r3, #3
 80065c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f023 0302 	bic.w	r3, r3, #2
 80065d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	4313      	orrs	r3, r2
 80065de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a2c      	ldr	r2, [pc, #176]	@ (8006694 <TIM_OC1_SetConfig+0x10c>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00f      	beq.n	8006608 <TIM_OC1_SetConfig+0x80>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a2b      	ldr	r2, [pc, #172]	@ (8006698 <TIM_OC1_SetConfig+0x110>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00b      	beq.n	8006608 <TIM_OC1_SetConfig+0x80>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a2a      	ldr	r2, [pc, #168]	@ (800669c <TIM_OC1_SetConfig+0x114>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d007      	beq.n	8006608 <TIM_OC1_SetConfig+0x80>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a29      	ldr	r2, [pc, #164]	@ (80066a0 <TIM_OC1_SetConfig+0x118>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d003      	beq.n	8006608 <TIM_OC1_SetConfig+0x80>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a28      	ldr	r2, [pc, #160]	@ (80066a4 <TIM_OC1_SetConfig+0x11c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d10c      	bne.n	8006622 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f023 0308 	bic.w	r3, r3, #8
 800660e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	4313      	orrs	r3, r2
 8006618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f023 0304 	bic.w	r3, r3, #4
 8006620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a1b      	ldr	r2, [pc, #108]	@ (8006694 <TIM_OC1_SetConfig+0x10c>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00f      	beq.n	800664a <TIM_OC1_SetConfig+0xc2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a1a      	ldr	r2, [pc, #104]	@ (8006698 <TIM_OC1_SetConfig+0x110>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d00b      	beq.n	800664a <TIM_OC1_SetConfig+0xc2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a19      	ldr	r2, [pc, #100]	@ (800669c <TIM_OC1_SetConfig+0x114>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d007      	beq.n	800664a <TIM_OC1_SetConfig+0xc2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a18      	ldr	r2, [pc, #96]	@ (80066a0 <TIM_OC1_SetConfig+0x118>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d003      	beq.n	800664a <TIM_OC1_SetConfig+0xc2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a17      	ldr	r2, [pc, #92]	@ (80066a4 <TIM_OC1_SetConfig+0x11c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d111      	bne.n	800666e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	4313      	orrs	r3, r2
 8006662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	4313      	orrs	r3, r2
 800666c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	621a      	str	r2, [r3, #32]
}
 8006688:	bf00      	nop
 800668a:	371c      	adds	r7, #28
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	40012c00 	.word	0x40012c00
 8006698:	40013400 	.word	0x40013400
 800669c:	40014000 	.word	0x40014000
 80066a0:	40014400 	.word	0x40014400
 80066a4:	40014800 	.word	0x40014800

080066a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	f023 0210 	bic.w	r2, r3, #16
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	021b      	lsls	r3, r3, #8
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f023 0320 	bic.w	r3, r3, #32
 80066f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	011b      	lsls	r3, r3, #4
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	4313      	orrs	r3, r2
 8006702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a28      	ldr	r2, [pc, #160]	@ (80067a8 <TIM_OC2_SetConfig+0x100>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d003      	beq.n	8006714 <TIM_OC2_SetConfig+0x6c>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a27      	ldr	r2, [pc, #156]	@ (80067ac <TIM_OC2_SetConfig+0x104>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d10d      	bne.n	8006730 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800671a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	011b      	lsls	r3, r3, #4
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	4313      	orrs	r3, r2
 8006726:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800672e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a1d      	ldr	r2, [pc, #116]	@ (80067a8 <TIM_OC2_SetConfig+0x100>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d00f      	beq.n	8006758 <TIM_OC2_SetConfig+0xb0>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a1c      	ldr	r2, [pc, #112]	@ (80067ac <TIM_OC2_SetConfig+0x104>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d00b      	beq.n	8006758 <TIM_OC2_SetConfig+0xb0>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a1b      	ldr	r2, [pc, #108]	@ (80067b0 <TIM_OC2_SetConfig+0x108>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d007      	beq.n	8006758 <TIM_OC2_SetConfig+0xb0>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a1a      	ldr	r2, [pc, #104]	@ (80067b4 <TIM_OC2_SetConfig+0x10c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d003      	beq.n	8006758 <TIM_OC2_SetConfig+0xb0>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a19      	ldr	r2, [pc, #100]	@ (80067b8 <TIM_OC2_SetConfig+0x110>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d113      	bne.n	8006780 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800675e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006766:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	4313      	orrs	r3, r2
 8006772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	4313      	orrs	r3, r2
 800677e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	621a      	str	r2, [r3, #32]
}
 800679a:	bf00      	nop
 800679c:	371c      	adds	r7, #28
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	40012c00 	.word	0x40012c00
 80067ac:	40013400 	.word	0x40013400
 80067b0:	40014000 	.word	0x40014000
 80067b4:	40014400 	.word	0x40014400
 80067b8:	40014800 	.word	0x40014800

080067bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a1b      	ldr	r3, [r3, #32]
 80067d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f023 0303 	bic.w	r3, r3, #3
 80067f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	4313      	orrs	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	021b      	lsls	r3, r3, #8
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	4313      	orrs	r3, r2
 8006814:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a27      	ldr	r2, [pc, #156]	@ (80068b8 <TIM_OC3_SetConfig+0xfc>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d003      	beq.n	8006826 <TIM_OC3_SetConfig+0x6a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a26      	ldr	r2, [pc, #152]	@ (80068bc <TIM_OC3_SetConfig+0x100>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d10d      	bne.n	8006842 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800682c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	021b      	lsls	r3, r3, #8
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	4313      	orrs	r3, r2
 8006838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a1c      	ldr	r2, [pc, #112]	@ (80068b8 <TIM_OC3_SetConfig+0xfc>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00f      	beq.n	800686a <TIM_OC3_SetConfig+0xae>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a1b      	ldr	r2, [pc, #108]	@ (80068bc <TIM_OC3_SetConfig+0x100>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d00b      	beq.n	800686a <TIM_OC3_SetConfig+0xae>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a1a      	ldr	r2, [pc, #104]	@ (80068c0 <TIM_OC3_SetConfig+0x104>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d007      	beq.n	800686a <TIM_OC3_SetConfig+0xae>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a19      	ldr	r2, [pc, #100]	@ (80068c4 <TIM_OC3_SetConfig+0x108>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d003      	beq.n	800686a <TIM_OC3_SetConfig+0xae>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a18      	ldr	r2, [pc, #96]	@ (80068c8 <TIM_OC3_SetConfig+0x10c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d113      	bne.n	8006892 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	011b      	lsls	r3, r3, #4
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	4313      	orrs	r3, r2
 8006890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	621a      	str	r2, [r3, #32]
}
 80068ac:	bf00      	nop
 80068ae:	371c      	adds	r7, #28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	40012c00 	.word	0x40012c00
 80068bc:	40013400 	.word	0x40013400
 80068c0:	40014000 	.word	0x40014000
 80068c4:	40014400 	.word	0x40014400
 80068c8:	40014800 	.word	0x40014800

080068cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	021b      	lsls	r3, r3, #8
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	4313      	orrs	r3, r2
 8006912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800691a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	031b      	lsls	r3, r3, #12
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	4313      	orrs	r3, r2
 8006926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a28      	ldr	r2, [pc, #160]	@ (80069cc <TIM_OC4_SetConfig+0x100>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d003      	beq.n	8006938 <TIM_OC4_SetConfig+0x6c>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a27      	ldr	r2, [pc, #156]	@ (80069d0 <TIM_OC4_SetConfig+0x104>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d10d      	bne.n	8006954 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800693e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	031b      	lsls	r3, r3, #12
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	4313      	orrs	r3, r2
 800694a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006952:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a1d      	ldr	r2, [pc, #116]	@ (80069cc <TIM_OC4_SetConfig+0x100>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d00f      	beq.n	800697c <TIM_OC4_SetConfig+0xb0>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a1c      	ldr	r2, [pc, #112]	@ (80069d0 <TIM_OC4_SetConfig+0x104>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d00b      	beq.n	800697c <TIM_OC4_SetConfig+0xb0>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a1b      	ldr	r2, [pc, #108]	@ (80069d4 <TIM_OC4_SetConfig+0x108>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d007      	beq.n	800697c <TIM_OC4_SetConfig+0xb0>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a1a      	ldr	r2, [pc, #104]	@ (80069d8 <TIM_OC4_SetConfig+0x10c>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d003      	beq.n	800697c <TIM_OC4_SetConfig+0xb0>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a19      	ldr	r2, [pc, #100]	@ (80069dc <TIM_OC4_SetConfig+0x110>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d113      	bne.n	80069a4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006982:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800698a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	019b      	lsls	r3, r3, #6
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	4313      	orrs	r3, r2
 8006996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	019b      	lsls	r3, r3, #6
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	621a      	str	r2, [r3, #32]
}
 80069be:	bf00      	nop
 80069c0:	371c      	adds	r7, #28
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	40012c00 	.word	0x40012c00
 80069d0:	40013400 	.word	0x40013400
 80069d4:	40014000 	.word	0x40014000
 80069d8:	40014400 	.word	0x40014400
 80069dc:	40014800 	.word	0x40014800

080069e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b087      	sub	sp, #28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006a24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	041b      	lsls	r3, r3, #16
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a17      	ldr	r2, [pc, #92]	@ (8006a94 <TIM_OC5_SetConfig+0xb4>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d00f      	beq.n	8006a5a <TIM_OC5_SetConfig+0x7a>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a16      	ldr	r2, [pc, #88]	@ (8006a98 <TIM_OC5_SetConfig+0xb8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00b      	beq.n	8006a5a <TIM_OC5_SetConfig+0x7a>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a15      	ldr	r2, [pc, #84]	@ (8006a9c <TIM_OC5_SetConfig+0xbc>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d007      	beq.n	8006a5a <TIM_OC5_SetConfig+0x7a>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a14      	ldr	r2, [pc, #80]	@ (8006aa0 <TIM_OC5_SetConfig+0xc0>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d003      	beq.n	8006a5a <TIM_OC5_SetConfig+0x7a>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a13      	ldr	r2, [pc, #76]	@ (8006aa4 <TIM_OC5_SetConfig+0xc4>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d109      	bne.n	8006a6e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	021b      	lsls	r3, r3, #8
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	621a      	str	r2, [r3, #32]
}
 8006a88:	bf00      	nop
 8006a8a:	371c      	adds	r7, #28
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	40012c00 	.word	0x40012c00
 8006a98:	40013400 	.word	0x40013400
 8006a9c:	40014000 	.word	0x40014000
 8006aa0:	40014400 	.word	0x40014400
 8006aa4:	40014800 	.word	0x40014800

08006aa8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ad6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	021b      	lsls	r3, r3, #8
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006aee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	051b      	lsls	r3, r3, #20
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a18      	ldr	r2, [pc, #96]	@ (8006b60 <TIM_OC6_SetConfig+0xb8>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d00f      	beq.n	8006b24 <TIM_OC6_SetConfig+0x7c>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a17      	ldr	r2, [pc, #92]	@ (8006b64 <TIM_OC6_SetConfig+0xbc>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00b      	beq.n	8006b24 <TIM_OC6_SetConfig+0x7c>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a16      	ldr	r2, [pc, #88]	@ (8006b68 <TIM_OC6_SetConfig+0xc0>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d007      	beq.n	8006b24 <TIM_OC6_SetConfig+0x7c>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a15      	ldr	r2, [pc, #84]	@ (8006b6c <TIM_OC6_SetConfig+0xc4>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d003      	beq.n	8006b24 <TIM_OC6_SetConfig+0x7c>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a14      	ldr	r2, [pc, #80]	@ (8006b70 <TIM_OC6_SetConfig+0xc8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d109      	bne.n	8006b38 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	029b      	lsls	r3, r3, #10
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	621a      	str	r2, [r3, #32]
}
 8006b52:	bf00      	nop
 8006b54:	371c      	adds	r7, #28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	40012c00 	.word	0x40012c00
 8006b64:	40013400 	.word	0x40013400
 8006b68:	40014000 	.word	0x40014000
 8006b6c:	40014400 	.word	0x40014400
 8006b70:	40014800 	.word	0x40014800

08006b74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b087      	sub	sp, #28
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
 8006b80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	f023 0201 	bic.w	r2, r3, #1
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	4a24      	ldr	r2, [pc, #144]	@ (8006c30 <TIM_TI1_SetConfig+0xbc>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d013      	beq.n	8006bca <TIM_TI1_SetConfig+0x56>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ba8:	d00f      	beq.n	8006bca <TIM_TI1_SetConfig+0x56>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	4a21      	ldr	r2, [pc, #132]	@ (8006c34 <TIM_TI1_SetConfig+0xc0>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d00b      	beq.n	8006bca <TIM_TI1_SetConfig+0x56>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	4a20      	ldr	r2, [pc, #128]	@ (8006c38 <TIM_TI1_SetConfig+0xc4>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d007      	beq.n	8006bca <TIM_TI1_SetConfig+0x56>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4a1f      	ldr	r2, [pc, #124]	@ (8006c3c <TIM_TI1_SetConfig+0xc8>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d003      	beq.n	8006bca <TIM_TI1_SetConfig+0x56>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	4a1e      	ldr	r2, [pc, #120]	@ (8006c40 <TIM_TI1_SetConfig+0xcc>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d101      	bne.n	8006bce <TIM_TI1_SetConfig+0x5a>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <TIM_TI1_SetConfig+0x5c>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d008      	beq.n	8006be6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f023 0303 	bic.w	r3, r3, #3
 8006bda:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]
 8006be4:	e003      	b.n	8006bee <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f043 0301 	orr.w	r3, r3, #1
 8006bec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	011b      	lsls	r3, r3, #4
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	f023 030a 	bic.w	r3, r3, #10
 8006c08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	f003 030a 	and.w	r3, r3, #10
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	621a      	str	r2, [r3, #32]
}
 8006c22:	bf00      	nop
 8006c24:	371c      	adds	r7, #28
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	40012c00 	.word	0x40012c00
 8006c34:	40000400 	.word	0x40000400
 8006c38:	40000800 	.word	0x40000800
 8006c3c:	40013400 	.word	0x40013400
 8006c40:	40014000 	.word	0x40014000

08006c44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	f023 0201 	bic.w	r2, r3, #1
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	011b      	lsls	r3, r3, #4
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f023 030a 	bic.w	r3, r3, #10
 8006c80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	621a      	str	r2, [r3, #32]
}
 8006c96:	bf00      	nop
 8006c98:	371c      	adds	r7, #28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b087      	sub	sp, #28
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	60f8      	str	r0, [r7, #12]
 8006caa:	60b9      	str	r1, [r7, #8]
 8006cac:	607a      	str	r2, [r7, #4]
 8006cae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6a1b      	ldr	r3, [r3, #32]
 8006cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	f023 0210 	bic.w	r2, r3, #16
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	021b      	lsls	r3, r3, #8
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ce0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	031b      	lsls	r3, r3, #12
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006cf4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	011b      	lsls	r3, r3, #4
 8006cfa:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	621a      	str	r2, [r3, #32]
}
 8006d10:	bf00      	nop
 8006d12:	371c      	adds	r7, #28
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	f023 0210 	bic.w	r2, r3, #16
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	031b      	lsls	r3, r3, #12
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d58:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	011b      	lsls	r3, r3, #4
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	621a      	str	r2, [r3, #32]
}
 8006d70:	bf00      	nop
 8006d72:	371c      	adds	r7, #28
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	f023 0303 	bic.w	r3, r3, #3
 8006da8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006db8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	011b      	lsls	r3, r3, #4
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	021b      	lsls	r3, r3, #8
 8006dd2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	621a      	str	r2, [r3, #32]
}
 8006de8:	bf00      	nop
 8006dea:	371c      	adds	r7, #28
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
 8006e00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	021b      	lsls	r3, r3, #8
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e32:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	031b      	lsls	r3, r3, #12
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006e46:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	031b      	lsls	r3, r3, #12
 8006e4c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	621a      	str	r2, [r3, #32]
}
 8006e62:	bf00      	nop
 8006e64:	371c      	adds	r7, #28
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006e84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	f043 0307 	orr.w	r3, r3, #7
 8006e94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	609a      	str	r2, [r3, #8]
}
 8006e9c:	bf00      	nop
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
 8006eb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ec2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	021a      	lsls	r2, r3, #8
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	609a      	str	r2, [r3, #8]
}
 8006edc:	bf00      	nop
 8006ede:	371c      	adds	r7, #28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f003 031f 	and.w	r3, r3, #31
 8006efa:	2201      	movs	r2, #1
 8006efc:	fa02 f303 	lsl.w	r3, r2, r3
 8006f00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a1a      	ldr	r2, [r3, #32]
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	43db      	mvns	r3, r3
 8006f0a:	401a      	ands	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6a1a      	ldr	r2, [r3, #32]
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f003 031f 	and.w	r3, r3, #31
 8006f1a:	6879      	ldr	r1, [r7, #4]
 8006f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f20:	431a      	orrs	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	621a      	str	r2, [r3, #32]
}
 8006f26:	bf00      	nop
 8006f28:	371c      	adds	r7, #28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
	...

08006f34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d101      	bne.n	8006f4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e065      	b.n	8007018 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2202      	movs	r2, #2
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a2c      	ldr	r2, [pc, #176]	@ (8007024 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d004      	beq.n	8006f80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a2b      	ldr	r2, [pc, #172]	@ (8007028 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d108      	bne.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006f86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8007024 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d018      	beq.n	8006fec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fc2:	d013      	beq.n	8006fec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a18      	ldr	r2, [pc, #96]	@ (800702c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00e      	beq.n	8006fec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a17      	ldr	r2, [pc, #92]	@ (8007030 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d009      	beq.n	8006fec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a12      	ldr	r2, [pc, #72]	@ (8007028 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d004      	beq.n	8006fec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a13      	ldr	r2, [pc, #76]	@ (8007034 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d10c      	bne.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ff2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3714      	adds	r7, #20
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	40012c00 	.word	0x40012c00
 8007028:	40013400 	.word	0x40013400
 800702c:	40000400 	.word	0x40000400
 8007030:	40000800 	.word	0x40000800
 8007034:	40014000 	.word	0x40014000

08007038 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800704c:	2b01      	cmp	r3, #1
 800704e:	d101      	bne.n	8007054 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007050:	2302      	movs	r3, #2
 8007052:	e073      	b.n	800713c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	4313      	orrs	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4313      	orrs	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	041b      	lsls	r3, r3, #16
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	4313      	orrs	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a19      	ldr	r2, [pc, #100]	@ (8007148 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d004      	beq.n	80070f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a18      	ldr	r2, [pc, #96]	@ (800714c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d11c      	bne.n	800712a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070fa:	051b      	lsls	r3, r3, #20
 80070fc:	4313      	orrs	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	4313      	orrs	r3, r2
 800710c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007118:	4313      	orrs	r3, r2
 800711a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007126:	4313      	orrs	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	40012c00 	.word	0x40012c00
 800714c:	40013400 	.word	0x40013400

08007150 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e042      	b.n	80071e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007168:	2b00      	cmp	r3, #0
 800716a:	d106      	bne.n	800717a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7fb f9c9 	bl	800250c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2224      	movs	r2, #36	@ 0x24
 800717e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0201 	bic.w	r2, r2, #1
 8007190:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fb82 	bl	80078a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f8b3 	bl	800730c <UART_SetConfig>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d101      	bne.n	80071b0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e01b      	b.n	80071e8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689a      	ldr	r2, [r3, #8]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f042 0201 	orr.w	r2, r2, #1
 80071de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fc01 	bl	80079e8 <UART_CheckIdleState>
 80071e6:	4603      	mov	r3, r0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b08a      	sub	sp, #40	@ 0x28
 80071f4:	af02      	add	r7, sp, #8
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	603b      	str	r3, [r7, #0]
 80071fc:	4613      	mov	r3, r2
 80071fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007206:	2b20      	cmp	r3, #32
 8007208:	d17b      	bne.n	8007302 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <HAL_UART_Transmit+0x26>
 8007210:	88fb      	ldrh	r3, [r7, #6]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e074      	b.n	8007304 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2221      	movs	r2, #33	@ 0x21
 8007226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800722a:	f7fb fb5d 	bl	80028e8 <HAL_GetTick>
 800722e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	88fa      	ldrh	r2, [r7, #6]
 8007234:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	88fa      	ldrh	r2, [r7, #6]
 800723c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007248:	d108      	bne.n	800725c <HAL_UART_Transmit+0x6c>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d104      	bne.n	800725c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007252:	2300      	movs	r3, #0
 8007254:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	61bb      	str	r3, [r7, #24]
 800725a:	e003      	b.n	8007264 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007260:	2300      	movs	r3, #0
 8007262:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007264:	e030      	b.n	80072c8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	2200      	movs	r2, #0
 800726e:	2180      	movs	r1, #128	@ 0x80
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 fc63 	bl	8007b3c <UART_WaitOnFlagUntilTimeout>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d005      	beq.n	8007288 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2220      	movs	r2, #32
 8007280:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e03d      	b.n	8007304 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10b      	bne.n	80072a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800729c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	3302      	adds	r3, #2
 80072a2:	61bb      	str	r3, [r7, #24]
 80072a4:	e007      	b.n	80072b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	781a      	ldrb	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	3301      	adds	r3, #1
 80072b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80072bc:	b29b      	uxth	r3, r3
 80072be:	3b01      	subs	r3, #1
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1c8      	bne.n	8007266 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	2200      	movs	r2, #0
 80072dc:	2140      	movs	r1, #64	@ 0x40
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f000 fc2c 	bl	8007b3c <UART_WaitOnFlagUntilTimeout>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d005      	beq.n	80072f6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2220      	movs	r2, #32
 80072ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e006      	b.n	8007304 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	e000      	b.n	8007304 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007302:	2302      	movs	r3, #2
  }
}
 8007304:	4618      	mov	r0, r3
 8007306:	3720      	adds	r7, #32
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800730c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007310:	b08c      	sub	sp, #48	@ 0x30
 8007312:	af00      	add	r7, sp, #0
 8007314:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	689a      	ldr	r2, [r3, #8]
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	431a      	orrs	r2, r3
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	431a      	orrs	r2, r3
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	4313      	orrs	r3, r2
 8007332:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	4bab      	ldr	r3, [pc, #684]	@ (80075e8 <UART_SetConfig+0x2dc>)
 800733c:	4013      	ands	r3, r2
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	6812      	ldr	r2, [r2, #0]
 8007342:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007344:	430b      	orrs	r3, r1
 8007346:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	430a      	orrs	r2, r1
 800735c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4aa0      	ldr	r2, [pc, #640]	@ (80075ec <UART_SetConfig+0x2e0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d004      	beq.n	8007378 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007374:	4313      	orrs	r3, r2
 8007376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007382:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	6812      	ldr	r2, [r2, #0]
 800738a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800738c:	430b      	orrs	r3, r1
 800738e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007396:	f023 010f 	bic.w	r1, r3, #15
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a91      	ldr	r2, [pc, #580]	@ (80075f0 <UART_SetConfig+0x2e4>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d125      	bne.n	80073fc <UART_SetConfig+0xf0>
 80073b0:	4b90      	ldr	r3, [pc, #576]	@ (80075f4 <UART_SetConfig+0x2e8>)
 80073b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073b6:	f003 0303 	and.w	r3, r3, #3
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d81a      	bhi.n	80073f4 <UART_SetConfig+0xe8>
 80073be:	a201      	add	r2, pc, #4	@ (adr r2, 80073c4 <UART_SetConfig+0xb8>)
 80073c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c4:	080073d5 	.word	0x080073d5
 80073c8:	080073e5 	.word	0x080073e5
 80073cc:	080073dd 	.word	0x080073dd
 80073d0:	080073ed 	.word	0x080073ed
 80073d4:	2301      	movs	r3, #1
 80073d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073da:	e0d6      	b.n	800758a <UART_SetConfig+0x27e>
 80073dc:	2302      	movs	r3, #2
 80073de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073e2:	e0d2      	b.n	800758a <UART_SetConfig+0x27e>
 80073e4:	2304      	movs	r3, #4
 80073e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ea:	e0ce      	b.n	800758a <UART_SetConfig+0x27e>
 80073ec:	2308      	movs	r3, #8
 80073ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073f2:	e0ca      	b.n	800758a <UART_SetConfig+0x27e>
 80073f4:	2310      	movs	r3, #16
 80073f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073fa:	e0c6      	b.n	800758a <UART_SetConfig+0x27e>
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a7d      	ldr	r2, [pc, #500]	@ (80075f8 <UART_SetConfig+0x2ec>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d138      	bne.n	8007478 <UART_SetConfig+0x16c>
 8007406:	4b7b      	ldr	r3, [pc, #492]	@ (80075f4 <UART_SetConfig+0x2e8>)
 8007408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800740c:	f003 030c 	and.w	r3, r3, #12
 8007410:	2b0c      	cmp	r3, #12
 8007412:	d82d      	bhi.n	8007470 <UART_SetConfig+0x164>
 8007414:	a201      	add	r2, pc, #4	@ (adr r2, 800741c <UART_SetConfig+0x110>)
 8007416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741a:	bf00      	nop
 800741c:	08007451 	.word	0x08007451
 8007420:	08007471 	.word	0x08007471
 8007424:	08007471 	.word	0x08007471
 8007428:	08007471 	.word	0x08007471
 800742c:	08007461 	.word	0x08007461
 8007430:	08007471 	.word	0x08007471
 8007434:	08007471 	.word	0x08007471
 8007438:	08007471 	.word	0x08007471
 800743c:	08007459 	.word	0x08007459
 8007440:	08007471 	.word	0x08007471
 8007444:	08007471 	.word	0x08007471
 8007448:	08007471 	.word	0x08007471
 800744c:	08007469 	.word	0x08007469
 8007450:	2300      	movs	r3, #0
 8007452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007456:	e098      	b.n	800758a <UART_SetConfig+0x27e>
 8007458:	2302      	movs	r3, #2
 800745a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800745e:	e094      	b.n	800758a <UART_SetConfig+0x27e>
 8007460:	2304      	movs	r3, #4
 8007462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007466:	e090      	b.n	800758a <UART_SetConfig+0x27e>
 8007468:	2308      	movs	r3, #8
 800746a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800746e:	e08c      	b.n	800758a <UART_SetConfig+0x27e>
 8007470:	2310      	movs	r3, #16
 8007472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007476:	e088      	b.n	800758a <UART_SetConfig+0x27e>
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a5f      	ldr	r2, [pc, #380]	@ (80075fc <UART_SetConfig+0x2f0>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d125      	bne.n	80074ce <UART_SetConfig+0x1c2>
 8007482:	4b5c      	ldr	r3, [pc, #368]	@ (80075f4 <UART_SetConfig+0x2e8>)
 8007484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007488:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800748c:	2b30      	cmp	r3, #48	@ 0x30
 800748e:	d016      	beq.n	80074be <UART_SetConfig+0x1b2>
 8007490:	2b30      	cmp	r3, #48	@ 0x30
 8007492:	d818      	bhi.n	80074c6 <UART_SetConfig+0x1ba>
 8007494:	2b20      	cmp	r3, #32
 8007496:	d00a      	beq.n	80074ae <UART_SetConfig+0x1a2>
 8007498:	2b20      	cmp	r3, #32
 800749a:	d814      	bhi.n	80074c6 <UART_SetConfig+0x1ba>
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <UART_SetConfig+0x19a>
 80074a0:	2b10      	cmp	r3, #16
 80074a2:	d008      	beq.n	80074b6 <UART_SetConfig+0x1aa>
 80074a4:	e00f      	b.n	80074c6 <UART_SetConfig+0x1ba>
 80074a6:	2300      	movs	r3, #0
 80074a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ac:	e06d      	b.n	800758a <UART_SetConfig+0x27e>
 80074ae:	2302      	movs	r3, #2
 80074b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074b4:	e069      	b.n	800758a <UART_SetConfig+0x27e>
 80074b6:	2304      	movs	r3, #4
 80074b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074bc:	e065      	b.n	800758a <UART_SetConfig+0x27e>
 80074be:	2308      	movs	r3, #8
 80074c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074c4:	e061      	b.n	800758a <UART_SetConfig+0x27e>
 80074c6:	2310      	movs	r3, #16
 80074c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074cc:	e05d      	b.n	800758a <UART_SetConfig+0x27e>
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a4b      	ldr	r2, [pc, #300]	@ (8007600 <UART_SetConfig+0x2f4>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d125      	bne.n	8007524 <UART_SetConfig+0x218>
 80074d8:	4b46      	ldr	r3, [pc, #280]	@ (80075f4 <UART_SetConfig+0x2e8>)
 80074da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80074e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80074e4:	d016      	beq.n	8007514 <UART_SetConfig+0x208>
 80074e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80074e8:	d818      	bhi.n	800751c <UART_SetConfig+0x210>
 80074ea:	2b80      	cmp	r3, #128	@ 0x80
 80074ec:	d00a      	beq.n	8007504 <UART_SetConfig+0x1f8>
 80074ee:	2b80      	cmp	r3, #128	@ 0x80
 80074f0:	d814      	bhi.n	800751c <UART_SetConfig+0x210>
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d002      	beq.n	80074fc <UART_SetConfig+0x1f0>
 80074f6:	2b40      	cmp	r3, #64	@ 0x40
 80074f8:	d008      	beq.n	800750c <UART_SetConfig+0x200>
 80074fa:	e00f      	b.n	800751c <UART_SetConfig+0x210>
 80074fc:	2300      	movs	r3, #0
 80074fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007502:	e042      	b.n	800758a <UART_SetConfig+0x27e>
 8007504:	2302      	movs	r3, #2
 8007506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800750a:	e03e      	b.n	800758a <UART_SetConfig+0x27e>
 800750c:	2304      	movs	r3, #4
 800750e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007512:	e03a      	b.n	800758a <UART_SetConfig+0x27e>
 8007514:	2308      	movs	r3, #8
 8007516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800751a:	e036      	b.n	800758a <UART_SetConfig+0x27e>
 800751c:	2310      	movs	r3, #16
 800751e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007522:	e032      	b.n	800758a <UART_SetConfig+0x27e>
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a30      	ldr	r2, [pc, #192]	@ (80075ec <UART_SetConfig+0x2e0>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d12a      	bne.n	8007584 <UART_SetConfig+0x278>
 800752e:	4b31      	ldr	r3, [pc, #196]	@ (80075f4 <UART_SetConfig+0x2e8>)
 8007530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007534:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007538:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800753c:	d01a      	beq.n	8007574 <UART_SetConfig+0x268>
 800753e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007542:	d81b      	bhi.n	800757c <UART_SetConfig+0x270>
 8007544:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007548:	d00c      	beq.n	8007564 <UART_SetConfig+0x258>
 800754a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800754e:	d815      	bhi.n	800757c <UART_SetConfig+0x270>
 8007550:	2b00      	cmp	r3, #0
 8007552:	d003      	beq.n	800755c <UART_SetConfig+0x250>
 8007554:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007558:	d008      	beq.n	800756c <UART_SetConfig+0x260>
 800755a:	e00f      	b.n	800757c <UART_SetConfig+0x270>
 800755c:	2300      	movs	r3, #0
 800755e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007562:	e012      	b.n	800758a <UART_SetConfig+0x27e>
 8007564:	2302      	movs	r3, #2
 8007566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800756a:	e00e      	b.n	800758a <UART_SetConfig+0x27e>
 800756c:	2304      	movs	r3, #4
 800756e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007572:	e00a      	b.n	800758a <UART_SetConfig+0x27e>
 8007574:	2308      	movs	r3, #8
 8007576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800757a:	e006      	b.n	800758a <UART_SetConfig+0x27e>
 800757c:	2310      	movs	r3, #16
 800757e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007582:	e002      	b.n	800758a <UART_SetConfig+0x27e>
 8007584:	2310      	movs	r3, #16
 8007586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a17      	ldr	r2, [pc, #92]	@ (80075ec <UART_SetConfig+0x2e0>)
 8007590:	4293      	cmp	r3, r2
 8007592:	f040 80a8 	bne.w	80076e6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007596:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800759a:	2b08      	cmp	r3, #8
 800759c:	d834      	bhi.n	8007608 <UART_SetConfig+0x2fc>
 800759e:	a201      	add	r2, pc, #4	@ (adr r2, 80075a4 <UART_SetConfig+0x298>)
 80075a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a4:	080075c9 	.word	0x080075c9
 80075a8:	08007609 	.word	0x08007609
 80075ac:	080075d1 	.word	0x080075d1
 80075b0:	08007609 	.word	0x08007609
 80075b4:	080075d7 	.word	0x080075d7
 80075b8:	08007609 	.word	0x08007609
 80075bc:	08007609 	.word	0x08007609
 80075c0:	08007609 	.word	0x08007609
 80075c4:	080075df 	.word	0x080075df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075c8:	f7fe f830 	bl	800562c <HAL_RCC_GetPCLK1Freq>
 80075cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075ce:	e021      	b.n	8007614 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007604 <UART_SetConfig+0x2f8>)
 80075d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075d4:	e01e      	b.n	8007614 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075d6:	f7fd ffbb 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 80075da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075dc:	e01a      	b.n	8007614 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075e4:	e016      	b.n	8007614 <UART_SetConfig+0x308>
 80075e6:	bf00      	nop
 80075e8:	cfff69f3 	.word	0xcfff69f3
 80075ec:	40008000 	.word	0x40008000
 80075f0:	40013800 	.word	0x40013800
 80075f4:	40021000 	.word	0x40021000
 80075f8:	40004400 	.word	0x40004400
 80075fc:	40004800 	.word	0x40004800
 8007600:	40004c00 	.word	0x40004c00
 8007604:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007608:	2300      	movs	r3, #0
 800760a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007612:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007616:	2b00      	cmp	r3, #0
 8007618:	f000 812a 	beq.w	8007870 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007620:	4a9e      	ldr	r2, [pc, #632]	@ (800789c <UART_SetConfig+0x590>)
 8007622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007626:	461a      	mov	r2, r3
 8007628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762a:	fbb3 f3f2 	udiv	r3, r3, r2
 800762e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	4613      	mov	r3, r2
 8007636:	005b      	lsls	r3, r3, #1
 8007638:	4413      	add	r3, r2
 800763a:	69ba      	ldr	r2, [r7, #24]
 800763c:	429a      	cmp	r2, r3
 800763e:	d305      	bcc.n	800764c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007646:	69ba      	ldr	r2, [r7, #24]
 8007648:	429a      	cmp	r2, r3
 800764a:	d903      	bls.n	8007654 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007652:	e10d      	b.n	8007870 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007656:	2200      	movs	r2, #0
 8007658:	60bb      	str	r3, [r7, #8]
 800765a:	60fa      	str	r2, [r7, #12]
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007660:	4a8e      	ldr	r2, [pc, #568]	@ (800789c <UART_SetConfig+0x590>)
 8007662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007666:	b29b      	uxth	r3, r3
 8007668:	2200      	movs	r2, #0
 800766a:	603b      	str	r3, [r7, #0]
 800766c:	607a      	str	r2, [r7, #4]
 800766e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007672:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007676:	f7f9 fadf 	bl	8000c38 <__aeabi_uldivmod>
 800767a:	4602      	mov	r2, r0
 800767c:	460b      	mov	r3, r1
 800767e:	4610      	mov	r0, r2
 8007680:	4619      	mov	r1, r3
 8007682:	f04f 0200 	mov.w	r2, #0
 8007686:	f04f 0300 	mov.w	r3, #0
 800768a:	020b      	lsls	r3, r1, #8
 800768c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007690:	0202      	lsls	r2, r0, #8
 8007692:	6979      	ldr	r1, [r7, #20]
 8007694:	6849      	ldr	r1, [r1, #4]
 8007696:	0849      	lsrs	r1, r1, #1
 8007698:	2000      	movs	r0, #0
 800769a:	460c      	mov	r4, r1
 800769c:	4605      	mov	r5, r0
 800769e:	eb12 0804 	adds.w	r8, r2, r4
 80076a2:	eb43 0905 	adc.w	r9, r3, r5
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	469a      	mov	sl, r3
 80076ae:	4693      	mov	fp, r2
 80076b0:	4652      	mov	r2, sl
 80076b2:	465b      	mov	r3, fp
 80076b4:	4640      	mov	r0, r8
 80076b6:	4649      	mov	r1, r9
 80076b8:	f7f9 fabe 	bl	8000c38 <__aeabi_uldivmod>
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	4613      	mov	r3, r2
 80076c2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076ca:	d308      	bcc.n	80076de <UART_SetConfig+0x3d2>
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076d2:	d204      	bcs.n	80076de <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6a3a      	ldr	r2, [r7, #32]
 80076da:	60da      	str	r2, [r3, #12]
 80076dc:	e0c8      	b.n	8007870 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80076e4:	e0c4      	b.n	8007870 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	69db      	ldr	r3, [r3, #28]
 80076ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076ee:	d167      	bne.n	80077c0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80076f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80076f4:	2b08      	cmp	r3, #8
 80076f6:	d828      	bhi.n	800774a <UART_SetConfig+0x43e>
 80076f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007700 <UART_SetConfig+0x3f4>)
 80076fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fe:	bf00      	nop
 8007700:	08007725 	.word	0x08007725
 8007704:	0800772d 	.word	0x0800772d
 8007708:	08007735 	.word	0x08007735
 800770c:	0800774b 	.word	0x0800774b
 8007710:	0800773b 	.word	0x0800773b
 8007714:	0800774b 	.word	0x0800774b
 8007718:	0800774b 	.word	0x0800774b
 800771c:	0800774b 	.word	0x0800774b
 8007720:	08007743 	.word	0x08007743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007724:	f7fd ff82 	bl	800562c <HAL_RCC_GetPCLK1Freq>
 8007728:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800772a:	e014      	b.n	8007756 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800772c:	f7fd ff94 	bl	8005658 <HAL_RCC_GetPCLK2Freq>
 8007730:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007732:	e010      	b.n	8007756 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007734:	4b5a      	ldr	r3, [pc, #360]	@ (80078a0 <UART_SetConfig+0x594>)
 8007736:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007738:	e00d      	b.n	8007756 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800773a:	f7fd ff09 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 800773e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007740:	e009      	b.n	8007756 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007746:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007748:	e005      	b.n	8007756 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007754:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 8089 	beq.w	8007870 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007762:	4a4e      	ldr	r2, [pc, #312]	@ (800789c <UART_SetConfig+0x590>)
 8007764:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007768:	461a      	mov	r2, r3
 800776a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007770:	005a      	lsls	r2, r3, #1
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	085b      	lsrs	r3, r3, #1
 8007778:	441a      	add	r2, r3
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007782:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	2b0f      	cmp	r3, #15
 8007788:	d916      	bls.n	80077b8 <UART_SetConfig+0x4ac>
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007790:	d212      	bcs.n	80077b8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	b29b      	uxth	r3, r3
 8007796:	f023 030f 	bic.w	r3, r3, #15
 800779a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	085b      	lsrs	r3, r3, #1
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	f003 0307 	and.w	r3, r3, #7
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	8bfb      	ldrh	r3, [r7, #30]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	8bfa      	ldrh	r2, [r7, #30]
 80077b4:	60da      	str	r2, [r3, #12]
 80077b6:	e05b      	b.n	8007870 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80077be:	e057      	b.n	8007870 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80077c4:	2b08      	cmp	r3, #8
 80077c6:	d828      	bhi.n	800781a <UART_SetConfig+0x50e>
 80077c8:	a201      	add	r2, pc, #4	@ (adr r2, 80077d0 <UART_SetConfig+0x4c4>)
 80077ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ce:	bf00      	nop
 80077d0:	080077f5 	.word	0x080077f5
 80077d4:	080077fd 	.word	0x080077fd
 80077d8:	08007805 	.word	0x08007805
 80077dc:	0800781b 	.word	0x0800781b
 80077e0:	0800780b 	.word	0x0800780b
 80077e4:	0800781b 	.word	0x0800781b
 80077e8:	0800781b 	.word	0x0800781b
 80077ec:	0800781b 	.word	0x0800781b
 80077f0:	08007813 	.word	0x08007813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077f4:	f7fd ff1a 	bl	800562c <HAL_RCC_GetPCLK1Freq>
 80077f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077fa:	e014      	b.n	8007826 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077fc:	f7fd ff2c 	bl	8005658 <HAL_RCC_GetPCLK2Freq>
 8007800:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007802:	e010      	b.n	8007826 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007804:	4b26      	ldr	r3, [pc, #152]	@ (80078a0 <UART_SetConfig+0x594>)
 8007806:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007808:	e00d      	b.n	8007826 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800780a:	f7fd fea1 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 800780e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007810:	e009      	b.n	8007826 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007816:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007818:	e005      	b.n	8007826 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007824:	bf00      	nop
    }

    if (pclk != 0U)
 8007826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007828:	2b00      	cmp	r3, #0
 800782a:	d021      	beq.n	8007870 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007830:	4a1a      	ldr	r2, [pc, #104]	@ (800789c <UART_SetConfig+0x590>)
 8007832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007836:	461a      	mov	r2, r3
 8007838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783a:	fbb3 f2f2 	udiv	r2, r3, r2
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	085b      	lsrs	r3, r3, #1
 8007844:	441a      	add	r2, r3
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	fbb2 f3f3 	udiv	r3, r2, r3
 800784e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	2b0f      	cmp	r3, #15
 8007854:	d909      	bls.n	800786a <UART_SetConfig+0x55e>
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800785c:	d205      	bcs.n	800786a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	b29a      	uxth	r2, r3
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60da      	str	r2, [r3, #12]
 8007868:	e002      	b.n	8007870 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	2201      	movs	r2, #1
 8007874:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	2201      	movs	r2, #1
 800787c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	2200      	movs	r2, #0
 8007884:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2200      	movs	r2, #0
 800788a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800788c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007890:	4618      	mov	r0, r3
 8007892:	3730      	adds	r7, #48	@ 0x30
 8007894:	46bd      	mov	sp, r7
 8007896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800789a:	bf00      	nop
 800789c:	0800ad18 	.word	0x0800ad18
 80078a0:	00f42400 	.word	0x00f42400

080078a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b0:	f003 0308 	and.w	r3, r3, #8
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00a      	beq.n	80078ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00a      	beq.n	80078f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	430a      	orrs	r2, r1
 80078ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f4:	f003 0302 	and.w	r3, r3, #2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00a      	beq.n	8007912 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	430a      	orrs	r2, r1
 8007910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007916:	f003 0304 	and.w	r3, r3, #4
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00a      	beq.n	8007934 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	430a      	orrs	r2, r1
 8007932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007938:	f003 0310 	and.w	r3, r3, #16
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00a      	beq.n	8007956 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795a:	f003 0320 	and.w	r3, r3, #32
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00a      	beq.n	8007978 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	430a      	orrs	r2, r1
 8007976:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800797c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007980:	2b00      	cmp	r3, #0
 8007982:	d01a      	beq.n	80079ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	430a      	orrs	r2, r1
 8007998:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800799e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079a2:	d10a      	bne.n	80079ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00a      	beq.n	80079dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	430a      	orrs	r2, r1
 80079da:	605a      	str	r2, [r3, #4]
  }
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b098      	sub	sp, #96	@ 0x60
 80079ec:	af02      	add	r7, sp, #8
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079f8:	f7fa ff76 	bl	80028e8 <HAL_GetTick>
 80079fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 0308 	and.w	r3, r3, #8
 8007a08:	2b08      	cmp	r3, #8
 8007a0a:	d12f      	bne.n	8007a6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a14:	2200      	movs	r2, #0
 8007a16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f88e 	bl	8007b3c <UART_WaitOnFlagUntilTimeout>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d022      	beq.n	8007a6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a46:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e6      	bne.n	8007a26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e063      	b.n	8007b34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0304 	and.w	r3, r3, #4
 8007a76:	2b04      	cmp	r3, #4
 8007a78:	d149      	bne.n	8007b0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a82:	2200      	movs	r2, #0
 8007a84:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f857 	bl	8007b3c <UART_WaitOnFlagUntilTimeout>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d03c      	beq.n	8007b0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9c:	e853 3f00 	ldrex	r3, [r3]
 8007aa0:	623b      	str	r3, [r7, #32]
   return(result);
 8007aa2:	6a3b      	ldr	r3, [r7, #32]
 8007aa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007aa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ab2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ab4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ab8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007aba:	e841 2300 	strex	r3, r2, [r1]
 8007abe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1e6      	bne.n	8007a94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3308      	adds	r3, #8
 8007acc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f023 0301 	bic.w	r3, r3, #1
 8007adc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ae6:	61fa      	str	r2, [r7, #28]
 8007ae8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aea:	69b9      	ldr	r1, [r7, #24]
 8007aec:	69fa      	ldr	r2, [r7, #28]
 8007aee:	e841 2300 	strex	r3, r2, [r1]
 8007af2:	617b      	str	r3, [r7, #20]
   return(result);
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1e5      	bne.n	8007ac6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2220      	movs	r2, #32
 8007afe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e012      	b.n	8007b34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2220      	movs	r2, #32
 8007b12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2220      	movs	r2, #32
 8007b1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3758      	adds	r7, #88	@ 0x58
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	603b      	str	r3, [r7, #0]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b4c:	e04f      	b.n	8007bee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b54:	d04b      	beq.n	8007bee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b56:	f7fa fec7 	bl	80028e8 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	69ba      	ldr	r2, [r7, #24]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d302      	bcc.n	8007b6c <UART_WaitOnFlagUntilTimeout+0x30>
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e04e      	b.n	8007c0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0304 	and.w	r3, r3, #4
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d037      	beq.n	8007bee <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2b80      	cmp	r3, #128	@ 0x80
 8007b82:	d034      	beq.n	8007bee <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2b40      	cmp	r3, #64	@ 0x40
 8007b88:	d031      	beq.n	8007bee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	f003 0308 	and.w	r3, r3, #8
 8007b94:	2b08      	cmp	r3, #8
 8007b96:	d110      	bne.n	8007bba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2208      	movs	r2, #8
 8007b9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 f838 	bl	8007c16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2208      	movs	r2, #8
 8007baa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e029      	b.n	8007c0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bc8:	d111      	bne.n	8007bee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007bd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f000 f81e 	bl	8007c16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2220      	movs	r2, #32
 8007bde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e00f      	b.n	8007c0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	69da      	ldr	r2, [r3, #28]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	bf0c      	ite	eq
 8007bfe:	2301      	moveq	r3, #1
 8007c00:	2300      	movne	r3, #0
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	461a      	mov	r2, r3
 8007c06:	79fb      	ldrb	r3, [r7, #7]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d0a0      	beq.n	8007b4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b095      	sub	sp, #84	@ 0x54
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c26:	e853 3f00 	ldrex	r3, [r3]
 8007c2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	461a      	mov	r2, r3
 8007c3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c44:	e841 2300 	strex	r3, r2, [r1]
 8007c48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1e6      	bne.n	8007c1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3308      	adds	r3, #8
 8007c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	e853 3f00 	ldrex	r3, [r3]
 8007c5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c66:	f023 0301 	bic.w	r3, r3, #1
 8007c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3308      	adds	r3, #8
 8007c72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c7c:	e841 2300 	strex	r3, r2, [r1]
 8007c80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e3      	bne.n	8007c50 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d118      	bne.n	8007cc2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	f023 0310 	bic.w	r3, r3, #16
 8007ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cae:	61bb      	str	r3, [r7, #24]
 8007cb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	6979      	ldr	r1, [r7, #20]
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	613b      	str	r3, [r7, #16]
   return(result);
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e6      	bne.n	8007c90 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007cd6:	bf00      	nop
 8007cd8:	3754      	adds	r7, #84	@ 0x54
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b085      	sub	sp, #20
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d101      	bne.n	8007cf8 <HAL_UARTEx_DisableFifoMode+0x16>
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	e027      	b.n	8007d48 <HAL_UARTEx_DisableFifoMode+0x66>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2224      	movs	r2, #36	@ 0x24
 8007d04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f022 0201 	bic.w	r2, r2, #1
 8007d1e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007d26:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2220      	movs	r2, #32
 8007d3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3714      	adds	r7, #20
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d101      	bne.n	8007d6c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d68:	2302      	movs	r3, #2
 8007d6a:	e02d      	b.n	8007dc8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2224      	movs	r2, #36	@ 0x24
 8007d78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f022 0201 	bic.w	r2, r2, #1
 8007d92:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	683a      	ldr	r2, [r7, #0]
 8007da4:	430a      	orrs	r2, r1
 8007da6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f84f 	bl	8007e4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2220      	movs	r2, #32
 8007dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d101      	bne.n	8007de8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007de4:	2302      	movs	r3, #2
 8007de6:	e02d      	b.n	8007e44 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2224      	movs	r2, #36	@ 0x24
 8007df4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f022 0201 	bic.w	r2, r2, #1
 8007e0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	430a      	orrs	r2, r1
 8007e22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f811 	bl	8007e4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2220      	movs	r2, #32
 8007e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d108      	bne.n	8007e6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e6c:	e031      	b.n	8007ed2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e6e:	2308      	movs	r3, #8
 8007e70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e72:	2308      	movs	r3, #8
 8007e74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	0e5b      	lsrs	r3, r3, #25
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	f003 0307 	and.w	r3, r3, #7
 8007e84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	0f5b      	lsrs	r3, r3, #29
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	f003 0307 	and.w	r3, r3, #7
 8007e94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e96:	7bbb      	ldrb	r3, [r7, #14]
 8007e98:	7b3a      	ldrb	r2, [r7, #12]
 8007e9a:	4911      	ldr	r1, [pc, #68]	@ (8007ee0 <UARTEx_SetNbDataToProcess+0x94>)
 8007e9c:	5c8a      	ldrb	r2, [r1, r2]
 8007e9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ea2:	7b3a      	ldrb	r2, [r7, #12]
 8007ea4:	490f      	ldr	r1, [pc, #60]	@ (8007ee4 <UARTEx_SetNbDataToProcess+0x98>)
 8007ea6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ea8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
 8007eb6:	7b7a      	ldrb	r2, [r7, #13]
 8007eb8:	4909      	ldr	r1, [pc, #36]	@ (8007ee0 <UARTEx_SetNbDataToProcess+0x94>)
 8007eba:	5c8a      	ldrb	r2, [r1, r2]
 8007ebc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ec0:	7b7a      	ldrb	r2, [r7, #13]
 8007ec2:	4908      	ldr	r1, [pc, #32]	@ (8007ee4 <UARTEx_SetNbDataToProcess+0x98>)
 8007ec4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ec6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007ed2:	bf00      	nop
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	0800ad30 	.word	0x0800ad30
 8007ee4:	0800ad38 	.word	0x0800ad38

08007ee8 <__cvt>:
 8007ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007eec:	ec57 6b10 	vmov	r6, r7, d0
 8007ef0:	2f00      	cmp	r7, #0
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	463b      	mov	r3, r7
 8007ef8:	bfbb      	ittet	lt
 8007efa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007efe:	461f      	movlt	r7, r3
 8007f00:	2300      	movge	r3, #0
 8007f02:	232d      	movlt	r3, #45	@ 0x2d
 8007f04:	700b      	strb	r3, [r1, #0]
 8007f06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f08:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007f0c:	4691      	mov	r9, r2
 8007f0e:	f023 0820 	bic.w	r8, r3, #32
 8007f12:	bfbc      	itt	lt
 8007f14:	4632      	movlt	r2, r6
 8007f16:	4616      	movlt	r6, r2
 8007f18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007f1c:	d005      	beq.n	8007f2a <__cvt+0x42>
 8007f1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007f22:	d100      	bne.n	8007f26 <__cvt+0x3e>
 8007f24:	3401      	adds	r4, #1
 8007f26:	2102      	movs	r1, #2
 8007f28:	e000      	b.n	8007f2c <__cvt+0x44>
 8007f2a:	2103      	movs	r1, #3
 8007f2c:	ab03      	add	r3, sp, #12
 8007f2e:	9301      	str	r3, [sp, #4]
 8007f30:	ab02      	add	r3, sp, #8
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	ec47 6b10 	vmov	d0, r6, r7
 8007f38:	4653      	mov	r3, sl
 8007f3a:	4622      	mov	r2, r4
 8007f3c:	f000 fe68 	bl	8008c10 <_dtoa_r>
 8007f40:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007f44:	4605      	mov	r5, r0
 8007f46:	d119      	bne.n	8007f7c <__cvt+0x94>
 8007f48:	f019 0f01 	tst.w	r9, #1
 8007f4c:	d00e      	beq.n	8007f6c <__cvt+0x84>
 8007f4e:	eb00 0904 	add.w	r9, r0, r4
 8007f52:	2200      	movs	r2, #0
 8007f54:	2300      	movs	r3, #0
 8007f56:	4630      	mov	r0, r6
 8007f58:	4639      	mov	r1, r7
 8007f5a:	f7f8 fddd 	bl	8000b18 <__aeabi_dcmpeq>
 8007f5e:	b108      	cbz	r0, 8007f64 <__cvt+0x7c>
 8007f60:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f64:	2230      	movs	r2, #48	@ 0x30
 8007f66:	9b03      	ldr	r3, [sp, #12]
 8007f68:	454b      	cmp	r3, r9
 8007f6a:	d31e      	bcc.n	8007faa <__cvt+0xc2>
 8007f6c:	9b03      	ldr	r3, [sp, #12]
 8007f6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f70:	1b5b      	subs	r3, r3, r5
 8007f72:	4628      	mov	r0, r5
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	b004      	add	sp, #16
 8007f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007f80:	eb00 0904 	add.w	r9, r0, r4
 8007f84:	d1e5      	bne.n	8007f52 <__cvt+0x6a>
 8007f86:	7803      	ldrb	r3, [r0, #0]
 8007f88:	2b30      	cmp	r3, #48	@ 0x30
 8007f8a:	d10a      	bne.n	8007fa2 <__cvt+0xba>
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	2300      	movs	r3, #0
 8007f90:	4630      	mov	r0, r6
 8007f92:	4639      	mov	r1, r7
 8007f94:	f7f8 fdc0 	bl	8000b18 <__aeabi_dcmpeq>
 8007f98:	b918      	cbnz	r0, 8007fa2 <__cvt+0xba>
 8007f9a:	f1c4 0401 	rsb	r4, r4, #1
 8007f9e:	f8ca 4000 	str.w	r4, [sl]
 8007fa2:	f8da 3000 	ldr.w	r3, [sl]
 8007fa6:	4499      	add	r9, r3
 8007fa8:	e7d3      	b.n	8007f52 <__cvt+0x6a>
 8007faa:	1c59      	adds	r1, r3, #1
 8007fac:	9103      	str	r1, [sp, #12]
 8007fae:	701a      	strb	r2, [r3, #0]
 8007fb0:	e7d9      	b.n	8007f66 <__cvt+0x7e>

08007fb2 <__exponent>:
 8007fb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fb4:	2900      	cmp	r1, #0
 8007fb6:	bfba      	itte	lt
 8007fb8:	4249      	neglt	r1, r1
 8007fba:	232d      	movlt	r3, #45	@ 0x2d
 8007fbc:	232b      	movge	r3, #43	@ 0x2b
 8007fbe:	2909      	cmp	r1, #9
 8007fc0:	7002      	strb	r2, [r0, #0]
 8007fc2:	7043      	strb	r3, [r0, #1]
 8007fc4:	dd29      	ble.n	800801a <__exponent+0x68>
 8007fc6:	f10d 0307 	add.w	r3, sp, #7
 8007fca:	461d      	mov	r5, r3
 8007fcc:	270a      	movs	r7, #10
 8007fce:	461a      	mov	r2, r3
 8007fd0:	fbb1 f6f7 	udiv	r6, r1, r7
 8007fd4:	fb07 1416 	mls	r4, r7, r6, r1
 8007fd8:	3430      	adds	r4, #48	@ 0x30
 8007fda:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007fde:	460c      	mov	r4, r1
 8007fe0:	2c63      	cmp	r4, #99	@ 0x63
 8007fe2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007fe6:	4631      	mov	r1, r6
 8007fe8:	dcf1      	bgt.n	8007fce <__exponent+0x1c>
 8007fea:	3130      	adds	r1, #48	@ 0x30
 8007fec:	1e94      	subs	r4, r2, #2
 8007fee:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007ff2:	1c41      	adds	r1, r0, #1
 8007ff4:	4623      	mov	r3, r4
 8007ff6:	42ab      	cmp	r3, r5
 8007ff8:	d30a      	bcc.n	8008010 <__exponent+0x5e>
 8007ffa:	f10d 0309 	add.w	r3, sp, #9
 8007ffe:	1a9b      	subs	r3, r3, r2
 8008000:	42ac      	cmp	r4, r5
 8008002:	bf88      	it	hi
 8008004:	2300      	movhi	r3, #0
 8008006:	3302      	adds	r3, #2
 8008008:	4403      	add	r3, r0
 800800a:	1a18      	subs	r0, r3, r0
 800800c:	b003      	add	sp, #12
 800800e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008010:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008014:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008018:	e7ed      	b.n	8007ff6 <__exponent+0x44>
 800801a:	2330      	movs	r3, #48	@ 0x30
 800801c:	3130      	adds	r1, #48	@ 0x30
 800801e:	7083      	strb	r3, [r0, #2]
 8008020:	70c1      	strb	r1, [r0, #3]
 8008022:	1d03      	adds	r3, r0, #4
 8008024:	e7f1      	b.n	800800a <__exponent+0x58>
	...

08008028 <_printf_float>:
 8008028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800802c:	b08d      	sub	sp, #52	@ 0x34
 800802e:	460c      	mov	r4, r1
 8008030:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008034:	4616      	mov	r6, r2
 8008036:	461f      	mov	r7, r3
 8008038:	4605      	mov	r5, r0
 800803a:	f000 fcdb 	bl	80089f4 <_localeconv_r>
 800803e:	6803      	ldr	r3, [r0, #0]
 8008040:	9304      	str	r3, [sp, #16]
 8008042:	4618      	mov	r0, r3
 8008044:	f7f8 f93c 	bl	80002c0 <strlen>
 8008048:	2300      	movs	r3, #0
 800804a:	930a      	str	r3, [sp, #40]	@ 0x28
 800804c:	f8d8 3000 	ldr.w	r3, [r8]
 8008050:	9005      	str	r0, [sp, #20]
 8008052:	3307      	adds	r3, #7
 8008054:	f023 0307 	bic.w	r3, r3, #7
 8008058:	f103 0208 	add.w	r2, r3, #8
 800805c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008060:	f8d4 b000 	ldr.w	fp, [r4]
 8008064:	f8c8 2000 	str.w	r2, [r8]
 8008068:	e9d3 8900 	ldrd	r8, r9, [r3]
 800806c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008070:	9307      	str	r3, [sp, #28]
 8008072:	f8cd 8018 	str.w	r8, [sp, #24]
 8008076:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800807a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800807e:	4b9c      	ldr	r3, [pc, #624]	@ (80082f0 <_printf_float+0x2c8>)
 8008080:	f04f 32ff 	mov.w	r2, #4294967295
 8008084:	f7f8 fd7a 	bl	8000b7c <__aeabi_dcmpun>
 8008088:	bb70      	cbnz	r0, 80080e8 <_printf_float+0xc0>
 800808a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800808e:	4b98      	ldr	r3, [pc, #608]	@ (80082f0 <_printf_float+0x2c8>)
 8008090:	f04f 32ff 	mov.w	r2, #4294967295
 8008094:	f7f8 fd54 	bl	8000b40 <__aeabi_dcmple>
 8008098:	bb30      	cbnz	r0, 80080e8 <_printf_float+0xc0>
 800809a:	2200      	movs	r2, #0
 800809c:	2300      	movs	r3, #0
 800809e:	4640      	mov	r0, r8
 80080a0:	4649      	mov	r1, r9
 80080a2:	f7f8 fd43 	bl	8000b2c <__aeabi_dcmplt>
 80080a6:	b110      	cbz	r0, 80080ae <_printf_float+0x86>
 80080a8:	232d      	movs	r3, #45	@ 0x2d
 80080aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080ae:	4a91      	ldr	r2, [pc, #580]	@ (80082f4 <_printf_float+0x2cc>)
 80080b0:	4b91      	ldr	r3, [pc, #580]	@ (80082f8 <_printf_float+0x2d0>)
 80080b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80080b6:	bf94      	ite	ls
 80080b8:	4690      	movls	r8, r2
 80080ba:	4698      	movhi	r8, r3
 80080bc:	2303      	movs	r3, #3
 80080be:	6123      	str	r3, [r4, #16]
 80080c0:	f02b 0304 	bic.w	r3, fp, #4
 80080c4:	6023      	str	r3, [r4, #0]
 80080c6:	f04f 0900 	mov.w	r9, #0
 80080ca:	9700      	str	r7, [sp, #0]
 80080cc:	4633      	mov	r3, r6
 80080ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 80080d0:	4621      	mov	r1, r4
 80080d2:	4628      	mov	r0, r5
 80080d4:	f000 f9d2 	bl	800847c <_printf_common>
 80080d8:	3001      	adds	r0, #1
 80080da:	f040 808d 	bne.w	80081f8 <_printf_float+0x1d0>
 80080de:	f04f 30ff 	mov.w	r0, #4294967295
 80080e2:	b00d      	add	sp, #52	@ 0x34
 80080e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e8:	4642      	mov	r2, r8
 80080ea:	464b      	mov	r3, r9
 80080ec:	4640      	mov	r0, r8
 80080ee:	4649      	mov	r1, r9
 80080f0:	f7f8 fd44 	bl	8000b7c <__aeabi_dcmpun>
 80080f4:	b140      	cbz	r0, 8008108 <_printf_float+0xe0>
 80080f6:	464b      	mov	r3, r9
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	bfbc      	itt	lt
 80080fc:	232d      	movlt	r3, #45	@ 0x2d
 80080fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008102:	4a7e      	ldr	r2, [pc, #504]	@ (80082fc <_printf_float+0x2d4>)
 8008104:	4b7e      	ldr	r3, [pc, #504]	@ (8008300 <_printf_float+0x2d8>)
 8008106:	e7d4      	b.n	80080b2 <_printf_float+0x8a>
 8008108:	6863      	ldr	r3, [r4, #4]
 800810a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800810e:	9206      	str	r2, [sp, #24]
 8008110:	1c5a      	adds	r2, r3, #1
 8008112:	d13b      	bne.n	800818c <_printf_float+0x164>
 8008114:	2306      	movs	r3, #6
 8008116:	6063      	str	r3, [r4, #4]
 8008118:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800811c:	2300      	movs	r3, #0
 800811e:	6022      	str	r2, [r4, #0]
 8008120:	9303      	str	r3, [sp, #12]
 8008122:	ab0a      	add	r3, sp, #40	@ 0x28
 8008124:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008128:	ab09      	add	r3, sp, #36	@ 0x24
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	6861      	ldr	r1, [r4, #4]
 800812e:	ec49 8b10 	vmov	d0, r8, r9
 8008132:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008136:	4628      	mov	r0, r5
 8008138:	f7ff fed6 	bl	8007ee8 <__cvt>
 800813c:	9b06      	ldr	r3, [sp, #24]
 800813e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008140:	2b47      	cmp	r3, #71	@ 0x47
 8008142:	4680      	mov	r8, r0
 8008144:	d129      	bne.n	800819a <_printf_float+0x172>
 8008146:	1cc8      	adds	r0, r1, #3
 8008148:	db02      	blt.n	8008150 <_printf_float+0x128>
 800814a:	6863      	ldr	r3, [r4, #4]
 800814c:	4299      	cmp	r1, r3
 800814e:	dd41      	ble.n	80081d4 <_printf_float+0x1ac>
 8008150:	f1aa 0a02 	sub.w	sl, sl, #2
 8008154:	fa5f fa8a 	uxtb.w	sl, sl
 8008158:	3901      	subs	r1, #1
 800815a:	4652      	mov	r2, sl
 800815c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008160:	9109      	str	r1, [sp, #36]	@ 0x24
 8008162:	f7ff ff26 	bl	8007fb2 <__exponent>
 8008166:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008168:	1813      	adds	r3, r2, r0
 800816a:	2a01      	cmp	r2, #1
 800816c:	4681      	mov	r9, r0
 800816e:	6123      	str	r3, [r4, #16]
 8008170:	dc02      	bgt.n	8008178 <_printf_float+0x150>
 8008172:	6822      	ldr	r2, [r4, #0]
 8008174:	07d2      	lsls	r2, r2, #31
 8008176:	d501      	bpl.n	800817c <_printf_float+0x154>
 8008178:	3301      	adds	r3, #1
 800817a:	6123      	str	r3, [r4, #16]
 800817c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008180:	2b00      	cmp	r3, #0
 8008182:	d0a2      	beq.n	80080ca <_printf_float+0xa2>
 8008184:	232d      	movs	r3, #45	@ 0x2d
 8008186:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800818a:	e79e      	b.n	80080ca <_printf_float+0xa2>
 800818c:	9a06      	ldr	r2, [sp, #24]
 800818e:	2a47      	cmp	r2, #71	@ 0x47
 8008190:	d1c2      	bne.n	8008118 <_printf_float+0xf0>
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1c0      	bne.n	8008118 <_printf_float+0xf0>
 8008196:	2301      	movs	r3, #1
 8008198:	e7bd      	b.n	8008116 <_printf_float+0xee>
 800819a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800819e:	d9db      	bls.n	8008158 <_printf_float+0x130>
 80081a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80081a4:	d118      	bne.n	80081d8 <_printf_float+0x1b0>
 80081a6:	2900      	cmp	r1, #0
 80081a8:	6863      	ldr	r3, [r4, #4]
 80081aa:	dd0b      	ble.n	80081c4 <_printf_float+0x19c>
 80081ac:	6121      	str	r1, [r4, #16]
 80081ae:	b913      	cbnz	r3, 80081b6 <_printf_float+0x18e>
 80081b0:	6822      	ldr	r2, [r4, #0]
 80081b2:	07d0      	lsls	r0, r2, #31
 80081b4:	d502      	bpl.n	80081bc <_printf_float+0x194>
 80081b6:	3301      	adds	r3, #1
 80081b8:	440b      	add	r3, r1
 80081ba:	6123      	str	r3, [r4, #16]
 80081bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80081be:	f04f 0900 	mov.w	r9, #0
 80081c2:	e7db      	b.n	800817c <_printf_float+0x154>
 80081c4:	b913      	cbnz	r3, 80081cc <_printf_float+0x1a4>
 80081c6:	6822      	ldr	r2, [r4, #0]
 80081c8:	07d2      	lsls	r2, r2, #31
 80081ca:	d501      	bpl.n	80081d0 <_printf_float+0x1a8>
 80081cc:	3302      	adds	r3, #2
 80081ce:	e7f4      	b.n	80081ba <_printf_float+0x192>
 80081d0:	2301      	movs	r3, #1
 80081d2:	e7f2      	b.n	80081ba <_printf_float+0x192>
 80081d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80081d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081da:	4299      	cmp	r1, r3
 80081dc:	db05      	blt.n	80081ea <_printf_float+0x1c2>
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	6121      	str	r1, [r4, #16]
 80081e2:	07d8      	lsls	r0, r3, #31
 80081e4:	d5ea      	bpl.n	80081bc <_printf_float+0x194>
 80081e6:	1c4b      	adds	r3, r1, #1
 80081e8:	e7e7      	b.n	80081ba <_printf_float+0x192>
 80081ea:	2900      	cmp	r1, #0
 80081ec:	bfd4      	ite	le
 80081ee:	f1c1 0202 	rsble	r2, r1, #2
 80081f2:	2201      	movgt	r2, #1
 80081f4:	4413      	add	r3, r2
 80081f6:	e7e0      	b.n	80081ba <_printf_float+0x192>
 80081f8:	6823      	ldr	r3, [r4, #0]
 80081fa:	055a      	lsls	r2, r3, #21
 80081fc:	d407      	bmi.n	800820e <_printf_float+0x1e6>
 80081fe:	6923      	ldr	r3, [r4, #16]
 8008200:	4642      	mov	r2, r8
 8008202:	4631      	mov	r1, r6
 8008204:	4628      	mov	r0, r5
 8008206:	47b8      	blx	r7
 8008208:	3001      	adds	r0, #1
 800820a:	d12b      	bne.n	8008264 <_printf_float+0x23c>
 800820c:	e767      	b.n	80080de <_printf_float+0xb6>
 800820e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008212:	f240 80dd 	bls.w	80083d0 <_printf_float+0x3a8>
 8008216:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800821a:	2200      	movs	r2, #0
 800821c:	2300      	movs	r3, #0
 800821e:	f7f8 fc7b 	bl	8000b18 <__aeabi_dcmpeq>
 8008222:	2800      	cmp	r0, #0
 8008224:	d033      	beq.n	800828e <_printf_float+0x266>
 8008226:	4a37      	ldr	r2, [pc, #220]	@ (8008304 <_printf_float+0x2dc>)
 8008228:	2301      	movs	r3, #1
 800822a:	4631      	mov	r1, r6
 800822c:	4628      	mov	r0, r5
 800822e:	47b8      	blx	r7
 8008230:	3001      	adds	r0, #1
 8008232:	f43f af54 	beq.w	80080de <_printf_float+0xb6>
 8008236:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800823a:	4543      	cmp	r3, r8
 800823c:	db02      	blt.n	8008244 <_printf_float+0x21c>
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	07d8      	lsls	r0, r3, #31
 8008242:	d50f      	bpl.n	8008264 <_printf_float+0x23c>
 8008244:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008248:	4631      	mov	r1, r6
 800824a:	4628      	mov	r0, r5
 800824c:	47b8      	blx	r7
 800824e:	3001      	adds	r0, #1
 8008250:	f43f af45 	beq.w	80080de <_printf_float+0xb6>
 8008254:	f04f 0900 	mov.w	r9, #0
 8008258:	f108 38ff 	add.w	r8, r8, #4294967295
 800825c:	f104 0a1a 	add.w	sl, r4, #26
 8008260:	45c8      	cmp	r8, r9
 8008262:	dc09      	bgt.n	8008278 <_printf_float+0x250>
 8008264:	6823      	ldr	r3, [r4, #0]
 8008266:	079b      	lsls	r3, r3, #30
 8008268:	f100 8103 	bmi.w	8008472 <_printf_float+0x44a>
 800826c:	68e0      	ldr	r0, [r4, #12]
 800826e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008270:	4298      	cmp	r0, r3
 8008272:	bfb8      	it	lt
 8008274:	4618      	movlt	r0, r3
 8008276:	e734      	b.n	80080e2 <_printf_float+0xba>
 8008278:	2301      	movs	r3, #1
 800827a:	4652      	mov	r2, sl
 800827c:	4631      	mov	r1, r6
 800827e:	4628      	mov	r0, r5
 8008280:	47b8      	blx	r7
 8008282:	3001      	adds	r0, #1
 8008284:	f43f af2b 	beq.w	80080de <_printf_float+0xb6>
 8008288:	f109 0901 	add.w	r9, r9, #1
 800828c:	e7e8      	b.n	8008260 <_printf_float+0x238>
 800828e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008290:	2b00      	cmp	r3, #0
 8008292:	dc39      	bgt.n	8008308 <_printf_float+0x2e0>
 8008294:	4a1b      	ldr	r2, [pc, #108]	@ (8008304 <_printf_float+0x2dc>)
 8008296:	2301      	movs	r3, #1
 8008298:	4631      	mov	r1, r6
 800829a:	4628      	mov	r0, r5
 800829c:	47b8      	blx	r7
 800829e:	3001      	adds	r0, #1
 80082a0:	f43f af1d 	beq.w	80080de <_printf_float+0xb6>
 80082a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80082a8:	ea59 0303 	orrs.w	r3, r9, r3
 80082ac:	d102      	bne.n	80082b4 <_printf_float+0x28c>
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	07d9      	lsls	r1, r3, #31
 80082b2:	d5d7      	bpl.n	8008264 <_printf_float+0x23c>
 80082b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082b8:	4631      	mov	r1, r6
 80082ba:	4628      	mov	r0, r5
 80082bc:	47b8      	blx	r7
 80082be:	3001      	adds	r0, #1
 80082c0:	f43f af0d 	beq.w	80080de <_printf_float+0xb6>
 80082c4:	f04f 0a00 	mov.w	sl, #0
 80082c8:	f104 0b1a 	add.w	fp, r4, #26
 80082cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ce:	425b      	negs	r3, r3
 80082d0:	4553      	cmp	r3, sl
 80082d2:	dc01      	bgt.n	80082d8 <_printf_float+0x2b0>
 80082d4:	464b      	mov	r3, r9
 80082d6:	e793      	b.n	8008200 <_printf_float+0x1d8>
 80082d8:	2301      	movs	r3, #1
 80082da:	465a      	mov	r2, fp
 80082dc:	4631      	mov	r1, r6
 80082de:	4628      	mov	r0, r5
 80082e0:	47b8      	blx	r7
 80082e2:	3001      	adds	r0, #1
 80082e4:	f43f aefb 	beq.w	80080de <_printf_float+0xb6>
 80082e8:	f10a 0a01 	add.w	sl, sl, #1
 80082ec:	e7ee      	b.n	80082cc <_printf_float+0x2a4>
 80082ee:	bf00      	nop
 80082f0:	7fefffff 	.word	0x7fefffff
 80082f4:	0800ad40 	.word	0x0800ad40
 80082f8:	0800ad44 	.word	0x0800ad44
 80082fc:	0800ad48 	.word	0x0800ad48
 8008300:	0800ad4c 	.word	0x0800ad4c
 8008304:	0800ad50 	.word	0x0800ad50
 8008308:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800830a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800830e:	4553      	cmp	r3, sl
 8008310:	bfa8      	it	ge
 8008312:	4653      	movge	r3, sl
 8008314:	2b00      	cmp	r3, #0
 8008316:	4699      	mov	r9, r3
 8008318:	dc36      	bgt.n	8008388 <_printf_float+0x360>
 800831a:	f04f 0b00 	mov.w	fp, #0
 800831e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008322:	f104 021a 	add.w	r2, r4, #26
 8008326:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008328:	9306      	str	r3, [sp, #24]
 800832a:	eba3 0309 	sub.w	r3, r3, r9
 800832e:	455b      	cmp	r3, fp
 8008330:	dc31      	bgt.n	8008396 <_printf_float+0x36e>
 8008332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008334:	459a      	cmp	sl, r3
 8008336:	dc3a      	bgt.n	80083ae <_printf_float+0x386>
 8008338:	6823      	ldr	r3, [r4, #0]
 800833a:	07da      	lsls	r2, r3, #31
 800833c:	d437      	bmi.n	80083ae <_printf_float+0x386>
 800833e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008340:	ebaa 0903 	sub.w	r9, sl, r3
 8008344:	9b06      	ldr	r3, [sp, #24]
 8008346:	ebaa 0303 	sub.w	r3, sl, r3
 800834a:	4599      	cmp	r9, r3
 800834c:	bfa8      	it	ge
 800834e:	4699      	movge	r9, r3
 8008350:	f1b9 0f00 	cmp.w	r9, #0
 8008354:	dc33      	bgt.n	80083be <_printf_float+0x396>
 8008356:	f04f 0800 	mov.w	r8, #0
 800835a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800835e:	f104 0b1a 	add.w	fp, r4, #26
 8008362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008364:	ebaa 0303 	sub.w	r3, sl, r3
 8008368:	eba3 0309 	sub.w	r3, r3, r9
 800836c:	4543      	cmp	r3, r8
 800836e:	f77f af79 	ble.w	8008264 <_printf_float+0x23c>
 8008372:	2301      	movs	r3, #1
 8008374:	465a      	mov	r2, fp
 8008376:	4631      	mov	r1, r6
 8008378:	4628      	mov	r0, r5
 800837a:	47b8      	blx	r7
 800837c:	3001      	adds	r0, #1
 800837e:	f43f aeae 	beq.w	80080de <_printf_float+0xb6>
 8008382:	f108 0801 	add.w	r8, r8, #1
 8008386:	e7ec      	b.n	8008362 <_printf_float+0x33a>
 8008388:	4642      	mov	r2, r8
 800838a:	4631      	mov	r1, r6
 800838c:	4628      	mov	r0, r5
 800838e:	47b8      	blx	r7
 8008390:	3001      	adds	r0, #1
 8008392:	d1c2      	bne.n	800831a <_printf_float+0x2f2>
 8008394:	e6a3      	b.n	80080de <_printf_float+0xb6>
 8008396:	2301      	movs	r3, #1
 8008398:	4631      	mov	r1, r6
 800839a:	4628      	mov	r0, r5
 800839c:	9206      	str	r2, [sp, #24]
 800839e:	47b8      	blx	r7
 80083a0:	3001      	adds	r0, #1
 80083a2:	f43f ae9c 	beq.w	80080de <_printf_float+0xb6>
 80083a6:	9a06      	ldr	r2, [sp, #24]
 80083a8:	f10b 0b01 	add.w	fp, fp, #1
 80083ac:	e7bb      	b.n	8008326 <_printf_float+0x2fe>
 80083ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083b2:	4631      	mov	r1, r6
 80083b4:	4628      	mov	r0, r5
 80083b6:	47b8      	blx	r7
 80083b8:	3001      	adds	r0, #1
 80083ba:	d1c0      	bne.n	800833e <_printf_float+0x316>
 80083bc:	e68f      	b.n	80080de <_printf_float+0xb6>
 80083be:	9a06      	ldr	r2, [sp, #24]
 80083c0:	464b      	mov	r3, r9
 80083c2:	4442      	add	r2, r8
 80083c4:	4631      	mov	r1, r6
 80083c6:	4628      	mov	r0, r5
 80083c8:	47b8      	blx	r7
 80083ca:	3001      	adds	r0, #1
 80083cc:	d1c3      	bne.n	8008356 <_printf_float+0x32e>
 80083ce:	e686      	b.n	80080de <_printf_float+0xb6>
 80083d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80083d4:	f1ba 0f01 	cmp.w	sl, #1
 80083d8:	dc01      	bgt.n	80083de <_printf_float+0x3b6>
 80083da:	07db      	lsls	r3, r3, #31
 80083dc:	d536      	bpl.n	800844c <_printf_float+0x424>
 80083de:	2301      	movs	r3, #1
 80083e0:	4642      	mov	r2, r8
 80083e2:	4631      	mov	r1, r6
 80083e4:	4628      	mov	r0, r5
 80083e6:	47b8      	blx	r7
 80083e8:	3001      	adds	r0, #1
 80083ea:	f43f ae78 	beq.w	80080de <_printf_float+0xb6>
 80083ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083f2:	4631      	mov	r1, r6
 80083f4:	4628      	mov	r0, r5
 80083f6:	47b8      	blx	r7
 80083f8:	3001      	adds	r0, #1
 80083fa:	f43f ae70 	beq.w	80080de <_printf_float+0xb6>
 80083fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008402:	2200      	movs	r2, #0
 8008404:	2300      	movs	r3, #0
 8008406:	f10a 3aff 	add.w	sl, sl, #4294967295
 800840a:	f7f8 fb85 	bl	8000b18 <__aeabi_dcmpeq>
 800840e:	b9c0      	cbnz	r0, 8008442 <_printf_float+0x41a>
 8008410:	4653      	mov	r3, sl
 8008412:	f108 0201 	add.w	r2, r8, #1
 8008416:	4631      	mov	r1, r6
 8008418:	4628      	mov	r0, r5
 800841a:	47b8      	blx	r7
 800841c:	3001      	adds	r0, #1
 800841e:	d10c      	bne.n	800843a <_printf_float+0x412>
 8008420:	e65d      	b.n	80080de <_printf_float+0xb6>
 8008422:	2301      	movs	r3, #1
 8008424:	465a      	mov	r2, fp
 8008426:	4631      	mov	r1, r6
 8008428:	4628      	mov	r0, r5
 800842a:	47b8      	blx	r7
 800842c:	3001      	adds	r0, #1
 800842e:	f43f ae56 	beq.w	80080de <_printf_float+0xb6>
 8008432:	f108 0801 	add.w	r8, r8, #1
 8008436:	45d0      	cmp	r8, sl
 8008438:	dbf3      	blt.n	8008422 <_printf_float+0x3fa>
 800843a:	464b      	mov	r3, r9
 800843c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008440:	e6df      	b.n	8008202 <_printf_float+0x1da>
 8008442:	f04f 0800 	mov.w	r8, #0
 8008446:	f104 0b1a 	add.w	fp, r4, #26
 800844a:	e7f4      	b.n	8008436 <_printf_float+0x40e>
 800844c:	2301      	movs	r3, #1
 800844e:	4642      	mov	r2, r8
 8008450:	e7e1      	b.n	8008416 <_printf_float+0x3ee>
 8008452:	2301      	movs	r3, #1
 8008454:	464a      	mov	r2, r9
 8008456:	4631      	mov	r1, r6
 8008458:	4628      	mov	r0, r5
 800845a:	47b8      	blx	r7
 800845c:	3001      	adds	r0, #1
 800845e:	f43f ae3e 	beq.w	80080de <_printf_float+0xb6>
 8008462:	f108 0801 	add.w	r8, r8, #1
 8008466:	68e3      	ldr	r3, [r4, #12]
 8008468:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800846a:	1a5b      	subs	r3, r3, r1
 800846c:	4543      	cmp	r3, r8
 800846e:	dcf0      	bgt.n	8008452 <_printf_float+0x42a>
 8008470:	e6fc      	b.n	800826c <_printf_float+0x244>
 8008472:	f04f 0800 	mov.w	r8, #0
 8008476:	f104 0919 	add.w	r9, r4, #25
 800847a:	e7f4      	b.n	8008466 <_printf_float+0x43e>

0800847c <_printf_common>:
 800847c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008480:	4616      	mov	r6, r2
 8008482:	4698      	mov	r8, r3
 8008484:	688a      	ldr	r2, [r1, #8]
 8008486:	690b      	ldr	r3, [r1, #16]
 8008488:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800848c:	4293      	cmp	r3, r2
 800848e:	bfb8      	it	lt
 8008490:	4613      	movlt	r3, r2
 8008492:	6033      	str	r3, [r6, #0]
 8008494:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008498:	4607      	mov	r7, r0
 800849a:	460c      	mov	r4, r1
 800849c:	b10a      	cbz	r2, 80084a2 <_printf_common+0x26>
 800849e:	3301      	adds	r3, #1
 80084a0:	6033      	str	r3, [r6, #0]
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	0699      	lsls	r1, r3, #26
 80084a6:	bf42      	ittt	mi
 80084a8:	6833      	ldrmi	r3, [r6, #0]
 80084aa:	3302      	addmi	r3, #2
 80084ac:	6033      	strmi	r3, [r6, #0]
 80084ae:	6825      	ldr	r5, [r4, #0]
 80084b0:	f015 0506 	ands.w	r5, r5, #6
 80084b4:	d106      	bne.n	80084c4 <_printf_common+0x48>
 80084b6:	f104 0a19 	add.w	sl, r4, #25
 80084ba:	68e3      	ldr	r3, [r4, #12]
 80084bc:	6832      	ldr	r2, [r6, #0]
 80084be:	1a9b      	subs	r3, r3, r2
 80084c0:	42ab      	cmp	r3, r5
 80084c2:	dc26      	bgt.n	8008512 <_printf_common+0x96>
 80084c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80084c8:	6822      	ldr	r2, [r4, #0]
 80084ca:	3b00      	subs	r3, #0
 80084cc:	bf18      	it	ne
 80084ce:	2301      	movne	r3, #1
 80084d0:	0692      	lsls	r2, r2, #26
 80084d2:	d42b      	bmi.n	800852c <_printf_common+0xb0>
 80084d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80084d8:	4641      	mov	r1, r8
 80084da:	4638      	mov	r0, r7
 80084dc:	47c8      	blx	r9
 80084de:	3001      	adds	r0, #1
 80084e0:	d01e      	beq.n	8008520 <_printf_common+0xa4>
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	6922      	ldr	r2, [r4, #16]
 80084e6:	f003 0306 	and.w	r3, r3, #6
 80084ea:	2b04      	cmp	r3, #4
 80084ec:	bf02      	ittt	eq
 80084ee:	68e5      	ldreq	r5, [r4, #12]
 80084f0:	6833      	ldreq	r3, [r6, #0]
 80084f2:	1aed      	subeq	r5, r5, r3
 80084f4:	68a3      	ldr	r3, [r4, #8]
 80084f6:	bf0c      	ite	eq
 80084f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084fc:	2500      	movne	r5, #0
 80084fe:	4293      	cmp	r3, r2
 8008500:	bfc4      	itt	gt
 8008502:	1a9b      	subgt	r3, r3, r2
 8008504:	18ed      	addgt	r5, r5, r3
 8008506:	2600      	movs	r6, #0
 8008508:	341a      	adds	r4, #26
 800850a:	42b5      	cmp	r5, r6
 800850c:	d11a      	bne.n	8008544 <_printf_common+0xc8>
 800850e:	2000      	movs	r0, #0
 8008510:	e008      	b.n	8008524 <_printf_common+0xa8>
 8008512:	2301      	movs	r3, #1
 8008514:	4652      	mov	r2, sl
 8008516:	4641      	mov	r1, r8
 8008518:	4638      	mov	r0, r7
 800851a:	47c8      	blx	r9
 800851c:	3001      	adds	r0, #1
 800851e:	d103      	bne.n	8008528 <_printf_common+0xac>
 8008520:	f04f 30ff 	mov.w	r0, #4294967295
 8008524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008528:	3501      	adds	r5, #1
 800852a:	e7c6      	b.n	80084ba <_printf_common+0x3e>
 800852c:	18e1      	adds	r1, r4, r3
 800852e:	1c5a      	adds	r2, r3, #1
 8008530:	2030      	movs	r0, #48	@ 0x30
 8008532:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008536:	4422      	add	r2, r4
 8008538:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800853c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008540:	3302      	adds	r3, #2
 8008542:	e7c7      	b.n	80084d4 <_printf_common+0x58>
 8008544:	2301      	movs	r3, #1
 8008546:	4622      	mov	r2, r4
 8008548:	4641      	mov	r1, r8
 800854a:	4638      	mov	r0, r7
 800854c:	47c8      	blx	r9
 800854e:	3001      	adds	r0, #1
 8008550:	d0e6      	beq.n	8008520 <_printf_common+0xa4>
 8008552:	3601      	adds	r6, #1
 8008554:	e7d9      	b.n	800850a <_printf_common+0x8e>
	...

08008558 <_printf_i>:
 8008558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800855c:	7e0f      	ldrb	r7, [r1, #24]
 800855e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008560:	2f78      	cmp	r7, #120	@ 0x78
 8008562:	4691      	mov	r9, r2
 8008564:	4680      	mov	r8, r0
 8008566:	460c      	mov	r4, r1
 8008568:	469a      	mov	sl, r3
 800856a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800856e:	d807      	bhi.n	8008580 <_printf_i+0x28>
 8008570:	2f62      	cmp	r7, #98	@ 0x62
 8008572:	d80a      	bhi.n	800858a <_printf_i+0x32>
 8008574:	2f00      	cmp	r7, #0
 8008576:	f000 80d2 	beq.w	800871e <_printf_i+0x1c6>
 800857a:	2f58      	cmp	r7, #88	@ 0x58
 800857c:	f000 80b9 	beq.w	80086f2 <_printf_i+0x19a>
 8008580:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008584:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008588:	e03a      	b.n	8008600 <_printf_i+0xa8>
 800858a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800858e:	2b15      	cmp	r3, #21
 8008590:	d8f6      	bhi.n	8008580 <_printf_i+0x28>
 8008592:	a101      	add	r1, pc, #4	@ (adr r1, 8008598 <_printf_i+0x40>)
 8008594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008598:	080085f1 	.word	0x080085f1
 800859c:	08008605 	.word	0x08008605
 80085a0:	08008581 	.word	0x08008581
 80085a4:	08008581 	.word	0x08008581
 80085a8:	08008581 	.word	0x08008581
 80085ac:	08008581 	.word	0x08008581
 80085b0:	08008605 	.word	0x08008605
 80085b4:	08008581 	.word	0x08008581
 80085b8:	08008581 	.word	0x08008581
 80085bc:	08008581 	.word	0x08008581
 80085c0:	08008581 	.word	0x08008581
 80085c4:	08008705 	.word	0x08008705
 80085c8:	0800862f 	.word	0x0800862f
 80085cc:	080086bf 	.word	0x080086bf
 80085d0:	08008581 	.word	0x08008581
 80085d4:	08008581 	.word	0x08008581
 80085d8:	08008727 	.word	0x08008727
 80085dc:	08008581 	.word	0x08008581
 80085e0:	0800862f 	.word	0x0800862f
 80085e4:	08008581 	.word	0x08008581
 80085e8:	08008581 	.word	0x08008581
 80085ec:	080086c7 	.word	0x080086c7
 80085f0:	6833      	ldr	r3, [r6, #0]
 80085f2:	1d1a      	adds	r2, r3, #4
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	6032      	str	r2, [r6, #0]
 80085f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008600:	2301      	movs	r3, #1
 8008602:	e09d      	b.n	8008740 <_printf_i+0x1e8>
 8008604:	6833      	ldr	r3, [r6, #0]
 8008606:	6820      	ldr	r0, [r4, #0]
 8008608:	1d19      	adds	r1, r3, #4
 800860a:	6031      	str	r1, [r6, #0]
 800860c:	0606      	lsls	r6, r0, #24
 800860e:	d501      	bpl.n	8008614 <_printf_i+0xbc>
 8008610:	681d      	ldr	r5, [r3, #0]
 8008612:	e003      	b.n	800861c <_printf_i+0xc4>
 8008614:	0645      	lsls	r5, r0, #25
 8008616:	d5fb      	bpl.n	8008610 <_printf_i+0xb8>
 8008618:	f9b3 5000 	ldrsh.w	r5, [r3]
 800861c:	2d00      	cmp	r5, #0
 800861e:	da03      	bge.n	8008628 <_printf_i+0xd0>
 8008620:	232d      	movs	r3, #45	@ 0x2d
 8008622:	426d      	negs	r5, r5
 8008624:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008628:	4859      	ldr	r0, [pc, #356]	@ (8008790 <_printf_i+0x238>)
 800862a:	230a      	movs	r3, #10
 800862c:	e011      	b.n	8008652 <_printf_i+0xfa>
 800862e:	6821      	ldr	r1, [r4, #0]
 8008630:	6833      	ldr	r3, [r6, #0]
 8008632:	0608      	lsls	r0, r1, #24
 8008634:	f853 5b04 	ldr.w	r5, [r3], #4
 8008638:	d402      	bmi.n	8008640 <_printf_i+0xe8>
 800863a:	0649      	lsls	r1, r1, #25
 800863c:	bf48      	it	mi
 800863e:	b2ad      	uxthmi	r5, r5
 8008640:	2f6f      	cmp	r7, #111	@ 0x6f
 8008642:	4853      	ldr	r0, [pc, #332]	@ (8008790 <_printf_i+0x238>)
 8008644:	6033      	str	r3, [r6, #0]
 8008646:	bf14      	ite	ne
 8008648:	230a      	movne	r3, #10
 800864a:	2308      	moveq	r3, #8
 800864c:	2100      	movs	r1, #0
 800864e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008652:	6866      	ldr	r6, [r4, #4]
 8008654:	60a6      	str	r6, [r4, #8]
 8008656:	2e00      	cmp	r6, #0
 8008658:	bfa2      	ittt	ge
 800865a:	6821      	ldrge	r1, [r4, #0]
 800865c:	f021 0104 	bicge.w	r1, r1, #4
 8008660:	6021      	strge	r1, [r4, #0]
 8008662:	b90d      	cbnz	r5, 8008668 <_printf_i+0x110>
 8008664:	2e00      	cmp	r6, #0
 8008666:	d04b      	beq.n	8008700 <_printf_i+0x1a8>
 8008668:	4616      	mov	r6, r2
 800866a:	fbb5 f1f3 	udiv	r1, r5, r3
 800866e:	fb03 5711 	mls	r7, r3, r1, r5
 8008672:	5dc7      	ldrb	r7, [r0, r7]
 8008674:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008678:	462f      	mov	r7, r5
 800867a:	42bb      	cmp	r3, r7
 800867c:	460d      	mov	r5, r1
 800867e:	d9f4      	bls.n	800866a <_printf_i+0x112>
 8008680:	2b08      	cmp	r3, #8
 8008682:	d10b      	bne.n	800869c <_printf_i+0x144>
 8008684:	6823      	ldr	r3, [r4, #0]
 8008686:	07df      	lsls	r7, r3, #31
 8008688:	d508      	bpl.n	800869c <_printf_i+0x144>
 800868a:	6923      	ldr	r3, [r4, #16]
 800868c:	6861      	ldr	r1, [r4, #4]
 800868e:	4299      	cmp	r1, r3
 8008690:	bfde      	ittt	le
 8008692:	2330      	movle	r3, #48	@ 0x30
 8008694:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008698:	f106 36ff 	addle.w	r6, r6, #4294967295
 800869c:	1b92      	subs	r2, r2, r6
 800869e:	6122      	str	r2, [r4, #16]
 80086a0:	f8cd a000 	str.w	sl, [sp]
 80086a4:	464b      	mov	r3, r9
 80086a6:	aa03      	add	r2, sp, #12
 80086a8:	4621      	mov	r1, r4
 80086aa:	4640      	mov	r0, r8
 80086ac:	f7ff fee6 	bl	800847c <_printf_common>
 80086b0:	3001      	adds	r0, #1
 80086b2:	d14a      	bne.n	800874a <_printf_i+0x1f2>
 80086b4:	f04f 30ff 	mov.w	r0, #4294967295
 80086b8:	b004      	add	sp, #16
 80086ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	f043 0320 	orr.w	r3, r3, #32
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	4833      	ldr	r0, [pc, #204]	@ (8008794 <_printf_i+0x23c>)
 80086c8:	2778      	movs	r7, #120	@ 0x78
 80086ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	6831      	ldr	r1, [r6, #0]
 80086d2:	061f      	lsls	r7, r3, #24
 80086d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80086d8:	d402      	bmi.n	80086e0 <_printf_i+0x188>
 80086da:	065f      	lsls	r7, r3, #25
 80086dc:	bf48      	it	mi
 80086de:	b2ad      	uxthmi	r5, r5
 80086e0:	6031      	str	r1, [r6, #0]
 80086e2:	07d9      	lsls	r1, r3, #31
 80086e4:	bf44      	itt	mi
 80086e6:	f043 0320 	orrmi.w	r3, r3, #32
 80086ea:	6023      	strmi	r3, [r4, #0]
 80086ec:	b11d      	cbz	r5, 80086f6 <_printf_i+0x19e>
 80086ee:	2310      	movs	r3, #16
 80086f0:	e7ac      	b.n	800864c <_printf_i+0xf4>
 80086f2:	4827      	ldr	r0, [pc, #156]	@ (8008790 <_printf_i+0x238>)
 80086f4:	e7e9      	b.n	80086ca <_printf_i+0x172>
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	f023 0320 	bic.w	r3, r3, #32
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	e7f6      	b.n	80086ee <_printf_i+0x196>
 8008700:	4616      	mov	r6, r2
 8008702:	e7bd      	b.n	8008680 <_printf_i+0x128>
 8008704:	6833      	ldr	r3, [r6, #0]
 8008706:	6825      	ldr	r5, [r4, #0]
 8008708:	6961      	ldr	r1, [r4, #20]
 800870a:	1d18      	adds	r0, r3, #4
 800870c:	6030      	str	r0, [r6, #0]
 800870e:	062e      	lsls	r6, r5, #24
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	d501      	bpl.n	8008718 <_printf_i+0x1c0>
 8008714:	6019      	str	r1, [r3, #0]
 8008716:	e002      	b.n	800871e <_printf_i+0x1c6>
 8008718:	0668      	lsls	r0, r5, #25
 800871a:	d5fb      	bpl.n	8008714 <_printf_i+0x1bc>
 800871c:	8019      	strh	r1, [r3, #0]
 800871e:	2300      	movs	r3, #0
 8008720:	6123      	str	r3, [r4, #16]
 8008722:	4616      	mov	r6, r2
 8008724:	e7bc      	b.n	80086a0 <_printf_i+0x148>
 8008726:	6833      	ldr	r3, [r6, #0]
 8008728:	1d1a      	adds	r2, r3, #4
 800872a:	6032      	str	r2, [r6, #0]
 800872c:	681e      	ldr	r6, [r3, #0]
 800872e:	6862      	ldr	r2, [r4, #4]
 8008730:	2100      	movs	r1, #0
 8008732:	4630      	mov	r0, r6
 8008734:	f7f7 fd74 	bl	8000220 <memchr>
 8008738:	b108      	cbz	r0, 800873e <_printf_i+0x1e6>
 800873a:	1b80      	subs	r0, r0, r6
 800873c:	6060      	str	r0, [r4, #4]
 800873e:	6863      	ldr	r3, [r4, #4]
 8008740:	6123      	str	r3, [r4, #16]
 8008742:	2300      	movs	r3, #0
 8008744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008748:	e7aa      	b.n	80086a0 <_printf_i+0x148>
 800874a:	6923      	ldr	r3, [r4, #16]
 800874c:	4632      	mov	r2, r6
 800874e:	4649      	mov	r1, r9
 8008750:	4640      	mov	r0, r8
 8008752:	47d0      	blx	sl
 8008754:	3001      	adds	r0, #1
 8008756:	d0ad      	beq.n	80086b4 <_printf_i+0x15c>
 8008758:	6823      	ldr	r3, [r4, #0]
 800875a:	079b      	lsls	r3, r3, #30
 800875c:	d413      	bmi.n	8008786 <_printf_i+0x22e>
 800875e:	68e0      	ldr	r0, [r4, #12]
 8008760:	9b03      	ldr	r3, [sp, #12]
 8008762:	4298      	cmp	r0, r3
 8008764:	bfb8      	it	lt
 8008766:	4618      	movlt	r0, r3
 8008768:	e7a6      	b.n	80086b8 <_printf_i+0x160>
 800876a:	2301      	movs	r3, #1
 800876c:	4632      	mov	r2, r6
 800876e:	4649      	mov	r1, r9
 8008770:	4640      	mov	r0, r8
 8008772:	47d0      	blx	sl
 8008774:	3001      	adds	r0, #1
 8008776:	d09d      	beq.n	80086b4 <_printf_i+0x15c>
 8008778:	3501      	adds	r5, #1
 800877a:	68e3      	ldr	r3, [r4, #12]
 800877c:	9903      	ldr	r1, [sp, #12]
 800877e:	1a5b      	subs	r3, r3, r1
 8008780:	42ab      	cmp	r3, r5
 8008782:	dcf2      	bgt.n	800876a <_printf_i+0x212>
 8008784:	e7eb      	b.n	800875e <_printf_i+0x206>
 8008786:	2500      	movs	r5, #0
 8008788:	f104 0619 	add.w	r6, r4, #25
 800878c:	e7f5      	b.n	800877a <_printf_i+0x222>
 800878e:	bf00      	nop
 8008790:	0800ad52 	.word	0x0800ad52
 8008794:	0800ad63 	.word	0x0800ad63

08008798 <std>:
 8008798:	2300      	movs	r3, #0
 800879a:	b510      	push	{r4, lr}
 800879c:	4604      	mov	r4, r0
 800879e:	e9c0 3300 	strd	r3, r3, [r0]
 80087a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087a6:	6083      	str	r3, [r0, #8]
 80087a8:	8181      	strh	r1, [r0, #12]
 80087aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80087ac:	81c2      	strh	r2, [r0, #14]
 80087ae:	6183      	str	r3, [r0, #24]
 80087b0:	4619      	mov	r1, r3
 80087b2:	2208      	movs	r2, #8
 80087b4:	305c      	adds	r0, #92	@ 0x5c
 80087b6:	f000 f914 	bl	80089e2 <memset>
 80087ba:	4b0d      	ldr	r3, [pc, #52]	@ (80087f0 <std+0x58>)
 80087bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80087be:	4b0d      	ldr	r3, [pc, #52]	@ (80087f4 <std+0x5c>)
 80087c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80087c2:	4b0d      	ldr	r3, [pc, #52]	@ (80087f8 <std+0x60>)
 80087c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80087c6:	4b0d      	ldr	r3, [pc, #52]	@ (80087fc <std+0x64>)
 80087c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80087ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008800 <std+0x68>)
 80087cc:	6224      	str	r4, [r4, #32]
 80087ce:	429c      	cmp	r4, r3
 80087d0:	d006      	beq.n	80087e0 <std+0x48>
 80087d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80087d6:	4294      	cmp	r4, r2
 80087d8:	d002      	beq.n	80087e0 <std+0x48>
 80087da:	33d0      	adds	r3, #208	@ 0xd0
 80087dc:	429c      	cmp	r4, r3
 80087de:	d105      	bne.n	80087ec <std+0x54>
 80087e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80087e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087e8:	f000 b978 	b.w	8008adc <__retarget_lock_init_recursive>
 80087ec:	bd10      	pop	{r4, pc}
 80087ee:	bf00      	nop
 80087f0:	0800895d 	.word	0x0800895d
 80087f4:	0800897f 	.word	0x0800897f
 80087f8:	080089b7 	.word	0x080089b7
 80087fc:	080089db 	.word	0x080089db
 8008800:	20000430 	.word	0x20000430

08008804 <stdio_exit_handler>:
 8008804:	4a02      	ldr	r2, [pc, #8]	@ (8008810 <stdio_exit_handler+0xc>)
 8008806:	4903      	ldr	r1, [pc, #12]	@ (8008814 <stdio_exit_handler+0x10>)
 8008808:	4803      	ldr	r0, [pc, #12]	@ (8008818 <stdio_exit_handler+0x14>)
 800880a:	f000 b869 	b.w	80088e0 <_fwalk_sglue>
 800880e:	bf00      	nop
 8008810:	2000000c 	.word	0x2000000c
 8008814:	0800a455 	.word	0x0800a455
 8008818:	2000001c 	.word	0x2000001c

0800881c <cleanup_stdio>:
 800881c:	6841      	ldr	r1, [r0, #4]
 800881e:	4b0c      	ldr	r3, [pc, #48]	@ (8008850 <cleanup_stdio+0x34>)
 8008820:	4299      	cmp	r1, r3
 8008822:	b510      	push	{r4, lr}
 8008824:	4604      	mov	r4, r0
 8008826:	d001      	beq.n	800882c <cleanup_stdio+0x10>
 8008828:	f001 fe14 	bl	800a454 <_fflush_r>
 800882c:	68a1      	ldr	r1, [r4, #8]
 800882e:	4b09      	ldr	r3, [pc, #36]	@ (8008854 <cleanup_stdio+0x38>)
 8008830:	4299      	cmp	r1, r3
 8008832:	d002      	beq.n	800883a <cleanup_stdio+0x1e>
 8008834:	4620      	mov	r0, r4
 8008836:	f001 fe0d 	bl	800a454 <_fflush_r>
 800883a:	68e1      	ldr	r1, [r4, #12]
 800883c:	4b06      	ldr	r3, [pc, #24]	@ (8008858 <cleanup_stdio+0x3c>)
 800883e:	4299      	cmp	r1, r3
 8008840:	d004      	beq.n	800884c <cleanup_stdio+0x30>
 8008842:	4620      	mov	r0, r4
 8008844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008848:	f001 be04 	b.w	800a454 <_fflush_r>
 800884c:	bd10      	pop	{r4, pc}
 800884e:	bf00      	nop
 8008850:	20000430 	.word	0x20000430
 8008854:	20000498 	.word	0x20000498
 8008858:	20000500 	.word	0x20000500

0800885c <global_stdio_init.part.0>:
 800885c:	b510      	push	{r4, lr}
 800885e:	4b0b      	ldr	r3, [pc, #44]	@ (800888c <global_stdio_init.part.0+0x30>)
 8008860:	4c0b      	ldr	r4, [pc, #44]	@ (8008890 <global_stdio_init.part.0+0x34>)
 8008862:	4a0c      	ldr	r2, [pc, #48]	@ (8008894 <global_stdio_init.part.0+0x38>)
 8008864:	601a      	str	r2, [r3, #0]
 8008866:	4620      	mov	r0, r4
 8008868:	2200      	movs	r2, #0
 800886a:	2104      	movs	r1, #4
 800886c:	f7ff ff94 	bl	8008798 <std>
 8008870:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008874:	2201      	movs	r2, #1
 8008876:	2109      	movs	r1, #9
 8008878:	f7ff ff8e 	bl	8008798 <std>
 800887c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008880:	2202      	movs	r2, #2
 8008882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008886:	2112      	movs	r1, #18
 8008888:	f7ff bf86 	b.w	8008798 <std>
 800888c:	20000568 	.word	0x20000568
 8008890:	20000430 	.word	0x20000430
 8008894:	08008805 	.word	0x08008805

08008898 <__sfp_lock_acquire>:
 8008898:	4801      	ldr	r0, [pc, #4]	@ (80088a0 <__sfp_lock_acquire+0x8>)
 800889a:	f000 b920 	b.w	8008ade <__retarget_lock_acquire_recursive>
 800889e:	bf00      	nop
 80088a0:	20000571 	.word	0x20000571

080088a4 <__sfp_lock_release>:
 80088a4:	4801      	ldr	r0, [pc, #4]	@ (80088ac <__sfp_lock_release+0x8>)
 80088a6:	f000 b91b 	b.w	8008ae0 <__retarget_lock_release_recursive>
 80088aa:	bf00      	nop
 80088ac:	20000571 	.word	0x20000571

080088b0 <__sinit>:
 80088b0:	b510      	push	{r4, lr}
 80088b2:	4604      	mov	r4, r0
 80088b4:	f7ff fff0 	bl	8008898 <__sfp_lock_acquire>
 80088b8:	6a23      	ldr	r3, [r4, #32]
 80088ba:	b11b      	cbz	r3, 80088c4 <__sinit+0x14>
 80088bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088c0:	f7ff bff0 	b.w	80088a4 <__sfp_lock_release>
 80088c4:	4b04      	ldr	r3, [pc, #16]	@ (80088d8 <__sinit+0x28>)
 80088c6:	6223      	str	r3, [r4, #32]
 80088c8:	4b04      	ldr	r3, [pc, #16]	@ (80088dc <__sinit+0x2c>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1f5      	bne.n	80088bc <__sinit+0xc>
 80088d0:	f7ff ffc4 	bl	800885c <global_stdio_init.part.0>
 80088d4:	e7f2      	b.n	80088bc <__sinit+0xc>
 80088d6:	bf00      	nop
 80088d8:	0800881d 	.word	0x0800881d
 80088dc:	20000568 	.word	0x20000568

080088e0 <_fwalk_sglue>:
 80088e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088e4:	4607      	mov	r7, r0
 80088e6:	4688      	mov	r8, r1
 80088e8:	4614      	mov	r4, r2
 80088ea:	2600      	movs	r6, #0
 80088ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088f0:	f1b9 0901 	subs.w	r9, r9, #1
 80088f4:	d505      	bpl.n	8008902 <_fwalk_sglue+0x22>
 80088f6:	6824      	ldr	r4, [r4, #0]
 80088f8:	2c00      	cmp	r4, #0
 80088fa:	d1f7      	bne.n	80088ec <_fwalk_sglue+0xc>
 80088fc:	4630      	mov	r0, r6
 80088fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008902:	89ab      	ldrh	r3, [r5, #12]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d907      	bls.n	8008918 <_fwalk_sglue+0x38>
 8008908:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800890c:	3301      	adds	r3, #1
 800890e:	d003      	beq.n	8008918 <_fwalk_sglue+0x38>
 8008910:	4629      	mov	r1, r5
 8008912:	4638      	mov	r0, r7
 8008914:	47c0      	blx	r8
 8008916:	4306      	orrs	r6, r0
 8008918:	3568      	adds	r5, #104	@ 0x68
 800891a:	e7e9      	b.n	80088f0 <_fwalk_sglue+0x10>

0800891c <siprintf>:
 800891c:	b40e      	push	{r1, r2, r3}
 800891e:	b500      	push	{lr}
 8008920:	b09c      	sub	sp, #112	@ 0x70
 8008922:	ab1d      	add	r3, sp, #116	@ 0x74
 8008924:	9002      	str	r0, [sp, #8]
 8008926:	9006      	str	r0, [sp, #24]
 8008928:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800892c:	4809      	ldr	r0, [pc, #36]	@ (8008954 <siprintf+0x38>)
 800892e:	9107      	str	r1, [sp, #28]
 8008930:	9104      	str	r1, [sp, #16]
 8008932:	4909      	ldr	r1, [pc, #36]	@ (8008958 <siprintf+0x3c>)
 8008934:	f853 2b04 	ldr.w	r2, [r3], #4
 8008938:	9105      	str	r1, [sp, #20]
 800893a:	6800      	ldr	r0, [r0, #0]
 800893c:	9301      	str	r3, [sp, #4]
 800893e:	a902      	add	r1, sp, #8
 8008940:	f001 fc08 	bl	800a154 <_svfiprintf_r>
 8008944:	9b02      	ldr	r3, [sp, #8]
 8008946:	2200      	movs	r2, #0
 8008948:	701a      	strb	r2, [r3, #0]
 800894a:	b01c      	add	sp, #112	@ 0x70
 800894c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008950:	b003      	add	sp, #12
 8008952:	4770      	bx	lr
 8008954:	20000018 	.word	0x20000018
 8008958:	ffff0208 	.word	0xffff0208

0800895c <__sread>:
 800895c:	b510      	push	{r4, lr}
 800895e:	460c      	mov	r4, r1
 8008960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008964:	f000 f86c 	bl	8008a40 <_read_r>
 8008968:	2800      	cmp	r0, #0
 800896a:	bfab      	itete	ge
 800896c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800896e:	89a3      	ldrhlt	r3, [r4, #12]
 8008970:	181b      	addge	r3, r3, r0
 8008972:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008976:	bfac      	ite	ge
 8008978:	6563      	strge	r3, [r4, #84]	@ 0x54
 800897a:	81a3      	strhlt	r3, [r4, #12]
 800897c:	bd10      	pop	{r4, pc}

0800897e <__swrite>:
 800897e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008982:	461f      	mov	r7, r3
 8008984:	898b      	ldrh	r3, [r1, #12]
 8008986:	05db      	lsls	r3, r3, #23
 8008988:	4605      	mov	r5, r0
 800898a:	460c      	mov	r4, r1
 800898c:	4616      	mov	r6, r2
 800898e:	d505      	bpl.n	800899c <__swrite+0x1e>
 8008990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008994:	2302      	movs	r3, #2
 8008996:	2200      	movs	r2, #0
 8008998:	f000 f840 	bl	8008a1c <_lseek_r>
 800899c:	89a3      	ldrh	r3, [r4, #12]
 800899e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089a6:	81a3      	strh	r3, [r4, #12]
 80089a8:	4632      	mov	r2, r6
 80089aa:	463b      	mov	r3, r7
 80089ac:	4628      	mov	r0, r5
 80089ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089b2:	f000 b857 	b.w	8008a64 <_write_r>

080089b6 <__sseek>:
 80089b6:	b510      	push	{r4, lr}
 80089b8:	460c      	mov	r4, r1
 80089ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089be:	f000 f82d 	bl	8008a1c <_lseek_r>
 80089c2:	1c43      	adds	r3, r0, #1
 80089c4:	89a3      	ldrh	r3, [r4, #12]
 80089c6:	bf15      	itete	ne
 80089c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80089ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80089ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80089d2:	81a3      	strheq	r3, [r4, #12]
 80089d4:	bf18      	it	ne
 80089d6:	81a3      	strhne	r3, [r4, #12]
 80089d8:	bd10      	pop	{r4, pc}

080089da <__sclose>:
 80089da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089de:	f000 b80d 	b.w	80089fc <_close_r>

080089e2 <memset>:
 80089e2:	4402      	add	r2, r0
 80089e4:	4603      	mov	r3, r0
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d100      	bne.n	80089ec <memset+0xa>
 80089ea:	4770      	bx	lr
 80089ec:	f803 1b01 	strb.w	r1, [r3], #1
 80089f0:	e7f9      	b.n	80089e6 <memset+0x4>
	...

080089f4 <_localeconv_r>:
 80089f4:	4800      	ldr	r0, [pc, #0]	@ (80089f8 <_localeconv_r+0x4>)
 80089f6:	4770      	bx	lr
 80089f8:	20000158 	.word	0x20000158

080089fc <_close_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	4d06      	ldr	r5, [pc, #24]	@ (8008a18 <_close_r+0x1c>)
 8008a00:	2300      	movs	r3, #0
 8008a02:	4604      	mov	r4, r0
 8008a04:	4608      	mov	r0, r1
 8008a06:	602b      	str	r3, [r5, #0]
 8008a08:	f7f9 fe63 	bl	80026d2 <_close>
 8008a0c:	1c43      	adds	r3, r0, #1
 8008a0e:	d102      	bne.n	8008a16 <_close_r+0x1a>
 8008a10:	682b      	ldr	r3, [r5, #0]
 8008a12:	b103      	cbz	r3, 8008a16 <_close_r+0x1a>
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	bd38      	pop	{r3, r4, r5, pc}
 8008a18:	2000056c 	.word	0x2000056c

08008a1c <_lseek_r>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	4d07      	ldr	r5, [pc, #28]	@ (8008a3c <_lseek_r+0x20>)
 8008a20:	4604      	mov	r4, r0
 8008a22:	4608      	mov	r0, r1
 8008a24:	4611      	mov	r1, r2
 8008a26:	2200      	movs	r2, #0
 8008a28:	602a      	str	r2, [r5, #0]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	f7f9 fe78 	bl	8002720 <_lseek>
 8008a30:	1c43      	adds	r3, r0, #1
 8008a32:	d102      	bne.n	8008a3a <_lseek_r+0x1e>
 8008a34:	682b      	ldr	r3, [r5, #0]
 8008a36:	b103      	cbz	r3, 8008a3a <_lseek_r+0x1e>
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	bd38      	pop	{r3, r4, r5, pc}
 8008a3c:	2000056c 	.word	0x2000056c

08008a40 <_read_r>:
 8008a40:	b538      	push	{r3, r4, r5, lr}
 8008a42:	4d07      	ldr	r5, [pc, #28]	@ (8008a60 <_read_r+0x20>)
 8008a44:	4604      	mov	r4, r0
 8008a46:	4608      	mov	r0, r1
 8008a48:	4611      	mov	r1, r2
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	602a      	str	r2, [r5, #0]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	f7f9 fe06 	bl	8002660 <_read>
 8008a54:	1c43      	adds	r3, r0, #1
 8008a56:	d102      	bne.n	8008a5e <_read_r+0x1e>
 8008a58:	682b      	ldr	r3, [r5, #0]
 8008a5a:	b103      	cbz	r3, 8008a5e <_read_r+0x1e>
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	bd38      	pop	{r3, r4, r5, pc}
 8008a60:	2000056c 	.word	0x2000056c

08008a64 <_write_r>:
 8008a64:	b538      	push	{r3, r4, r5, lr}
 8008a66:	4d07      	ldr	r5, [pc, #28]	@ (8008a84 <_write_r+0x20>)
 8008a68:	4604      	mov	r4, r0
 8008a6a:	4608      	mov	r0, r1
 8008a6c:	4611      	mov	r1, r2
 8008a6e:	2200      	movs	r2, #0
 8008a70:	602a      	str	r2, [r5, #0]
 8008a72:	461a      	mov	r2, r3
 8008a74:	f7f9 fe11 	bl	800269a <_write>
 8008a78:	1c43      	adds	r3, r0, #1
 8008a7a:	d102      	bne.n	8008a82 <_write_r+0x1e>
 8008a7c:	682b      	ldr	r3, [r5, #0]
 8008a7e:	b103      	cbz	r3, 8008a82 <_write_r+0x1e>
 8008a80:	6023      	str	r3, [r4, #0]
 8008a82:	bd38      	pop	{r3, r4, r5, pc}
 8008a84:	2000056c 	.word	0x2000056c

08008a88 <__errno>:
 8008a88:	4b01      	ldr	r3, [pc, #4]	@ (8008a90 <__errno+0x8>)
 8008a8a:	6818      	ldr	r0, [r3, #0]
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	20000018 	.word	0x20000018

08008a94 <__libc_init_array>:
 8008a94:	b570      	push	{r4, r5, r6, lr}
 8008a96:	4d0d      	ldr	r5, [pc, #52]	@ (8008acc <__libc_init_array+0x38>)
 8008a98:	4c0d      	ldr	r4, [pc, #52]	@ (8008ad0 <__libc_init_array+0x3c>)
 8008a9a:	1b64      	subs	r4, r4, r5
 8008a9c:	10a4      	asrs	r4, r4, #2
 8008a9e:	2600      	movs	r6, #0
 8008aa0:	42a6      	cmp	r6, r4
 8008aa2:	d109      	bne.n	8008ab8 <__libc_init_array+0x24>
 8008aa4:	4d0b      	ldr	r5, [pc, #44]	@ (8008ad4 <__libc_init_array+0x40>)
 8008aa6:	4c0c      	ldr	r4, [pc, #48]	@ (8008ad8 <__libc_init_array+0x44>)
 8008aa8:	f002 f864 	bl	800ab74 <_init>
 8008aac:	1b64      	subs	r4, r4, r5
 8008aae:	10a4      	asrs	r4, r4, #2
 8008ab0:	2600      	movs	r6, #0
 8008ab2:	42a6      	cmp	r6, r4
 8008ab4:	d105      	bne.n	8008ac2 <__libc_init_array+0x2e>
 8008ab6:	bd70      	pop	{r4, r5, r6, pc}
 8008ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008abc:	4798      	blx	r3
 8008abe:	3601      	adds	r6, #1
 8008ac0:	e7ee      	b.n	8008aa0 <__libc_init_array+0xc>
 8008ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac6:	4798      	blx	r3
 8008ac8:	3601      	adds	r6, #1
 8008aca:	e7f2      	b.n	8008ab2 <__libc_init_array+0x1e>
 8008acc:	0800b0b8 	.word	0x0800b0b8
 8008ad0:	0800b0b8 	.word	0x0800b0b8
 8008ad4:	0800b0b8 	.word	0x0800b0b8
 8008ad8:	0800b0bc 	.word	0x0800b0bc

08008adc <__retarget_lock_init_recursive>:
 8008adc:	4770      	bx	lr

08008ade <__retarget_lock_acquire_recursive>:
 8008ade:	4770      	bx	lr

08008ae0 <__retarget_lock_release_recursive>:
 8008ae0:	4770      	bx	lr

08008ae2 <memcpy>:
 8008ae2:	440a      	add	r2, r1
 8008ae4:	4291      	cmp	r1, r2
 8008ae6:	f100 33ff 	add.w	r3, r0, #4294967295
 8008aea:	d100      	bne.n	8008aee <memcpy+0xc>
 8008aec:	4770      	bx	lr
 8008aee:	b510      	push	{r4, lr}
 8008af0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008af4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008af8:	4291      	cmp	r1, r2
 8008afa:	d1f9      	bne.n	8008af0 <memcpy+0xe>
 8008afc:	bd10      	pop	{r4, pc}

08008afe <quorem>:
 8008afe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b02:	6903      	ldr	r3, [r0, #16]
 8008b04:	690c      	ldr	r4, [r1, #16]
 8008b06:	42a3      	cmp	r3, r4
 8008b08:	4607      	mov	r7, r0
 8008b0a:	db7e      	blt.n	8008c0a <quorem+0x10c>
 8008b0c:	3c01      	subs	r4, #1
 8008b0e:	f101 0814 	add.w	r8, r1, #20
 8008b12:	00a3      	lsls	r3, r4, #2
 8008b14:	f100 0514 	add.w	r5, r0, #20
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b1e:	9301      	str	r3, [sp, #4]
 8008b20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b30:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b34:	d32e      	bcc.n	8008b94 <quorem+0x96>
 8008b36:	f04f 0a00 	mov.w	sl, #0
 8008b3a:	46c4      	mov	ip, r8
 8008b3c:	46ae      	mov	lr, r5
 8008b3e:	46d3      	mov	fp, sl
 8008b40:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008b44:	b298      	uxth	r0, r3
 8008b46:	fb06 a000 	mla	r0, r6, r0, sl
 8008b4a:	0c02      	lsrs	r2, r0, #16
 8008b4c:	0c1b      	lsrs	r3, r3, #16
 8008b4e:	fb06 2303 	mla	r3, r6, r3, r2
 8008b52:	f8de 2000 	ldr.w	r2, [lr]
 8008b56:	b280      	uxth	r0, r0
 8008b58:	b292      	uxth	r2, r2
 8008b5a:	1a12      	subs	r2, r2, r0
 8008b5c:	445a      	add	r2, fp
 8008b5e:	f8de 0000 	ldr.w	r0, [lr]
 8008b62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008b6c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008b70:	b292      	uxth	r2, r2
 8008b72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008b76:	45e1      	cmp	r9, ip
 8008b78:	f84e 2b04 	str.w	r2, [lr], #4
 8008b7c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008b80:	d2de      	bcs.n	8008b40 <quorem+0x42>
 8008b82:	9b00      	ldr	r3, [sp, #0]
 8008b84:	58eb      	ldr	r3, [r5, r3]
 8008b86:	b92b      	cbnz	r3, 8008b94 <quorem+0x96>
 8008b88:	9b01      	ldr	r3, [sp, #4]
 8008b8a:	3b04      	subs	r3, #4
 8008b8c:	429d      	cmp	r5, r3
 8008b8e:	461a      	mov	r2, r3
 8008b90:	d32f      	bcc.n	8008bf2 <quorem+0xf4>
 8008b92:	613c      	str	r4, [r7, #16]
 8008b94:	4638      	mov	r0, r7
 8008b96:	f001 f979 	bl	8009e8c <__mcmp>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	db25      	blt.n	8008bea <quorem+0xec>
 8008b9e:	4629      	mov	r1, r5
 8008ba0:	2000      	movs	r0, #0
 8008ba2:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ba6:	f8d1 c000 	ldr.w	ip, [r1]
 8008baa:	fa1f fe82 	uxth.w	lr, r2
 8008bae:	fa1f f38c 	uxth.w	r3, ip
 8008bb2:	eba3 030e 	sub.w	r3, r3, lr
 8008bb6:	4403      	add	r3, r0
 8008bb8:	0c12      	lsrs	r2, r2, #16
 8008bba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008bbe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bc8:	45c1      	cmp	r9, r8
 8008bca:	f841 3b04 	str.w	r3, [r1], #4
 8008bce:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008bd2:	d2e6      	bcs.n	8008ba2 <quorem+0xa4>
 8008bd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bd8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bdc:	b922      	cbnz	r2, 8008be8 <quorem+0xea>
 8008bde:	3b04      	subs	r3, #4
 8008be0:	429d      	cmp	r5, r3
 8008be2:	461a      	mov	r2, r3
 8008be4:	d30b      	bcc.n	8008bfe <quorem+0x100>
 8008be6:	613c      	str	r4, [r7, #16]
 8008be8:	3601      	adds	r6, #1
 8008bea:	4630      	mov	r0, r6
 8008bec:	b003      	add	sp, #12
 8008bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf2:	6812      	ldr	r2, [r2, #0]
 8008bf4:	3b04      	subs	r3, #4
 8008bf6:	2a00      	cmp	r2, #0
 8008bf8:	d1cb      	bne.n	8008b92 <quorem+0x94>
 8008bfa:	3c01      	subs	r4, #1
 8008bfc:	e7c6      	b.n	8008b8c <quorem+0x8e>
 8008bfe:	6812      	ldr	r2, [r2, #0]
 8008c00:	3b04      	subs	r3, #4
 8008c02:	2a00      	cmp	r2, #0
 8008c04:	d1ef      	bne.n	8008be6 <quorem+0xe8>
 8008c06:	3c01      	subs	r4, #1
 8008c08:	e7ea      	b.n	8008be0 <quorem+0xe2>
 8008c0a:	2000      	movs	r0, #0
 8008c0c:	e7ee      	b.n	8008bec <quorem+0xee>
	...

08008c10 <_dtoa_r>:
 8008c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c14:	69c7      	ldr	r7, [r0, #28]
 8008c16:	b099      	sub	sp, #100	@ 0x64
 8008c18:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008c1c:	ec55 4b10 	vmov	r4, r5, d0
 8008c20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008c22:	9109      	str	r1, [sp, #36]	@ 0x24
 8008c24:	4683      	mov	fp, r0
 8008c26:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008c2a:	b97f      	cbnz	r7, 8008c4c <_dtoa_r+0x3c>
 8008c2c:	2010      	movs	r0, #16
 8008c2e:	f000 fdfd 	bl	800982c <malloc>
 8008c32:	4602      	mov	r2, r0
 8008c34:	f8cb 001c 	str.w	r0, [fp, #28]
 8008c38:	b920      	cbnz	r0, 8008c44 <_dtoa_r+0x34>
 8008c3a:	4ba7      	ldr	r3, [pc, #668]	@ (8008ed8 <_dtoa_r+0x2c8>)
 8008c3c:	21ef      	movs	r1, #239	@ 0xef
 8008c3e:	48a7      	ldr	r0, [pc, #668]	@ (8008edc <_dtoa_r+0x2cc>)
 8008c40:	f001 fc5a 	bl	800a4f8 <__assert_func>
 8008c44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008c48:	6007      	str	r7, [r0, #0]
 8008c4a:	60c7      	str	r7, [r0, #12]
 8008c4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008c50:	6819      	ldr	r1, [r3, #0]
 8008c52:	b159      	cbz	r1, 8008c6c <_dtoa_r+0x5c>
 8008c54:	685a      	ldr	r2, [r3, #4]
 8008c56:	604a      	str	r2, [r1, #4]
 8008c58:	2301      	movs	r3, #1
 8008c5a:	4093      	lsls	r3, r2
 8008c5c:	608b      	str	r3, [r1, #8]
 8008c5e:	4658      	mov	r0, fp
 8008c60:	f000 feda 	bl	8009a18 <_Bfree>
 8008c64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	1e2b      	subs	r3, r5, #0
 8008c6e:	bfb9      	ittee	lt
 8008c70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008c74:	9303      	strlt	r3, [sp, #12]
 8008c76:	2300      	movge	r3, #0
 8008c78:	6033      	strge	r3, [r6, #0]
 8008c7a:	9f03      	ldr	r7, [sp, #12]
 8008c7c:	4b98      	ldr	r3, [pc, #608]	@ (8008ee0 <_dtoa_r+0x2d0>)
 8008c7e:	bfbc      	itt	lt
 8008c80:	2201      	movlt	r2, #1
 8008c82:	6032      	strlt	r2, [r6, #0]
 8008c84:	43bb      	bics	r3, r7
 8008c86:	d112      	bne.n	8008cae <_dtoa_r+0x9e>
 8008c88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008c8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c94:	4323      	orrs	r3, r4
 8008c96:	f000 854d 	beq.w	8009734 <_dtoa_r+0xb24>
 8008c9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008c9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008ef4 <_dtoa_r+0x2e4>
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f000 854f 	beq.w	8009744 <_dtoa_r+0xb34>
 8008ca6:	f10a 0303 	add.w	r3, sl, #3
 8008caa:	f000 bd49 	b.w	8009740 <_dtoa_r+0xb30>
 8008cae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	ec51 0b17 	vmov	r0, r1, d7
 8008cb8:	2300      	movs	r3, #0
 8008cba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008cbe:	f7f7 ff2b 	bl	8000b18 <__aeabi_dcmpeq>
 8008cc2:	4680      	mov	r8, r0
 8008cc4:	b158      	cbz	r0, 8008cde <_dtoa_r+0xce>
 8008cc6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008cc8:	2301      	movs	r3, #1
 8008cca:	6013      	str	r3, [r2, #0]
 8008ccc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008cce:	b113      	cbz	r3, 8008cd6 <_dtoa_r+0xc6>
 8008cd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008cd2:	4b84      	ldr	r3, [pc, #528]	@ (8008ee4 <_dtoa_r+0x2d4>)
 8008cd4:	6013      	str	r3, [r2, #0]
 8008cd6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008ef8 <_dtoa_r+0x2e8>
 8008cda:	f000 bd33 	b.w	8009744 <_dtoa_r+0xb34>
 8008cde:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008ce2:	aa16      	add	r2, sp, #88	@ 0x58
 8008ce4:	a917      	add	r1, sp, #92	@ 0x5c
 8008ce6:	4658      	mov	r0, fp
 8008ce8:	f001 f980 	bl	8009fec <__d2b>
 8008cec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008cf0:	4681      	mov	r9, r0
 8008cf2:	2e00      	cmp	r6, #0
 8008cf4:	d077      	beq.n	8008de6 <_dtoa_r+0x1d6>
 8008cf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cf8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008d08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008d0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008d10:	4619      	mov	r1, r3
 8008d12:	2200      	movs	r2, #0
 8008d14:	4b74      	ldr	r3, [pc, #464]	@ (8008ee8 <_dtoa_r+0x2d8>)
 8008d16:	f7f7 fadf 	bl	80002d8 <__aeabi_dsub>
 8008d1a:	a369      	add	r3, pc, #420	@ (adr r3, 8008ec0 <_dtoa_r+0x2b0>)
 8008d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d20:	f7f7 fc92 	bl	8000648 <__aeabi_dmul>
 8008d24:	a368      	add	r3, pc, #416	@ (adr r3, 8008ec8 <_dtoa_r+0x2b8>)
 8008d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2a:	f7f7 fad7 	bl	80002dc <__adddf3>
 8008d2e:	4604      	mov	r4, r0
 8008d30:	4630      	mov	r0, r6
 8008d32:	460d      	mov	r5, r1
 8008d34:	f7f7 fc1e 	bl	8000574 <__aeabi_i2d>
 8008d38:	a365      	add	r3, pc, #404	@ (adr r3, 8008ed0 <_dtoa_r+0x2c0>)
 8008d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3e:	f7f7 fc83 	bl	8000648 <__aeabi_dmul>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	4620      	mov	r0, r4
 8008d48:	4629      	mov	r1, r5
 8008d4a:	f7f7 fac7 	bl	80002dc <__adddf3>
 8008d4e:	4604      	mov	r4, r0
 8008d50:	460d      	mov	r5, r1
 8008d52:	f7f7 ff29 	bl	8000ba8 <__aeabi_d2iz>
 8008d56:	2200      	movs	r2, #0
 8008d58:	4607      	mov	r7, r0
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	4629      	mov	r1, r5
 8008d60:	f7f7 fee4 	bl	8000b2c <__aeabi_dcmplt>
 8008d64:	b140      	cbz	r0, 8008d78 <_dtoa_r+0x168>
 8008d66:	4638      	mov	r0, r7
 8008d68:	f7f7 fc04 	bl	8000574 <__aeabi_i2d>
 8008d6c:	4622      	mov	r2, r4
 8008d6e:	462b      	mov	r3, r5
 8008d70:	f7f7 fed2 	bl	8000b18 <__aeabi_dcmpeq>
 8008d74:	b900      	cbnz	r0, 8008d78 <_dtoa_r+0x168>
 8008d76:	3f01      	subs	r7, #1
 8008d78:	2f16      	cmp	r7, #22
 8008d7a:	d851      	bhi.n	8008e20 <_dtoa_r+0x210>
 8008d7c:	4b5b      	ldr	r3, [pc, #364]	@ (8008eec <_dtoa_r+0x2dc>)
 8008d7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d8a:	f7f7 fecf 	bl	8000b2c <__aeabi_dcmplt>
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	d048      	beq.n	8008e24 <_dtoa_r+0x214>
 8008d92:	3f01      	subs	r7, #1
 8008d94:	2300      	movs	r3, #0
 8008d96:	9312      	str	r3, [sp, #72]	@ 0x48
 8008d98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008d9a:	1b9b      	subs	r3, r3, r6
 8008d9c:	1e5a      	subs	r2, r3, #1
 8008d9e:	bf44      	itt	mi
 8008da0:	f1c3 0801 	rsbmi	r8, r3, #1
 8008da4:	2300      	movmi	r3, #0
 8008da6:	9208      	str	r2, [sp, #32]
 8008da8:	bf54      	ite	pl
 8008daa:	f04f 0800 	movpl.w	r8, #0
 8008dae:	9308      	strmi	r3, [sp, #32]
 8008db0:	2f00      	cmp	r7, #0
 8008db2:	db39      	blt.n	8008e28 <_dtoa_r+0x218>
 8008db4:	9b08      	ldr	r3, [sp, #32]
 8008db6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008db8:	443b      	add	r3, r7
 8008dba:	9308      	str	r3, [sp, #32]
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dc2:	2b09      	cmp	r3, #9
 8008dc4:	d864      	bhi.n	8008e90 <_dtoa_r+0x280>
 8008dc6:	2b05      	cmp	r3, #5
 8008dc8:	bfc4      	itt	gt
 8008dca:	3b04      	subgt	r3, #4
 8008dcc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dd0:	f1a3 0302 	sub.w	r3, r3, #2
 8008dd4:	bfcc      	ite	gt
 8008dd6:	2400      	movgt	r4, #0
 8008dd8:	2401      	movle	r4, #1
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d863      	bhi.n	8008ea6 <_dtoa_r+0x296>
 8008dde:	e8df f003 	tbb	[pc, r3]
 8008de2:	372a      	.short	0x372a
 8008de4:	5535      	.short	0x5535
 8008de6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008dea:	441e      	add	r6, r3
 8008dec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008df0:	2b20      	cmp	r3, #32
 8008df2:	bfc1      	itttt	gt
 8008df4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008df8:	409f      	lslgt	r7, r3
 8008dfa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008dfe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008e02:	bfd6      	itet	le
 8008e04:	f1c3 0320 	rsble	r3, r3, #32
 8008e08:	ea47 0003 	orrgt.w	r0, r7, r3
 8008e0c:	fa04 f003 	lslle.w	r0, r4, r3
 8008e10:	f7f7 fba0 	bl	8000554 <__aeabi_ui2d>
 8008e14:	2201      	movs	r2, #1
 8008e16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008e1a:	3e01      	subs	r6, #1
 8008e1c:	9214      	str	r2, [sp, #80]	@ 0x50
 8008e1e:	e777      	b.n	8008d10 <_dtoa_r+0x100>
 8008e20:	2301      	movs	r3, #1
 8008e22:	e7b8      	b.n	8008d96 <_dtoa_r+0x186>
 8008e24:	9012      	str	r0, [sp, #72]	@ 0x48
 8008e26:	e7b7      	b.n	8008d98 <_dtoa_r+0x188>
 8008e28:	427b      	negs	r3, r7
 8008e2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	eba8 0807 	sub.w	r8, r8, r7
 8008e32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008e34:	e7c4      	b.n	8008dc0 <_dtoa_r+0x1b0>
 8008e36:	2300      	movs	r3, #0
 8008e38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	dc35      	bgt.n	8008eac <_dtoa_r+0x29c>
 8008e40:	2301      	movs	r3, #1
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	9307      	str	r3, [sp, #28]
 8008e46:	461a      	mov	r2, r3
 8008e48:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e4a:	e00b      	b.n	8008e64 <_dtoa_r+0x254>
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e7f3      	b.n	8008e38 <_dtoa_r+0x228>
 8008e50:	2300      	movs	r3, #0
 8008e52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e56:	18fb      	adds	r3, r7, r3
 8008e58:	9300      	str	r3, [sp, #0]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	9307      	str	r3, [sp, #28]
 8008e60:	bfb8      	it	lt
 8008e62:	2301      	movlt	r3, #1
 8008e64:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008e68:	2100      	movs	r1, #0
 8008e6a:	2204      	movs	r2, #4
 8008e6c:	f102 0514 	add.w	r5, r2, #20
 8008e70:	429d      	cmp	r5, r3
 8008e72:	d91f      	bls.n	8008eb4 <_dtoa_r+0x2a4>
 8008e74:	6041      	str	r1, [r0, #4]
 8008e76:	4658      	mov	r0, fp
 8008e78:	f000 fd8e 	bl	8009998 <_Balloc>
 8008e7c:	4682      	mov	sl, r0
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d13c      	bne.n	8008efc <_dtoa_r+0x2ec>
 8008e82:	4b1b      	ldr	r3, [pc, #108]	@ (8008ef0 <_dtoa_r+0x2e0>)
 8008e84:	4602      	mov	r2, r0
 8008e86:	f240 11af 	movw	r1, #431	@ 0x1af
 8008e8a:	e6d8      	b.n	8008c3e <_dtoa_r+0x2e>
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e7e0      	b.n	8008e52 <_dtoa_r+0x242>
 8008e90:	2401      	movs	r4, #1
 8008e92:	2300      	movs	r3, #0
 8008e94:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e96:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008e98:	f04f 33ff 	mov.w	r3, #4294967295
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	9307      	str	r3, [sp, #28]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	2312      	movs	r3, #18
 8008ea4:	e7d0      	b.n	8008e48 <_dtoa_r+0x238>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008eaa:	e7f5      	b.n	8008e98 <_dtoa_r+0x288>
 8008eac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	9307      	str	r3, [sp, #28]
 8008eb2:	e7d7      	b.n	8008e64 <_dtoa_r+0x254>
 8008eb4:	3101      	adds	r1, #1
 8008eb6:	0052      	lsls	r2, r2, #1
 8008eb8:	e7d8      	b.n	8008e6c <_dtoa_r+0x25c>
 8008eba:	bf00      	nop
 8008ebc:	f3af 8000 	nop.w
 8008ec0:	636f4361 	.word	0x636f4361
 8008ec4:	3fd287a7 	.word	0x3fd287a7
 8008ec8:	8b60c8b3 	.word	0x8b60c8b3
 8008ecc:	3fc68a28 	.word	0x3fc68a28
 8008ed0:	509f79fb 	.word	0x509f79fb
 8008ed4:	3fd34413 	.word	0x3fd34413
 8008ed8:	0800ad81 	.word	0x0800ad81
 8008edc:	0800ad98 	.word	0x0800ad98
 8008ee0:	7ff00000 	.word	0x7ff00000
 8008ee4:	0800ad51 	.word	0x0800ad51
 8008ee8:	3ff80000 	.word	0x3ff80000
 8008eec:	0800ae90 	.word	0x0800ae90
 8008ef0:	0800adf0 	.word	0x0800adf0
 8008ef4:	0800ad7d 	.word	0x0800ad7d
 8008ef8:	0800ad50 	.word	0x0800ad50
 8008efc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008f00:	6018      	str	r0, [r3, #0]
 8008f02:	9b07      	ldr	r3, [sp, #28]
 8008f04:	2b0e      	cmp	r3, #14
 8008f06:	f200 80a4 	bhi.w	8009052 <_dtoa_r+0x442>
 8008f0a:	2c00      	cmp	r4, #0
 8008f0c:	f000 80a1 	beq.w	8009052 <_dtoa_r+0x442>
 8008f10:	2f00      	cmp	r7, #0
 8008f12:	dd33      	ble.n	8008f7c <_dtoa_r+0x36c>
 8008f14:	4bad      	ldr	r3, [pc, #692]	@ (80091cc <_dtoa_r+0x5bc>)
 8008f16:	f007 020f 	and.w	r2, r7, #15
 8008f1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f1e:	ed93 7b00 	vldr	d7, [r3]
 8008f22:	05f8      	lsls	r0, r7, #23
 8008f24:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008f28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008f2c:	d516      	bpl.n	8008f5c <_dtoa_r+0x34c>
 8008f2e:	4ba8      	ldr	r3, [pc, #672]	@ (80091d0 <_dtoa_r+0x5c0>)
 8008f30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f38:	f7f7 fcb0 	bl	800089c <__aeabi_ddiv>
 8008f3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f40:	f004 040f 	and.w	r4, r4, #15
 8008f44:	2603      	movs	r6, #3
 8008f46:	4da2      	ldr	r5, [pc, #648]	@ (80091d0 <_dtoa_r+0x5c0>)
 8008f48:	b954      	cbnz	r4, 8008f60 <_dtoa_r+0x350>
 8008f4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f52:	f7f7 fca3 	bl	800089c <__aeabi_ddiv>
 8008f56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f5a:	e028      	b.n	8008fae <_dtoa_r+0x39e>
 8008f5c:	2602      	movs	r6, #2
 8008f5e:	e7f2      	b.n	8008f46 <_dtoa_r+0x336>
 8008f60:	07e1      	lsls	r1, r4, #31
 8008f62:	d508      	bpl.n	8008f76 <_dtoa_r+0x366>
 8008f64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f6c:	f7f7 fb6c 	bl	8000648 <__aeabi_dmul>
 8008f70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f74:	3601      	adds	r6, #1
 8008f76:	1064      	asrs	r4, r4, #1
 8008f78:	3508      	adds	r5, #8
 8008f7a:	e7e5      	b.n	8008f48 <_dtoa_r+0x338>
 8008f7c:	f000 80d2 	beq.w	8009124 <_dtoa_r+0x514>
 8008f80:	427c      	negs	r4, r7
 8008f82:	4b92      	ldr	r3, [pc, #584]	@ (80091cc <_dtoa_r+0x5bc>)
 8008f84:	4d92      	ldr	r5, [pc, #584]	@ (80091d0 <_dtoa_r+0x5c0>)
 8008f86:	f004 020f 	and.w	r2, r4, #15
 8008f8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f96:	f7f7 fb57 	bl	8000648 <__aeabi_dmul>
 8008f9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f9e:	1124      	asrs	r4, r4, #4
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	2602      	movs	r6, #2
 8008fa4:	2c00      	cmp	r4, #0
 8008fa6:	f040 80b2 	bne.w	800910e <_dtoa_r+0x4fe>
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1d3      	bne.n	8008f56 <_dtoa_r+0x346>
 8008fae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008fb0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 80b7 	beq.w	8009128 <_dtoa_r+0x518>
 8008fba:	4b86      	ldr	r3, [pc, #536]	@ (80091d4 <_dtoa_r+0x5c4>)
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	4629      	mov	r1, r5
 8008fc2:	f7f7 fdb3 	bl	8000b2c <__aeabi_dcmplt>
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	f000 80ae 	beq.w	8009128 <_dtoa_r+0x518>
 8008fcc:	9b07      	ldr	r3, [sp, #28]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f000 80aa 	beq.w	8009128 <_dtoa_r+0x518>
 8008fd4:	9b00      	ldr	r3, [sp, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	dd37      	ble.n	800904a <_dtoa_r+0x43a>
 8008fda:	1e7b      	subs	r3, r7, #1
 8008fdc:	9304      	str	r3, [sp, #16]
 8008fde:	4620      	mov	r0, r4
 8008fe0:	4b7d      	ldr	r3, [pc, #500]	@ (80091d8 <_dtoa_r+0x5c8>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	4629      	mov	r1, r5
 8008fe6:	f7f7 fb2f 	bl	8000648 <__aeabi_dmul>
 8008fea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fee:	9c00      	ldr	r4, [sp, #0]
 8008ff0:	3601      	adds	r6, #1
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f7f7 fabe 	bl	8000574 <__aeabi_i2d>
 8008ff8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ffc:	f7f7 fb24 	bl	8000648 <__aeabi_dmul>
 8009000:	4b76      	ldr	r3, [pc, #472]	@ (80091dc <_dtoa_r+0x5cc>)
 8009002:	2200      	movs	r2, #0
 8009004:	f7f7 f96a 	bl	80002dc <__adddf3>
 8009008:	4605      	mov	r5, r0
 800900a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800900e:	2c00      	cmp	r4, #0
 8009010:	f040 808d 	bne.w	800912e <_dtoa_r+0x51e>
 8009014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009018:	4b71      	ldr	r3, [pc, #452]	@ (80091e0 <_dtoa_r+0x5d0>)
 800901a:	2200      	movs	r2, #0
 800901c:	f7f7 f95c 	bl	80002d8 <__aeabi_dsub>
 8009020:	4602      	mov	r2, r0
 8009022:	460b      	mov	r3, r1
 8009024:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009028:	462a      	mov	r2, r5
 800902a:	4633      	mov	r3, r6
 800902c:	f7f7 fd9c 	bl	8000b68 <__aeabi_dcmpgt>
 8009030:	2800      	cmp	r0, #0
 8009032:	f040 828b 	bne.w	800954c <_dtoa_r+0x93c>
 8009036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800903a:	462a      	mov	r2, r5
 800903c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009040:	f7f7 fd74 	bl	8000b2c <__aeabi_dcmplt>
 8009044:	2800      	cmp	r0, #0
 8009046:	f040 8128 	bne.w	800929a <_dtoa_r+0x68a>
 800904a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800904e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009052:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009054:	2b00      	cmp	r3, #0
 8009056:	f2c0 815a 	blt.w	800930e <_dtoa_r+0x6fe>
 800905a:	2f0e      	cmp	r7, #14
 800905c:	f300 8157 	bgt.w	800930e <_dtoa_r+0x6fe>
 8009060:	4b5a      	ldr	r3, [pc, #360]	@ (80091cc <_dtoa_r+0x5bc>)
 8009062:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009066:	ed93 7b00 	vldr	d7, [r3]
 800906a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800906c:	2b00      	cmp	r3, #0
 800906e:	ed8d 7b00 	vstr	d7, [sp]
 8009072:	da03      	bge.n	800907c <_dtoa_r+0x46c>
 8009074:	9b07      	ldr	r3, [sp, #28]
 8009076:	2b00      	cmp	r3, #0
 8009078:	f340 8101 	ble.w	800927e <_dtoa_r+0x66e>
 800907c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009080:	4656      	mov	r6, sl
 8009082:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009086:	4620      	mov	r0, r4
 8009088:	4629      	mov	r1, r5
 800908a:	f7f7 fc07 	bl	800089c <__aeabi_ddiv>
 800908e:	f7f7 fd8b 	bl	8000ba8 <__aeabi_d2iz>
 8009092:	4680      	mov	r8, r0
 8009094:	f7f7 fa6e 	bl	8000574 <__aeabi_i2d>
 8009098:	e9dd 2300 	ldrd	r2, r3, [sp]
 800909c:	f7f7 fad4 	bl	8000648 <__aeabi_dmul>
 80090a0:	4602      	mov	r2, r0
 80090a2:	460b      	mov	r3, r1
 80090a4:	4620      	mov	r0, r4
 80090a6:	4629      	mov	r1, r5
 80090a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80090ac:	f7f7 f914 	bl	80002d8 <__aeabi_dsub>
 80090b0:	f806 4b01 	strb.w	r4, [r6], #1
 80090b4:	9d07      	ldr	r5, [sp, #28]
 80090b6:	eba6 040a 	sub.w	r4, r6, sl
 80090ba:	42a5      	cmp	r5, r4
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	f040 8117 	bne.w	80092f2 <_dtoa_r+0x6e2>
 80090c4:	f7f7 f90a 	bl	80002dc <__adddf3>
 80090c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090cc:	4604      	mov	r4, r0
 80090ce:	460d      	mov	r5, r1
 80090d0:	f7f7 fd4a 	bl	8000b68 <__aeabi_dcmpgt>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	f040 80f9 	bne.w	80092cc <_dtoa_r+0x6bc>
 80090da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090de:	4620      	mov	r0, r4
 80090e0:	4629      	mov	r1, r5
 80090e2:	f7f7 fd19 	bl	8000b18 <__aeabi_dcmpeq>
 80090e6:	b118      	cbz	r0, 80090f0 <_dtoa_r+0x4e0>
 80090e8:	f018 0f01 	tst.w	r8, #1
 80090ec:	f040 80ee 	bne.w	80092cc <_dtoa_r+0x6bc>
 80090f0:	4649      	mov	r1, r9
 80090f2:	4658      	mov	r0, fp
 80090f4:	f000 fc90 	bl	8009a18 <_Bfree>
 80090f8:	2300      	movs	r3, #0
 80090fa:	7033      	strb	r3, [r6, #0]
 80090fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80090fe:	3701      	adds	r7, #1
 8009100:	601f      	str	r7, [r3, #0]
 8009102:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 831d 	beq.w	8009744 <_dtoa_r+0xb34>
 800910a:	601e      	str	r6, [r3, #0]
 800910c:	e31a      	b.n	8009744 <_dtoa_r+0xb34>
 800910e:	07e2      	lsls	r2, r4, #31
 8009110:	d505      	bpl.n	800911e <_dtoa_r+0x50e>
 8009112:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009116:	f7f7 fa97 	bl	8000648 <__aeabi_dmul>
 800911a:	3601      	adds	r6, #1
 800911c:	2301      	movs	r3, #1
 800911e:	1064      	asrs	r4, r4, #1
 8009120:	3508      	adds	r5, #8
 8009122:	e73f      	b.n	8008fa4 <_dtoa_r+0x394>
 8009124:	2602      	movs	r6, #2
 8009126:	e742      	b.n	8008fae <_dtoa_r+0x39e>
 8009128:	9c07      	ldr	r4, [sp, #28]
 800912a:	9704      	str	r7, [sp, #16]
 800912c:	e761      	b.n	8008ff2 <_dtoa_r+0x3e2>
 800912e:	4b27      	ldr	r3, [pc, #156]	@ (80091cc <_dtoa_r+0x5bc>)
 8009130:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009132:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009136:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800913a:	4454      	add	r4, sl
 800913c:	2900      	cmp	r1, #0
 800913e:	d053      	beq.n	80091e8 <_dtoa_r+0x5d8>
 8009140:	4928      	ldr	r1, [pc, #160]	@ (80091e4 <_dtoa_r+0x5d4>)
 8009142:	2000      	movs	r0, #0
 8009144:	f7f7 fbaa 	bl	800089c <__aeabi_ddiv>
 8009148:	4633      	mov	r3, r6
 800914a:	462a      	mov	r2, r5
 800914c:	f7f7 f8c4 	bl	80002d8 <__aeabi_dsub>
 8009150:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009154:	4656      	mov	r6, sl
 8009156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800915a:	f7f7 fd25 	bl	8000ba8 <__aeabi_d2iz>
 800915e:	4605      	mov	r5, r0
 8009160:	f7f7 fa08 	bl	8000574 <__aeabi_i2d>
 8009164:	4602      	mov	r2, r0
 8009166:	460b      	mov	r3, r1
 8009168:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800916c:	f7f7 f8b4 	bl	80002d8 <__aeabi_dsub>
 8009170:	3530      	adds	r5, #48	@ 0x30
 8009172:	4602      	mov	r2, r0
 8009174:	460b      	mov	r3, r1
 8009176:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800917a:	f806 5b01 	strb.w	r5, [r6], #1
 800917e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009182:	f7f7 fcd3 	bl	8000b2c <__aeabi_dcmplt>
 8009186:	2800      	cmp	r0, #0
 8009188:	d171      	bne.n	800926e <_dtoa_r+0x65e>
 800918a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800918e:	4911      	ldr	r1, [pc, #68]	@ (80091d4 <_dtoa_r+0x5c4>)
 8009190:	2000      	movs	r0, #0
 8009192:	f7f7 f8a1 	bl	80002d8 <__aeabi_dsub>
 8009196:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800919a:	f7f7 fcc7 	bl	8000b2c <__aeabi_dcmplt>
 800919e:	2800      	cmp	r0, #0
 80091a0:	f040 8095 	bne.w	80092ce <_dtoa_r+0x6be>
 80091a4:	42a6      	cmp	r6, r4
 80091a6:	f43f af50 	beq.w	800904a <_dtoa_r+0x43a>
 80091aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80091ae:	4b0a      	ldr	r3, [pc, #40]	@ (80091d8 <_dtoa_r+0x5c8>)
 80091b0:	2200      	movs	r2, #0
 80091b2:	f7f7 fa49 	bl	8000648 <__aeabi_dmul>
 80091b6:	4b08      	ldr	r3, [pc, #32]	@ (80091d8 <_dtoa_r+0x5c8>)
 80091b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80091bc:	2200      	movs	r2, #0
 80091be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091c2:	f7f7 fa41 	bl	8000648 <__aeabi_dmul>
 80091c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091ca:	e7c4      	b.n	8009156 <_dtoa_r+0x546>
 80091cc:	0800ae90 	.word	0x0800ae90
 80091d0:	0800ae68 	.word	0x0800ae68
 80091d4:	3ff00000 	.word	0x3ff00000
 80091d8:	40240000 	.word	0x40240000
 80091dc:	401c0000 	.word	0x401c0000
 80091e0:	40140000 	.word	0x40140000
 80091e4:	3fe00000 	.word	0x3fe00000
 80091e8:	4631      	mov	r1, r6
 80091ea:	4628      	mov	r0, r5
 80091ec:	f7f7 fa2c 	bl	8000648 <__aeabi_dmul>
 80091f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80091f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80091f6:	4656      	mov	r6, sl
 80091f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091fc:	f7f7 fcd4 	bl	8000ba8 <__aeabi_d2iz>
 8009200:	4605      	mov	r5, r0
 8009202:	f7f7 f9b7 	bl	8000574 <__aeabi_i2d>
 8009206:	4602      	mov	r2, r0
 8009208:	460b      	mov	r3, r1
 800920a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800920e:	f7f7 f863 	bl	80002d8 <__aeabi_dsub>
 8009212:	3530      	adds	r5, #48	@ 0x30
 8009214:	f806 5b01 	strb.w	r5, [r6], #1
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	42a6      	cmp	r6, r4
 800921e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009222:	f04f 0200 	mov.w	r2, #0
 8009226:	d124      	bne.n	8009272 <_dtoa_r+0x662>
 8009228:	4bac      	ldr	r3, [pc, #688]	@ (80094dc <_dtoa_r+0x8cc>)
 800922a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800922e:	f7f7 f855 	bl	80002dc <__adddf3>
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800923a:	f7f7 fc95 	bl	8000b68 <__aeabi_dcmpgt>
 800923e:	2800      	cmp	r0, #0
 8009240:	d145      	bne.n	80092ce <_dtoa_r+0x6be>
 8009242:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009246:	49a5      	ldr	r1, [pc, #660]	@ (80094dc <_dtoa_r+0x8cc>)
 8009248:	2000      	movs	r0, #0
 800924a:	f7f7 f845 	bl	80002d8 <__aeabi_dsub>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009256:	f7f7 fc69 	bl	8000b2c <__aeabi_dcmplt>
 800925a:	2800      	cmp	r0, #0
 800925c:	f43f aef5 	beq.w	800904a <_dtoa_r+0x43a>
 8009260:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009262:	1e73      	subs	r3, r6, #1
 8009264:	9315      	str	r3, [sp, #84]	@ 0x54
 8009266:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800926a:	2b30      	cmp	r3, #48	@ 0x30
 800926c:	d0f8      	beq.n	8009260 <_dtoa_r+0x650>
 800926e:	9f04      	ldr	r7, [sp, #16]
 8009270:	e73e      	b.n	80090f0 <_dtoa_r+0x4e0>
 8009272:	4b9b      	ldr	r3, [pc, #620]	@ (80094e0 <_dtoa_r+0x8d0>)
 8009274:	f7f7 f9e8 	bl	8000648 <__aeabi_dmul>
 8009278:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800927c:	e7bc      	b.n	80091f8 <_dtoa_r+0x5e8>
 800927e:	d10c      	bne.n	800929a <_dtoa_r+0x68a>
 8009280:	4b98      	ldr	r3, [pc, #608]	@ (80094e4 <_dtoa_r+0x8d4>)
 8009282:	2200      	movs	r2, #0
 8009284:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009288:	f7f7 f9de 	bl	8000648 <__aeabi_dmul>
 800928c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009290:	f7f7 fc60 	bl	8000b54 <__aeabi_dcmpge>
 8009294:	2800      	cmp	r0, #0
 8009296:	f000 8157 	beq.w	8009548 <_dtoa_r+0x938>
 800929a:	2400      	movs	r4, #0
 800929c:	4625      	mov	r5, r4
 800929e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092a0:	43db      	mvns	r3, r3
 80092a2:	9304      	str	r3, [sp, #16]
 80092a4:	4656      	mov	r6, sl
 80092a6:	2700      	movs	r7, #0
 80092a8:	4621      	mov	r1, r4
 80092aa:	4658      	mov	r0, fp
 80092ac:	f000 fbb4 	bl	8009a18 <_Bfree>
 80092b0:	2d00      	cmp	r5, #0
 80092b2:	d0dc      	beq.n	800926e <_dtoa_r+0x65e>
 80092b4:	b12f      	cbz	r7, 80092c2 <_dtoa_r+0x6b2>
 80092b6:	42af      	cmp	r7, r5
 80092b8:	d003      	beq.n	80092c2 <_dtoa_r+0x6b2>
 80092ba:	4639      	mov	r1, r7
 80092bc:	4658      	mov	r0, fp
 80092be:	f000 fbab 	bl	8009a18 <_Bfree>
 80092c2:	4629      	mov	r1, r5
 80092c4:	4658      	mov	r0, fp
 80092c6:	f000 fba7 	bl	8009a18 <_Bfree>
 80092ca:	e7d0      	b.n	800926e <_dtoa_r+0x65e>
 80092cc:	9704      	str	r7, [sp, #16]
 80092ce:	4633      	mov	r3, r6
 80092d0:	461e      	mov	r6, r3
 80092d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092d6:	2a39      	cmp	r2, #57	@ 0x39
 80092d8:	d107      	bne.n	80092ea <_dtoa_r+0x6da>
 80092da:	459a      	cmp	sl, r3
 80092dc:	d1f8      	bne.n	80092d0 <_dtoa_r+0x6c0>
 80092de:	9a04      	ldr	r2, [sp, #16]
 80092e0:	3201      	adds	r2, #1
 80092e2:	9204      	str	r2, [sp, #16]
 80092e4:	2230      	movs	r2, #48	@ 0x30
 80092e6:	f88a 2000 	strb.w	r2, [sl]
 80092ea:	781a      	ldrb	r2, [r3, #0]
 80092ec:	3201      	adds	r2, #1
 80092ee:	701a      	strb	r2, [r3, #0]
 80092f0:	e7bd      	b.n	800926e <_dtoa_r+0x65e>
 80092f2:	4b7b      	ldr	r3, [pc, #492]	@ (80094e0 <_dtoa_r+0x8d0>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	f7f7 f9a7 	bl	8000648 <__aeabi_dmul>
 80092fa:	2200      	movs	r2, #0
 80092fc:	2300      	movs	r3, #0
 80092fe:	4604      	mov	r4, r0
 8009300:	460d      	mov	r5, r1
 8009302:	f7f7 fc09 	bl	8000b18 <__aeabi_dcmpeq>
 8009306:	2800      	cmp	r0, #0
 8009308:	f43f aebb 	beq.w	8009082 <_dtoa_r+0x472>
 800930c:	e6f0      	b.n	80090f0 <_dtoa_r+0x4e0>
 800930e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009310:	2a00      	cmp	r2, #0
 8009312:	f000 80db 	beq.w	80094cc <_dtoa_r+0x8bc>
 8009316:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009318:	2a01      	cmp	r2, #1
 800931a:	f300 80bf 	bgt.w	800949c <_dtoa_r+0x88c>
 800931e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009320:	2a00      	cmp	r2, #0
 8009322:	f000 80b7 	beq.w	8009494 <_dtoa_r+0x884>
 8009326:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800932a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800932c:	4646      	mov	r6, r8
 800932e:	9a08      	ldr	r2, [sp, #32]
 8009330:	2101      	movs	r1, #1
 8009332:	441a      	add	r2, r3
 8009334:	4658      	mov	r0, fp
 8009336:	4498      	add	r8, r3
 8009338:	9208      	str	r2, [sp, #32]
 800933a:	f000 fc21 	bl	8009b80 <__i2b>
 800933e:	4605      	mov	r5, r0
 8009340:	b15e      	cbz	r6, 800935a <_dtoa_r+0x74a>
 8009342:	9b08      	ldr	r3, [sp, #32]
 8009344:	2b00      	cmp	r3, #0
 8009346:	dd08      	ble.n	800935a <_dtoa_r+0x74a>
 8009348:	42b3      	cmp	r3, r6
 800934a:	9a08      	ldr	r2, [sp, #32]
 800934c:	bfa8      	it	ge
 800934e:	4633      	movge	r3, r6
 8009350:	eba8 0803 	sub.w	r8, r8, r3
 8009354:	1af6      	subs	r6, r6, r3
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	9308      	str	r3, [sp, #32]
 800935a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800935c:	b1f3      	cbz	r3, 800939c <_dtoa_r+0x78c>
 800935e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 80b7 	beq.w	80094d4 <_dtoa_r+0x8c4>
 8009366:	b18c      	cbz	r4, 800938c <_dtoa_r+0x77c>
 8009368:	4629      	mov	r1, r5
 800936a:	4622      	mov	r2, r4
 800936c:	4658      	mov	r0, fp
 800936e:	f000 fcc7 	bl	8009d00 <__pow5mult>
 8009372:	464a      	mov	r2, r9
 8009374:	4601      	mov	r1, r0
 8009376:	4605      	mov	r5, r0
 8009378:	4658      	mov	r0, fp
 800937a:	f000 fc17 	bl	8009bac <__multiply>
 800937e:	4649      	mov	r1, r9
 8009380:	9004      	str	r0, [sp, #16]
 8009382:	4658      	mov	r0, fp
 8009384:	f000 fb48 	bl	8009a18 <_Bfree>
 8009388:	9b04      	ldr	r3, [sp, #16]
 800938a:	4699      	mov	r9, r3
 800938c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800938e:	1b1a      	subs	r2, r3, r4
 8009390:	d004      	beq.n	800939c <_dtoa_r+0x78c>
 8009392:	4649      	mov	r1, r9
 8009394:	4658      	mov	r0, fp
 8009396:	f000 fcb3 	bl	8009d00 <__pow5mult>
 800939a:	4681      	mov	r9, r0
 800939c:	2101      	movs	r1, #1
 800939e:	4658      	mov	r0, fp
 80093a0:	f000 fbee 	bl	8009b80 <__i2b>
 80093a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093a6:	4604      	mov	r4, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f000 81cf 	beq.w	800974c <_dtoa_r+0xb3c>
 80093ae:	461a      	mov	r2, r3
 80093b0:	4601      	mov	r1, r0
 80093b2:	4658      	mov	r0, fp
 80093b4:	f000 fca4 	bl	8009d00 <__pow5mult>
 80093b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	4604      	mov	r4, r0
 80093be:	f300 8095 	bgt.w	80094ec <_dtoa_r+0x8dc>
 80093c2:	9b02      	ldr	r3, [sp, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f040 8087 	bne.w	80094d8 <_dtoa_r+0x8c8>
 80093ca:	9b03      	ldr	r3, [sp, #12]
 80093cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f040 8089 	bne.w	80094e8 <_dtoa_r+0x8d8>
 80093d6:	9b03      	ldr	r3, [sp, #12]
 80093d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80093dc:	0d1b      	lsrs	r3, r3, #20
 80093de:	051b      	lsls	r3, r3, #20
 80093e0:	b12b      	cbz	r3, 80093ee <_dtoa_r+0x7de>
 80093e2:	9b08      	ldr	r3, [sp, #32]
 80093e4:	3301      	adds	r3, #1
 80093e6:	9308      	str	r3, [sp, #32]
 80093e8:	f108 0801 	add.w	r8, r8, #1
 80093ec:	2301      	movs	r3, #1
 80093ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80093f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f000 81b0 	beq.w	8009758 <_dtoa_r+0xb48>
 80093f8:	6923      	ldr	r3, [r4, #16]
 80093fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80093fe:	6918      	ldr	r0, [r3, #16]
 8009400:	f000 fb72 	bl	8009ae8 <__hi0bits>
 8009404:	f1c0 0020 	rsb	r0, r0, #32
 8009408:	9b08      	ldr	r3, [sp, #32]
 800940a:	4418      	add	r0, r3
 800940c:	f010 001f 	ands.w	r0, r0, #31
 8009410:	d077      	beq.n	8009502 <_dtoa_r+0x8f2>
 8009412:	f1c0 0320 	rsb	r3, r0, #32
 8009416:	2b04      	cmp	r3, #4
 8009418:	dd6b      	ble.n	80094f2 <_dtoa_r+0x8e2>
 800941a:	9b08      	ldr	r3, [sp, #32]
 800941c:	f1c0 001c 	rsb	r0, r0, #28
 8009420:	4403      	add	r3, r0
 8009422:	4480      	add	r8, r0
 8009424:	4406      	add	r6, r0
 8009426:	9308      	str	r3, [sp, #32]
 8009428:	f1b8 0f00 	cmp.w	r8, #0
 800942c:	dd05      	ble.n	800943a <_dtoa_r+0x82a>
 800942e:	4649      	mov	r1, r9
 8009430:	4642      	mov	r2, r8
 8009432:	4658      	mov	r0, fp
 8009434:	f000 fcbe 	bl	8009db4 <__lshift>
 8009438:	4681      	mov	r9, r0
 800943a:	9b08      	ldr	r3, [sp, #32]
 800943c:	2b00      	cmp	r3, #0
 800943e:	dd05      	ble.n	800944c <_dtoa_r+0x83c>
 8009440:	4621      	mov	r1, r4
 8009442:	461a      	mov	r2, r3
 8009444:	4658      	mov	r0, fp
 8009446:	f000 fcb5 	bl	8009db4 <__lshift>
 800944a:	4604      	mov	r4, r0
 800944c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800944e:	2b00      	cmp	r3, #0
 8009450:	d059      	beq.n	8009506 <_dtoa_r+0x8f6>
 8009452:	4621      	mov	r1, r4
 8009454:	4648      	mov	r0, r9
 8009456:	f000 fd19 	bl	8009e8c <__mcmp>
 800945a:	2800      	cmp	r0, #0
 800945c:	da53      	bge.n	8009506 <_dtoa_r+0x8f6>
 800945e:	1e7b      	subs	r3, r7, #1
 8009460:	9304      	str	r3, [sp, #16]
 8009462:	4649      	mov	r1, r9
 8009464:	2300      	movs	r3, #0
 8009466:	220a      	movs	r2, #10
 8009468:	4658      	mov	r0, fp
 800946a:	f000 faf7 	bl	8009a5c <__multadd>
 800946e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009470:	4681      	mov	r9, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	f000 8172 	beq.w	800975c <_dtoa_r+0xb4c>
 8009478:	2300      	movs	r3, #0
 800947a:	4629      	mov	r1, r5
 800947c:	220a      	movs	r2, #10
 800947e:	4658      	mov	r0, fp
 8009480:	f000 faec 	bl	8009a5c <__multadd>
 8009484:	9b00      	ldr	r3, [sp, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	4605      	mov	r5, r0
 800948a:	dc67      	bgt.n	800955c <_dtoa_r+0x94c>
 800948c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800948e:	2b02      	cmp	r3, #2
 8009490:	dc41      	bgt.n	8009516 <_dtoa_r+0x906>
 8009492:	e063      	b.n	800955c <_dtoa_r+0x94c>
 8009494:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009496:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800949a:	e746      	b.n	800932a <_dtoa_r+0x71a>
 800949c:	9b07      	ldr	r3, [sp, #28]
 800949e:	1e5c      	subs	r4, r3, #1
 80094a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094a2:	42a3      	cmp	r3, r4
 80094a4:	bfbf      	itttt	lt
 80094a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80094a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80094aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80094ac:	1ae3      	sublt	r3, r4, r3
 80094ae:	bfb4      	ite	lt
 80094b0:	18d2      	addlt	r2, r2, r3
 80094b2:	1b1c      	subge	r4, r3, r4
 80094b4:	9b07      	ldr	r3, [sp, #28]
 80094b6:	bfbc      	itt	lt
 80094b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80094ba:	2400      	movlt	r4, #0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	bfb5      	itete	lt
 80094c0:	eba8 0603 	sublt.w	r6, r8, r3
 80094c4:	9b07      	ldrge	r3, [sp, #28]
 80094c6:	2300      	movlt	r3, #0
 80094c8:	4646      	movge	r6, r8
 80094ca:	e730      	b.n	800932e <_dtoa_r+0x71e>
 80094cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80094ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80094d0:	4646      	mov	r6, r8
 80094d2:	e735      	b.n	8009340 <_dtoa_r+0x730>
 80094d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80094d6:	e75c      	b.n	8009392 <_dtoa_r+0x782>
 80094d8:	2300      	movs	r3, #0
 80094da:	e788      	b.n	80093ee <_dtoa_r+0x7de>
 80094dc:	3fe00000 	.word	0x3fe00000
 80094e0:	40240000 	.word	0x40240000
 80094e4:	40140000 	.word	0x40140000
 80094e8:	9b02      	ldr	r3, [sp, #8]
 80094ea:	e780      	b.n	80093ee <_dtoa_r+0x7de>
 80094ec:	2300      	movs	r3, #0
 80094ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80094f0:	e782      	b.n	80093f8 <_dtoa_r+0x7e8>
 80094f2:	d099      	beq.n	8009428 <_dtoa_r+0x818>
 80094f4:	9a08      	ldr	r2, [sp, #32]
 80094f6:	331c      	adds	r3, #28
 80094f8:	441a      	add	r2, r3
 80094fa:	4498      	add	r8, r3
 80094fc:	441e      	add	r6, r3
 80094fe:	9208      	str	r2, [sp, #32]
 8009500:	e792      	b.n	8009428 <_dtoa_r+0x818>
 8009502:	4603      	mov	r3, r0
 8009504:	e7f6      	b.n	80094f4 <_dtoa_r+0x8e4>
 8009506:	9b07      	ldr	r3, [sp, #28]
 8009508:	9704      	str	r7, [sp, #16]
 800950a:	2b00      	cmp	r3, #0
 800950c:	dc20      	bgt.n	8009550 <_dtoa_r+0x940>
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009512:	2b02      	cmp	r3, #2
 8009514:	dd1e      	ble.n	8009554 <_dtoa_r+0x944>
 8009516:	9b00      	ldr	r3, [sp, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	f47f aec0 	bne.w	800929e <_dtoa_r+0x68e>
 800951e:	4621      	mov	r1, r4
 8009520:	2205      	movs	r2, #5
 8009522:	4658      	mov	r0, fp
 8009524:	f000 fa9a 	bl	8009a5c <__multadd>
 8009528:	4601      	mov	r1, r0
 800952a:	4604      	mov	r4, r0
 800952c:	4648      	mov	r0, r9
 800952e:	f000 fcad 	bl	8009e8c <__mcmp>
 8009532:	2800      	cmp	r0, #0
 8009534:	f77f aeb3 	ble.w	800929e <_dtoa_r+0x68e>
 8009538:	4656      	mov	r6, sl
 800953a:	2331      	movs	r3, #49	@ 0x31
 800953c:	f806 3b01 	strb.w	r3, [r6], #1
 8009540:	9b04      	ldr	r3, [sp, #16]
 8009542:	3301      	adds	r3, #1
 8009544:	9304      	str	r3, [sp, #16]
 8009546:	e6ae      	b.n	80092a6 <_dtoa_r+0x696>
 8009548:	9c07      	ldr	r4, [sp, #28]
 800954a:	9704      	str	r7, [sp, #16]
 800954c:	4625      	mov	r5, r4
 800954e:	e7f3      	b.n	8009538 <_dtoa_r+0x928>
 8009550:	9b07      	ldr	r3, [sp, #28]
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009556:	2b00      	cmp	r3, #0
 8009558:	f000 8104 	beq.w	8009764 <_dtoa_r+0xb54>
 800955c:	2e00      	cmp	r6, #0
 800955e:	dd05      	ble.n	800956c <_dtoa_r+0x95c>
 8009560:	4629      	mov	r1, r5
 8009562:	4632      	mov	r2, r6
 8009564:	4658      	mov	r0, fp
 8009566:	f000 fc25 	bl	8009db4 <__lshift>
 800956a:	4605      	mov	r5, r0
 800956c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800956e:	2b00      	cmp	r3, #0
 8009570:	d05a      	beq.n	8009628 <_dtoa_r+0xa18>
 8009572:	6869      	ldr	r1, [r5, #4]
 8009574:	4658      	mov	r0, fp
 8009576:	f000 fa0f 	bl	8009998 <_Balloc>
 800957a:	4606      	mov	r6, r0
 800957c:	b928      	cbnz	r0, 800958a <_dtoa_r+0x97a>
 800957e:	4b84      	ldr	r3, [pc, #528]	@ (8009790 <_dtoa_r+0xb80>)
 8009580:	4602      	mov	r2, r0
 8009582:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009586:	f7ff bb5a 	b.w	8008c3e <_dtoa_r+0x2e>
 800958a:	692a      	ldr	r2, [r5, #16]
 800958c:	3202      	adds	r2, #2
 800958e:	0092      	lsls	r2, r2, #2
 8009590:	f105 010c 	add.w	r1, r5, #12
 8009594:	300c      	adds	r0, #12
 8009596:	f7ff faa4 	bl	8008ae2 <memcpy>
 800959a:	2201      	movs	r2, #1
 800959c:	4631      	mov	r1, r6
 800959e:	4658      	mov	r0, fp
 80095a0:	f000 fc08 	bl	8009db4 <__lshift>
 80095a4:	f10a 0301 	add.w	r3, sl, #1
 80095a8:	9307      	str	r3, [sp, #28]
 80095aa:	9b00      	ldr	r3, [sp, #0]
 80095ac:	4453      	add	r3, sl
 80095ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095b0:	9b02      	ldr	r3, [sp, #8]
 80095b2:	f003 0301 	and.w	r3, r3, #1
 80095b6:	462f      	mov	r7, r5
 80095b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80095ba:	4605      	mov	r5, r0
 80095bc:	9b07      	ldr	r3, [sp, #28]
 80095be:	4621      	mov	r1, r4
 80095c0:	3b01      	subs	r3, #1
 80095c2:	4648      	mov	r0, r9
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	f7ff fa9a 	bl	8008afe <quorem>
 80095ca:	4639      	mov	r1, r7
 80095cc:	9002      	str	r0, [sp, #8]
 80095ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80095d2:	4648      	mov	r0, r9
 80095d4:	f000 fc5a 	bl	8009e8c <__mcmp>
 80095d8:	462a      	mov	r2, r5
 80095da:	9008      	str	r0, [sp, #32]
 80095dc:	4621      	mov	r1, r4
 80095de:	4658      	mov	r0, fp
 80095e0:	f000 fc70 	bl	8009ec4 <__mdiff>
 80095e4:	68c2      	ldr	r2, [r0, #12]
 80095e6:	4606      	mov	r6, r0
 80095e8:	bb02      	cbnz	r2, 800962c <_dtoa_r+0xa1c>
 80095ea:	4601      	mov	r1, r0
 80095ec:	4648      	mov	r0, r9
 80095ee:	f000 fc4d 	bl	8009e8c <__mcmp>
 80095f2:	4602      	mov	r2, r0
 80095f4:	4631      	mov	r1, r6
 80095f6:	4658      	mov	r0, fp
 80095f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80095fa:	f000 fa0d 	bl	8009a18 <_Bfree>
 80095fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009600:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009602:	9e07      	ldr	r6, [sp, #28]
 8009604:	ea43 0102 	orr.w	r1, r3, r2
 8009608:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800960a:	4319      	orrs	r1, r3
 800960c:	d110      	bne.n	8009630 <_dtoa_r+0xa20>
 800960e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009612:	d029      	beq.n	8009668 <_dtoa_r+0xa58>
 8009614:	9b08      	ldr	r3, [sp, #32]
 8009616:	2b00      	cmp	r3, #0
 8009618:	dd02      	ble.n	8009620 <_dtoa_r+0xa10>
 800961a:	9b02      	ldr	r3, [sp, #8]
 800961c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009620:	9b00      	ldr	r3, [sp, #0]
 8009622:	f883 8000 	strb.w	r8, [r3]
 8009626:	e63f      	b.n	80092a8 <_dtoa_r+0x698>
 8009628:	4628      	mov	r0, r5
 800962a:	e7bb      	b.n	80095a4 <_dtoa_r+0x994>
 800962c:	2201      	movs	r2, #1
 800962e:	e7e1      	b.n	80095f4 <_dtoa_r+0x9e4>
 8009630:	9b08      	ldr	r3, [sp, #32]
 8009632:	2b00      	cmp	r3, #0
 8009634:	db04      	blt.n	8009640 <_dtoa_r+0xa30>
 8009636:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009638:	430b      	orrs	r3, r1
 800963a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800963c:	430b      	orrs	r3, r1
 800963e:	d120      	bne.n	8009682 <_dtoa_r+0xa72>
 8009640:	2a00      	cmp	r2, #0
 8009642:	dded      	ble.n	8009620 <_dtoa_r+0xa10>
 8009644:	4649      	mov	r1, r9
 8009646:	2201      	movs	r2, #1
 8009648:	4658      	mov	r0, fp
 800964a:	f000 fbb3 	bl	8009db4 <__lshift>
 800964e:	4621      	mov	r1, r4
 8009650:	4681      	mov	r9, r0
 8009652:	f000 fc1b 	bl	8009e8c <__mcmp>
 8009656:	2800      	cmp	r0, #0
 8009658:	dc03      	bgt.n	8009662 <_dtoa_r+0xa52>
 800965a:	d1e1      	bne.n	8009620 <_dtoa_r+0xa10>
 800965c:	f018 0f01 	tst.w	r8, #1
 8009660:	d0de      	beq.n	8009620 <_dtoa_r+0xa10>
 8009662:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009666:	d1d8      	bne.n	800961a <_dtoa_r+0xa0a>
 8009668:	9a00      	ldr	r2, [sp, #0]
 800966a:	2339      	movs	r3, #57	@ 0x39
 800966c:	7013      	strb	r3, [r2, #0]
 800966e:	4633      	mov	r3, r6
 8009670:	461e      	mov	r6, r3
 8009672:	3b01      	subs	r3, #1
 8009674:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009678:	2a39      	cmp	r2, #57	@ 0x39
 800967a:	d052      	beq.n	8009722 <_dtoa_r+0xb12>
 800967c:	3201      	adds	r2, #1
 800967e:	701a      	strb	r2, [r3, #0]
 8009680:	e612      	b.n	80092a8 <_dtoa_r+0x698>
 8009682:	2a00      	cmp	r2, #0
 8009684:	dd07      	ble.n	8009696 <_dtoa_r+0xa86>
 8009686:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800968a:	d0ed      	beq.n	8009668 <_dtoa_r+0xa58>
 800968c:	9a00      	ldr	r2, [sp, #0]
 800968e:	f108 0301 	add.w	r3, r8, #1
 8009692:	7013      	strb	r3, [r2, #0]
 8009694:	e608      	b.n	80092a8 <_dtoa_r+0x698>
 8009696:	9b07      	ldr	r3, [sp, #28]
 8009698:	9a07      	ldr	r2, [sp, #28]
 800969a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800969e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d028      	beq.n	80096f6 <_dtoa_r+0xae6>
 80096a4:	4649      	mov	r1, r9
 80096a6:	2300      	movs	r3, #0
 80096a8:	220a      	movs	r2, #10
 80096aa:	4658      	mov	r0, fp
 80096ac:	f000 f9d6 	bl	8009a5c <__multadd>
 80096b0:	42af      	cmp	r7, r5
 80096b2:	4681      	mov	r9, r0
 80096b4:	f04f 0300 	mov.w	r3, #0
 80096b8:	f04f 020a 	mov.w	r2, #10
 80096bc:	4639      	mov	r1, r7
 80096be:	4658      	mov	r0, fp
 80096c0:	d107      	bne.n	80096d2 <_dtoa_r+0xac2>
 80096c2:	f000 f9cb 	bl	8009a5c <__multadd>
 80096c6:	4607      	mov	r7, r0
 80096c8:	4605      	mov	r5, r0
 80096ca:	9b07      	ldr	r3, [sp, #28]
 80096cc:	3301      	adds	r3, #1
 80096ce:	9307      	str	r3, [sp, #28]
 80096d0:	e774      	b.n	80095bc <_dtoa_r+0x9ac>
 80096d2:	f000 f9c3 	bl	8009a5c <__multadd>
 80096d6:	4629      	mov	r1, r5
 80096d8:	4607      	mov	r7, r0
 80096da:	2300      	movs	r3, #0
 80096dc:	220a      	movs	r2, #10
 80096de:	4658      	mov	r0, fp
 80096e0:	f000 f9bc 	bl	8009a5c <__multadd>
 80096e4:	4605      	mov	r5, r0
 80096e6:	e7f0      	b.n	80096ca <_dtoa_r+0xaba>
 80096e8:	9b00      	ldr	r3, [sp, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	bfcc      	ite	gt
 80096ee:	461e      	movgt	r6, r3
 80096f0:	2601      	movle	r6, #1
 80096f2:	4456      	add	r6, sl
 80096f4:	2700      	movs	r7, #0
 80096f6:	4649      	mov	r1, r9
 80096f8:	2201      	movs	r2, #1
 80096fa:	4658      	mov	r0, fp
 80096fc:	f000 fb5a 	bl	8009db4 <__lshift>
 8009700:	4621      	mov	r1, r4
 8009702:	4681      	mov	r9, r0
 8009704:	f000 fbc2 	bl	8009e8c <__mcmp>
 8009708:	2800      	cmp	r0, #0
 800970a:	dcb0      	bgt.n	800966e <_dtoa_r+0xa5e>
 800970c:	d102      	bne.n	8009714 <_dtoa_r+0xb04>
 800970e:	f018 0f01 	tst.w	r8, #1
 8009712:	d1ac      	bne.n	800966e <_dtoa_r+0xa5e>
 8009714:	4633      	mov	r3, r6
 8009716:	461e      	mov	r6, r3
 8009718:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800971c:	2a30      	cmp	r2, #48	@ 0x30
 800971e:	d0fa      	beq.n	8009716 <_dtoa_r+0xb06>
 8009720:	e5c2      	b.n	80092a8 <_dtoa_r+0x698>
 8009722:	459a      	cmp	sl, r3
 8009724:	d1a4      	bne.n	8009670 <_dtoa_r+0xa60>
 8009726:	9b04      	ldr	r3, [sp, #16]
 8009728:	3301      	adds	r3, #1
 800972a:	9304      	str	r3, [sp, #16]
 800972c:	2331      	movs	r3, #49	@ 0x31
 800972e:	f88a 3000 	strb.w	r3, [sl]
 8009732:	e5b9      	b.n	80092a8 <_dtoa_r+0x698>
 8009734:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009736:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009794 <_dtoa_r+0xb84>
 800973a:	b11b      	cbz	r3, 8009744 <_dtoa_r+0xb34>
 800973c:	f10a 0308 	add.w	r3, sl, #8
 8009740:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009742:	6013      	str	r3, [r2, #0]
 8009744:	4650      	mov	r0, sl
 8009746:	b019      	add	sp, #100	@ 0x64
 8009748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800974c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800974e:	2b01      	cmp	r3, #1
 8009750:	f77f ae37 	ble.w	80093c2 <_dtoa_r+0x7b2>
 8009754:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009756:	930a      	str	r3, [sp, #40]	@ 0x28
 8009758:	2001      	movs	r0, #1
 800975a:	e655      	b.n	8009408 <_dtoa_r+0x7f8>
 800975c:	9b00      	ldr	r3, [sp, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	f77f aed6 	ble.w	8009510 <_dtoa_r+0x900>
 8009764:	4656      	mov	r6, sl
 8009766:	4621      	mov	r1, r4
 8009768:	4648      	mov	r0, r9
 800976a:	f7ff f9c8 	bl	8008afe <quorem>
 800976e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009772:	f806 8b01 	strb.w	r8, [r6], #1
 8009776:	9b00      	ldr	r3, [sp, #0]
 8009778:	eba6 020a 	sub.w	r2, r6, sl
 800977c:	4293      	cmp	r3, r2
 800977e:	ddb3      	ble.n	80096e8 <_dtoa_r+0xad8>
 8009780:	4649      	mov	r1, r9
 8009782:	2300      	movs	r3, #0
 8009784:	220a      	movs	r2, #10
 8009786:	4658      	mov	r0, fp
 8009788:	f000 f968 	bl	8009a5c <__multadd>
 800978c:	4681      	mov	r9, r0
 800978e:	e7ea      	b.n	8009766 <_dtoa_r+0xb56>
 8009790:	0800adf0 	.word	0x0800adf0
 8009794:	0800ad74 	.word	0x0800ad74

08009798 <_free_r>:
 8009798:	b538      	push	{r3, r4, r5, lr}
 800979a:	4605      	mov	r5, r0
 800979c:	2900      	cmp	r1, #0
 800979e:	d041      	beq.n	8009824 <_free_r+0x8c>
 80097a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097a4:	1f0c      	subs	r4, r1, #4
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	bfb8      	it	lt
 80097aa:	18e4      	addlt	r4, r4, r3
 80097ac:	f000 f8e8 	bl	8009980 <__malloc_lock>
 80097b0:	4a1d      	ldr	r2, [pc, #116]	@ (8009828 <_free_r+0x90>)
 80097b2:	6813      	ldr	r3, [r2, #0]
 80097b4:	b933      	cbnz	r3, 80097c4 <_free_r+0x2c>
 80097b6:	6063      	str	r3, [r4, #4]
 80097b8:	6014      	str	r4, [r2, #0]
 80097ba:	4628      	mov	r0, r5
 80097bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097c0:	f000 b8e4 	b.w	800998c <__malloc_unlock>
 80097c4:	42a3      	cmp	r3, r4
 80097c6:	d908      	bls.n	80097da <_free_r+0x42>
 80097c8:	6820      	ldr	r0, [r4, #0]
 80097ca:	1821      	adds	r1, r4, r0
 80097cc:	428b      	cmp	r3, r1
 80097ce:	bf01      	itttt	eq
 80097d0:	6819      	ldreq	r1, [r3, #0]
 80097d2:	685b      	ldreq	r3, [r3, #4]
 80097d4:	1809      	addeq	r1, r1, r0
 80097d6:	6021      	streq	r1, [r4, #0]
 80097d8:	e7ed      	b.n	80097b6 <_free_r+0x1e>
 80097da:	461a      	mov	r2, r3
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	b10b      	cbz	r3, 80097e4 <_free_r+0x4c>
 80097e0:	42a3      	cmp	r3, r4
 80097e2:	d9fa      	bls.n	80097da <_free_r+0x42>
 80097e4:	6811      	ldr	r1, [r2, #0]
 80097e6:	1850      	adds	r0, r2, r1
 80097e8:	42a0      	cmp	r0, r4
 80097ea:	d10b      	bne.n	8009804 <_free_r+0x6c>
 80097ec:	6820      	ldr	r0, [r4, #0]
 80097ee:	4401      	add	r1, r0
 80097f0:	1850      	adds	r0, r2, r1
 80097f2:	4283      	cmp	r3, r0
 80097f4:	6011      	str	r1, [r2, #0]
 80097f6:	d1e0      	bne.n	80097ba <_free_r+0x22>
 80097f8:	6818      	ldr	r0, [r3, #0]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	6053      	str	r3, [r2, #4]
 80097fe:	4408      	add	r0, r1
 8009800:	6010      	str	r0, [r2, #0]
 8009802:	e7da      	b.n	80097ba <_free_r+0x22>
 8009804:	d902      	bls.n	800980c <_free_r+0x74>
 8009806:	230c      	movs	r3, #12
 8009808:	602b      	str	r3, [r5, #0]
 800980a:	e7d6      	b.n	80097ba <_free_r+0x22>
 800980c:	6820      	ldr	r0, [r4, #0]
 800980e:	1821      	adds	r1, r4, r0
 8009810:	428b      	cmp	r3, r1
 8009812:	bf04      	itt	eq
 8009814:	6819      	ldreq	r1, [r3, #0]
 8009816:	685b      	ldreq	r3, [r3, #4]
 8009818:	6063      	str	r3, [r4, #4]
 800981a:	bf04      	itt	eq
 800981c:	1809      	addeq	r1, r1, r0
 800981e:	6021      	streq	r1, [r4, #0]
 8009820:	6054      	str	r4, [r2, #4]
 8009822:	e7ca      	b.n	80097ba <_free_r+0x22>
 8009824:	bd38      	pop	{r3, r4, r5, pc}
 8009826:	bf00      	nop
 8009828:	20000578 	.word	0x20000578

0800982c <malloc>:
 800982c:	4b02      	ldr	r3, [pc, #8]	@ (8009838 <malloc+0xc>)
 800982e:	4601      	mov	r1, r0
 8009830:	6818      	ldr	r0, [r3, #0]
 8009832:	f000 b825 	b.w	8009880 <_malloc_r>
 8009836:	bf00      	nop
 8009838:	20000018 	.word	0x20000018

0800983c <sbrk_aligned>:
 800983c:	b570      	push	{r4, r5, r6, lr}
 800983e:	4e0f      	ldr	r6, [pc, #60]	@ (800987c <sbrk_aligned+0x40>)
 8009840:	460c      	mov	r4, r1
 8009842:	6831      	ldr	r1, [r6, #0]
 8009844:	4605      	mov	r5, r0
 8009846:	b911      	cbnz	r1, 800984e <sbrk_aligned+0x12>
 8009848:	f000 fe46 	bl	800a4d8 <_sbrk_r>
 800984c:	6030      	str	r0, [r6, #0]
 800984e:	4621      	mov	r1, r4
 8009850:	4628      	mov	r0, r5
 8009852:	f000 fe41 	bl	800a4d8 <_sbrk_r>
 8009856:	1c43      	adds	r3, r0, #1
 8009858:	d103      	bne.n	8009862 <sbrk_aligned+0x26>
 800985a:	f04f 34ff 	mov.w	r4, #4294967295
 800985e:	4620      	mov	r0, r4
 8009860:	bd70      	pop	{r4, r5, r6, pc}
 8009862:	1cc4      	adds	r4, r0, #3
 8009864:	f024 0403 	bic.w	r4, r4, #3
 8009868:	42a0      	cmp	r0, r4
 800986a:	d0f8      	beq.n	800985e <sbrk_aligned+0x22>
 800986c:	1a21      	subs	r1, r4, r0
 800986e:	4628      	mov	r0, r5
 8009870:	f000 fe32 	bl	800a4d8 <_sbrk_r>
 8009874:	3001      	adds	r0, #1
 8009876:	d1f2      	bne.n	800985e <sbrk_aligned+0x22>
 8009878:	e7ef      	b.n	800985a <sbrk_aligned+0x1e>
 800987a:	bf00      	nop
 800987c:	20000574 	.word	0x20000574

08009880 <_malloc_r>:
 8009880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009884:	1ccd      	adds	r5, r1, #3
 8009886:	f025 0503 	bic.w	r5, r5, #3
 800988a:	3508      	adds	r5, #8
 800988c:	2d0c      	cmp	r5, #12
 800988e:	bf38      	it	cc
 8009890:	250c      	movcc	r5, #12
 8009892:	2d00      	cmp	r5, #0
 8009894:	4606      	mov	r6, r0
 8009896:	db01      	blt.n	800989c <_malloc_r+0x1c>
 8009898:	42a9      	cmp	r1, r5
 800989a:	d904      	bls.n	80098a6 <_malloc_r+0x26>
 800989c:	230c      	movs	r3, #12
 800989e:	6033      	str	r3, [r6, #0]
 80098a0:	2000      	movs	r0, #0
 80098a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800997c <_malloc_r+0xfc>
 80098aa:	f000 f869 	bl	8009980 <__malloc_lock>
 80098ae:	f8d8 3000 	ldr.w	r3, [r8]
 80098b2:	461c      	mov	r4, r3
 80098b4:	bb44      	cbnz	r4, 8009908 <_malloc_r+0x88>
 80098b6:	4629      	mov	r1, r5
 80098b8:	4630      	mov	r0, r6
 80098ba:	f7ff ffbf 	bl	800983c <sbrk_aligned>
 80098be:	1c43      	adds	r3, r0, #1
 80098c0:	4604      	mov	r4, r0
 80098c2:	d158      	bne.n	8009976 <_malloc_r+0xf6>
 80098c4:	f8d8 4000 	ldr.w	r4, [r8]
 80098c8:	4627      	mov	r7, r4
 80098ca:	2f00      	cmp	r7, #0
 80098cc:	d143      	bne.n	8009956 <_malloc_r+0xd6>
 80098ce:	2c00      	cmp	r4, #0
 80098d0:	d04b      	beq.n	800996a <_malloc_r+0xea>
 80098d2:	6823      	ldr	r3, [r4, #0]
 80098d4:	4639      	mov	r1, r7
 80098d6:	4630      	mov	r0, r6
 80098d8:	eb04 0903 	add.w	r9, r4, r3
 80098dc:	f000 fdfc 	bl	800a4d8 <_sbrk_r>
 80098e0:	4581      	cmp	r9, r0
 80098e2:	d142      	bne.n	800996a <_malloc_r+0xea>
 80098e4:	6821      	ldr	r1, [r4, #0]
 80098e6:	1a6d      	subs	r5, r5, r1
 80098e8:	4629      	mov	r1, r5
 80098ea:	4630      	mov	r0, r6
 80098ec:	f7ff ffa6 	bl	800983c <sbrk_aligned>
 80098f0:	3001      	adds	r0, #1
 80098f2:	d03a      	beq.n	800996a <_malloc_r+0xea>
 80098f4:	6823      	ldr	r3, [r4, #0]
 80098f6:	442b      	add	r3, r5
 80098f8:	6023      	str	r3, [r4, #0]
 80098fa:	f8d8 3000 	ldr.w	r3, [r8]
 80098fe:	685a      	ldr	r2, [r3, #4]
 8009900:	bb62      	cbnz	r2, 800995c <_malloc_r+0xdc>
 8009902:	f8c8 7000 	str.w	r7, [r8]
 8009906:	e00f      	b.n	8009928 <_malloc_r+0xa8>
 8009908:	6822      	ldr	r2, [r4, #0]
 800990a:	1b52      	subs	r2, r2, r5
 800990c:	d420      	bmi.n	8009950 <_malloc_r+0xd0>
 800990e:	2a0b      	cmp	r2, #11
 8009910:	d917      	bls.n	8009942 <_malloc_r+0xc2>
 8009912:	1961      	adds	r1, r4, r5
 8009914:	42a3      	cmp	r3, r4
 8009916:	6025      	str	r5, [r4, #0]
 8009918:	bf18      	it	ne
 800991a:	6059      	strne	r1, [r3, #4]
 800991c:	6863      	ldr	r3, [r4, #4]
 800991e:	bf08      	it	eq
 8009920:	f8c8 1000 	streq.w	r1, [r8]
 8009924:	5162      	str	r2, [r4, r5]
 8009926:	604b      	str	r3, [r1, #4]
 8009928:	4630      	mov	r0, r6
 800992a:	f000 f82f 	bl	800998c <__malloc_unlock>
 800992e:	f104 000b 	add.w	r0, r4, #11
 8009932:	1d23      	adds	r3, r4, #4
 8009934:	f020 0007 	bic.w	r0, r0, #7
 8009938:	1ac2      	subs	r2, r0, r3
 800993a:	bf1c      	itt	ne
 800993c:	1a1b      	subne	r3, r3, r0
 800993e:	50a3      	strne	r3, [r4, r2]
 8009940:	e7af      	b.n	80098a2 <_malloc_r+0x22>
 8009942:	6862      	ldr	r2, [r4, #4]
 8009944:	42a3      	cmp	r3, r4
 8009946:	bf0c      	ite	eq
 8009948:	f8c8 2000 	streq.w	r2, [r8]
 800994c:	605a      	strne	r2, [r3, #4]
 800994e:	e7eb      	b.n	8009928 <_malloc_r+0xa8>
 8009950:	4623      	mov	r3, r4
 8009952:	6864      	ldr	r4, [r4, #4]
 8009954:	e7ae      	b.n	80098b4 <_malloc_r+0x34>
 8009956:	463c      	mov	r4, r7
 8009958:	687f      	ldr	r7, [r7, #4]
 800995a:	e7b6      	b.n	80098ca <_malloc_r+0x4a>
 800995c:	461a      	mov	r2, r3
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	42a3      	cmp	r3, r4
 8009962:	d1fb      	bne.n	800995c <_malloc_r+0xdc>
 8009964:	2300      	movs	r3, #0
 8009966:	6053      	str	r3, [r2, #4]
 8009968:	e7de      	b.n	8009928 <_malloc_r+0xa8>
 800996a:	230c      	movs	r3, #12
 800996c:	6033      	str	r3, [r6, #0]
 800996e:	4630      	mov	r0, r6
 8009970:	f000 f80c 	bl	800998c <__malloc_unlock>
 8009974:	e794      	b.n	80098a0 <_malloc_r+0x20>
 8009976:	6005      	str	r5, [r0, #0]
 8009978:	e7d6      	b.n	8009928 <_malloc_r+0xa8>
 800997a:	bf00      	nop
 800997c:	20000578 	.word	0x20000578

08009980 <__malloc_lock>:
 8009980:	4801      	ldr	r0, [pc, #4]	@ (8009988 <__malloc_lock+0x8>)
 8009982:	f7ff b8ac 	b.w	8008ade <__retarget_lock_acquire_recursive>
 8009986:	bf00      	nop
 8009988:	20000570 	.word	0x20000570

0800998c <__malloc_unlock>:
 800998c:	4801      	ldr	r0, [pc, #4]	@ (8009994 <__malloc_unlock+0x8>)
 800998e:	f7ff b8a7 	b.w	8008ae0 <__retarget_lock_release_recursive>
 8009992:	bf00      	nop
 8009994:	20000570 	.word	0x20000570

08009998 <_Balloc>:
 8009998:	b570      	push	{r4, r5, r6, lr}
 800999a:	69c6      	ldr	r6, [r0, #28]
 800999c:	4604      	mov	r4, r0
 800999e:	460d      	mov	r5, r1
 80099a0:	b976      	cbnz	r6, 80099c0 <_Balloc+0x28>
 80099a2:	2010      	movs	r0, #16
 80099a4:	f7ff ff42 	bl	800982c <malloc>
 80099a8:	4602      	mov	r2, r0
 80099aa:	61e0      	str	r0, [r4, #28]
 80099ac:	b920      	cbnz	r0, 80099b8 <_Balloc+0x20>
 80099ae:	4b18      	ldr	r3, [pc, #96]	@ (8009a10 <_Balloc+0x78>)
 80099b0:	4818      	ldr	r0, [pc, #96]	@ (8009a14 <_Balloc+0x7c>)
 80099b2:	216b      	movs	r1, #107	@ 0x6b
 80099b4:	f000 fda0 	bl	800a4f8 <__assert_func>
 80099b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099bc:	6006      	str	r6, [r0, #0]
 80099be:	60c6      	str	r6, [r0, #12]
 80099c0:	69e6      	ldr	r6, [r4, #28]
 80099c2:	68f3      	ldr	r3, [r6, #12]
 80099c4:	b183      	cbz	r3, 80099e8 <_Balloc+0x50>
 80099c6:	69e3      	ldr	r3, [r4, #28]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099ce:	b9b8      	cbnz	r0, 8009a00 <_Balloc+0x68>
 80099d0:	2101      	movs	r1, #1
 80099d2:	fa01 f605 	lsl.w	r6, r1, r5
 80099d6:	1d72      	adds	r2, r6, #5
 80099d8:	0092      	lsls	r2, r2, #2
 80099da:	4620      	mov	r0, r4
 80099dc:	f000 fdaa 	bl	800a534 <_calloc_r>
 80099e0:	b160      	cbz	r0, 80099fc <_Balloc+0x64>
 80099e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80099e6:	e00e      	b.n	8009a06 <_Balloc+0x6e>
 80099e8:	2221      	movs	r2, #33	@ 0x21
 80099ea:	2104      	movs	r1, #4
 80099ec:	4620      	mov	r0, r4
 80099ee:	f000 fda1 	bl	800a534 <_calloc_r>
 80099f2:	69e3      	ldr	r3, [r4, #28]
 80099f4:	60f0      	str	r0, [r6, #12]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1e4      	bne.n	80099c6 <_Balloc+0x2e>
 80099fc:	2000      	movs	r0, #0
 80099fe:	bd70      	pop	{r4, r5, r6, pc}
 8009a00:	6802      	ldr	r2, [r0, #0]
 8009a02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a06:	2300      	movs	r3, #0
 8009a08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a0c:	e7f7      	b.n	80099fe <_Balloc+0x66>
 8009a0e:	bf00      	nop
 8009a10:	0800ad81 	.word	0x0800ad81
 8009a14:	0800ae01 	.word	0x0800ae01

08009a18 <_Bfree>:
 8009a18:	b570      	push	{r4, r5, r6, lr}
 8009a1a:	69c6      	ldr	r6, [r0, #28]
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	460c      	mov	r4, r1
 8009a20:	b976      	cbnz	r6, 8009a40 <_Bfree+0x28>
 8009a22:	2010      	movs	r0, #16
 8009a24:	f7ff ff02 	bl	800982c <malloc>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	61e8      	str	r0, [r5, #28]
 8009a2c:	b920      	cbnz	r0, 8009a38 <_Bfree+0x20>
 8009a2e:	4b09      	ldr	r3, [pc, #36]	@ (8009a54 <_Bfree+0x3c>)
 8009a30:	4809      	ldr	r0, [pc, #36]	@ (8009a58 <_Bfree+0x40>)
 8009a32:	218f      	movs	r1, #143	@ 0x8f
 8009a34:	f000 fd60 	bl	800a4f8 <__assert_func>
 8009a38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a3c:	6006      	str	r6, [r0, #0]
 8009a3e:	60c6      	str	r6, [r0, #12]
 8009a40:	b13c      	cbz	r4, 8009a52 <_Bfree+0x3a>
 8009a42:	69eb      	ldr	r3, [r5, #28]
 8009a44:	6862      	ldr	r2, [r4, #4]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a4c:	6021      	str	r1, [r4, #0]
 8009a4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a52:	bd70      	pop	{r4, r5, r6, pc}
 8009a54:	0800ad81 	.word	0x0800ad81
 8009a58:	0800ae01 	.word	0x0800ae01

08009a5c <__multadd>:
 8009a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a60:	690d      	ldr	r5, [r1, #16]
 8009a62:	4607      	mov	r7, r0
 8009a64:	460c      	mov	r4, r1
 8009a66:	461e      	mov	r6, r3
 8009a68:	f101 0c14 	add.w	ip, r1, #20
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	f8dc 3000 	ldr.w	r3, [ip]
 8009a72:	b299      	uxth	r1, r3
 8009a74:	fb02 6101 	mla	r1, r2, r1, r6
 8009a78:	0c1e      	lsrs	r6, r3, #16
 8009a7a:	0c0b      	lsrs	r3, r1, #16
 8009a7c:	fb02 3306 	mla	r3, r2, r6, r3
 8009a80:	b289      	uxth	r1, r1
 8009a82:	3001      	adds	r0, #1
 8009a84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a88:	4285      	cmp	r5, r0
 8009a8a:	f84c 1b04 	str.w	r1, [ip], #4
 8009a8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a92:	dcec      	bgt.n	8009a6e <__multadd+0x12>
 8009a94:	b30e      	cbz	r6, 8009ada <__multadd+0x7e>
 8009a96:	68a3      	ldr	r3, [r4, #8]
 8009a98:	42ab      	cmp	r3, r5
 8009a9a:	dc19      	bgt.n	8009ad0 <__multadd+0x74>
 8009a9c:	6861      	ldr	r1, [r4, #4]
 8009a9e:	4638      	mov	r0, r7
 8009aa0:	3101      	adds	r1, #1
 8009aa2:	f7ff ff79 	bl	8009998 <_Balloc>
 8009aa6:	4680      	mov	r8, r0
 8009aa8:	b928      	cbnz	r0, 8009ab6 <__multadd+0x5a>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	4b0c      	ldr	r3, [pc, #48]	@ (8009ae0 <__multadd+0x84>)
 8009aae:	480d      	ldr	r0, [pc, #52]	@ (8009ae4 <__multadd+0x88>)
 8009ab0:	21ba      	movs	r1, #186	@ 0xba
 8009ab2:	f000 fd21 	bl	800a4f8 <__assert_func>
 8009ab6:	6922      	ldr	r2, [r4, #16]
 8009ab8:	3202      	adds	r2, #2
 8009aba:	f104 010c 	add.w	r1, r4, #12
 8009abe:	0092      	lsls	r2, r2, #2
 8009ac0:	300c      	adds	r0, #12
 8009ac2:	f7ff f80e 	bl	8008ae2 <memcpy>
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	4638      	mov	r0, r7
 8009aca:	f7ff ffa5 	bl	8009a18 <_Bfree>
 8009ace:	4644      	mov	r4, r8
 8009ad0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ad4:	3501      	adds	r5, #1
 8009ad6:	615e      	str	r6, [r3, #20]
 8009ad8:	6125      	str	r5, [r4, #16]
 8009ada:	4620      	mov	r0, r4
 8009adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ae0:	0800adf0 	.word	0x0800adf0
 8009ae4:	0800ae01 	.word	0x0800ae01

08009ae8 <__hi0bits>:
 8009ae8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009aec:	4603      	mov	r3, r0
 8009aee:	bf36      	itet	cc
 8009af0:	0403      	lslcc	r3, r0, #16
 8009af2:	2000      	movcs	r0, #0
 8009af4:	2010      	movcc	r0, #16
 8009af6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009afa:	bf3c      	itt	cc
 8009afc:	021b      	lslcc	r3, r3, #8
 8009afe:	3008      	addcc	r0, #8
 8009b00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b04:	bf3c      	itt	cc
 8009b06:	011b      	lslcc	r3, r3, #4
 8009b08:	3004      	addcc	r0, #4
 8009b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b0e:	bf3c      	itt	cc
 8009b10:	009b      	lslcc	r3, r3, #2
 8009b12:	3002      	addcc	r0, #2
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	db05      	blt.n	8009b24 <__hi0bits+0x3c>
 8009b18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009b1c:	f100 0001 	add.w	r0, r0, #1
 8009b20:	bf08      	it	eq
 8009b22:	2020      	moveq	r0, #32
 8009b24:	4770      	bx	lr

08009b26 <__lo0bits>:
 8009b26:	6803      	ldr	r3, [r0, #0]
 8009b28:	4602      	mov	r2, r0
 8009b2a:	f013 0007 	ands.w	r0, r3, #7
 8009b2e:	d00b      	beq.n	8009b48 <__lo0bits+0x22>
 8009b30:	07d9      	lsls	r1, r3, #31
 8009b32:	d421      	bmi.n	8009b78 <__lo0bits+0x52>
 8009b34:	0798      	lsls	r0, r3, #30
 8009b36:	bf49      	itett	mi
 8009b38:	085b      	lsrmi	r3, r3, #1
 8009b3a:	089b      	lsrpl	r3, r3, #2
 8009b3c:	2001      	movmi	r0, #1
 8009b3e:	6013      	strmi	r3, [r2, #0]
 8009b40:	bf5c      	itt	pl
 8009b42:	6013      	strpl	r3, [r2, #0]
 8009b44:	2002      	movpl	r0, #2
 8009b46:	4770      	bx	lr
 8009b48:	b299      	uxth	r1, r3
 8009b4a:	b909      	cbnz	r1, 8009b50 <__lo0bits+0x2a>
 8009b4c:	0c1b      	lsrs	r3, r3, #16
 8009b4e:	2010      	movs	r0, #16
 8009b50:	b2d9      	uxtb	r1, r3
 8009b52:	b909      	cbnz	r1, 8009b58 <__lo0bits+0x32>
 8009b54:	3008      	adds	r0, #8
 8009b56:	0a1b      	lsrs	r3, r3, #8
 8009b58:	0719      	lsls	r1, r3, #28
 8009b5a:	bf04      	itt	eq
 8009b5c:	091b      	lsreq	r3, r3, #4
 8009b5e:	3004      	addeq	r0, #4
 8009b60:	0799      	lsls	r1, r3, #30
 8009b62:	bf04      	itt	eq
 8009b64:	089b      	lsreq	r3, r3, #2
 8009b66:	3002      	addeq	r0, #2
 8009b68:	07d9      	lsls	r1, r3, #31
 8009b6a:	d403      	bmi.n	8009b74 <__lo0bits+0x4e>
 8009b6c:	085b      	lsrs	r3, r3, #1
 8009b6e:	f100 0001 	add.w	r0, r0, #1
 8009b72:	d003      	beq.n	8009b7c <__lo0bits+0x56>
 8009b74:	6013      	str	r3, [r2, #0]
 8009b76:	4770      	bx	lr
 8009b78:	2000      	movs	r0, #0
 8009b7a:	4770      	bx	lr
 8009b7c:	2020      	movs	r0, #32
 8009b7e:	4770      	bx	lr

08009b80 <__i2b>:
 8009b80:	b510      	push	{r4, lr}
 8009b82:	460c      	mov	r4, r1
 8009b84:	2101      	movs	r1, #1
 8009b86:	f7ff ff07 	bl	8009998 <_Balloc>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	b928      	cbnz	r0, 8009b9a <__i2b+0x1a>
 8009b8e:	4b05      	ldr	r3, [pc, #20]	@ (8009ba4 <__i2b+0x24>)
 8009b90:	4805      	ldr	r0, [pc, #20]	@ (8009ba8 <__i2b+0x28>)
 8009b92:	f240 1145 	movw	r1, #325	@ 0x145
 8009b96:	f000 fcaf 	bl	800a4f8 <__assert_func>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	6144      	str	r4, [r0, #20]
 8009b9e:	6103      	str	r3, [r0, #16]
 8009ba0:	bd10      	pop	{r4, pc}
 8009ba2:	bf00      	nop
 8009ba4:	0800adf0 	.word	0x0800adf0
 8009ba8:	0800ae01 	.word	0x0800ae01

08009bac <__multiply>:
 8009bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb0:	4614      	mov	r4, r2
 8009bb2:	690a      	ldr	r2, [r1, #16]
 8009bb4:	6923      	ldr	r3, [r4, #16]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	bfa8      	it	ge
 8009bba:	4623      	movge	r3, r4
 8009bbc:	460f      	mov	r7, r1
 8009bbe:	bfa4      	itt	ge
 8009bc0:	460c      	movge	r4, r1
 8009bc2:	461f      	movge	r7, r3
 8009bc4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009bc8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009bcc:	68a3      	ldr	r3, [r4, #8]
 8009bce:	6861      	ldr	r1, [r4, #4]
 8009bd0:	eb0a 0609 	add.w	r6, sl, r9
 8009bd4:	42b3      	cmp	r3, r6
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	bfb8      	it	lt
 8009bda:	3101      	addlt	r1, #1
 8009bdc:	f7ff fedc 	bl	8009998 <_Balloc>
 8009be0:	b930      	cbnz	r0, 8009bf0 <__multiply+0x44>
 8009be2:	4602      	mov	r2, r0
 8009be4:	4b44      	ldr	r3, [pc, #272]	@ (8009cf8 <__multiply+0x14c>)
 8009be6:	4845      	ldr	r0, [pc, #276]	@ (8009cfc <__multiply+0x150>)
 8009be8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009bec:	f000 fc84 	bl	800a4f8 <__assert_func>
 8009bf0:	f100 0514 	add.w	r5, r0, #20
 8009bf4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009bf8:	462b      	mov	r3, r5
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	4543      	cmp	r3, r8
 8009bfe:	d321      	bcc.n	8009c44 <__multiply+0x98>
 8009c00:	f107 0114 	add.w	r1, r7, #20
 8009c04:	f104 0214 	add.w	r2, r4, #20
 8009c08:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009c0c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009c10:	9302      	str	r3, [sp, #8]
 8009c12:	1b13      	subs	r3, r2, r4
 8009c14:	3b15      	subs	r3, #21
 8009c16:	f023 0303 	bic.w	r3, r3, #3
 8009c1a:	3304      	adds	r3, #4
 8009c1c:	f104 0715 	add.w	r7, r4, #21
 8009c20:	42ba      	cmp	r2, r7
 8009c22:	bf38      	it	cc
 8009c24:	2304      	movcc	r3, #4
 8009c26:	9301      	str	r3, [sp, #4]
 8009c28:	9b02      	ldr	r3, [sp, #8]
 8009c2a:	9103      	str	r1, [sp, #12]
 8009c2c:	428b      	cmp	r3, r1
 8009c2e:	d80c      	bhi.n	8009c4a <__multiply+0x9e>
 8009c30:	2e00      	cmp	r6, #0
 8009c32:	dd03      	ble.n	8009c3c <__multiply+0x90>
 8009c34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d05b      	beq.n	8009cf4 <__multiply+0x148>
 8009c3c:	6106      	str	r6, [r0, #16]
 8009c3e:	b005      	add	sp, #20
 8009c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c44:	f843 2b04 	str.w	r2, [r3], #4
 8009c48:	e7d8      	b.n	8009bfc <__multiply+0x50>
 8009c4a:	f8b1 a000 	ldrh.w	sl, [r1]
 8009c4e:	f1ba 0f00 	cmp.w	sl, #0
 8009c52:	d024      	beq.n	8009c9e <__multiply+0xf2>
 8009c54:	f104 0e14 	add.w	lr, r4, #20
 8009c58:	46a9      	mov	r9, r5
 8009c5a:	f04f 0c00 	mov.w	ip, #0
 8009c5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c62:	f8d9 3000 	ldr.w	r3, [r9]
 8009c66:	fa1f fb87 	uxth.w	fp, r7
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009c70:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009c74:	f8d9 7000 	ldr.w	r7, [r9]
 8009c78:	4463      	add	r3, ip
 8009c7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009c7e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009c82:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009c8c:	4572      	cmp	r2, lr
 8009c8e:	f849 3b04 	str.w	r3, [r9], #4
 8009c92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009c96:	d8e2      	bhi.n	8009c5e <__multiply+0xb2>
 8009c98:	9b01      	ldr	r3, [sp, #4]
 8009c9a:	f845 c003 	str.w	ip, [r5, r3]
 8009c9e:	9b03      	ldr	r3, [sp, #12]
 8009ca0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009ca4:	3104      	adds	r1, #4
 8009ca6:	f1b9 0f00 	cmp.w	r9, #0
 8009caa:	d021      	beq.n	8009cf0 <__multiply+0x144>
 8009cac:	682b      	ldr	r3, [r5, #0]
 8009cae:	f104 0c14 	add.w	ip, r4, #20
 8009cb2:	46ae      	mov	lr, r5
 8009cb4:	f04f 0a00 	mov.w	sl, #0
 8009cb8:	f8bc b000 	ldrh.w	fp, [ip]
 8009cbc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009cc0:	fb09 770b 	mla	r7, r9, fp, r7
 8009cc4:	4457      	add	r7, sl
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009ccc:	f84e 3b04 	str.w	r3, [lr], #4
 8009cd0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009cd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009cd8:	f8be 3000 	ldrh.w	r3, [lr]
 8009cdc:	fb09 330a 	mla	r3, r9, sl, r3
 8009ce0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009ce4:	4562      	cmp	r2, ip
 8009ce6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009cea:	d8e5      	bhi.n	8009cb8 <__multiply+0x10c>
 8009cec:	9f01      	ldr	r7, [sp, #4]
 8009cee:	51eb      	str	r3, [r5, r7]
 8009cf0:	3504      	adds	r5, #4
 8009cf2:	e799      	b.n	8009c28 <__multiply+0x7c>
 8009cf4:	3e01      	subs	r6, #1
 8009cf6:	e79b      	b.n	8009c30 <__multiply+0x84>
 8009cf8:	0800adf0 	.word	0x0800adf0
 8009cfc:	0800ae01 	.word	0x0800ae01

08009d00 <__pow5mult>:
 8009d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d04:	4615      	mov	r5, r2
 8009d06:	f012 0203 	ands.w	r2, r2, #3
 8009d0a:	4607      	mov	r7, r0
 8009d0c:	460e      	mov	r6, r1
 8009d0e:	d007      	beq.n	8009d20 <__pow5mult+0x20>
 8009d10:	4c25      	ldr	r4, [pc, #148]	@ (8009da8 <__pow5mult+0xa8>)
 8009d12:	3a01      	subs	r2, #1
 8009d14:	2300      	movs	r3, #0
 8009d16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d1a:	f7ff fe9f 	bl	8009a5c <__multadd>
 8009d1e:	4606      	mov	r6, r0
 8009d20:	10ad      	asrs	r5, r5, #2
 8009d22:	d03d      	beq.n	8009da0 <__pow5mult+0xa0>
 8009d24:	69fc      	ldr	r4, [r7, #28]
 8009d26:	b97c      	cbnz	r4, 8009d48 <__pow5mult+0x48>
 8009d28:	2010      	movs	r0, #16
 8009d2a:	f7ff fd7f 	bl	800982c <malloc>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	61f8      	str	r0, [r7, #28]
 8009d32:	b928      	cbnz	r0, 8009d40 <__pow5mult+0x40>
 8009d34:	4b1d      	ldr	r3, [pc, #116]	@ (8009dac <__pow5mult+0xac>)
 8009d36:	481e      	ldr	r0, [pc, #120]	@ (8009db0 <__pow5mult+0xb0>)
 8009d38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009d3c:	f000 fbdc 	bl	800a4f8 <__assert_func>
 8009d40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d44:	6004      	str	r4, [r0, #0]
 8009d46:	60c4      	str	r4, [r0, #12]
 8009d48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009d4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d50:	b94c      	cbnz	r4, 8009d66 <__pow5mult+0x66>
 8009d52:	f240 2171 	movw	r1, #625	@ 0x271
 8009d56:	4638      	mov	r0, r7
 8009d58:	f7ff ff12 	bl	8009b80 <__i2b>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d62:	4604      	mov	r4, r0
 8009d64:	6003      	str	r3, [r0, #0]
 8009d66:	f04f 0900 	mov.w	r9, #0
 8009d6a:	07eb      	lsls	r3, r5, #31
 8009d6c:	d50a      	bpl.n	8009d84 <__pow5mult+0x84>
 8009d6e:	4631      	mov	r1, r6
 8009d70:	4622      	mov	r2, r4
 8009d72:	4638      	mov	r0, r7
 8009d74:	f7ff ff1a 	bl	8009bac <__multiply>
 8009d78:	4631      	mov	r1, r6
 8009d7a:	4680      	mov	r8, r0
 8009d7c:	4638      	mov	r0, r7
 8009d7e:	f7ff fe4b 	bl	8009a18 <_Bfree>
 8009d82:	4646      	mov	r6, r8
 8009d84:	106d      	asrs	r5, r5, #1
 8009d86:	d00b      	beq.n	8009da0 <__pow5mult+0xa0>
 8009d88:	6820      	ldr	r0, [r4, #0]
 8009d8a:	b938      	cbnz	r0, 8009d9c <__pow5mult+0x9c>
 8009d8c:	4622      	mov	r2, r4
 8009d8e:	4621      	mov	r1, r4
 8009d90:	4638      	mov	r0, r7
 8009d92:	f7ff ff0b 	bl	8009bac <__multiply>
 8009d96:	6020      	str	r0, [r4, #0]
 8009d98:	f8c0 9000 	str.w	r9, [r0]
 8009d9c:	4604      	mov	r4, r0
 8009d9e:	e7e4      	b.n	8009d6a <__pow5mult+0x6a>
 8009da0:	4630      	mov	r0, r6
 8009da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009da6:	bf00      	nop
 8009da8:	0800ae5c 	.word	0x0800ae5c
 8009dac:	0800ad81 	.word	0x0800ad81
 8009db0:	0800ae01 	.word	0x0800ae01

08009db4 <__lshift>:
 8009db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009db8:	460c      	mov	r4, r1
 8009dba:	6849      	ldr	r1, [r1, #4]
 8009dbc:	6923      	ldr	r3, [r4, #16]
 8009dbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009dc2:	68a3      	ldr	r3, [r4, #8]
 8009dc4:	4607      	mov	r7, r0
 8009dc6:	4691      	mov	r9, r2
 8009dc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009dcc:	f108 0601 	add.w	r6, r8, #1
 8009dd0:	42b3      	cmp	r3, r6
 8009dd2:	db0b      	blt.n	8009dec <__lshift+0x38>
 8009dd4:	4638      	mov	r0, r7
 8009dd6:	f7ff fddf 	bl	8009998 <_Balloc>
 8009dda:	4605      	mov	r5, r0
 8009ddc:	b948      	cbnz	r0, 8009df2 <__lshift+0x3e>
 8009dde:	4602      	mov	r2, r0
 8009de0:	4b28      	ldr	r3, [pc, #160]	@ (8009e84 <__lshift+0xd0>)
 8009de2:	4829      	ldr	r0, [pc, #164]	@ (8009e88 <__lshift+0xd4>)
 8009de4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009de8:	f000 fb86 	bl	800a4f8 <__assert_func>
 8009dec:	3101      	adds	r1, #1
 8009dee:	005b      	lsls	r3, r3, #1
 8009df0:	e7ee      	b.n	8009dd0 <__lshift+0x1c>
 8009df2:	2300      	movs	r3, #0
 8009df4:	f100 0114 	add.w	r1, r0, #20
 8009df8:	f100 0210 	add.w	r2, r0, #16
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	4553      	cmp	r3, sl
 8009e00:	db33      	blt.n	8009e6a <__lshift+0xb6>
 8009e02:	6920      	ldr	r0, [r4, #16]
 8009e04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e08:	f104 0314 	add.w	r3, r4, #20
 8009e0c:	f019 091f 	ands.w	r9, r9, #31
 8009e10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e18:	d02b      	beq.n	8009e72 <__lshift+0xbe>
 8009e1a:	f1c9 0e20 	rsb	lr, r9, #32
 8009e1e:	468a      	mov	sl, r1
 8009e20:	2200      	movs	r2, #0
 8009e22:	6818      	ldr	r0, [r3, #0]
 8009e24:	fa00 f009 	lsl.w	r0, r0, r9
 8009e28:	4310      	orrs	r0, r2
 8009e2a:	f84a 0b04 	str.w	r0, [sl], #4
 8009e2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e32:	459c      	cmp	ip, r3
 8009e34:	fa22 f20e 	lsr.w	r2, r2, lr
 8009e38:	d8f3      	bhi.n	8009e22 <__lshift+0x6e>
 8009e3a:	ebac 0304 	sub.w	r3, ip, r4
 8009e3e:	3b15      	subs	r3, #21
 8009e40:	f023 0303 	bic.w	r3, r3, #3
 8009e44:	3304      	adds	r3, #4
 8009e46:	f104 0015 	add.w	r0, r4, #21
 8009e4a:	4584      	cmp	ip, r0
 8009e4c:	bf38      	it	cc
 8009e4e:	2304      	movcc	r3, #4
 8009e50:	50ca      	str	r2, [r1, r3]
 8009e52:	b10a      	cbz	r2, 8009e58 <__lshift+0xa4>
 8009e54:	f108 0602 	add.w	r6, r8, #2
 8009e58:	3e01      	subs	r6, #1
 8009e5a:	4638      	mov	r0, r7
 8009e5c:	612e      	str	r6, [r5, #16]
 8009e5e:	4621      	mov	r1, r4
 8009e60:	f7ff fdda 	bl	8009a18 <_Bfree>
 8009e64:	4628      	mov	r0, r5
 8009e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e6e:	3301      	adds	r3, #1
 8009e70:	e7c5      	b.n	8009dfe <__lshift+0x4a>
 8009e72:	3904      	subs	r1, #4
 8009e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e78:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e7c:	459c      	cmp	ip, r3
 8009e7e:	d8f9      	bhi.n	8009e74 <__lshift+0xc0>
 8009e80:	e7ea      	b.n	8009e58 <__lshift+0xa4>
 8009e82:	bf00      	nop
 8009e84:	0800adf0 	.word	0x0800adf0
 8009e88:	0800ae01 	.word	0x0800ae01

08009e8c <__mcmp>:
 8009e8c:	690a      	ldr	r2, [r1, #16]
 8009e8e:	4603      	mov	r3, r0
 8009e90:	6900      	ldr	r0, [r0, #16]
 8009e92:	1a80      	subs	r0, r0, r2
 8009e94:	b530      	push	{r4, r5, lr}
 8009e96:	d10e      	bne.n	8009eb6 <__mcmp+0x2a>
 8009e98:	3314      	adds	r3, #20
 8009e9a:	3114      	adds	r1, #20
 8009e9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009ea0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009ea4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ea8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009eac:	4295      	cmp	r5, r2
 8009eae:	d003      	beq.n	8009eb8 <__mcmp+0x2c>
 8009eb0:	d205      	bcs.n	8009ebe <__mcmp+0x32>
 8009eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb6:	bd30      	pop	{r4, r5, pc}
 8009eb8:	42a3      	cmp	r3, r4
 8009eba:	d3f3      	bcc.n	8009ea4 <__mcmp+0x18>
 8009ebc:	e7fb      	b.n	8009eb6 <__mcmp+0x2a>
 8009ebe:	2001      	movs	r0, #1
 8009ec0:	e7f9      	b.n	8009eb6 <__mcmp+0x2a>
	...

08009ec4 <__mdiff>:
 8009ec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec8:	4689      	mov	r9, r1
 8009eca:	4606      	mov	r6, r0
 8009ecc:	4611      	mov	r1, r2
 8009ece:	4648      	mov	r0, r9
 8009ed0:	4614      	mov	r4, r2
 8009ed2:	f7ff ffdb 	bl	8009e8c <__mcmp>
 8009ed6:	1e05      	subs	r5, r0, #0
 8009ed8:	d112      	bne.n	8009f00 <__mdiff+0x3c>
 8009eda:	4629      	mov	r1, r5
 8009edc:	4630      	mov	r0, r6
 8009ede:	f7ff fd5b 	bl	8009998 <_Balloc>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	b928      	cbnz	r0, 8009ef2 <__mdiff+0x2e>
 8009ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8009fe4 <__mdiff+0x120>)
 8009ee8:	f240 2137 	movw	r1, #567	@ 0x237
 8009eec:	483e      	ldr	r0, [pc, #248]	@ (8009fe8 <__mdiff+0x124>)
 8009eee:	f000 fb03 	bl	800a4f8 <__assert_func>
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ef8:	4610      	mov	r0, r2
 8009efa:	b003      	add	sp, #12
 8009efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f00:	bfbc      	itt	lt
 8009f02:	464b      	movlt	r3, r9
 8009f04:	46a1      	movlt	r9, r4
 8009f06:	4630      	mov	r0, r6
 8009f08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009f0c:	bfba      	itte	lt
 8009f0e:	461c      	movlt	r4, r3
 8009f10:	2501      	movlt	r5, #1
 8009f12:	2500      	movge	r5, #0
 8009f14:	f7ff fd40 	bl	8009998 <_Balloc>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	b918      	cbnz	r0, 8009f24 <__mdiff+0x60>
 8009f1c:	4b31      	ldr	r3, [pc, #196]	@ (8009fe4 <__mdiff+0x120>)
 8009f1e:	f240 2145 	movw	r1, #581	@ 0x245
 8009f22:	e7e3      	b.n	8009eec <__mdiff+0x28>
 8009f24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009f28:	6926      	ldr	r6, [r4, #16]
 8009f2a:	60c5      	str	r5, [r0, #12]
 8009f2c:	f109 0310 	add.w	r3, r9, #16
 8009f30:	f109 0514 	add.w	r5, r9, #20
 8009f34:	f104 0e14 	add.w	lr, r4, #20
 8009f38:	f100 0b14 	add.w	fp, r0, #20
 8009f3c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009f40:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009f44:	9301      	str	r3, [sp, #4]
 8009f46:	46d9      	mov	r9, fp
 8009f48:	f04f 0c00 	mov.w	ip, #0
 8009f4c:	9b01      	ldr	r3, [sp, #4]
 8009f4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009f52:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009f56:	9301      	str	r3, [sp, #4]
 8009f58:	fa1f f38a 	uxth.w	r3, sl
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	b283      	uxth	r3, r0
 8009f60:	1acb      	subs	r3, r1, r3
 8009f62:	0c00      	lsrs	r0, r0, #16
 8009f64:	4463      	add	r3, ip
 8009f66:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009f6a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009f74:	4576      	cmp	r6, lr
 8009f76:	f849 3b04 	str.w	r3, [r9], #4
 8009f7a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009f7e:	d8e5      	bhi.n	8009f4c <__mdiff+0x88>
 8009f80:	1b33      	subs	r3, r6, r4
 8009f82:	3b15      	subs	r3, #21
 8009f84:	f023 0303 	bic.w	r3, r3, #3
 8009f88:	3415      	adds	r4, #21
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	42a6      	cmp	r6, r4
 8009f8e:	bf38      	it	cc
 8009f90:	2304      	movcc	r3, #4
 8009f92:	441d      	add	r5, r3
 8009f94:	445b      	add	r3, fp
 8009f96:	461e      	mov	r6, r3
 8009f98:	462c      	mov	r4, r5
 8009f9a:	4544      	cmp	r4, r8
 8009f9c:	d30e      	bcc.n	8009fbc <__mdiff+0xf8>
 8009f9e:	f108 0103 	add.w	r1, r8, #3
 8009fa2:	1b49      	subs	r1, r1, r5
 8009fa4:	f021 0103 	bic.w	r1, r1, #3
 8009fa8:	3d03      	subs	r5, #3
 8009faa:	45a8      	cmp	r8, r5
 8009fac:	bf38      	it	cc
 8009fae:	2100      	movcc	r1, #0
 8009fb0:	440b      	add	r3, r1
 8009fb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009fb6:	b191      	cbz	r1, 8009fde <__mdiff+0x11a>
 8009fb8:	6117      	str	r7, [r2, #16]
 8009fba:	e79d      	b.n	8009ef8 <__mdiff+0x34>
 8009fbc:	f854 1b04 	ldr.w	r1, [r4], #4
 8009fc0:	46e6      	mov	lr, ip
 8009fc2:	0c08      	lsrs	r0, r1, #16
 8009fc4:	fa1c fc81 	uxtah	ip, ip, r1
 8009fc8:	4471      	add	r1, lr
 8009fca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009fce:	b289      	uxth	r1, r1
 8009fd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009fd4:	f846 1b04 	str.w	r1, [r6], #4
 8009fd8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009fdc:	e7dd      	b.n	8009f9a <__mdiff+0xd6>
 8009fde:	3f01      	subs	r7, #1
 8009fe0:	e7e7      	b.n	8009fb2 <__mdiff+0xee>
 8009fe2:	bf00      	nop
 8009fe4:	0800adf0 	.word	0x0800adf0
 8009fe8:	0800ae01 	.word	0x0800ae01

08009fec <__d2b>:
 8009fec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ff0:	460f      	mov	r7, r1
 8009ff2:	2101      	movs	r1, #1
 8009ff4:	ec59 8b10 	vmov	r8, r9, d0
 8009ff8:	4616      	mov	r6, r2
 8009ffa:	f7ff fccd 	bl	8009998 <_Balloc>
 8009ffe:	4604      	mov	r4, r0
 800a000:	b930      	cbnz	r0, 800a010 <__d2b+0x24>
 800a002:	4602      	mov	r2, r0
 800a004:	4b23      	ldr	r3, [pc, #140]	@ (800a094 <__d2b+0xa8>)
 800a006:	4824      	ldr	r0, [pc, #144]	@ (800a098 <__d2b+0xac>)
 800a008:	f240 310f 	movw	r1, #783	@ 0x30f
 800a00c:	f000 fa74 	bl	800a4f8 <__assert_func>
 800a010:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a014:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a018:	b10d      	cbz	r5, 800a01e <__d2b+0x32>
 800a01a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a01e:	9301      	str	r3, [sp, #4]
 800a020:	f1b8 0300 	subs.w	r3, r8, #0
 800a024:	d023      	beq.n	800a06e <__d2b+0x82>
 800a026:	4668      	mov	r0, sp
 800a028:	9300      	str	r3, [sp, #0]
 800a02a:	f7ff fd7c 	bl	8009b26 <__lo0bits>
 800a02e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a032:	b1d0      	cbz	r0, 800a06a <__d2b+0x7e>
 800a034:	f1c0 0320 	rsb	r3, r0, #32
 800a038:	fa02 f303 	lsl.w	r3, r2, r3
 800a03c:	430b      	orrs	r3, r1
 800a03e:	40c2      	lsrs	r2, r0
 800a040:	6163      	str	r3, [r4, #20]
 800a042:	9201      	str	r2, [sp, #4]
 800a044:	9b01      	ldr	r3, [sp, #4]
 800a046:	61a3      	str	r3, [r4, #24]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	bf0c      	ite	eq
 800a04c:	2201      	moveq	r2, #1
 800a04e:	2202      	movne	r2, #2
 800a050:	6122      	str	r2, [r4, #16]
 800a052:	b1a5      	cbz	r5, 800a07e <__d2b+0x92>
 800a054:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a058:	4405      	add	r5, r0
 800a05a:	603d      	str	r5, [r7, #0]
 800a05c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a060:	6030      	str	r0, [r6, #0]
 800a062:	4620      	mov	r0, r4
 800a064:	b003      	add	sp, #12
 800a066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a06a:	6161      	str	r1, [r4, #20]
 800a06c:	e7ea      	b.n	800a044 <__d2b+0x58>
 800a06e:	a801      	add	r0, sp, #4
 800a070:	f7ff fd59 	bl	8009b26 <__lo0bits>
 800a074:	9b01      	ldr	r3, [sp, #4]
 800a076:	6163      	str	r3, [r4, #20]
 800a078:	3020      	adds	r0, #32
 800a07a:	2201      	movs	r2, #1
 800a07c:	e7e8      	b.n	800a050 <__d2b+0x64>
 800a07e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a082:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a086:	6038      	str	r0, [r7, #0]
 800a088:	6918      	ldr	r0, [r3, #16]
 800a08a:	f7ff fd2d 	bl	8009ae8 <__hi0bits>
 800a08e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a092:	e7e5      	b.n	800a060 <__d2b+0x74>
 800a094:	0800adf0 	.word	0x0800adf0
 800a098:	0800ae01 	.word	0x0800ae01

0800a09c <__ssputs_r>:
 800a09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a0:	688e      	ldr	r6, [r1, #8]
 800a0a2:	461f      	mov	r7, r3
 800a0a4:	42be      	cmp	r6, r7
 800a0a6:	680b      	ldr	r3, [r1, #0]
 800a0a8:	4682      	mov	sl, r0
 800a0aa:	460c      	mov	r4, r1
 800a0ac:	4690      	mov	r8, r2
 800a0ae:	d82d      	bhi.n	800a10c <__ssputs_r+0x70>
 800a0b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a0b8:	d026      	beq.n	800a108 <__ssputs_r+0x6c>
 800a0ba:	6965      	ldr	r5, [r4, #20]
 800a0bc:	6909      	ldr	r1, [r1, #16]
 800a0be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0c2:	eba3 0901 	sub.w	r9, r3, r1
 800a0c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0ca:	1c7b      	adds	r3, r7, #1
 800a0cc:	444b      	add	r3, r9
 800a0ce:	106d      	asrs	r5, r5, #1
 800a0d0:	429d      	cmp	r5, r3
 800a0d2:	bf38      	it	cc
 800a0d4:	461d      	movcc	r5, r3
 800a0d6:	0553      	lsls	r3, r2, #21
 800a0d8:	d527      	bpl.n	800a12a <__ssputs_r+0x8e>
 800a0da:	4629      	mov	r1, r5
 800a0dc:	f7ff fbd0 	bl	8009880 <_malloc_r>
 800a0e0:	4606      	mov	r6, r0
 800a0e2:	b360      	cbz	r0, 800a13e <__ssputs_r+0xa2>
 800a0e4:	6921      	ldr	r1, [r4, #16]
 800a0e6:	464a      	mov	r2, r9
 800a0e8:	f7fe fcfb 	bl	8008ae2 <memcpy>
 800a0ec:	89a3      	ldrh	r3, [r4, #12]
 800a0ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a0f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0f6:	81a3      	strh	r3, [r4, #12]
 800a0f8:	6126      	str	r6, [r4, #16]
 800a0fa:	6165      	str	r5, [r4, #20]
 800a0fc:	444e      	add	r6, r9
 800a0fe:	eba5 0509 	sub.w	r5, r5, r9
 800a102:	6026      	str	r6, [r4, #0]
 800a104:	60a5      	str	r5, [r4, #8]
 800a106:	463e      	mov	r6, r7
 800a108:	42be      	cmp	r6, r7
 800a10a:	d900      	bls.n	800a10e <__ssputs_r+0x72>
 800a10c:	463e      	mov	r6, r7
 800a10e:	6820      	ldr	r0, [r4, #0]
 800a110:	4632      	mov	r2, r6
 800a112:	4641      	mov	r1, r8
 800a114:	f000 f9c6 	bl	800a4a4 <memmove>
 800a118:	68a3      	ldr	r3, [r4, #8]
 800a11a:	1b9b      	subs	r3, r3, r6
 800a11c:	60a3      	str	r3, [r4, #8]
 800a11e:	6823      	ldr	r3, [r4, #0]
 800a120:	4433      	add	r3, r6
 800a122:	6023      	str	r3, [r4, #0]
 800a124:	2000      	movs	r0, #0
 800a126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a12a:	462a      	mov	r2, r5
 800a12c:	f000 fa28 	bl	800a580 <_realloc_r>
 800a130:	4606      	mov	r6, r0
 800a132:	2800      	cmp	r0, #0
 800a134:	d1e0      	bne.n	800a0f8 <__ssputs_r+0x5c>
 800a136:	6921      	ldr	r1, [r4, #16]
 800a138:	4650      	mov	r0, sl
 800a13a:	f7ff fb2d 	bl	8009798 <_free_r>
 800a13e:	230c      	movs	r3, #12
 800a140:	f8ca 3000 	str.w	r3, [sl]
 800a144:	89a3      	ldrh	r3, [r4, #12]
 800a146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a14a:	81a3      	strh	r3, [r4, #12]
 800a14c:	f04f 30ff 	mov.w	r0, #4294967295
 800a150:	e7e9      	b.n	800a126 <__ssputs_r+0x8a>
	...

0800a154 <_svfiprintf_r>:
 800a154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a158:	4698      	mov	r8, r3
 800a15a:	898b      	ldrh	r3, [r1, #12]
 800a15c:	061b      	lsls	r3, r3, #24
 800a15e:	b09d      	sub	sp, #116	@ 0x74
 800a160:	4607      	mov	r7, r0
 800a162:	460d      	mov	r5, r1
 800a164:	4614      	mov	r4, r2
 800a166:	d510      	bpl.n	800a18a <_svfiprintf_r+0x36>
 800a168:	690b      	ldr	r3, [r1, #16]
 800a16a:	b973      	cbnz	r3, 800a18a <_svfiprintf_r+0x36>
 800a16c:	2140      	movs	r1, #64	@ 0x40
 800a16e:	f7ff fb87 	bl	8009880 <_malloc_r>
 800a172:	6028      	str	r0, [r5, #0]
 800a174:	6128      	str	r0, [r5, #16]
 800a176:	b930      	cbnz	r0, 800a186 <_svfiprintf_r+0x32>
 800a178:	230c      	movs	r3, #12
 800a17a:	603b      	str	r3, [r7, #0]
 800a17c:	f04f 30ff 	mov.w	r0, #4294967295
 800a180:	b01d      	add	sp, #116	@ 0x74
 800a182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a186:	2340      	movs	r3, #64	@ 0x40
 800a188:	616b      	str	r3, [r5, #20]
 800a18a:	2300      	movs	r3, #0
 800a18c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a18e:	2320      	movs	r3, #32
 800a190:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a194:	f8cd 800c 	str.w	r8, [sp, #12]
 800a198:	2330      	movs	r3, #48	@ 0x30
 800a19a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a338 <_svfiprintf_r+0x1e4>
 800a19e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1a2:	f04f 0901 	mov.w	r9, #1
 800a1a6:	4623      	mov	r3, r4
 800a1a8:	469a      	mov	sl, r3
 800a1aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1ae:	b10a      	cbz	r2, 800a1b4 <_svfiprintf_r+0x60>
 800a1b0:	2a25      	cmp	r2, #37	@ 0x25
 800a1b2:	d1f9      	bne.n	800a1a8 <_svfiprintf_r+0x54>
 800a1b4:	ebba 0b04 	subs.w	fp, sl, r4
 800a1b8:	d00b      	beq.n	800a1d2 <_svfiprintf_r+0x7e>
 800a1ba:	465b      	mov	r3, fp
 800a1bc:	4622      	mov	r2, r4
 800a1be:	4629      	mov	r1, r5
 800a1c0:	4638      	mov	r0, r7
 800a1c2:	f7ff ff6b 	bl	800a09c <__ssputs_r>
 800a1c6:	3001      	adds	r0, #1
 800a1c8:	f000 80a7 	beq.w	800a31a <_svfiprintf_r+0x1c6>
 800a1cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1ce:	445a      	add	r2, fp
 800a1d0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f000 809f 	beq.w	800a31a <_svfiprintf_r+0x1c6>
 800a1dc:	2300      	movs	r3, #0
 800a1de:	f04f 32ff 	mov.w	r2, #4294967295
 800a1e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1e6:	f10a 0a01 	add.w	sl, sl, #1
 800a1ea:	9304      	str	r3, [sp, #16]
 800a1ec:	9307      	str	r3, [sp, #28]
 800a1ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a1f2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1f4:	4654      	mov	r4, sl
 800a1f6:	2205      	movs	r2, #5
 800a1f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1fc:	484e      	ldr	r0, [pc, #312]	@ (800a338 <_svfiprintf_r+0x1e4>)
 800a1fe:	f7f6 f80f 	bl	8000220 <memchr>
 800a202:	9a04      	ldr	r2, [sp, #16]
 800a204:	b9d8      	cbnz	r0, 800a23e <_svfiprintf_r+0xea>
 800a206:	06d0      	lsls	r0, r2, #27
 800a208:	bf44      	itt	mi
 800a20a:	2320      	movmi	r3, #32
 800a20c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a210:	0711      	lsls	r1, r2, #28
 800a212:	bf44      	itt	mi
 800a214:	232b      	movmi	r3, #43	@ 0x2b
 800a216:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a21a:	f89a 3000 	ldrb.w	r3, [sl]
 800a21e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a220:	d015      	beq.n	800a24e <_svfiprintf_r+0xfa>
 800a222:	9a07      	ldr	r2, [sp, #28]
 800a224:	4654      	mov	r4, sl
 800a226:	2000      	movs	r0, #0
 800a228:	f04f 0c0a 	mov.w	ip, #10
 800a22c:	4621      	mov	r1, r4
 800a22e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a232:	3b30      	subs	r3, #48	@ 0x30
 800a234:	2b09      	cmp	r3, #9
 800a236:	d94b      	bls.n	800a2d0 <_svfiprintf_r+0x17c>
 800a238:	b1b0      	cbz	r0, 800a268 <_svfiprintf_r+0x114>
 800a23a:	9207      	str	r2, [sp, #28]
 800a23c:	e014      	b.n	800a268 <_svfiprintf_r+0x114>
 800a23e:	eba0 0308 	sub.w	r3, r0, r8
 800a242:	fa09 f303 	lsl.w	r3, r9, r3
 800a246:	4313      	orrs	r3, r2
 800a248:	9304      	str	r3, [sp, #16]
 800a24a:	46a2      	mov	sl, r4
 800a24c:	e7d2      	b.n	800a1f4 <_svfiprintf_r+0xa0>
 800a24e:	9b03      	ldr	r3, [sp, #12]
 800a250:	1d19      	adds	r1, r3, #4
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	9103      	str	r1, [sp, #12]
 800a256:	2b00      	cmp	r3, #0
 800a258:	bfbb      	ittet	lt
 800a25a:	425b      	neglt	r3, r3
 800a25c:	f042 0202 	orrlt.w	r2, r2, #2
 800a260:	9307      	strge	r3, [sp, #28]
 800a262:	9307      	strlt	r3, [sp, #28]
 800a264:	bfb8      	it	lt
 800a266:	9204      	strlt	r2, [sp, #16]
 800a268:	7823      	ldrb	r3, [r4, #0]
 800a26a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a26c:	d10a      	bne.n	800a284 <_svfiprintf_r+0x130>
 800a26e:	7863      	ldrb	r3, [r4, #1]
 800a270:	2b2a      	cmp	r3, #42	@ 0x2a
 800a272:	d132      	bne.n	800a2da <_svfiprintf_r+0x186>
 800a274:	9b03      	ldr	r3, [sp, #12]
 800a276:	1d1a      	adds	r2, r3, #4
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	9203      	str	r2, [sp, #12]
 800a27c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a280:	3402      	adds	r4, #2
 800a282:	9305      	str	r3, [sp, #20]
 800a284:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a348 <_svfiprintf_r+0x1f4>
 800a288:	7821      	ldrb	r1, [r4, #0]
 800a28a:	2203      	movs	r2, #3
 800a28c:	4650      	mov	r0, sl
 800a28e:	f7f5 ffc7 	bl	8000220 <memchr>
 800a292:	b138      	cbz	r0, 800a2a4 <_svfiprintf_r+0x150>
 800a294:	9b04      	ldr	r3, [sp, #16]
 800a296:	eba0 000a 	sub.w	r0, r0, sl
 800a29a:	2240      	movs	r2, #64	@ 0x40
 800a29c:	4082      	lsls	r2, r0
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	3401      	adds	r4, #1
 800a2a2:	9304      	str	r3, [sp, #16]
 800a2a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2a8:	4824      	ldr	r0, [pc, #144]	@ (800a33c <_svfiprintf_r+0x1e8>)
 800a2aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2ae:	2206      	movs	r2, #6
 800a2b0:	f7f5 ffb6 	bl	8000220 <memchr>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	d036      	beq.n	800a326 <_svfiprintf_r+0x1d2>
 800a2b8:	4b21      	ldr	r3, [pc, #132]	@ (800a340 <_svfiprintf_r+0x1ec>)
 800a2ba:	bb1b      	cbnz	r3, 800a304 <_svfiprintf_r+0x1b0>
 800a2bc:	9b03      	ldr	r3, [sp, #12]
 800a2be:	3307      	adds	r3, #7
 800a2c0:	f023 0307 	bic.w	r3, r3, #7
 800a2c4:	3308      	adds	r3, #8
 800a2c6:	9303      	str	r3, [sp, #12]
 800a2c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ca:	4433      	add	r3, r6
 800a2cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2ce:	e76a      	b.n	800a1a6 <_svfiprintf_r+0x52>
 800a2d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2d4:	460c      	mov	r4, r1
 800a2d6:	2001      	movs	r0, #1
 800a2d8:	e7a8      	b.n	800a22c <_svfiprintf_r+0xd8>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	3401      	adds	r4, #1
 800a2de:	9305      	str	r3, [sp, #20]
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	f04f 0c0a 	mov.w	ip, #10
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2ec:	3a30      	subs	r2, #48	@ 0x30
 800a2ee:	2a09      	cmp	r2, #9
 800a2f0:	d903      	bls.n	800a2fa <_svfiprintf_r+0x1a6>
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d0c6      	beq.n	800a284 <_svfiprintf_r+0x130>
 800a2f6:	9105      	str	r1, [sp, #20]
 800a2f8:	e7c4      	b.n	800a284 <_svfiprintf_r+0x130>
 800a2fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2fe:	4604      	mov	r4, r0
 800a300:	2301      	movs	r3, #1
 800a302:	e7f0      	b.n	800a2e6 <_svfiprintf_r+0x192>
 800a304:	ab03      	add	r3, sp, #12
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	462a      	mov	r2, r5
 800a30a:	4b0e      	ldr	r3, [pc, #56]	@ (800a344 <_svfiprintf_r+0x1f0>)
 800a30c:	a904      	add	r1, sp, #16
 800a30e:	4638      	mov	r0, r7
 800a310:	f7fd fe8a 	bl	8008028 <_printf_float>
 800a314:	1c42      	adds	r2, r0, #1
 800a316:	4606      	mov	r6, r0
 800a318:	d1d6      	bne.n	800a2c8 <_svfiprintf_r+0x174>
 800a31a:	89ab      	ldrh	r3, [r5, #12]
 800a31c:	065b      	lsls	r3, r3, #25
 800a31e:	f53f af2d 	bmi.w	800a17c <_svfiprintf_r+0x28>
 800a322:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a324:	e72c      	b.n	800a180 <_svfiprintf_r+0x2c>
 800a326:	ab03      	add	r3, sp, #12
 800a328:	9300      	str	r3, [sp, #0]
 800a32a:	462a      	mov	r2, r5
 800a32c:	4b05      	ldr	r3, [pc, #20]	@ (800a344 <_svfiprintf_r+0x1f0>)
 800a32e:	a904      	add	r1, sp, #16
 800a330:	4638      	mov	r0, r7
 800a332:	f7fe f911 	bl	8008558 <_printf_i>
 800a336:	e7ed      	b.n	800a314 <_svfiprintf_r+0x1c0>
 800a338:	0800af58 	.word	0x0800af58
 800a33c:	0800af62 	.word	0x0800af62
 800a340:	08008029 	.word	0x08008029
 800a344:	0800a09d 	.word	0x0800a09d
 800a348:	0800af5e 	.word	0x0800af5e

0800a34c <__sflush_r>:
 800a34c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a354:	0716      	lsls	r6, r2, #28
 800a356:	4605      	mov	r5, r0
 800a358:	460c      	mov	r4, r1
 800a35a:	d454      	bmi.n	800a406 <__sflush_r+0xba>
 800a35c:	684b      	ldr	r3, [r1, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	dc02      	bgt.n	800a368 <__sflush_r+0x1c>
 800a362:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a364:	2b00      	cmp	r3, #0
 800a366:	dd48      	ble.n	800a3fa <__sflush_r+0xae>
 800a368:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a36a:	2e00      	cmp	r6, #0
 800a36c:	d045      	beq.n	800a3fa <__sflush_r+0xae>
 800a36e:	2300      	movs	r3, #0
 800a370:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a374:	682f      	ldr	r7, [r5, #0]
 800a376:	6a21      	ldr	r1, [r4, #32]
 800a378:	602b      	str	r3, [r5, #0]
 800a37a:	d030      	beq.n	800a3de <__sflush_r+0x92>
 800a37c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a37e:	89a3      	ldrh	r3, [r4, #12]
 800a380:	0759      	lsls	r1, r3, #29
 800a382:	d505      	bpl.n	800a390 <__sflush_r+0x44>
 800a384:	6863      	ldr	r3, [r4, #4]
 800a386:	1ad2      	subs	r2, r2, r3
 800a388:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a38a:	b10b      	cbz	r3, 800a390 <__sflush_r+0x44>
 800a38c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a38e:	1ad2      	subs	r2, r2, r3
 800a390:	2300      	movs	r3, #0
 800a392:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a394:	6a21      	ldr	r1, [r4, #32]
 800a396:	4628      	mov	r0, r5
 800a398:	47b0      	blx	r6
 800a39a:	1c43      	adds	r3, r0, #1
 800a39c:	89a3      	ldrh	r3, [r4, #12]
 800a39e:	d106      	bne.n	800a3ae <__sflush_r+0x62>
 800a3a0:	6829      	ldr	r1, [r5, #0]
 800a3a2:	291d      	cmp	r1, #29
 800a3a4:	d82b      	bhi.n	800a3fe <__sflush_r+0xb2>
 800a3a6:	4a2a      	ldr	r2, [pc, #168]	@ (800a450 <__sflush_r+0x104>)
 800a3a8:	410a      	asrs	r2, r1
 800a3aa:	07d6      	lsls	r6, r2, #31
 800a3ac:	d427      	bmi.n	800a3fe <__sflush_r+0xb2>
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	6062      	str	r2, [r4, #4]
 800a3b2:	04d9      	lsls	r1, r3, #19
 800a3b4:	6922      	ldr	r2, [r4, #16]
 800a3b6:	6022      	str	r2, [r4, #0]
 800a3b8:	d504      	bpl.n	800a3c4 <__sflush_r+0x78>
 800a3ba:	1c42      	adds	r2, r0, #1
 800a3bc:	d101      	bne.n	800a3c2 <__sflush_r+0x76>
 800a3be:	682b      	ldr	r3, [r5, #0]
 800a3c0:	b903      	cbnz	r3, 800a3c4 <__sflush_r+0x78>
 800a3c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a3c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3c6:	602f      	str	r7, [r5, #0]
 800a3c8:	b1b9      	cbz	r1, 800a3fa <__sflush_r+0xae>
 800a3ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a3ce:	4299      	cmp	r1, r3
 800a3d0:	d002      	beq.n	800a3d8 <__sflush_r+0x8c>
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	f7ff f9e0 	bl	8009798 <_free_r>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	6363      	str	r3, [r4, #52]	@ 0x34
 800a3dc:	e00d      	b.n	800a3fa <__sflush_r+0xae>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	47b0      	blx	r6
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	1c50      	adds	r0, r2, #1
 800a3e8:	d1c9      	bne.n	800a37e <__sflush_r+0x32>
 800a3ea:	682b      	ldr	r3, [r5, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d0c6      	beq.n	800a37e <__sflush_r+0x32>
 800a3f0:	2b1d      	cmp	r3, #29
 800a3f2:	d001      	beq.n	800a3f8 <__sflush_r+0xac>
 800a3f4:	2b16      	cmp	r3, #22
 800a3f6:	d11e      	bne.n	800a436 <__sflush_r+0xea>
 800a3f8:	602f      	str	r7, [r5, #0]
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	e022      	b.n	800a444 <__sflush_r+0xf8>
 800a3fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a402:	b21b      	sxth	r3, r3
 800a404:	e01b      	b.n	800a43e <__sflush_r+0xf2>
 800a406:	690f      	ldr	r7, [r1, #16]
 800a408:	2f00      	cmp	r7, #0
 800a40a:	d0f6      	beq.n	800a3fa <__sflush_r+0xae>
 800a40c:	0793      	lsls	r3, r2, #30
 800a40e:	680e      	ldr	r6, [r1, #0]
 800a410:	bf08      	it	eq
 800a412:	694b      	ldreq	r3, [r1, #20]
 800a414:	600f      	str	r7, [r1, #0]
 800a416:	bf18      	it	ne
 800a418:	2300      	movne	r3, #0
 800a41a:	eba6 0807 	sub.w	r8, r6, r7
 800a41e:	608b      	str	r3, [r1, #8]
 800a420:	f1b8 0f00 	cmp.w	r8, #0
 800a424:	dde9      	ble.n	800a3fa <__sflush_r+0xae>
 800a426:	6a21      	ldr	r1, [r4, #32]
 800a428:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a42a:	4643      	mov	r3, r8
 800a42c:	463a      	mov	r2, r7
 800a42e:	4628      	mov	r0, r5
 800a430:	47b0      	blx	r6
 800a432:	2800      	cmp	r0, #0
 800a434:	dc08      	bgt.n	800a448 <__sflush_r+0xfc>
 800a436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a43a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a43e:	81a3      	strh	r3, [r4, #12]
 800a440:	f04f 30ff 	mov.w	r0, #4294967295
 800a444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a448:	4407      	add	r7, r0
 800a44a:	eba8 0800 	sub.w	r8, r8, r0
 800a44e:	e7e7      	b.n	800a420 <__sflush_r+0xd4>
 800a450:	dfbffffe 	.word	0xdfbffffe

0800a454 <_fflush_r>:
 800a454:	b538      	push	{r3, r4, r5, lr}
 800a456:	690b      	ldr	r3, [r1, #16]
 800a458:	4605      	mov	r5, r0
 800a45a:	460c      	mov	r4, r1
 800a45c:	b913      	cbnz	r3, 800a464 <_fflush_r+0x10>
 800a45e:	2500      	movs	r5, #0
 800a460:	4628      	mov	r0, r5
 800a462:	bd38      	pop	{r3, r4, r5, pc}
 800a464:	b118      	cbz	r0, 800a46e <_fflush_r+0x1a>
 800a466:	6a03      	ldr	r3, [r0, #32]
 800a468:	b90b      	cbnz	r3, 800a46e <_fflush_r+0x1a>
 800a46a:	f7fe fa21 	bl	80088b0 <__sinit>
 800a46e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d0f3      	beq.n	800a45e <_fflush_r+0xa>
 800a476:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a478:	07d0      	lsls	r0, r2, #31
 800a47a:	d404      	bmi.n	800a486 <_fflush_r+0x32>
 800a47c:	0599      	lsls	r1, r3, #22
 800a47e:	d402      	bmi.n	800a486 <_fflush_r+0x32>
 800a480:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a482:	f7fe fb2c 	bl	8008ade <__retarget_lock_acquire_recursive>
 800a486:	4628      	mov	r0, r5
 800a488:	4621      	mov	r1, r4
 800a48a:	f7ff ff5f 	bl	800a34c <__sflush_r>
 800a48e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a490:	07da      	lsls	r2, r3, #31
 800a492:	4605      	mov	r5, r0
 800a494:	d4e4      	bmi.n	800a460 <_fflush_r+0xc>
 800a496:	89a3      	ldrh	r3, [r4, #12]
 800a498:	059b      	lsls	r3, r3, #22
 800a49a:	d4e1      	bmi.n	800a460 <_fflush_r+0xc>
 800a49c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a49e:	f7fe fb1f 	bl	8008ae0 <__retarget_lock_release_recursive>
 800a4a2:	e7dd      	b.n	800a460 <_fflush_r+0xc>

0800a4a4 <memmove>:
 800a4a4:	4288      	cmp	r0, r1
 800a4a6:	b510      	push	{r4, lr}
 800a4a8:	eb01 0402 	add.w	r4, r1, r2
 800a4ac:	d902      	bls.n	800a4b4 <memmove+0x10>
 800a4ae:	4284      	cmp	r4, r0
 800a4b0:	4623      	mov	r3, r4
 800a4b2:	d807      	bhi.n	800a4c4 <memmove+0x20>
 800a4b4:	1e43      	subs	r3, r0, #1
 800a4b6:	42a1      	cmp	r1, r4
 800a4b8:	d008      	beq.n	800a4cc <memmove+0x28>
 800a4ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4c2:	e7f8      	b.n	800a4b6 <memmove+0x12>
 800a4c4:	4402      	add	r2, r0
 800a4c6:	4601      	mov	r1, r0
 800a4c8:	428a      	cmp	r2, r1
 800a4ca:	d100      	bne.n	800a4ce <memmove+0x2a>
 800a4cc:	bd10      	pop	{r4, pc}
 800a4ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4d6:	e7f7      	b.n	800a4c8 <memmove+0x24>

0800a4d8 <_sbrk_r>:
 800a4d8:	b538      	push	{r3, r4, r5, lr}
 800a4da:	4d06      	ldr	r5, [pc, #24]	@ (800a4f4 <_sbrk_r+0x1c>)
 800a4dc:	2300      	movs	r3, #0
 800a4de:	4604      	mov	r4, r0
 800a4e0:	4608      	mov	r0, r1
 800a4e2:	602b      	str	r3, [r5, #0]
 800a4e4:	f7f8 f92a 	bl	800273c <_sbrk>
 800a4e8:	1c43      	adds	r3, r0, #1
 800a4ea:	d102      	bne.n	800a4f2 <_sbrk_r+0x1a>
 800a4ec:	682b      	ldr	r3, [r5, #0]
 800a4ee:	b103      	cbz	r3, 800a4f2 <_sbrk_r+0x1a>
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	bd38      	pop	{r3, r4, r5, pc}
 800a4f4:	2000056c 	.word	0x2000056c

0800a4f8 <__assert_func>:
 800a4f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4fa:	4614      	mov	r4, r2
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	4b09      	ldr	r3, [pc, #36]	@ (800a524 <__assert_func+0x2c>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4605      	mov	r5, r0
 800a504:	68d8      	ldr	r0, [r3, #12]
 800a506:	b954      	cbnz	r4, 800a51e <__assert_func+0x26>
 800a508:	4b07      	ldr	r3, [pc, #28]	@ (800a528 <__assert_func+0x30>)
 800a50a:	461c      	mov	r4, r3
 800a50c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a510:	9100      	str	r1, [sp, #0]
 800a512:	462b      	mov	r3, r5
 800a514:	4905      	ldr	r1, [pc, #20]	@ (800a52c <__assert_func+0x34>)
 800a516:	f000 f86f 	bl	800a5f8 <fiprintf>
 800a51a:	f000 f87f 	bl	800a61c <abort>
 800a51e:	4b04      	ldr	r3, [pc, #16]	@ (800a530 <__assert_func+0x38>)
 800a520:	e7f4      	b.n	800a50c <__assert_func+0x14>
 800a522:	bf00      	nop
 800a524:	20000018 	.word	0x20000018
 800a528:	0800afae 	.word	0x0800afae
 800a52c:	0800af80 	.word	0x0800af80
 800a530:	0800af73 	.word	0x0800af73

0800a534 <_calloc_r>:
 800a534:	b570      	push	{r4, r5, r6, lr}
 800a536:	fba1 5402 	umull	r5, r4, r1, r2
 800a53a:	b93c      	cbnz	r4, 800a54c <_calloc_r+0x18>
 800a53c:	4629      	mov	r1, r5
 800a53e:	f7ff f99f 	bl	8009880 <_malloc_r>
 800a542:	4606      	mov	r6, r0
 800a544:	b928      	cbnz	r0, 800a552 <_calloc_r+0x1e>
 800a546:	2600      	movs	r6, #0
 800a548:	4630      	mov	r0, r6
 800a54a:	bd70      	pop	{r4, r5, r6, pc}
 800a54c:	220c      	movs	r2, #12
 800a54e:	6002      	str	r2, [r0, #0]
 800a550:	e7f9      	b.n	800a546 <_calloc_r+0x12>
 800a552:	462a      	mov	r2, r5
 800a554:	4621      	mov	r1, r4
 800a556:	f7fe fa44 	bl	80089e2 <memset>
 800a55a:	e7f5      	b.n	800a548 <_calloc_r+0x14>

0800a55c <__ascii_mbtowc>:
 800a55c:	b082      	sub	sp, #8
 800a55e:	b901      	cbnz	r1, 800a562 <__ascii_mbtowc+0x6>
 800a560:	a901      	add	r1, sp, #4
 800a562:	b142      	cbz	r2, 800a576 <__ascii_mbtowc+0x1a>
 800a564:	b14b      	cbz	r3, 800a57a <__ascii_mbtowc+0x1e>
 800a566:	7813      	ldrb	r3, [r2, #0]
 800a568:	600b      	str	r3, [r1, #0]
 800a56a:	7812      	ldrb	r2, [r2, #0]
 800a56c:	1e10      	subs	r0, r2, #0
 800a56e:	bf18      	it	ne
 800a570:	2001      	movne	r0, #1
 800a572:	b002      	add	sp, #8
 800a574:	4770      	bx	lr
 800a576:	4610      	mov	r0, r2
 800a578:	e7fb      	b.n	800a572 <__ascii_mbtowc+0x16>
 800a57a:	f06f 0001 	mvn.w	r0, #1
 800a57e:	e7f8      	b.n	800a572 <__ascii_mbtowc+0x16>

0800a580 <_realloc_r>:
 800a580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a584:	4680      	mov	r8, r0
 800a586:	4615      	mov	r5, r2
 800a588:	460c      	mov	r4, r1
 800a58a:	b921      	cbnz	r1, 800a596 <_realloc_r+0x16>
 800a58c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a590:	4611      	mov	r1, r2
 800a592:	f7ff b975 	b.w	8009880 <_malloc_r>
 800a596:	b92a      	cbnz	r2, 800a5a4 <_realloc_r+0x24>
 800a598:	f7ff f8fe 	bl	8009798 <_free_r>
 800a59c:	2400      	movs	r4, #0
 800a59e:	4620      	mov	r0, r4
 800a5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a4:	f000 f841 	bl	800a62a <_malloc_usable_size_r>
 800a5a8:	4285      	cmp	r5, r0
 800a5aa:	4606      	mov	r6, r0
 800a5ac:	d802      	bhi.n	800a5b4 <_realloc_r+0x34>
 800a5ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a5b2:	d8f4      	bhi.n	800a59e <_realloc_r+0x1e>
 800a5b4:	4629      	mov	r1, r5
 800a5b6:	4640      	mov	r0, r8
 800a5b8:	f7ff f962 	bl	8009880 <_malloc_r>
 800a5bc:	4607      	mov	r7, r0
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d0ec      	beq.n	800a59c <_realloc_r+0x1c>
 800a5c2:	42b5      	cmp	r5, r6
 800a5c4:	462a      	mov	r2, r5
 800a5c6:	4621      	mov	r1, r4
 800a5c8:	bf28      	it	cs
 800a5ca:	4632      	movcs	r2, r6
 800a5cc:	f7fe fa89 	bl	8008ae2 <memcpy>
 800a5d0:	4621      	mov	r1, r4
 800a5d2:	4640      	mov	r0, r8
 800a5d4:	f7ff f8e0 	bl	8009798 <_free_r>
 800a5d8:	463c      	mov	r4, r7
 800a5da:	e7e0      	b.n	800a59e <_realloc_r+0x1e>

0800a5dc <__ascii_wctomb>:
 800a5dc:	4603      	mov	r3, r0
 800a5de:	4608      	mov	r0, r1
 800a5e0:	b141      	cbz	r1, 800a5f4 <__ascii_wctomb+0x18>
 800a5e2:	2aff      	cmp	r2, #255	@ 0xff
 800a5e4:	d904      	bls.n	800a5f0 <__ascii_wctomb+0x14>
 800a5e6:	228a      	movs	r2, #138	@ 0x8a
 800a5e8:	601a      	str	r2, [r3, #0]
 800a5ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ee:	4770      	bx	lr
 800a5f0:	700a      	strb	r2, [r1, #0]
 800a5f2:	2001      	movs	r0, #1
 800a5f4:	4770      	bx	lr
	...

0800a5f8 <fiprintf>:
 800a5f8:	b40e      	push	{r1, r2, r3}
 800a5fa:	b503      	push	{r0, r1, lr}
 800a5fc:	4601      	mov	r1, r0
 800a5fe:	ab03      	add	r3, sp, #12
 800a600:	4805      	ldr	r0, [pc, #20]	@ (800a618 <fiprintf+0x20>)
 800a602:	f853 2b04 	ldr.w	r2, [r3], #4
 800a606:	6800      	ldr	r0, [r0, #0]
 800a608:	9301      	str	r3, [sp, #4]
 800a60a:	f000 f83f 	bl	800a68c <_vfiprintf_r>
 800a60e:	b002      	add	sp, #8
 800a610:	f85d eb04 	ldr.w	lr, [sp], #4
 800a614:	b003      	add	sp, #12
 800a616:	4770      	bx	lr
 800a618:	20000018 	.word	0x20000018

0800a61c <abort>:
 800a61c:	b508      	push	{r3, lr}
 800a61e:	2006      	movs	r0, #6
 800a620:	f000 fa08 	bl	800aa34 <raise>
 800a624:	2001      	movs	r0, #1
 800a626:	f7f8 f810 	bl	800264a <_exit>

0800a62a <_malloc_usable_size_r>:
 800a62a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a62e:	1f18      	subs	r0, r3, #4
 800a630:	2b00      	cmp	r3, #0
 800a632:	bfbc      	itt	lt
 800a634:	580b      	ldrlt	r3, [r1, r0]
 800a636:	18c0      	addlt	r0, r0, r3
 800a638:	4770      	bx	lr

0800a63a <__sfputc_r>:
 800a63a:	6893      	ldr	r3, [r2, #8]
 800a63c:	3b01      	subs	r3, #1
 800a63e:	2b00      	cmp	r3, #0
 800a640:	b410      	push	{r4}
 800a642:	6093      	str	r3, [r2, #8]
 800a644:	da08      	bge.n	800a658 <__sfputc_r+0x1e>
 800a646:	6994      	ldr	r4, [r2, #24]
 800a648:	42a3      	cmp	r3, r4
 800a64a:	db01      	blt.n	800a650 <__sfputc_r+0x16>
 800a64c:	290a      	cmp	r1, #10
 800a64e:	d103      	bne.n	800a658 <__sfputc_r+0x1e>
 800a650:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a654:	f000 b932 	b.w	800a8bc <__swbuf_r>
 800a658:	6813      	ldr	r3, [r2, #0]
 800a65a:	1c58      	adds	r0, r3, #1
 800a65c:	6010      	str	r0, [r2, #0]
 800a65e:	7019      	strb	r1, [r3, #0]
 800a660:	4608      	mov	r0, r1
 800a662:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <__sfputs_r>:
 800a668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a66a:	4606      	mov	r6, r0
 800a66c:	460f      	mov	r7, r1
 800a66e:	4614      	mov	r4, r2
 800a670:	18d5      	adds	r5, r2, r3
 800a672:	42ac      	cmp	r4, r5
 800a674:	d101      	bne.n	800a67a <__sfputs_r+0x12>
 800a676:	2000      	movs	r0, #0
 800a678:	e007      	b.n	800a68a <__sfputs_r+0x22>
 800a67a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a67e:	463a      	mov	r2, r7
 800a680:	4630      	mov	r0, r6
 800a682:	f7ff ffda 	bl	800a63a <__sfputc_r>
 800a686:	1c43      	adds	r3, r0, #1
 800a688:	d1f3      	bne.n	800a672 <__sfputs_r+0xa>
 800a68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a68c <_vfiprintf_r>:
 800a68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a690:	460d      	mov	r5, r1
 800a692:	b09d      	sub	sp, #116	@ 0x74
 800a694:	4614      	mov	r4, r2
 800a696:	4698      	mov	r8, r3
 800a698:	4606      	mov	r6, r0
 800a69a:	b118      	cbz	r0, 800a6a4 <_vfiprintf_r+0x18>
 800a69c:	6a03      	ldr	r3, [r0, #32]
 800a69e:	b90b      	cbnz	r3, 800a6a4 <_vfiprintf_r+0x18>
 800a6a0:	f7fe f906 	bl	80088b0 <__sinit>
 800a6a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6a6:	07d9      	lsls	r1, r3, #31
 800a6a8:	d405      	bmi.n	800a6b6 <_vfiprintf_r+0x2a>
 800a6aa:	89ab      	ldrh	r3, [r5, #12]
 800a6ac:	059a      	lsls	r2, r3, #22
 800a6ae:	d402      	bmi.n	800a6b6 <_vfiprintf_r+0x2a>
 800a6b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6b2:	f7fe fa14 	bl	8008ade <__retarget_lock_acquire_recursive>
 800a6b6:	89ab      	ldrh	r3, [r5, #12]
 800a6b8:	071b      	lsls	r3, r3, #28
 800a6ba:	d501      	bpl.n	800a6c0 <_vfiprintf_r+0x34>
 800a6bc:	692b      	ldr	r3, [r5, #16]
 800a6be:	b99b      	cbnz	r3, 800a6e8 <_vfiprintf_r+0x5c>
 800a6c0:	4629      	mov	r1, r5
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	f000 f938 	bl	800a938 <__swsetup_r>
 800a6c8:	b170      	cbz	r0, 800a6e8 <_vfiprintf_r+0x5c>
 800a6ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6cc:	07dc      	lsls	r4, r3, #31
 800a6ce:	d504      	bpl.n	800a6da <_vfiprintf_r+0x4e>
 800a6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d4:	b01d      	add	sp, #116	@ 0x74
 800a6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6da:	89ab      	ldrh	r3, [r5, #12]
 800a6dc:	0598      	lsls	r0, r3, #22
 800a6de:	d4f7      	bmi.n	800a6d0 <_vfiprintf_r+0x44>
 800a6e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6e2:	f7fe f9fd 	bl	8008ae0 <__retarget_lock_release_recursive>
 800a6e6:	e7f3      	b.n	800a6d0 <_vfiprintf_r+0x44>
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6ec:	2320      	movs	r3, #32
 800a6ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a6f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6f6:	2330      	movs	r3, #48	@ 0x30
 800a6f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a8a8 <_vfiprintf_r+0x21c>
 800a6fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a700:	f04f 0901 	mov.w	r9, #1
 800a704:	4623      	mov	r3, r4
 800a706:	469a      	mov	sl, r3
 800a708:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a70c:	b10a      	cbz	r2, 800a712 <_vfiprintf_r+0x86>
 800a70e:	2a25      	cmp	r2, #37	@ 0x25
 800a710:	d1f9      	bne.n	800a706 <_vfiprintf_r+0x7a>
 800a712:	ebba 0b04 	subs.w	fp, sl, r4
 800a716:	d00b      	beq.n	800a730 <_vfiprintf_r+0xa4>
 800a718:	465b      	mov	r3, fp
 800a71a:	4622      	mov	r2, r4
 800a71c:	4629      	mov	r1, r5
 800a71e:	4630      	mov	r0, r6
 800a720:	f7ff ffa2 	bl	800a668 <__sfputs_r>
 800a724:	3001      	adds	r0, #1
 800a726:	f000 80a7 	beq.w	800a878 <_vfiprintf_r+0x1ec>
 800a72a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a72c:	445a      	add	r2, fp
 800a72e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a730:	f89a 3000 	ldrb.w	r3, [sl]
 800a734:	2b00      	cmp	r3, #0
 800a736:	f000 809f 	beq.w	800a878 <_vfiprintf_r+0x1ec>
 800a73a:	2300      	movs	r3, #0
 800a73c:	f04f 32ff 	mov.w	r2, #4294967295
 800a740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a744:	f10a 0a01 	add.w	sl, sl, #1
 800a748:	9304      	str	r3, [sp, #16]
 800a74a:	9307      	str	r3, [sp, #28]
 800a74c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a750:	931a      	str	r3, [sp, #104]	@ 0x68
 800a752:	4654      	mov	r4, sl
 800a754:	2205      	movs	r2, #5
 800a756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a75a:	4853      	ldr	r0, [pc, #332]	@ (800a8a8 <_vfiprintf_r+0x21c>)
 800a75c:	f7f5 fd60 	bl	8000220 <memchr>
 800a760:	9a04      	ldr	r2, [sp, #16]
 800a762:	b9d8      	cbnz	r0, 800a79c <_vfiprintf_r+0x110>
 800a764:	06d1      	lsls	r1, r2, #27
 800a766:	bf44      	itt	mi
 800a768:	2320      	movmi	r3, #32
 800a76a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a76e:	0713      	lsls	r3, r2, #28
 800a770:	bf44      	itt	mi
 800a772:	232b      	movmi	r3, #43	@ 0x2b
 800a774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a778:	f89a 3000 	ldrb.w	r3, [sl]
 800a77c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a77e:	d015      	beq.n	800a7ac <_vfiprintf_r+0x120>
 800a780:	9a07      	ldr	r2, [sp, #28]
 800a782:	4654      	mov	r4, sl
 800a784:	2000      	movs	r0, #0
 800a786:	f04f 0c0a 	mov.w	ip, #10
 800a78a:	4621      	mov	r1, r4
 800a78c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a790:	3b30      	subs	r3, #48	@ 0x30
 800a792:	2b09      	cmp	r3, #9
 800a794:	d94b      	bls.n	800a82e <_vfiprintf_r+0x1a2>
 800a796:	b1b0      	cbz	r0, 800a7c6 <_vfiprintf_r+0x13a>
 800a798:	9207      	str	r2, [sp, #28]
 800a79a:	e014      	b.n	800a7c6 <_vfiprintf_r+0x13a>
 800a79c:	eba0 0308 	sub.w	r3, r0, r8
 800a7a0:	fa09 f303 	lsl.w	r3, r9, r3
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	9304      	str	r3, [sp, #16]
 800a7a8:	46a2      	mov	sl, r4
 800a7aa:	e7d2      	b.n	800a752 <_vfiprintf_r+0xc6>
 800a7ac:	9b03      	ldr	r3, [sp, #12]
 800a7ae:	1d19      	adds	r1, r3, #4
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	9103      	str	r1, [sp, #12]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	bfbb      	ittet	lt
 800a7b8:	425b      	neglt	r3, r3
 800a7ba:	f042 0202 	orrlt.w	r2, r2, #2
 800a7be:	9307      	strge	r3, [sp, #28]
 800a7c0:	9307      	strlt	r3, [sp, #28]
 800a7c2:	bfb8      	it	lt
 800a7c4:	9204      	strlt	r2, [sp, #16]
 800a7c6:	7823      	ldrb	r3, [r4, #0]
 800a7c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a7ca:	d10a      	bne.n	800a7e2 <_vfiprintf_r+0x156>
 800a7cc:	7863      	ldrb	r3, [r4, #1]
 800a7ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7d0:	d132      	bne.n	800a838 <_vfiprintf_r+0x1ac>
 800a7d2:	9b03      	ldr	r3, [sp, #12]
 800a7d4:	1d1a      	adds	r2, r3, #4
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	9203      	str	r2, [sp, #12]
 800a7da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a7de:	3402      	adds	r4, #2
 800a7e0:	9305      	str	r3, [sp, #20]
 800a7e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a8b8 <_vfiprintf_r+0x22c>
 800a7e6:	7821      	ldrb	r1, [r4, #0]
 800a7e8:	2203      	movs	r2, #3
 800a7ea:	4650      	mov	r0, sl
 800a7ec:	f7f5 fd18 	bl	8000220 <memchr>
 800a7f0:	b138      	cbz	r0, 800a802 <_vfiprintf_r+0x176>
 800a7f2:	9b04      	ldr	r3, [sp, #16]
 800a7f4:	eba0 000a 	sub.w	r0, r0, sl
 800a7f8:	2240      	movs	r2, #64	@ 0x40
 800a7fa:	4082      	lsls	r2, r0
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	3401      	adds	r4, #1
 800a800:	9304      	str	r3, [sp, #16]
 800a802:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a806:	4829      	ldr	r0, [pc, #164]	@ (800a8ac <_vfiprintf_r+0x220>)
 800a808:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a80c:	2206      	movs	r2, #6
 800a80e:	f7f5 fd07 	bl	8000220 <memchr>
 800a812:	2800      	cmp	r0, #0
 800a814:	d03f      	beq.n	800a896 <_vfiprintf_r+0x20a>
 800a816:	4b26      	ldr	r3, [pc, #152]	@ (800a8b0 <_vfiprintf_r+0x224>)
 800a818:	bb1b      	cbnz	r3, 800a862 <_vfiprintf_r+0x1d6>
 800a81a:	9b03      	ldr	r3, [sp, #12]
 800a81c:	3307      	adds	r3, #7
 800a81e:	f023 0307 	bic.w	r3, r3, #7
 800a822:	3308      	adds	r3, #8
 800a824:	9303      	str	r3, [sp, #12]
 800a826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a828:	443b      	add	r3, r7
 800a82a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a82c:	e76a      	b.n	800a704 <_vfiprintf_r+0x78>
 800a82e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a832:	460c      	mov	r4, r1
 800a834:	2001      	movs	r0, #1
 800a836:	e7a8      	b.n	800a78a <_vfiprintf_r+0xfe>
 800a838:	2300      	movs	r3, #0
 800a83a:	3401      	adds	r4, #1
 800a83c:	9305      	str	r3, [sp, #20]
 800a83e:	4619      	mov	r1, r3
 800a840:	f04f 0c0a 	mov.w	ip, #10
 800a844:	4620      	mov	r0, r4
 800a846:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a84a:	3a30      	subs	r2, #48	@ 0x30
 800a84c:	2a09      	cmp	r2, #9
 800a84e:	d903      	bls.n	800a858 <_vfiprintf_r+0x1cc>
 800a850:	2b00      	cmp	r3, #0
 800a852:	d0c6      	beq.n	800a7e2 <_vfiprintf_r+0x156>
 800a854:	9105      	str	r1, [sp, #20]
 800a856:	e7c4      	b.n	800a7e2 <_vfiprintf_r+0x156>
 800a858:	fb0c 2101 	mla	r1, ip, r1, r2
 800a85c:	4604      	mov	r4, r0
 800a85e:	2301      	movs	r3, #1
 800a860:	e7f0      	b.n	800a844 <_vfiprintf_r+0x1b8>
 800a862:	ab03      	add	r3, sp, #12
 800a864:	9300      	str	r3, [sp, #0]
 800a866:	462a      	mov	r2, r5
 800a868:	4b12      	ldr	r3, [pc, #72]	@ (800a8b4 <_vfiprintf_r+0x228>)
 800a86a:	a904      	add	r1, sp, #16
 800a86c:	4630      	mov	r0, r6
 800a86e:	f7fd fbdb 	bl	8008028 <_printf_float>
 800a872:	4607      	mov	r7, r0
 800a874:	1c78      	adds	r0, r7, #1
 800a876:	d1d6      	bne.n	800a826 <_vfiprintf_r+0x19a>
 800a878:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a87a:	07d9      	lsls	r1, r3, #31
 800a87c:	d405      	bmi.n	800a88a <_vfiprintf_r+0x1fe>
 800a87e:	89ab      	ldrh	r3, [r5, #12]
 800a880:	059a      	lsls	r2, r3, #22
 800a882:	d402      	bmi.n	800a88a <_vfiprintf_r+0x1fe>
 800a884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a886:	f7fe f92b 	bl	8008ae0 <__retarget_lock_release_recursive>
 800a88a:	89ab      	ldrh	r3, [r5, #12]
 800a88c:	065b      	lsls	r3, r3, #25
 800a88e:	f53f af1f 	bmi.w	800a6d0 <_vfiprintf_r+0x44>
 800a892:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a894:	e71e      	b.n	800a6d4 <_vfiprintf_r+0x48>
 800a896:	ab03      	add	r3, sp, #12
 800a898:	9300      	str	r3, [sp, #0]
 800a89a:	462a      	mov	r2, r5
 800a89c:	4b05      	ldr	r3, [pc, #20]	@ (800a8b4 <_vfiprintf_r+0x228>)
 800a89e:	a904      	add	r1, sp, #16
 800a8a0:	4630      	mov	r0, r6
 800a8a2:	f7fd fe59 	bl	8008558 <_printf_i>
 800a8a6:	e7e4      	b.n	800a872 <_vfiprintf_r+0x1e6>
 800a8a8:	0800af58 	.word	0x0800af58
 800a8ac:	0800af62 	.word	0x0800af62
 800a8b0:	08008029 	.word	0x08008029
 800a8b4:	0800a669 	.word	0x0800a669
 800a8b8:	0800af5e 	.word	0x0800af5e

0800a8bc <__swbuf_r>:
 800a8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8be:	460e      	mov	r6, r1
 800a8c0:	4614      	mov	r4, r2
 800a8c2:	4605      	mov	r5, r0
 800a8c4:	b118      	cbz	r0, 800a8ce <__swbuf_r+0x12>
 800a8c6:	6a03      	ldr	r3, [r0, #32]
 800a8c8:	b90b      	cbnz	r3, 800a8ce <__swbuf_r+0x12>
 800a8ca:	f7fd fff1 	bl	80088b0 <__sinit>
 800a8ce:	69a3      	ldr	r3, [r4, #24]
 800a8d0:	60a3      	str	r3, [r4, #8]
 800a8d2:	89a3      	ldrh	r3, [r4, #12]
 800a8d4:	071a      	lsls	r2, r3, #28
 800a8d6:	d501      	bpl.n	800a8dc <__swbuf_r+0x20>
 800a8d8:	6923      	ldr	r3, [r4, #16]
 800a8da:	b943      	cbnz	r3, 800a8ee <__swbuf_r+0x32>
 800a8dc:	4621      	mov	r1, r4
 800a8de:	4628      	mov	r0, r5
 800a8e0:	f000 f82a 	bl	800a938 <__swsetup_r>
 800a8e4:	b118      	cbz	r0, 800a8ee <__swbuf_r+0x32>
 800a8e6:	f04f 37ff 	mov.w	r7, #4294967295
 800a8ea:	4638      	mov	r0, r7
 800a8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8ee:	6823      	ldr	r3, [r4, #0]
 800a8f0:	6922      	ldr	r2, [r4, #16]
 800a8f2:	1a98      	subs	r0, r3, r2
 800a8f4:	6963      	ldr	r3, [r4, #20]
 800a8f6:	b2f6      	uxtb	r6, r6
 800a8f8:	4283      	cmp	r3, r0
 800a8fa:	4637      	mov	r7, r6
 800a8fc:	dc05      	bgt.n	800a90a <__swbuf_r+0x4e>
 800a8fe:	4621      	mov	r1, r4
 800a900:	4628      	mov	r0, r5
 800a902:	f7ff fda7 	bl	800a454 <_fflush_r>
 800a906:	2800      	cmp	r0, #0
 800a908:	d1ed      	bne.n	800a8e6 <__swbuf_r+0x2a>
 800a90a:	68a3      	ldr	r3, [r4, #8]
 800a90c:	3b01      	subs	r3, #1
 800a90e:	60a3      	str	r3, [r4, #8]
 800a910:	6823      	ldr	r3, [r4, #0]
 800a912:	1c5a      	adds	r2, r3, #1
 800a914:	6022      	str	r2, [r4, #0]
 800a916:	701e      	strb	r6, [r3, #0]
 800a918:	6962      	ldr	r2, [r4, #20]
 800a91a:	1c43      	adds	r3, r0, #1
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d004      	beq.n	800a92a <__swbuf_r+0x6e>
 800a920:	89a3      	ldrh	r3, [r4, #12]
 800a922:	07db      	lsls	r3, r3, #31
 800a924:	d5e1      	bpl.n	800a8ea <__swbuf_r+0x2e>
 800a926:	2e0a      	cmp	r6, #10
 800a928:	d1df      	bne.n	800a8ea <__swbuf_r+0x2e>
 800a92a:	4621      	mov	r1, r4
 800a92c:	4628      	mov	r0, r5
 800a92e:	f7ff fd91 	bl	800a454 <_fflush_r>
 800a932:	2800      	cmp	r0, #0
 800a934:	d0d9      	beq.n	800a8ea <__swbuf_r+0x2e>
 800a936:	e7d6      	b.n	800a8e6 <__swbuf_r+0x2a>

0800a938 <__swsetup_r>:
 800a938:	b538      	push	{r3, r4, r5, lr}
 800a93a:	4b29      	ldr	r3, [pc, #164]	@ (800a9e0 <__swsetup_r+0xa8>)
 800a93c:	4605      	mov	r5, r0
 800a93e:	6818      	ldr	r0, [r3, #0]
 800a940:	460c      	mov	r4, r1
 800a942:	b118      	cbz	r0, 800a94c <__swsetup_r+0x14>
 800a944:	6a03      	ldr	r3, [r0, #32]
 800a946:	b90b      	cbnz	r3, 800a94c <__swsetup_r+0x14>
 800a948:	f7fd ffb2 	bl	80088b0 <__sinit>
 800a94c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a950:	0719      	lsls	r1, r3, #28
 800a952:	d422      	bmi.n	800a99a <__swsetup_r+0x62>
 800a954:	06da      	lsls	r2, r3, #27
 800a956:	d407      	bmi.n	800a968 <__swsetup_r+0x30>
 800a958:	2209      	movs	r2, #9
 800a95a:	602a      	str	r2, [r5, #0]
 800a95c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a960:	81a3      	strh	r3, [r4, #12]
 800a962:	f04f 30ff 	mov.w	r0, #4294967295
 800a966:	e033      	b.n	800a9d0 <__swsetup_r+0x98>
 800a968:	0758      	lsls	r0, r3, #29
 800a96a:	d512      	bpl.n	800a992 <__swsetup_r+0x5a>
 800a96c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a96e:	b141      	cbz	r1, 800a982 <__swsetup_r+0x4a>
 800a970:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a974:	4299      	cmp	r1, r3
 800a976:	d002      	beq.n	800a97e <__swsetup_r+0x46>
 800a978:	4628      	mov	r0, r5
 800a97a:	f7fe ff0d 	bl	8009798 <_free_r>
 800a97e:	2300      	movs	r3, #0
 800a980:	6363      	str	r3, [r4, #52]	@ 0x34
 800a982:	89a3      	ldrh	r3, [r4, #12]
 800a984:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a988:	81a3      	strh	r3, [r4, #12]
 800a98a:	2300      	movs	r3, #0
 800a98c:	6063      	str	r3, [r4, #4]
 800a98e:	6923      	ldr	r3, [r4, #16]
 800a990:	6023      	str	r3, [r4, #0]
 800a992:	89a3      	ldrh	r3, [r4, #12]
 800a994:	f043 0308 	orr.w	r3, r3, #8
 800a998:	81a3      	strh	r3, [r4, #12]
 800a99a:	6923      	ldr	r3, [r4, #16]
 800a99c:	b94b      	cbnz	r3, 800a9b2 <__swsetup_r+0x7a>
 800a99e:	89a3      	ldrh	r3, [r4, #12]
 800a9a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a9a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9a8:	d003      	beq.n	800a9b2 <__swsetup_r+0x7a>
 800a9aa:	4621      	mov	r1, r4
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	f000 f883 	bl	800aab8 <__smakebuf_r>
 800a9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9b6:	f013 0201 	ands.w	r2, r3, #1
 800a9ba:	d00a      	beq.n	800a9d2 <__swsetup_r+0x9a>
 800a9bc:	2200      	movs	r2, #0
 800a9be:	60a2      	str	r2, [r4, #8]
 800a9c0:	6962      	ldr	r2, [r4, #20]
 800a9c2:	4252      	negs	r2, r2
 800a9c4:	61a2      	str	r2, [r4, #24]
 800a9c6:	6922      	ldr	r2, [r4, #16]
 800a9c8:	b942      	cbnz	r2, 800a9dc <__swsetup_r+0xa4>
 800a9ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a9ce:	d1c5      	bne.n	800a95c <__swsetup_r+0x24>
 800a9d0:	bd38      	pop	{r3, r4, r5, pc}
 800a9d2:	0799      	lsls	r1, r3, #30
 800a9d4:	bf58      	it	pl
 800a9d6:	6962      	ldrpl	r2, [r4, #20]
 800a9d8:	60a2      	str	r2, [r4, #8]
 800a9da:	e7f4      	b.n	800a9c6 <__swsetup_r+0x8e>
 800a9dc:	2000      	movs	r0, #0
 800a9de:	e7f7      	b.n	800a9d0 <__swsetup_r+0x98>
 800a9e0:	20000018 	.word	0x20000018

0800a9e4 <_raise_r>:
 800a9e4:	291f      	cmp	r1, #31
 800a9e6:	b538      	push	{r3, r4, r5, lr}
 800a9e8:	4605      	mov	r5, r0
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	d904      	bls.n	800a9f8 <_raise_r+0x14>
 800a9ee:	2316      	movs	r3, #22
 800a9f0:	6003      	str	r3, [r0, #0]
 800a9f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f6:	bd38      	pop	{r3, r4, r5, pc}
 800a9f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a9fa:	b112      	cbz	r2, 800aa02 <_raise_r+0x1e>
 800a9fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa00:	b94b      	cbnz	r3, 800aa16 <_raise_r+0x32>
 800aa02:	4628      	mov	r0, r5
 800aa04:	f000 f830 	bl	800aa68 <_getpid_r>
 800aa08:	4622      	mov	r2, r4
 800aa0a:	4601      	mov	r1, r0
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa12:	f000 b817 	b.w	800aa44 <_kill_r>
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d00a      	beq.n	800aa30 <_raise_r+0x4c>
 800aa1a:	1c59      	adds	r1, r3, #1
 800aa1c:	d103      	bne.n	800aa26 <_raise_r+0x42>
 800aa1e:	2316      	movs	r3, #22
 800aa20:	6003      	str	r3, [r0, #0]
 800aa22:	2001      	movs	r0, #1
 800aa24:	e7e7      	b.n	800a9f6 <_raise_r+0x12>
 800aa26:	2100      	movs	r1, #0
 800aa28:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	4798      	blx	r3
 800aa30:	2000      	movs	r0, #0
 800aa32:	e7e0      	b.n	800a9f6 <_raise_r+0x12>

0800aa34 <raise>:
 800aa34:	4b02      	ldr	r3, [pc, #8]	@ (800aa40 <raise+0xc>)
 800aa36:	4601      	mov	r1, r0
 800aa38:	6818      	ldr	r0, [r3, #0]
 800aa3a:	f7ff bfd3 	b.w	800a9e4 <_raise_r>
 800aa3e:	bf00      	nop
 800aa40:	20000018 	.word	0x20000018

0800aa44 <_kill_r>:
 800aa44:	b538      	push	{r3, r4, r5, lr}
 800aa46:	4d07      	ldr	r5, [pc, #28]	@ (800aa64 <_kill_r+0x20>)
 800aa48:	2300      	movs	r3, #0
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	4608      	mov	r0, r1
 800aa4e:	4611      	mov	r1, r2
 800aa50:	602b      	str	r3, [r5, #0]
 800aa52:	f7f7 fdea 	bl	800262a <_kill>
 800aa56:	1c43      	adds	r3, r0, #1
 800aa58:	d102      	bne.n	800aa60 <_kill_r+0x1c>
 800aa5a:	682b      	ldr	r3, [r5, #0]
 800aa5c:	b103      	cbz	r3, 800aa60 <_kill_r+0x1c>
 800aa5e:	6023      	str	r3, [r4, #0]
 800aa60:	bd38      	pop	{r3, r4, r5, pc}
 800aa62:	bf00      	nop
 800aa64:	2000056c 	.word	0x2000056c

0800aa68 <_getpid_r>:
 800aa68:	f7f7 bdd7 	b.w	800261a <_getpid>

0800aa6c <__swhatbuf_r>:
 800aa6c:	b570      	push	{r4, r5, r6, lr}
 800aa6e:	460c      	mov	r4, r1
 800aa70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa74:	2900      	cmp	r1, #0
 800aa76:	b096      	sub	sp, #88	@ 0x58
 800aa78:	4615      	mov	r5, r2
 800aa7a:	461e      	mov	r6, r3
 800aa7c:	da0d      	bge.n	800aa9a <__swhatbuf_r+0x2e>
 800aa7e:	89a3      	ldrh	r3, [r4, #12]
 800aa80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aa84:	f04f 0100 	mov.w	r1, #0
 800aa88:	bf14      	ite	ne
 800aa8a:	2340      	movne	r3, #64	@ 0x40
 800aa8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aa90:	2000      	movs	r0, #0
 800aa92:	6031      	str	r1, [r6, #0]
 800aa94:	602b      	str	r3, [r5, #0]
 800aa96:	b016      	add	sp, #88	@ 0x58
 800aa98:	bd70      	pop	{r4, r5, r6, pc}
 800aa9a:	466a      	mov	r2, sp
 800aa9c:	f000 f848 	bl	800ab30 <_fstat_r>
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	dbec      	blt.n	800aa7e <__swhatbuf_r+0x12>
 800aaa4:	9901      	ldr	r1, [sp, #4]
 800aaa6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aaaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aaae:	4259      	negs	r1, r3
 800aab0:	4159      	adcs	r1, r3
 800aab2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aab6:	e7eb      	b.n	800aa90 <__swhatbuf_r+0x24>

0800aab8 <__smakebuf_r>:
 800aab8:	898b      	ldrh	r3, [r1, #12]
 800aaba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aabc:	079d      	lsls	r5, r3, #30
 800aabe:	4606      	mov	r6, r0
 800aac0:	460c      	mov	r4, r1
 800aac2:	d507      	bpl.n	800aad4 <__smakebuf_r+0x1c>
 800aac4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aac8:	6023      	str	r3, [r4, #0]
 800aaca:	6123      	str	r3, [r4, #16]
 800aacc:	2301      	movs	r3, #1
 800aace:	6163      	str	r3, [r4, #20]
 800aad0:	b003      	add	sp, #12
 800aad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aad4:	ab01      	add	r3, sp, #4
 800aad6:	466a      	mov	r2, sp
 800aad8:	f7ff ffc8 	bl	800aa6c <__swhatbuf_r>
 800aadc:	9f00      	ldr	r7, [sp, #0]
 800aade:	4605      	mov	r5, r0
 800aae0:	4639      	mov	r1, r7
 800aae2:	4630      	mov	r0, r6
 800aae4:	f7fe fecc 	bl	8009880 <_malloc_r>
 800aae8:	b948      	cbnz	r0, 800aafe <__smakebuf_r+0x46>
 800aaea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaee:	059a      	lsls	r2, r3, #22
 800aaf0:	d4ee      	bmi.n	800aad0 <__smakebuf_r+0x18>
 800aaf2:	f023 0303 	bic.w	r3, r3, #3
 800aaf6:	f043 0302 	orr.w	r3, r3, #2
 800aafa:	81a3      	strh	r3, [r4, #12]
 800aafc:	e7e2      	b.n	800aac4 <__smakebuf_r+0xc>
 800aafe:	89a3      	ldrh	r3, [r4, #12]
 800ab00:	6020      	str	r0, [r4, #0]
 800ab02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab06:	81a3      	strh	r3, [r4, #12]
 800ab08:	9b01      	ldr	r3, [sp, #4]
 800ab0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ab0e:	b15b      	cbz	r3, 800ab28 <__smakebuf_r+0x70>
 800ab10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab14:	4630      	mov	r0, r6
 800ab16:	f000 f81d 	bl	800ab54 <_isatty_r>
 800ab1a:	b128      	cbz	r0, 800ab28 <__smakebuf_r+0x70>
 800ab1c:	89a3      	ldrh	r3, [r4, #12]
 800ab1e:	f023 0303 	bic.w	r3, r3, #3
 800ab22:	f043 0301 	orr.w	r3, r3, #1
 800ab26:	81a3      	strh	r3, [r4, #12]
 800ab28:	89a3      	ldrh	r3, [r4, #12]
 800ab2a:	431d      	orrs	r5, r3
 800ab2c:	81a5      	strh	r5, [r4, #12]
 800ab2e:	e7cf      	b.n	800aad0 <__smakebuf_r+0x18>

0800ab30 <_fstat_r>:
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	4d07      	ldr	r5, [pc, #28]	@ (800ab50 <_fstat_r+0x20>)
 800ab34:	2300      	movs	r3, #0
 800ab36:	4604      	mov	r4, r0
 800ab38:	4608      	mov	r0, r1
 800ab3a:	4611      	mov	r1, r2
 800ab3c:	602b      	str	r3, [r5, #0]
 800ab3e:	f7f7 fdd4 	bl	80026ea <_fstat>
 800ab42:	1c43      	adds	r3, r0, #1
 800ab44:	d102      	bne.n	800ab4c <_fstat_r+0x1c>
 800ab46:	682b      	ldr	r3, [r5, #0]
 800ab48:	b103      	cbz	r3, 800ab4c <_fstat_r+0x1c>
 800ab4a:	6023      	str	r3, [r4, #0]
 800ab4c:	bd38      	pop	{r3, r4, r5, pc}
 800ab4e:	bf00      	nop
 800ab50:	2000056c 	.word	0x2000056c

0800ab54 <_isatty_r>:
 800ab54:	b538      	push	{r3, r4, r5, lr}
 800ab56:	4d06      	ldr	r5, [pc, #24]	@ (800ab70 <_isatty_r+0x1c>)
 800ab58:	2300      	movs	r3, #0
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	4608      	mov	r0, r1
 800ab5e:	602b      	str	r3, [r5, #0]
 800ab60:	f7f7 fdd3 	bl	800270a <_isatty>
 800ab64:	1c43      	adds	r3, r0, #1
 800ab66:	d102      	bne.n	800ab6e <_isatty_r+0x1a>
 800ab68:	682b      	ldr	r3, [r5, #0]
 800ab6a:	b103      	cbz	r3, 800ab6e <_isatty_r+0x1a>
 800ab6c:	6023      	str	r3, [r4, #0]
 800ab6e:	bd38      	pop	{r3, r4, r5, pc}
 800ab70:	2000056c 	.word	0x2000056c

0800ab74 <_init>:
 800ab74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab76:	bf00      	nop
 800ab78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab7a:	bc08      	pop	{r3}
 800ab7c:	469e      	mov	lr, r3
 800ab7e:	4770      	bx	lr

0800ab80 <_fini>:
 800ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab82:	bf00      	nop
 800ab84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab86:	bc08      	pop	{r3}
 800ab88:	469e      	mov	lr, r3
 800ab8a:	4770      	bx	lr
